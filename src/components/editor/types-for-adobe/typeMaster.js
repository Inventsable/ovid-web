/* eslint-disable */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

let ILSTshim = `/**
 * The $ object provides a number of debugging facilities and informational methods.
 */
interface $ {
  /**
   * The ExtendScript build information.
   */
  readonly build: string;

  /**
   * The ExtendScript build date.
   */
  readonly buildDate: Date;

  /**
   * The character used as the decimal point character in formatted numeric output.
   */
  decimalPoint: string;

  /**
   * The name of the current ExtendScript engine, if set.
   */
  readonly engineName: string;

  /**
   * The most recent run-time error information.
   * Assigning error text to this property generates a run-time error; however, the preferred way to generate a run-time error is to throw an Error object.
   */
  error: Error;

  /**
   * The file name of the current script.
   */
  readonly fileName: string;

  /**
   * Gets or sets low-level debug output flags.
   * A logical AND of bit flag values:
   * 0x0002 (2): Displays each line with its line number as it is executed.
   * 0x0040 (64): Enables excessive garbage collection. Usually, garbage collection starts when the number of objects has increased by a certain amount since the last garbage collection. This flag causes ExtendScript to garbage collect after almost every statement. This impairs performance severely, but is useful when you suspect that an object gets released too soon.
   * 0x0080 (128): Displays all calls with their arguments and the return value.
   * 0x0100 (256): Enables extended error handling (see strict).
   * 0x0200 (512): Enables the localization feature of the toString method. Equivalent to the localize property.
   */
  flags: number;

  /**
   * A reference to the global object, which contains the JavaScript global namespace.
   */
  readonly global: any;

  /**
   * A high-resolution timer, measuring the time in microseconds. The timer starts when ExtendScript is
   * initialized during the application startup sequence. Every read access resets the timer to Zero.
   */
  readonly hiresTimer: number;

  /**
   * The path for include files for the current script.
   */
  readonly includePath: string;

  /**
   * The current debugging level, which enables or disables the JavaScript debugger.
   * One of 0 (no debugging), 1 (break on runtime errors), or 2 (full debug mode).
   */
  level: number;

  /**
   * The current line number of the currently executing script.
   */
  readonly line: number;

  /**
   * Gets or sets the current locale.
   * The string contains five characters in the form LL_RR, where LL is an ISO 639 language specifier, and RR is an ISO 3166 region specifier.Initially, this is the value that the application or the platform returns for the current user. You can set it to temporarily change the locale for testing. To return to the application or platform setting, set to undefined, null, or the empty string.
   */
  locale: string;

  /**
   * Set to true to enable the extended localization features of the built-in toString() method.
   */
  localize: boolean;

  /**
   * The ExtendScript memory cache size, in bytes.
   */
  memCache: number;

  /**
   * The current operating system version information.
   */
  readonly os: string;

  /**
   * An array of objects containing information about the display screens attached to your computer.
   * Each object has the properties left, top, right, bottom, which contain the four corners of each screen in global coordinates.A property primary is true if that object describes the primary display.
   */
  readonly screens: object[];

  /**
   * The current stack trace.
   */
  readonly stack: string;

  /**
   * Sets or clears strict mode for object modification.
   * When true, any attempt to write to a read-only property causes a runtime error. Some objects do not permit the creation of new properties when true.
   */
  strict: any;

  /**
   * The version number of the ExtendScript engine.
   * Formatted as a three-part number and description; for example: "3.92.95 (debug)".
   */
  readonly version: string;

  /**
   * Shows an About box for the ExtendScript component, and returns the text for the box.
   */
  about(): string;

  /**
   * Breaks execution at the current position.
   * @param condition A string containing a JavaScript statement to be used as a condition. If the statement evaluates to true or nonzero when this point is reached, execution stops.
   */
  bp(condition?: any): void;

  /**
   * Invokes the platform-specific color selection dialog, and returns the selected color.
   * @param color The color to be preselected in the dialog, as 0xRRGGBB, or -1 for the platform default.
   */
  colorPicker(color: number): number;

  /**
   * Loads and evaluates a file.
   * @param file The file to load.
   * @param timeout An optional timeout in milliseconds.
   */
  evalFile(file: File, timeout?: number): any;

  /**
   * Initiates garbage collection in the ExtendScript engine.
   */
  gc(): void;

  /**
   * Retrieves the value of an environment variable.
   * @param name The name of the variable.
   */
  getenv(name: string): string;

  /**
   * Sets the value of an environment variable.
   * @param name The name of the variable.
   * @param value The value of the variable.
   */
  setenv(name: string, value: string): void;

  /**
   * Suspends the calling thread for a number of milliseconds.
   * During a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated. This can happen if there is a break request, or if the script timeout has expired.
   * @param msecs Number of milliseconds to sleep.
   */
  sleep(msecs: number): void;

  /**
   * Converts this object to a string.
   */
  toString(): string;

  /**
   * Prints text to the Console.
   * @param text The text to print. All arguments are concatenated.
   */
  write(text: any): void;

  /**
   * Prints text to the Console, and adds a newline character.
   * @param text The text to print. All arguments are concatenated.
   */
  writeln(text: any): void;
}
declare const $: $;

/**
 * The global BridgeTalk object.
 */
declare var BridgeTalk: any;

/**
 * The Infinity global property is a predefined variable with the value for infinity.
 */
declare var Infinity: number;

/**
 * The NaN global property is a predefined variable with the value NaN (Not-a-Number), as specified by the IEEE-754 standard.
 */
declare var NaN: number;

/**
 * The application object
 */
declare var app: Application;
declare interface Application {}

/**
 * Displays an alert box
 * @param message The text to display
 * @param title The title of the alert; ignored on the Macintosh
 * @param errorIcon Display an Error icon; ignored on the Macintosh
 */
declare function alert(
  message: string,
  title?: string,
  errorIcon?: boolean
): void;

/**
 * Displays an alert box with Yes and No buttons; returns true for Yes
 * @param message The text to display
 * @param noAsDefault Set to true to set the No button as the default button
 * @param title The title of the alert; ignored on the Macintosh
 */
declare function confirm(
  message: string,
  noAsDefault?: boolean,
  title?: string
): boolean;

/**
 * Decodes a string created with encodeURI().
 * @param uri The text to decode.
 */
declare function decodeURI(uri: string): string;

/**
 * Decodes a string created with encodeURIComponent().
 * @param uri The text to decode.
 */
declare function decodeURIComponent(uri: string): string;

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'();/?:@&=+$,#. The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURI(text: string): string;

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'(). The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURIComponent(text: string): string;

/**
 * Creates a URL-encoded string from aString.
 * In the new string, characters of aString that require URL encoding are replaced with the format %xx, where xx is the hexadecimal value of the character code in the Unicode character set.This format is used to transmit information appended to a URL during, for example, execution of the GET method.Use the unescape() global function to translate the string back into its original format. Returns a string which is aString URL-encoded.
 * @param aString The string to be encoded.
 */
declare function escape(aString: string): string;

/**
 * Evaluates its argument as a JavaScript script, and returns the result of evaluation.
 * You can pass the result of an object's toSource() method to reconstruct that object.
 * @param stringExpression The string to evaluate.
 */
declare function eval(stringExpression: string): any;

/**
 * Evaluates an expression and reports whether the result is a finite number.
 * Returns true if the expression is a finite number, false otherwise. False if the value is infinity or negative infinity.
 * @param expression Any valid JavaScript expression.
 */
declare function isFinite(expression: number): boolean;

/**
 * Evaluates an expression and reports whether the result is "Not-a-Number" (NaN).
 * Returns true if the result of evaluation is not a number (NaN), false if the value is a number.
 * @param expression Any valid JavaScript expression.
 */
declare function isNaN(expression: number): boolean;

/**
 * Returns true if the supplied string is a valid XML name.
 * @param name The XML name to test.
 */
declare function isXMLName(name: string): boolean;

/**
 * Localizes a ZString-encoded string and merges additional arguments into the string.
 * @param what The string to localize. A ZString-encoded string that can contain placeholder for additional arguments in the form %1 to %n.
 * @param arguments Optional argument(s) to be merged into the string. There may be more than one argument.
 */
declare function localize(what: string, ...arguments: any[]): string;

/**
 * Extracts a floating-point number from a string.
 * Parses a string to find the first set of characters that can be converted to a floating point number, and returns that number, or NaN if it does not encounter characters that it can converted to a number.The function supports exponential notation.
 * @param text The string from which to extract a floating point number.
 */
declare function parseFloat(text: string): number;

/**
 * Extracts an integer from a string.
 * Parses a string to find the first set of characters, in a specified base, that can be converted to an integer, and returns that integer, or NaN if it does not encounter characters that it can convert to a number.
 * @param text The string from which to extract an integer.
 * @param base The base of the string to parse (from base 2 to base 36). If not supplied, base is determined by the format of string.
 */
declare function parseInt(text: string, base?: number): number;

/**
 * Displays a dialog allowing the user to enter text
 * Returns null if the user cancelled the dialog, the text otherwise
 * @param prompt The text to display
 * @param default_ The default text to preset the edit field with
 * @param title The title of the dialog;
 */
declare function prompt(
  prompt: string,
  default_?: string,
  title?: string
): string;

/**
 * Defines the default XML namespace.
 * This is a replacement function for the standard JavaScript statement set default xml namespace.
 * @param namespace The namespace to use. Omit this parameter to return to the empty namespace. This is either a Namespace object or a string.
 */
declare function setDefaultXMLNamespace(namespace: Namespace): void;

/**
 * Translates URL-encoded string into a regular string, and returns that string.
 * Use the escape() global function to URL-encode strings.
 * @param stringExpression The URL-encoded string to convert.
 */
declare function unescape(stringExpression: string): string;

/**
 * Creates a source code representation of the supplied argument, and returns it as a string.
 * @param what The object to uneval.
 */
declare function uneval(what: any): string;

/**
 * The screen mode.
 */
declare enum ScreenMode {
  /**
   * Full screen with menu bar.
   */
  DESKTOP = 2,

  /**
   * Full screen without menu bar.
   */
  FULLSCREEN = 3,

  /**
   * Display multiple windows.
   */
  MULTIWINDOW = 1
}

/**
 * The color model.
 */
declare enum ColorType {
  /**
   *
   */
  CMYK = 1,

  /**
   *
   */
  GRADIENT = 4,

  /**
   *
   */
  GRAY = 0,

  /**
   *
   */
  None = 6,

  /**
   *
   */
  PATTERN = 2,

  /**
   *
   */
  RGB = 5,

  /**
   *
   */
  SPOT = 3
}

/**
 * The color spaces available for documents.
 */
declare enum DocumentColorSpace {
  /**
   * CMYK document color space.
   */
  CMYK = 2,

  /**
   * RGB document color space.
   */
  RGB = 1
}

/**
 * The preset types available for new documents.
 */
declare enum DocumentPresetType {
  /**
   * The default CMYK document preset.
   */
  BasicCMYK = 5,

  /**
   * The default RGB document preset.
   */
  BasicRGB = 6,

  /**
   * The default Mobile document preset.
   */
  Mobile = 3,

  /**
   * The default Print document preset.
   */
  Print = 1,

  /**
   * The default Video and Film document preset.
   */
  Video = 4,

  /**
   * The default Web document preset.
   */
  Web = 2
}

/**
 * The raster resolutions available when creating a new document.
 */
declare enum DocumentRasterResolution {
  /**
   * High raster resolution, 300 PPI.
   */
  HighResolution = 3,

  /**
   * Medium raster resolution, 150 PPI.
   */
  MediumResolution = 2,

  /**
   * Low raster resolution, 72 PPI.
   */
  ScreenResolution = 1
}

/**
 * The transparency grid for the new document, in video presets.
 */
declare enum DocumentTransparencyGrid {
  /**
   * Blue grids.
   */
  TransparencyGridBlue = 7,

  /**
   * Dark color grids.
   */
  TransparencyGridDark = 3,

  /**
   * Green grids.
   */
  TransparencyGridGreen = 6,

  /**
   * Light grid colors.
   */
  TransparencyGridLight = 1,

  /**
   * Medium grid colors.
   */
  TransparencyGridMedium = 2,

  /**
   * No grids.
   */
  TransparencyGridNone = 0,

  /**
   * Orange grids.
   */
  TransparencyGridOrange = 5,

  /**
   * Purple grids.
   */
  TransparencyGridPurple = 8,

  /**
   * Red grids.
   */
  TransparencyGridRed = 4
}

/**
 * The preview modes available when creating a new document.
 */
declare enum DocumentPreviewMode {
  /**
   * Default Preview mode.
   */
  DefaultPreview = 1,

  /**
   * Overprint Preview Mode.
   */
  OverprintPreview = 3,

  /**
   * Pixel Preview mode.
   */
  PixelPreview = 2
}

/**
 * The layout of artboards in document.
 */
declare enum DocumentArtboardLayout {
  /**
   * Arrange artboards in a single column.
   */
  Column = 4,

  /**
   * Arrange artboards in Grid by Column pattern.
   */
  GridByCol = 2,

  /**
   * Arrange artboards in Grid by Row pattern.
   */
  GridByRow = 1,

  /**
   * Arrange artboards in Grid by Column pattern from right-to-left.
   */
  RLGridByCol = 6,

  /**
   * Arrange artboards in Grid by Row pattern from right-to-left.
   */
  RLGridByRow = 5,

  /**
   * Arrange artboards in a single row from right-to-left.
   */
  RLRow = 7,

  /**
   * Arrange artboards in a single row.
   */
  Row = 3
}

/**
 * The color space.
 */
declare enum ImageColorSpace {
  /**
   * CMYK color space.
   */
  CMYK = 3,

  /**
   * DeviceN color space.
   */
  DeviceN = 6,

  /**
   * Gray color space.
   */
  GrayScale = 1,

  /**
   * Indexed color space.
   */
  Indexed = 7,

  /**
   * LAB color space.
   */
  LAB = 4,

  /**
   * RGB color space.
   */
  RGB = 2,

  /**
   * Separation color space.
   */
  Separation = 5
}

/**
 * The stroke cap.
 */
declare enum StrokeCap {
  /**
   * Butted cap.
   */
  BUTTENDCAP = 1,

  /**
   * Projecting cap.
   */
  PROJECTINGENDCAP = 3,

  /**
   * Rounded cap.
   */
  ROUNDENDCAP = 2
}

/**
 * The stroke joint.
 */
declare enum StrokeJoin {
  /**
   * Beveled joints.
   */
  BEVELENDJOIN = 3,

  /**
   * Mitered joints.
   */
  MITERENDJOIN = 1,

  /**
   * Rounded joints.
   */
  ROUNDENDJOIN = 2
}

/**
 * The path point selection state.
 */
declare enum PathPointSelection {
  /**
   * Anchor point selected.
   */
  ANCHORPOINT = 2,

  /**
   * Left direction point selected.
   */
  LEFTDIRECTION = 3,

  /**
   * Left and right direction points selected.
   */
  LEFTRIGHTPOINT = 5,

  /**
   * Path point not selected.
   */
  NOSELECTION = 1,

  /**
   * Right direction point selected.
   */
  RIGHTDIRECTION = 4
}

/**
 * The path point type: smooth/corner.
 */
declare enum PointType {
  /**
   * Corner point.
   */
  CORNER = 2,

  /**
   * Smooth path point.
   */
  SMOOTH = 1
}

/**
 * The type of text art.
 */
declare enum TextType {
  /**
   * Text within an area.
   */
  AREATEXT = 1,

  /**
   * Text on a path.
   */
  PATHTEXT = 2,

  /**
   * Text from a point.
   */
  POINTTEXT = 0
}

/**
 * The type of text antialiasing.
 */
declare enum TextAntialias {
  /**
   * Text on a path.
   */
  CRISP = 3,

  /**
   * Text from a point.
   */
  NONE = 1,

  /**
   * Text within an area.
   */
  SHARP = 2,

  /**
   * Text on a path.
   */
  STRONG = 4
}

/**
 * The gradient type.
 */
declare enum GradientType {
  /**
   * Linear gradient.
   */
  LINEAR = 1,

  /**
   *
   */
  RADIAL = 2
}

/**
 * The orientation.
 */
declare enum TextOrientation {
  /**
   * Horizontal orientation.
   */
  HORIZONTAL = 0,

  /**
   * Vertical orientation.
   */
  VERTICAL = 1
}

/**
 * The crop style.
 */
declare enum CropOptions {
  /**
   * Japanese crop style.
   */
  Japanese = 2,

  /**
   * Standard crop style.
   */
  Standard = 1
}

/**
 * The raster link state.
 */
declare enum RasterLinkState {
  /**
   * Image data is from the linked file.
   */
  DATAFROMFILE = 2,

  /**
   * Image data has been modified.
   */
  DATAMODIFIED = 3,

  /**
   * Image data is not set.
   */
  NODATA = 1
}

/**
 * The tab alignment.
 */
declare enum TabStopAlignment {
  /**
   *
   */
  Center = 1,

  /**
   *
   */
  Decimal = 3,

  /**
   *
   */
  Left = 0,

  /**
   *
   */
  Right = 2
}

/**
 * The paragraph alignment.
 */
declare enum Justification {
  /**
   *
   */
  CENTER = 2,

  /**
   *
   */
  FULLJUSTIFY = 6,

  /**
   *
   */
  FULLJUSTIFYLASTLINECENTER = 5,

  /**
   *
   */
  FULLJUSTIFYLASTLINELEFT = 3,

  /**
   *
   */
  FULLJUSTIFYLASTLINERIGHT = 4,

  /**
   *
   */
  LEFT = 0,

  /**
   *
   */
  RIGHT = 1
}

/**
 * The transformation type.
 */
declare enum Transformation {
  /**
   * Transform relative to the object's bottom edge.
   */
  BOTTOM = 7,

  /**
   * Transform relative to the object's bottom left corner.
   */
  BOTTOMLEFT = 4,

  /**
   * Transform relative to the object's bottom right corner.
   */
  BOTTOMRIGHT = 10,

  /**
   * Transform relative to the object's center.
   */
  CENTER = 6,

  /**
   * Transform relative to the illustration's page origin.
   */
  DOCUMENTORIGIN = 1,

  /**
   * Transform relative to the object's left edge.
   */
  LEFT = 3,

  /**
   * Transform relative to the object's right edge.
   */
  RIGHT = 9,

  /**
   * Transform relative to the object's top edge.
   */
  TOP = 5,

  /**
   * Transform relative to the object's top left corner.
   */
  TOPLEFT = 2,

  /**
   * Transform relative to the object's top right corner.
   */
  TOPRIGHT = 8
}

/**
 * Illustrator library types.
 */
declare enum LibraryType {
  /**
   * Illustrator brushes library.
   */
  BRUSHES = 3,

  /**
   * Illustrator graphic styles library.
   */
  GRAPHICSTYLES = 4,

  /**
   * Illustrator artwork.
   */
  ILLUSTRATORARTWORK = 1,

  /**
   * Illustrator swatches library.
   */
  SWATCHES = 2,

  /**
   * Illustrator symbols library.
   */
  SYMBOLS = 5
}

/**
 * Savable document types.
 */
declare enum DocumentType {
  /**
   * EPS file format.
   */
  EPS = 2,

  /**
   * FXG file format.
   */
  FXG = 4,

  /**
   * Illustrator file format.
   */
  ILLUSTRATOR = 1,

  /**
   * Acrobat PDF file format.
   */
  PDF = 3
}

/**
 * Export for screens scale type.
 */
declare enum ExportForScreensScaleType {
  /**
   * Scale artwork by factors like 1x, 2x, 3x and so on, where 1x means 72 ppi.
   */
  SCALEBYFACTOR = 0,

  /**
   * Scale artwork by specifying artwork height in pixels like 100px, 124px etc. Width of the artwork is adjusted automatically to maintain the aspect ratio.
   */
  SCALEBYHEIGHT = 2,

  /**
   * Scale artwork by specifying resolution in ppi like 72 ppi, 100 ppi, 144 ppi etc.
   */
  SCALEBYRESOLUTION = 3,

  /**
   * Scale artwork by specifying artwork width in pixels like 100px, 124px etc. Height of the artwork is adjusted automatically to maintain the aspect ratio.
   */
  SCALEBYWIDTH = 1
}

/**
 * Export for screens type.
 */
declare enum ExportForScreensType {
  /**
   * Export file in JPEG (100% quality) format.
   */
  SE_JPEG100 = 1,

  /**
   * Export file in JPEG (20% quality) format.
   */
  SE_JPEG20 = 4,

  /**
   * Export file in JPEG (50% quality) format.
   */
  SE_JPEG50 = 3,

  /**
   * Export file in JPEG (80% quality) format.
   */
  SE_JPEG80 = 2,

  /**
   * Export file in Acrobat PDF format.
   */
  SE_PDF = 8,

  /**
   * Export file in PNG 24-bit format.
   */
  SE_PNG24 = 7,

  /**
   * Export file in PNG 8-bit format.
   */
  SE_PNG8 = 6,

  /**
   * Export file in SVG format.
   */
  SE_SVG = 5
}

/**
 * Export file types.
 */
declare enum ExportType {
  /**
   * AutoCAD export file format.
   */
  AUTOCAD = 8,

  /**
   * Flash export file format.
   */
  FLASH = 7,

  /**
   * GIF export file format.
   */
  GIF = 6,

  /**
   * JPEG export file format.
   */
  JPEG = 1,

  /**
   * Photoshop export file format.
   */
  PHOTOSHOP = 2,

  /**
   * PNG 24-bit export file format.
   */
  PNG24 = 5,

  /**
   * PNG 8-bit export file format.
   */
  PNG8 = 4,

  /**
   * SVG export file format.
   */
  SVG = 3,

  /**
   * TIFF export file format.
   */
  TIFF = 9,

  /**
   * Web Optimized SVG export file format.
   */
  WOSVG = 10
}

/**
 * Method used to reduce color for PNG8 and GIF export formats.
 */
declare enum ColorReductionMethod {
  /**
   *
   */
  ADAPTIVE = 0x41647074,

  /**
   *
   */
  PERCEPTUAL = 0x50726370,

  /**
   *
   */
  SELECTIVE = 0x536c7476,

  /**
   *
   */
  WEB = 0x57656220
}

/**
 * Method used to dither colors for PNG8 and GIF export formats.
 */
declare enum ColorDitherMethod {
  /**
   *
   */
  DIFFUSION = 0x4466736e,

  /**
   *
   */
  NOISE = 0x424e6f69,

  /**
   * No dithering.
   */
  NOREDUCTION = 0x4e6f6e65,

  /**
   *
   */
  PATTERNDITHER = 0x5074726e
}

/**
 * The compatibility type.
 */
declare enum Compatibility {
  /**
   *
   */
  ILLUSTRATOR10 = 10,

  /**
   *
   */
  ILLUSTRATOR11 = 11,

  /**
   *
   */
  ILLUSTRATOR12 = 12,

  /**
   *
   */
  ILLUSTRATOR13 = 13,

  /**
   *
   */
  ILLUSTRATOR14 = 14,

  /**
   *
   */
  ILLUSTRATOR15 = 15,

  /**
   *
   */
  ILLUSTRATOR16 = 16,

  /**
   *
   */
  ILLUSTRATOR17 = 17,

  /**
   *
   */
  ILLUSTRATOR3 = 3,

  /**
   *
   */
  ILLUSTRATOR8 = 8,

  /**
   *
   */
  ILLUSTRATOR9 = 9,

  /**
   *
   */
  JAPANESEVERSION3 = 3
}

/**
 * This provides a means for matching the color characteristics of a PDF document.
 */
declare enum PDFXStandard {
  /**
   * Supports only a CMYK and spot color workflow, targeted to a specific output device.
   */
  PDFX1A2001 = 2,

  /**
   * Supports only a CMYK and spot color workflow, targeted to a specific output device.
   */
  PDFX1A2003 = 3,

  /**
   * Supports a color-managed workflow, allowing the use of device-independent color in addition to CMYK and spot colors.
   */
  PDFX32001 = 4,

  /**
   * Supports a color-managed workflow, allowing the use of device-independent color in addition to CMYK and spot colors.
   */
  PDFX32002 = 4,

  /**
   * Supports a color-managed workflow, allowing the use of device-independent color in addition to CMYK and spot colors.
   */
  PDFX32003 = 5,

  /**
   * Supports a color-managed workflow, allowing the use of device-independent color in addition to CMYK and spot colors.
   */
  PDFX42007 = 6,

  /**
   * The user isn't complying with any PDF standard.
   */
  PDFXNONE = 1
}

/**
 * The PDF compatibility type.
 */
declare enum PDFCompatibility {
  /**
   * Acrobat version 4.
   */
  ACROBAT4 = 4,

  /**
   * Acrobat version 5.
   */
  ACROBAT5 = 5,

  /**
   * Acrobat version 6.
   */
  ACROBAT6 = 6,

  /**
   * Acrobat version 7.
   */
  ACROBAT7 = 7,

  /**
   * Acrobat version 8.
   */
  ACROBAT8 = 8
}

/**
 * The Photoshop compatibility type.
 */
declare enum PhotoshopCompatibility {
  /**
   * Photoshop version 6.
   */
  PHOTOSHOP6 = 2,

  /**
   * Photoshop version 8.
   */
  PHOTOSHOP8 = 1
}

/**
 * The compression type.
 */
declare enum CompressionQuality {
  /**
   * Automatic JPEG2000 compression high.
   */
  AUTOMATICJPEG2000HIGH = 18,

  /**
   * Automatic JPEG2000 compression lossless.
   */
  AUTOMATICJPEG2000LOSSLESS = 20,

  /**
   * Automatic JPEG2000 compression low.
   */
  AUTOMATICJPEG2000LOW = 16,

  /**
   * Automatic JPEG2000 compression maximum.
   */
  AUTOMATICJPEG2000MAXIMUM = 19,

  /**
   * Automatic JPEG2000 compression medium.
   */
  AUTOMATICJPEG2000MEDIUM = 17,

  /**
   * Automatic JPEG2000 compression minimum.
   */
  AUTOMATICJPEG2000MINIMUM = 15,

  /**
   * Automatic JPEG compression high.
   */
  AUTOMATICJPEGHIGH = 13,

  /**
   * Automatic JPEG compression low.
   */
  AUTOMATICJPEGLOW = 11,

  /**
   * Automatic JPEG compression maximum.
   */
  AUTOMATICJPEGMAXIMUM = 14,

  /**
   * Automatic JPEG compression medium.
   */
  AUTOMATICJPEGMEDIUM = 12,

  /**
   * Automatically choose between JPEG and ZIP performing minimum compression depending on images.
   */
  AUTOMATICJPEGMINIMUM = 10,

  /**
   *
   */
  JPEG2000HIGH = 24,

  /**
   *
   */
  JPEG2000LOSSLESS = 26,

  /**
   *
   */
  JPEG2000LOW = 22,

  /**
   *
   */
  JPEG2000MAXIMUM = 25,

  /**
   *
   */
  JPEG2000MEDIUM = 23,

  /**
   *
   */
  JPEG2000MINIMUM = 21,

  /**
   *
   */
  JPEGHIGH = 6,

  /**
   *
   */
  JPEGLOW = 4,

  /**
   *
   */
  JPEGMAXIMUM = 7,

  /**
   *
   */
  JPEGMEDIUM = 5,

  /**
   *
   */
  JPEGMINIMUM = 3,

  /**
   * Automatic compression.
   */
  None = 1,

  /**
   *
   */
  ZIP4BIT = 8,

  /**
   *
   */
  ZIP8BIT = 9
}

/**
 * PDF color conversion policy.
 */
declare enum ColorConversion {
  /**
   * Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.
   */
  COLORCONVERSIONREPURPOSE = 2,

  /**
   * Converts all colors to the profile selected for Destination.
   */
  COLORCONVERSIONTODEST = 1,

  /**
   * Preserves color data as is.
   */
  None = 0
}

/**
 * PDF destination profile.
 */
declare enum ColorDestination {
  /**
   * Converts all colors to the profile selected for Destination.
   */
  COLORDESTINATIONDOCCMYK = 1,

  /**
   * Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.
   */
  COLORDESTINATIONDOCRGB = 3,

  /**
   * Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.
   */
  COLORDESTINATIONPROFILE = 5,

  /**
   * Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.
   */
  COLORDESTINATIONWORKINGCMYK = 2,

  /**
   * Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.
   */
  COLORDESTINATIONWORKINGRGB = 4,

  /**
   * N/A.
   */
  None = 0
}

/**
 * PDF ICC profile inclusion.
 */
declare enum ColorProfile {
  /**
   * Everything gets tagged (embedProfile == true)
   */
  INCLUDEALLPROFILE = 1,

  /**
   * Everything ends up tagged with the destination profile.
   */
  INCLUDEDESTPROFILE = 4,

  /**
   * Tag all RGB, leave CMYK unchanged.
   */
  INCLUDERGBPROFILE = 3,

  /**
   * Leave tagged items tagged, untagged items untagged.
   */
  LEAVEPROFILEUNCHANGED = 2,

  /**
   * All profiles removed (embedProfile == false)
   */
  None = 0
}

/**
 * The monochrome compression type.
 */
declare enum MonochromeCompression {
  /**
   * CCITT Group 3 compression.
   */
  CCIT3 = 1,

  /**
   * CCITT Group 4 compression.
   */
  CCIT4 = 2,

  /**
   * ZIP compression.
   */
  MONOZIP = 3,

  /**
   * Automatic compression.
   */
  None = 0,

  /**
   * RLE compression.
   */
  RUNLENGTH = 4
}

/**
 * Pdf trim mark weight options.
 */
declare enum PDFTrimMarkWeight {
  /**
   *
   */
  TRIMMARKWEIGHT0125 = 1,

  /**
   *
   */
  TRIMMARKWEIGHT025 = 2,

  /**
   *
   */
  TRIMMARKWEIGHT05 = 3
}

/**
 * Pdf overprint options.
 */
declare enum PDFOverprint {
  /**
   * Discard overprint.
   */
  DISCARDPDFOVERPRINT = 2,

  /**
   * Preserve overprint.
   */
  PRESERVEPDFOVERPRINT = 1
}

/**
 * Pdf print permissions.
 */
declare enum PDFPrintAllowedEnum {
  /**
   * Print high resolution allowed - 128bit.
   */
  PRINT128HIGHRESOLUTION = 3,

  /**
   * Print allowed only in low resolution - 128bit.
   */
  PRINT128LOWRESOLUTION = 2,

  /**
   * Printing allowed none - 128bit.
   */
  PRINT128NONE = 1,

  /**
   * Print high resolution allowed - 40bit.
   */
  PRINT40HIGHRESOLUTION = 5,

  /**
   * Printing allowed none - 40bit.
   */
  PRINT40NONE = 4
}

/**
 * Options available for making changes to a pdf document.
 */
declare enum PDFChangesAllowedEnum {
  /**
   * Any changes allowed except extracting of pages- 128bit.
   */
  CHANGE128ANYCHANGES = 5,

  /**
   * Comment allowed - 128bit.
   */
  CHANGE128COMMENTING = 4,

  /**
   * Editing page allowed - 128bit.
   */
  CHANGE128EDITPAGE = 2,

  /**
   * Filling in of form field and signing allowed - 128bit.
   */
  CHANGE128FILLFORM = 3,

  /**
   * No changes allowed - 128bit.
   */
  CHANGE128NONE = 1,

  /**
   * Any changes allowed except extracting of pages- 40bit.
   */
  CHANGE40ANYCHANGES = 9,

  /**
   * Comment allowed - 40bit.
   */
  CHANGE40COMMENTING = 7,

  /**
   * No changes allowed - 40bit.
   */
  CHANGE40NONE = 6,

  /**
   * Page layout allowed - 40bit.
   */
  CHANGE40PAGELAYOUT = 8
}

/**
 * The resample type.
 */
declare enum DownsampleMethod {
  /**
   * Average Downsampling.
   */
  AVERAGEDOWNSAMPLE = 1,

  /**
   * Bicubic Downsampling.
   */
  BICUBICDOWNSAMPLE = 3,

  /**
   * Downsampling.
   */
  NODOWNSAMPLE = 0,

  /**
   * Subsampling.
   */
  SUBSAMPLE = 2
}

/**
 * The preview type.
 */
declare enum EPSPreview {
  /**
   * Black and white Macintosh preview.
   */
  BWMACINTOSH = 2,

  /**
   * Black and white PC preview.
   */
  BWTIFF = 4,

  /**
   * Color Macintosh preview.
   */
  COLORMACINTOSH = 3,

  /**
   * Color PC preview.
   */
  COLORTIFF = 6,

  /**
   * No preview.
   */
  None = 1,

  /**
   * Transparent color PC preview (8 or later)
   */
  TRANSPARENTCOLORTIFF = 5
}

/**
 * The PostScript levels available when saving EPS files.
 */
declare enum EPSPostScriptLevelEnum {
  /**
   * PostScript Level 2.
   */
  LEVEL2 = 2,

  /**
   * PostScript Level 3.
   */
  LEVEL3 = 3
}

/**
 * The PostScript levels supported by various printers.
 */
declare enum PrinterPostScriptLevelEnum {
  /**
   * PostScript Level 1.
   */
  PSLEVEL1 = 1,

  /**
   * PostScript Level 2.
   */
  PSLEVEL2 = 2,

  /**
   * PostScript Level 3.
   */
  PSLEVEL3 = 3
}

/**
 * The options that may be applied when saving a file.
 */
declare enum SaveOptions {
  /**
   * Do not save changes.
   */
  DONOTSAVECHANGES = 2,

  /**
   * Ask the user whether to save.
   */
  PROMPTTOSAVECHANGES = 3,

  /**
   * Save changes.
   */
  SAVECHANGES = 1
}

/**
 *
 */
declare enum RulerUnits {
  /**
   * Ruler units are measured in centimeters.
   */
  Centimeters = 3,

  /**
   * Ruler units are unknown.
   */
  Inches = 2,

  /**
   * Ruler units are measured in millimeters.
   */
  Millimeters = 6,

  /**
   * Ruler units are measured in picas.
   */
  Picas = 5,

  /**
   * Ruler units are measured in pixels.
   */
  Pixels = 8,

  /**
   * Ruler units are measured in points.
   */
  Points = 4,

  /**
   * Ruler units are measured in Qs.
   */
  Qs = 7,

  /**
   * Ruler units are unknown.
   */
  Unknown = 1
}

/**
 * Blend modes used when compositing an object.
 */
declare enum BlendModes {
  /**
   *
   */
  COLORBLEND = 14,

  /**
   *
   */
  COLORBURN = 7,

  /**
   *
   */
  COLORDODGE = 6,

  /**
   *
   */
  DARKEN = 8,

  /**
   *
   */
  DIFFERENCE = 10,

  /**
   *
   */
  EXCLUSION = 11,

  /**
   *
   */
  HARDLIGHT = 5,

  /**
   *
   */
  HUE = 12,

  /**
   *
   */
  LIGHTEN = 9,

  /**
   *
   */
  LUMINOSITY = 15,

  /**
   *
   */
  MULTIPLY = 1,

  /**
   *
   */
  NORMAL = 0,

  /**
   *
   */
  OVERLAY = 3,

  /**
   *
   */
  SATURATIONBLEND = 13,

  /**
   *
   */
  SCREEN = 2,

  /**
   *
   */
  SOFTLIGHT = 4
}

/**
 * Knockout state of a page item.
 */
declare enum KnockoutState {
  /**
   * Knockout off.
   */
  DISABLED = 0,

  /**
   * Knockout off.
   */
  ENABLED = 1,

  /**
   * Knockout state inherited from group?
   */
  INHERITED = 2,

  /**
   * Unknown/uninitialized knockout state.
   */
  Unknown = -1
}

/**
 * How to re-arrange the art item.
 */
declare enum ZOrderMethod {
  /**
   * Move art one step forward in it's group or layer.
   */
  BRINGFORWARD = 2,

  /**
   * Move art to front of it's group or layer.
   */
  BRINGTOFRONT = 1,

  /**
   * Move art one step backwards in it's group or layer.
   */
  SENDBACKWARD = 3,

  /**
   * Move art to back of it's group or layer.
   */
  SENDTOBACK = 4
}

/**
 * The version of the SVG DTD.
 */
declare enum SVGDTDVersion {
  /**
   * SVG 1.0.
   */
  SVG1_0 = 1,

  /**
   * SVG 1.1.
   */
  SVG1_1 = 2,

  /**
   * SVG Basic 1.1.
   */
  SVGBASIC1_1 = 5,

  /**
   * SVG Tiny 1.1.
   */
  SVGTINY1_1 = 3,

  /**
   * SVG Tiny 1.1 Plus.
   */
  SVGTINY1_1PLUS = 4,

  /**
   * SVG Tiny 1.2.
   */
  SVGTINY1_2 = 6
}

/**
 * What font type to include with the file?
 */
declare enum SVGFontType {
  /**
   *
   */
  OUTLINEFONT = 3,

  /**
   *
   */
  SVGFONT = 2
}

/**
 * What fonts to include with the file?
 */
declare enum SVGFontSubsetting {
  /**
   *
   */
  ALLGLYPHS = 7,

  /**
   *
   */
  COMMONENGLISH = 3,

  /**
   *
   */
  COMMONROMAN = 5,

  /**
   *
   */
  GLYPHSUSED = 2,

  /**
   *
   */
  GLYPHSUSEDPLUSENGLISH = 4,

  /**
   *
   */
  GLYPHSUSEDPLUSROMAN = 6,

  /**
   * Use system fonts.
   */
  None = 1
}

/**
 *
 */
declare enum SVGDocumentEncoding {
  /**
   * ISO 8859-1.
   */
  ASCII = 1,

  /**
   *
   */
  UTF16 = 3,

  /**
   *
   */
  UTF8 = 2
}

/**
 *
 */
declare enum SVGCSSPropertyLocation {
  /**
   * Style attributes with entity reference.
   */
  ENTITIES = 2,

  /**
   *
   */
  PRESENTATIONATTRIBUTES = 4,

  /**
   *
   */
  STYLEATTRIBUTES = 1,

  /**
   *
   */
  STYLEELEMENTS = 3
}

/**
 * Type of SVG Id.
 */
declare enum SVGIdType {
  /**
   * Style attributes with entity reference.
   */
  SVGIDMINIMAL = 0,

  /**
   *
   */
  SVGIDREGULAR = 1,

  /**
   *
   */
  SVGIDUNIQUE = 2
}

/**
 * Decide where the raster images will be stored.
 */
declare enum RasterImageLocation {
  /**
   * Embed the raster images in the svg file.
   */
  EMBED = 0,

  /**
   *
   */
  LINK = 1,

  /**
   *
   */
  PRESERVE = 2
}

/**
 * How should transparency be flattened for pre-AI9 file formats.
 */
declare enum OutputFlattening {
  /**
   *
   */
  PRESERVEAPPEARANCE = 1,

  /**
   * Discard transparency.
   */
  PRESERVEPATHS = 0
}

/**
 * Color model of the custom color.
 */
declare enum ColorModel {
  /**
   * Process color (mixed ink)
   */
  PROCESS = 1,

  /**
   * Registration color (prints on in all separations)
   */
  REGISTRATION = 0,

  /**
   * Spot color (separate ink)
   */
  SPOT = 2
}

/**
 * Custom color kind of the spot color.
 */
declare enum SpotColorKind {
  /**
   * Solid ink, expressed in four CMYK values.
   */
  SPOTCMYK = 0,

  /**
   * Lab color. Only valid for spot colors.
   */
  SPOTLAB = 2,

  /**
   * Solid color, expressed as three RGB values.
   */
  SPOTRGB = 1
}

/**
 *
 */
declare enum FlashExportStyle {
  /**
   * Illustrator Artboards to Flash Files.
   */
  ARTBOARDSTOFILES = 5,

  /**
   * Illustrator file to Flash file.
   */
  ASFLASHFILE = 1,

  /**
   * Illustrator layers to Flash files.
   */
  LAYERSASFILES = 3,

  /**
   * Illustrator layers to Flash frames.
   */
  LAYERSASFRAMES = 2,

  /**
   * Illustrator layers to Flash Symbols.
   */
  LAYERSASSYMBOLS = 4
}

/**
 * How the arts should be clipped.
 */
declare enum ArtClippingOption {
  /**
   * Output size is the size of the artboard.
   */
  OUTPUTARTBOARDBOUNDS = 2,

  /**
   * Output size is the size of the artwork.
   */
  OUTPUTARTBOUNDS = 1,

  /**
   * Output size is the size of the crop area.
   */
  OUTPUTCROPRECTBOUNDS = 3
}

/**
 * Version of the SWF File to be exported.
 */
declare enum FlashExportVersion {
  /**
   * SWF Version 1.
   */
  FLASHVERSION1 = 1,

  /**
   * SWF Version 2.
   */
  FLASHVERSION2 = 2,

  /**
   * SWF Version 3.
   */
  FLASHVERSION3 = 3,

  /**
   * SWF Version 4.
   */
  FLASHVERSION4 = 4,

  /**
   * SWF Version 5.
   */
  FLASHVERSION5 = 5,

  /**
   * SWF Version 6.
   */
  FLASHVERSION6 = 6,

  /**
   * SWF Version 7.
   */
  FLASHVERSION7 = 7,

  /**
   * SWF Version 8.
   */
  FLASHVERSION8 = 8,

  /**
   * SWF Version 9.
   */
  FLASHVERSION9 = 9
}

/**
 *
 */
declare enum FlashImageFormat {
  /**
   *
   */
  LOSSLESS = 1,

  /**
   *
   */
  LOSSY = 2
}

/**
 *
 */
declare enum LayerOrderType {
  /**
   *
   */
  BOTTOMUP = 1,

  /**
   *
   */
  TOPDOWN = 2
}

/**
 *
 */
declare enum BlendAnimationType {
  /**
   *
   */
  INBUILD = 2,

  /**
   *
   */
  INSEQUENCE = 1,

  /**
   * No blend animation.
   */
  NOBLENDANIMATION = 0
}

/**
 *
 */
declare enum FlashJPEGMethod {
  /**
   *
   */
  Optimized = 2,

  /**
   *
   */
  Standard = 1
}

/**
 *
 */
declare enum FlashPlaybackSecurity {
  /**
   *
   */
  PlaybackLocal = 1,

  /**
   *
   */
  PlaybackNetwork = 2
}

/**
 *
 */
declare enum VariableKind {
  /**
   *
   */
  GRAPH = 5,

  /**
   *
   */
  IMAGE = 4,

  /**
   *
   */
  TEXTUAL = 3,

  /**
   *
   */
  Unknown = 1,

  /**
   *
   */
  VISIBILITY = 2
}

/**
 *
 */
declare enum AutoCADExportFileFormat {
  /**
   *
   */
  DWG = 1,

  /**
   *
   */
  DXF = 0
}

/**
 *
 */
declare enum AutoCADCompatibility {
  /**
   *
   */
  AutoCADRelease13 = 0,

  /**
   *
   */
  AutoCADRelease14 = 1,

  /**
   *
   */
  AutoCADRelease15 = 2,

  /**
   *
   */
  AutoCADRelease18 = 3,

  /**
   *
   */
  AutoCADRelease21 = 4,

  /**
   *
   */
  AutoCADRelease24 = 5
}

/**
 *
 */
declare enum AutoCADUnit {
  /**
   *
   */
  Centimeters = 4,

  /**
   *
   */
  Inches = 2,

  /**
   *
   */
  Millimeters = 3,

  /**
   *
   */
  Picas = 1,

  /**
   *
   */
  Pixels = 5,

  /**
   *
   */
  Points = 0
}

/**
 *
 */
declare enum AutoCADColors {
  /**
   *
   */
  Max16Colors = 1,

  /**
   *
   */
  Max256Colors = 2,

  /**
   *
   */
  Max8Colors = 0,

  /**
   *
   */
  TrueColors = 3
}

/**
 *
 */
declare enum AutoCADRasterFormat {
  /**
   *
   */
  JPEG = 1,

  /**
   *
   */
  PNG = 0
}

/**
 *
 */
declare enum AutoCADExportOption {
  /**
   *
   */
  MaximumEditability = 1,

  /**
   *
   */
  PreserveAppearance = 0
}

/**
 *
 */
declare enum AutoCADGlobalScaleOption {
  /**
   *
   */
  FitArtboard = 1,

  /**
   *
   */
  OriginalSize = 0,

  /**
   *
   */
  ScaleByValue = 2
}

/**
 * Byte Order of TIFF file.
 */
declare enum TIFFByteOrder {
  /**
   *
   */
  IBMPC = 0,

  /**
   *
   */
  MACINTOSH = 1
}

/**
 * COM user interaction enumeration.
 */
declare enum UserInteractionLevel {
  /**
   *
   */
  DISPLAYALERTS = 2,

  /**
   *
   */
  DONTDISPLAYALERTS = -1
}

/**
 *
 */
declare enum PolarityValues {
  /**
   *
   */
  NEGATIVE = -1,

  /**
   *
   */
  POSITIVE = 1
}

/**
 * When should a JavaScript debugger be shown.
 */
declare enum JavaScriptExecutionMode {
  /**
   * Show the JavaScript debugger at the first line of the JavaScript.
   */
  BeforeRunning = 3,

  /**
   * Show the JavaScript debugger is a runtime error occurs.
   */
  OnRuntimeError = 2,

  /**
   * Never show the JavaScript debugger. Treat runtime errors by throwing a JavaScript exceptions.
   */
  never = 1
}

/**
 * The artwork layers/objects to be printed.
 */
declare enum PrintArtworkDesignation {
  /**
   * Print all layers.
   */
  ALLLAYERS = 2,

  /**
   * Print visible layers.
   */
  VISIBLELAYERS = 1,

  /**
   * Print visible printable layers.
   */
  VISIBLEPRINTABLELAYERS = 0
}

/**
 * The printing bounds type.
 */
declare enum PrintingBounds {
  /**
   * Use artboard bounds.
   */
  ARTBOARDBOUNDS = 0,

  /**
   * Use artwork bounds.
   */
  ARTWORKBOUNDS = 1,

  /**
   * Use crop bounds.
   */
  CROPBOUNDS = 2
}

/**
 * The color separation mode.
 */
declare enum PrintColorSeparationMode {
  /**
   * The composite mode.
   */
  COMPOSITE = 0,

  /**
   * The host based color separation mode.
   */
  HOSTBASEDSEPARATION = 1,

  /**
   * The InRIP color separation mode.
   */
  INRIPSEPARATION = 2
}

/**
 * The artwork printing orientation.
 */
declare enum PrintOrientation {
  /**
   * Auto Rotate.
   */
  AUTOROTATE = 4,

  /**
   * Landscape.
   */
  LANDSCAPE = 1,

  /**
   * Portrait.
   */
  PORTRAIT = 0,

  /**
   * Reverse landscape.
   */
  REVERSELANDSCAPE = 3,

  /**
   * Reverse portrait.
   */
  REVERSEPORTRAIT = 2
}

/**
 * The artwork printing position on media.
 */
declare enum PrintPosition {
  /**
   * Translate to the bottom center of media.
   */
  TRANSLATEBOTTOM = 8,

  /**
   * Translate to the bottom left of media.
   */
  TRANSLATEBOTTOMLEFT = 7,

  /**
   * Translate to the bottom right of media.
   */
  TRANSLATEBOTTOMRIGHT = 9,

  /**
   * Translate to the center of media.
   */
  TRANSLATECENTER = 5,

  /**
   * Translate to the left center of media.
   */
  TRANSLATELEFT = 4,

  /**
   * Translate to the right center of media.
   */
  TRANSLATERIGHT = 6,

  /**
   * Translate to the top center of media.
   */
  TRANSLATETOP = 2,

  /**
   * Translate to the top left of media.
   */
  TRANSLATETOPLEFT = 1,

  /**
   * Translate to the top right of media.
   */
  TRANSLATETOPRIGHT = 3
}

/**
 * The page tiling type.
 */
declare enum PrintTiling {
  /**
   * Tile full pages.
   */
  TILEFULLPAGES = 1,

  /**
   * Tile imageable areas.
   */
  TILEIMAGEABLEAREAS = 2,

  /**
   * Tile single full page.
   */
  TILESINGLEFULLPAGE = 0
}

/**
 * The page marks style type.
 */
declare enum PageMarksTypes {
  /**
   * Japanese page marks style.
   */
  Japanese = 1,

  /**
   * Roman page marks style.
   */
  Roman = 0
}

/**
 * The printer font download mode.
 */
declare enum PrintFontDownloadMode {
  /**
   * Download complete.
   */
  DOWNLOADCOMPLETE = 2,

  /**
   * Download none.
   */
  DOWNLOADNONE = 0,

  /**
   * Download subset.
   */
  DOWNLOADSUBSET = 1
}

/**
 * The font substitution policy.
 */
declare enum FontSubstitutionPolicy {
  /**
   * Substitute device font.
   */
  SUBSTITUTEDEVICE = 2,

  /**
   * Substitute oblique font.
   */
  SUBSTITUTEOBLIQUE = 0,

  /**
   * Substitute tint font.
   */
  SUBSTITUTETINT = 1
}

/**
 * The PostScript image compression type.
 */
declare enum PostScriptImageCompressionType {
  /**
   * No image compression.
   */
  IMAGECOMPRESSIONNONE = 0,

  /**
   * JPEG image compression.
   */
  JPEG = 2,

  /**
   * RLE image compression.
   */
  RLE = 1
}

/**
 * The color profile type.
 */
declare enum PrintColorProfile {
  /**
   * Use custom color profile.
   */
  CUSTOMPROFILE = 3,

  /**
   * Use old style AI color profile.
   */
  OLDSTYLEPROFILE = 0,

  /**
   * Same as printer color profile.
   */
  PRINTERPROFILE = 2,

  /**
   * Same as source color profile.
   */
  SOURCEPROFILE = 1
}

/**
 * The color intent type.
 */
declare enum PrintColorIntent {
  /**
   * Absolute colorimetric.
   */
  ABSOLUTECOLORIMETRIC = 3,

  /**
   * Perceptual color intent.
   */
  PERCEPTUALINTENT = 0,

  /**
   * Relative colorimetric.
   */
  RELATIVECOLORIMETRIC = 2,

  /**
   * Saturation color intent.
   */
  SATURATIONINTENT = 1
}

/**
 * The printer type.
 */
declare enum PrinterTypeEnum {
  /**
   * Non PostScript printer.
   */
  NONPOSTSCRIPTPRINTER = 2,

  /**
   * PostScript printer.
   */
  POSTSCRIPTPRINTER = 1,

  /**
   * Unknown printer type.
   */
  Unknown = 0
}

/**
 * The printer color mode.
 */
declare enum PrinterColorMode {
  /**
   * Black and white printer.
   */
  BLACKANDWHITEPRINTER = 2,

  /**
   * Color printer.
   */
  COLORPRINTER = 0,

  /**
   * Grayscale printer.
   */
  GRAYSCALEPRINTER = 1
}

/**
 * The ink printing status.
 */
declare enum InkPrintStatus {
  /**
   * Convert to process color during print.
   */
  CONVERTINK = 2,

  /**
   * Disable the ink during print.
   */
  DISABLEINK = 0,

  /**
   * Enable the ink during print.
   */
  ENABLEINK = 1
}

/**
 * The ink type.
 */
declare enum InkType {
  /**
   * Black color ink.
   */
  BLACKINK = 3,

  /**
   * Custom color ink.
   */
  CUSTOMINK = 4,

  /**
   * Cyan color ink.
   */
  CYANINK = 0,

  /**
   * Magenta color ink.
   */
  MAGENTAINK = 1,

  /**
   * Yellow color ink.
   */
  YELLOWINK = 2
}

/**
 * The trapping type.
 */
declare enum TrappingType {
  /**
   * Ignore opaque trapping type.
   */
  IGNOREOPAQUE = 3,

  /**
   * Normal trapping type.
   */
  NORMALTRAPPING = 0,

  /**
   * Opaque trapping type.
   */
  OPAQUE = 2,

  /**
   * Transparent trapping type.
   */
  TRANSPARENT = 1
}

/**
 * The auto kern type.
 */
declare enum AutoKernType {
  /**
   * Auto kerning.
   */
  AUTO = 1,

  /**
   * Metrics roman only.
   */
  METRICSROMANONLY = 3,

  /**
   * No auto kerning.
   */
  NOAUTOKERN = 0,

  /**
   * Optical kerning.
   */
  OPTICAL = 2
}

/**
 * The auto leading type.
 */
declare enum AutoLeadingType {
  /**
   * Roman leading type.
   */
  BOTTOMTOBOTTOM = 0,

  /**
   * Japanese leading type.
   */
  TOPTOTOP = 1
}

/**
 * The case change type.
 */
declare enum CaseChangeType {
  /**
   * Change to lower case.
   */
  LOWERCASE = 1,

  /**
   * Change to sentence case.
   */
  SENTENCECASE = 3,

  /**
   * Change to title case.
   */
  TITLECASE = 2,

  /**
   * Change to upper case.
   */
  UPPERCASE = 0
}

/**
 * The font capitalization option.
 */
declare enum FontCapsOption {
  /**
   * All caps.
   */
  ALLCAPS = 2,

  /**
   * All small caps.
   */
  ALLSMALLCAPS = 3,

  /**
   * Normal caps.
   */
  NORMALCAPS = 0,

  /**
   * Small caps.
   */
  SMALLCAPS = 1
}

/**
 * The font baseline option.
 */
declare enum FontBaselineOption {
  /**
   * Normal baseline.
   */
  NORMALBASELINE = 0,

  /**
   * Fauxed subscript baseline.
   */
  SUBSCRIPT = 2,

  /**
   * Fauxed superscript baseline.
   */
  SUPERSCRIPT = 1
}

/**
 * The OpenType font position option.
 */
declare enum FontOpenTypePositionOption {
  /**
   * OpenType denominator position.
   */
  DENOMINATOR = 4,

  /**
   * OpenType numerator position.
   */
  NUMERATOR = 3,

  /**
   * Default position.
   */
  OPENTYPEDEFAULT = 0,

  /**
   * OpenType subscript position.
   */
  OPENTYPESUBSCRIPT = 2,

  /**
   * OpenType superscript position.
   */
  OPENTYPESUPERSCRIPT = 1
}

/**
 * The figure style type.
 */
declare enum FigureStyleType {
  /**
   * Default figure style.
   */
  DEFAULTFIGURESTYLE = 0,

  /**
   * Proportional lining style.
   */
  PROPORTIONAL = 3,

  /**
   * Proportional oldstyle.
   */
  PROPORTIONALOLDSTYLE = 2,

  /**
   * Tabular lining style.
   */
  TABULAR = 1,

  /**
   * Tabular oldstyle.
   */
  TABULAROLDSTYLE = 4
}

/**
 * The baseline direction type.
 */
declare enum BaselineDirectionType {
  /**
   *
   */
  Standard = 1,

  /**
   *
   */
  TateChuYoko = 3,

  /**
   *
   */
  VerticalRotated = 2
}

/**
 * The language of text.
 */
declare enum LanguageType {
  /**
   *
   */
  ARABIC = 39,

  /**
   *
   */
  BENGALIINDIA = 51,

  /**
   *
   */
  BOKMALNORWEGIAN = 8,

  /**
   *
   */
  BRAZILLIANPORTUGUESE = 11,

  /**
   *
   */
  BULGARIAN = 20,

  /**
   *
   */
  CANADIANFRENCH = 3,

  /**
   *
   */
  CATALAN = 17,

  /**
   *
   */
  CHINESE = 29,

  /**
   *
   */
  CZECH = 22,

  /**
   *
   */
  DANISH = 16,

  /**
   *
   */
  DUTCH = 15,

  /**
   *
   */
  DUTCH2005REFORM = 43,

  /**
   *
   */
  ENGLISH = 0,

  /**
   *
   */
  FARSI = 41,

  /**
   *
   */
  FINNISH = 1,

  /**
   *
   */
  GERMAN2006REFORM = 42,

  /**
   *
   */
  GREEK = 25,

  /**
   *
   */
  GUJARATI = 53,

  /**
   *
   */
  HINDI = 49,

  /**
   *
   */
  HUNGARIAN = 28,

  /**
   *
   */
  ICELANDIC = 27,

  /**
   *
   */
  ITALIAN = 7,

  /**
   *
   */
  JAPANESE = 30,

  /**
   *
   */
  KANNADA = 57,

  /**
   *
   */
  MALAYALAM = 58,

  /**
   *
   */
  MARATHI = 50,

  /**
   * Nynorsk Norwegian.
   */
  NYNORSKNORWEGIAN = 9,

  /**
   *
   */
  OLDGERMAN = 5,

  /**
   *
   */
  ORIYA = 54,

  /**
   *
   */
  POLISH = 23,

  /**
   *
   */
  PUNJABI = 52,

  /**
   *
   */
  RUMANIAN = 24,

  /**
   *
   */
  RUSSIAN = 18,

  /**
   *
   */
  SERBIAN = 21,

  /**
   *
   */
  SPANISH = 12,

  /**
   *
   */
  STANDARDFRENCH = 2,

  /**
   *
   */
  STANDARDGERMAN = 4,

  /**
   *
   */
  STANDARDPORTUGUESE = 10,

  /**
   *
   */
  SWEDISH = 13,

  /**
   *
   */
  SWISSGERMAN = 6,

  /**
   *
   */
  SWISSGERMAN2006REFORM = 44,

  /**
   *
   */
  TAMIL = 55,

  /**
   *
   */
  TELUGU = 56,

  /**
   *
   */
  TURKISH = 26,

  /**
   *
   */
  UKENGLISH = 14,

  /**
   *
   */
  UKRANIAN = 19
}

/**
 * The alternate glyphs form of text.
 */
declare enum AlternateGlyphsForm {
  /**
   *
   */
  DEFAULTFORM = 0,

  /**
   *
   */
  EXPERT = 2,

  /**
   *
   */
  FULLWIDTH = 8,

  /**
   *
   */
  HALFWIDTH = 5,

  /**
   *
   */
  JIS04FORM = 11,

  /**
   *
   */
  JIS78FORM = 3,

  /**
   *
   */
  JIS83FORM = 4,

  /**
   *
   */
  JIS90FORM = 10,

  /**
   *
   */
  PROPORTIONALWIDTH = 9,

  /**
   *
   */
  QUARTERWIDTH = 7,

  /**
   *
   */
  THIRDWIDTH = 6,

  /**
   *
   */
  TRADITIONAL = 1
}

/**
 * The style run alignment.
 */
declare enum StyleRunAlignmentType {
  /**
   *
   */
  ROMANBASELINE = 2,

  /**
   *
   */
  bottom = 0,

  /**
   *
   */
  center = 3,

  /**
   *
   */
  icfBottom = 1,

  /**
   *
   */
  icfTop = 4,

  /**
   *
   */
  top = 5
}

/**
 * The Wari-Chu alignment type.
 */
declare enum WariChuJustificationType {
  /**
   *
   */
  Center = 2,

  /**
   *
   */
  Left = 0,

  /**
   *
   */
  Right = 1,

  /**
   *
   */
  WARICHUAUTOJUSTIFY = 7,

  /**
   *
   */
  WARICHUFULLJUSTIFY = 6,

  /**
   *
   */
  WARICHUFULLJUSTIFYLASTLINECENTER = 5,

  /**
   *
   */
  WARICHUFULLJUSTIFYLASTLINELEFT = 3,

  /**
   *
   */
  WARICHUFULLJUSTIFYLASTLINERIGHT = 4
}

/**
 * The kashida type constants.
 */
declare enum KashidasType {
  /**
   *
   */
  DEFAULT_KASHIDAS = 0,

  /**
   *
   */
  KASHIDAS_OFF = 1,

  /**
   *
   */
  KASHIDAS_ON = 0
}

/**
 * Direction override type constants.
 */
declare enum DirOverrideType {
  /**
   *
   */
  DEFAULT_DIRECTION = 0,

  /**
   *
   */
  LEFT_TO_RIGHT_DIRECTION = 1,

  /**
   *
   */
  RIGHT_TO_LEFT_DIRECTION = 2
}

/**
 * Digit set type constants.
 */
declare enum DigitSetType {
  /**
   *
   */
  ARABIC_DIGITS = 1,

  /**
   *
   */
  DEFAULT_DIGITS = 0,

  /**
   *
   */
  FARSI_DIGITS = 3,

  /**
   *
   */
  HINDI_DIGITS = 2
}

/**
 * Diacritic vertical position type constants.
 */
declare enum DiacVPosType {
  /**
   *
   */
  DEFAULT_POSITION = 0,

  /**
   *
   */
  LOOSE_POSITION = 1,

  /**
   *
   */
  MEDIUM_POSITION = 2,

  /**
   *
   */
  OPENTYPE_POSITION = 4,

  /**
   *
   */
  TIGHT_POSITION = 3
}

/**
 * The kashida width type constants.
 */
declare enum KashidaWidthType {
  /**
   *
   */
  kashidaLong = 3,

  /**
   *
   */
  kashidaMedium = 2,

  /**
   *
   */
  kashidaNone = 0,

  /**
   *
   */
  kashidaSmall = 1,

  /**
   *
   */
  kashidaStylistic = 4
}

/**
 * The composer type constants.
 */
declare enum ComposerEngineType {
  /**
   *
   */
  adornment = 2,

  /**
   *
   */
  latinCJKComposer = 0,

  /**
   *
   */
  optycaComposer = 1
}

/**
 * The composer type constants.
 */
declare enum ParagraphDirectionType {
  /**
   *
   */
  LEFT_TO_RIGHT_DIRECTION = 0,

  /**
   *
   */
  RIGHT_TO_LEFT_DIRECTION = 1
}

/**
 * The Burasagari type.
 */
declare enum BurasagariTypeEnum {
  /**
   *
   */
  Forced = 2,

  /**
   *
   */
  None = 0,

  /**
   *
   */
  Standard = 1
}

/**
 * The preferred Kinsoku order.
 */
declare enum KinsokuOrderEnum {
  /**
   *
   */
  PUSHIN = 0,

  /**
   *
   */
  PUSHOUTFIRST = 1,

  /**
   *
   */
  PUSHOUTONLY = 2
}

/**
 * Crop box.
 */
declare enum PDFBoxType {
  /**
   * Crop to ArtBox. The art box defines the extent of the page's meaningful content (including potential white space) as intended by the page's creator.
   */
  PDFARTBOX = 0,

  /**
   * Crop to BleedBox. The bleed box defines the region to which the contents of the page should be clipped when output in a production environment.
   */
  PDFBLEEDBOX = 3,

  /**
   * Crop to Bounding Box. The bounding box is the rectangle that encloses all text, graphics, and images on the page.
   */
  PDFBOUNDINGBOX = 5,

  /**
   * Crop to CropBox. The crop box is the region of the page to display and to print.
   */
  PDFCROPBOX = 1,

  /**
   * Crop to MediaBox. The media box is a natural size of the page. For example, the dimensions of A4 sheet of paper.
   */
  PDFMEDIABOX = 4,

  /**
   * Crop to TrimBox. The trim box specifies the positioning of the page's content within the imposition.
   */
  PDFTRIMBOX = 2
}

/**
 * The tracing method: abutting and overlapping.
 */
declare enum TracingMethodType {
  /**
   * Tracing abutting method.
   */
  TRACINGMETHODABUTTING = 0,

  /**
   * Tracing overlapping method.
   */
  TRACINGMETHODOVERLAPPING = 1
}

/**
 * The tracing mode: color, grayscale, black and white.
 */
declare enum TracingModeType {
  /**
   * Black and white tracing mode.
   */
  TRACINGMODEBLACKANDWHITE = 2,

  /**
   * Color tracing mode.
   */
  TRACINGMODECOLOR = 0,

  /**
   * Grayscale tracing mode.
   */
  TRACINGMODEGRAY = 1
}

/**
 * The input color type Full Color or Limited colors.
 */
declare enum TracingColorType {
  /**
   * Use Full colors for Tracing.
   */
  TRACINGFULLCOLOR = 1,

  /**
   * Use Limited colors for Tracing.
   */
  TRACINGLIMITEDCOLOR = 0
}

/**
 * Controls the type of vector view.
 */
declare enum ViewType {
  /**
   * View Source Image.
   */
  TRACINGVIEWIMAGE = 4,

  /**
   * View just the paths.
   */
  TRACINGVIEWVECTOROUTLINES = 2,

  /**
   * View paths and transparent fills.
   */
  TRACINGVIEWVECTOROUTLINESWITHTRACING = 1,

  /**
   * View artwork.
   */
  TRACINGVIEWVECTORTRACINGRESULT = 0,

  /**
   * View Outlines with Transparent Image.
   */
  TRACINGVIEWVECTORWITHTRANSPARENTIMAGE = 3
}

/**
 * Controls the color model for the rasterization.
 */
declare enum RasterizationColorModel {
  /**
   * Rasterize as 1-bit bitmap.
   */
  BITMAP = 3,

  /**
   * Rasterize in the default document color space.
   */
  DEFAULTCOLORMODEL = 1,

  /**
   * Rasterize as grayscale image.
   */
  GRAYSCALE = 2
}

/**
 * Controls the type of antialiasing method used in the rasterization.
 */
declare enum AntiAliasingMethod {
  /**
   * Optimize for the art object.
   */
  ARTOPTIMIZED = 1,

  /**
   * No anti-aliasing allowed.
   */
  None = 0,

  /**
   * Optimize for the type object.
   */
  TYPEOPTIMIZED = 2
}

/**
 * Denotes the purpose of color conversion using ConvertSmapleColor method.
 */
declare enum ColorConvertPurpose {
  /**
   * Do standard conversion, without black preservation.
   */
  defaultpurpose = 0,

  /**
   * Dummy option.
   */
  dummypurpose = 4,

  /**
   * Conversion options appropriate to creating an image for print or export.
   */
  exportpurpose = 2,

  /**
   * Conversion options appropriate to creating an image for screen display.
   */
  previewpurpose = 1
}

/**
 * The FXG file format version.
 */
declare enum FXGVersion {
  /**
   * FXG version 1.0.
   */
  VERSION1PT0 = 1,

  /**
   * FXG version 2.0.
   */
  VERSION2PT0 = 2
}

/**
 * Filters preserve policy used by FXG file format.
 */
declare enum FiltersPreservePolicy {
  /**
   * Preserve the appearance of filters by expanding it.
   */
  EXPANDFILTERS = 1,

  /**
   * Preserve the editability of filters.
   */
  KEEPFILTERSEDITABLE = 3,

  /**
   * Preserve the appearance of filters by rasterizing it.
   */
  RASTERIZEFILTERS = 2
}

/**
 * Text preserve policy used by FXG file format.
 */
declare enum TextPreservePolicy {
  /**
   * Automatically convert text.
   */
  AUTOMATICALLYCONVERTTEXT = 4,

  /**
   * Preserve the editability of text.
   */
  KEEPTEXTEDITABLE = 3,

  /**
   * Preserve the appearance of text by outlining it.
   */
  OUTLINETEXT = 1,

  /**
   * Preserve the appearance of text by rasterizing it.
   */
  RASTERIZETEXT = 2
}

/**
 * Gradients preserve policy used by FXG file format.
 */
declare enum GradientsPreservePolicy {
  /**
   * Automatically Convert Gradients.
   */
  AUTOMATICALLYCONVERTGRADIENTS = 4,

  /**
   * Preserve the editability of gradients.
   */
  KEEPGRADIENTSEDITABLE = 3
}

/**
 * Blends Expand policy used by FXG file format.
 */
declare enum BlendsExpandPolicy {
  /**
   * Automatically Convert Blends.
   */
  AUTOMATICALLYCONVERTBLENDS = 1,

  /**
   * Expand Blends by Rasterizing.
   */
  RASTERIZEBLENDS = 2
}

/**
 * Coordinate system used by Illustrator.
 */
declare enum CoordinateSystem {
  /**
   * Artboard coordinate system.
   */
  ARTBOARDCOORDINATESYSTEM = 1,

  /**
   * Document coordinate system.
   */
  DOCUMENTCOORDINATESYSTEM = 0
}

/**
 * The symbol registration point.
 */
declare enum SymbolRegistrationPoint {
  /**
   * Bottom left point of symbol bounding box.
   */
  SYMBOLBOTTOMLEFTPOINT = 7,

  /**
   * Bottom middle point of symbol bounding box.
   */
  SYMBOLBOTTOMMIDDLEPOINT = 8,

  /**
   * Bottom right point of symbol bounding box.
   */
  SYMBOLBOTTOMRIGHTPOINT = 9,

  /**
   * Center point of symbol bounding box.
   */
  SYMBOLCENTERPOINT = 5,

  /**
   * Middle left point of symbol bounding box.
   */
  SYMBOLMIDDLELEFTPOINT = 4,

  /**
   * Middle right point of symbol bounding box.
   */
  SYMBOLMIDDLERIGHTPOINT = 6,

  /**
   * Top left point of symbol bounding box.
   */
  SYMBOLTOPLEFTPOINT = 1,

  /**
   * Top middle point of symbol bounding box.
   */
  SYMBOLTOPMIDDLEPOINT = 2,

  /**
   * Top right point of symbol bounding box.
   */
  SYMBOLTOPRIGHTPOINT = 3
}

/**
 * Perspective grid plane types.
 */
declare enum PerspectiveGridPlaneType {
  /**
   * Perspective Grid Floor Plane Type.
   */
  FLOORPLANE = 3,

  /**
   * Perspective Grid Left Plane Type.
   */
  LEFTPLANE = 1,

  /**
   * Invalid Perspective Grid Plane Type.
   */
  NOPLANE = 0,

  /**
   * Perspective Grid Right Plane Type.
   */
  RIGHTPLANE = 2
}

/**
 * Text Item First baseline types.
 */
declare enum FirstBaselineType {
  /**
   * First Baseline Ascent Type.
   */
  BASELINEASCENT = 0,

  /**
   * First baseline Cap Height Type.
   */
  BASELINECAPHEIGHT = 1,

  /**
   * First Baseline Em Box Height Type.
   */
  BASELINEEMBOXHEIGHT = 4,

  /**
   * First Baseline Fixed Type.
   */
  BASELINEFIXED = 5,

  /**
   * First Baseline Leading Type.
   */
  BASELINELEADING = 2,

  /**
   * First Baseline Legacy Type.
   */
  BASELINELEGACY = 6,

  /**
   * First Baseline x Height Type.
   */
  BASELINEXHEIGHT = 3
}

/**
 * Document layout style types.
 */
declare enum DocumentLayoutStyle {
  /**
   * Arranges document in cascaded style.
   */
  CASCADE = 0,

  /**
   * Consolidates all documents.
   */
  CONSOLIDATEALL = 4,

  /**
   * Arranges all documents floating layout.
   */
  FLOATALL = 3,

  /**
   * Arranges documents as horizontal tiles.
   */
  HORIZONTALTILE = 1,

  /**
   * Arranges documents as vertical tiles.
   */
  VERTICALTILE = 2
}

/**
 * JPEG Compression Method type.
 */
declare enum JPEGCompressionMethodType {
  /**
   * Select Baseline Optimized for optimized color and a slightly smaller file size. Not supported by all web browsers.
   */
  BASELINEOPTIMIZED = 1,

  /**
   * Select Baseline (Standard) to use a format recognized by most web browsers.
   */
  BASELINESTANDARD = 0,

  /**
   * Select Progressive to display a series of increasingly detailed scans (you specify how many in ProgressiveScan) as the image downloads. Not supported by all web browsers.
   */
  PROGRESSIVE = 2
}

/**
 * A collection of assets.
 */
declare class Assets {
  /**
   * Number of elements in the collection.
   */
  length: number;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Creates an asset from the given art(s)
   * @param sourceArt The page item(s) to apply to.
   */
  add(sourceArt: any): Asset;

  /**
   * Creates an asset from the selected arts.
   */
  addFromSelection(): Asset;

  /**
   * Gets the asset with the specified AssetID.
   * @param assetID The UID of the asset.
   */
  getByID(assetID: number): Asset;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Asset;

  /**
   * Gets the first asset with specified name.
   * @param assetName Name of the asset.
   */
  getByName(assetName: string): Asset;

  /**
   * Deletes the asset with specified id.
   * @param assetID UID of the asset to be deleted.
   */
  remove(assetID: number): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of artboards.
 */
declare class Artboards {
  /**
   * Number of elements in the collection.
   */
  length: number;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Add artboard object.
   * @param artboardRect Size and position of artboard.
   */
  add(artboardRect: Rect): Artboard;

  /**
   * Retrieves the index position of the active artboard in the document's list.
   */
  getActiveArtboardIndex(): number;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Artboard;

  /**
   * Get the first Artboard with specified name.
   * @param artboardName The name of the artboard.
   */
  getByName(artboardName: string): Artboard;

  /**
   * Insert an Artboard at specified location.
   * @param artboardRect Size and position of artboard.
   * @param index Index position where artboard should be inserted.
   */
  insert(artboardRect: Rect, index: number): void;

  /**
   * Delete artboard object.
   * @param index Index of the crop area to be deleted.
   */
  remove(index: number): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;

  /**
   * Makes a specific artboard active, and makes it current in the iteration order.
   * @param index The 0-based index position of the artboard in the document list.
   */
  setActiveArtboardIndex(index: number): void;
}

/**
 * A collection of documents.
 */
declare class Documents {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Document;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * A document.
   * @param documentColorSpace The color model used for the document.
   * @param width Width of the artboard.
   * @param height Height of the artboard.
   * @param numArtboards Number of artboards for new document.Range (1:100).
   * @param artboardLayout Layout of artboards for new document.
   * @param artboardSpacing Spacing between artboards for new document.
   * @param artboardRowsOrCols Number of rows (for rows layout) OR column(for column layouts)of artboards.Range is 1 to (docNumArtboards - 1) or 1 for single row or column layouts.
   */
  add(
    documentColorSpace?: DocumentColorSpace,
    width?: number,
    height?: number,
    numArtboards?: number,
    artboardLayout?: DocumentArtboardLayout,
    artboardSpacing?: number,
    artboardRowsOrCols?: number
  ): Document;

  /**
   * Create a new document from a preset.
   * @param startupPreset The name of a startup document preset.
   * @param presetSettings Custom settings to apply to the preset.
   * @param showOptionsDialog If false, do not show Options dialog.
   */
  addDocument(
    startupPreset: string,
    presetSettings?: DocumentPreset,
    showOptionsDialog?: boolean
  ): Document;

  /**
   * Create a document from the preset with option to throw dialog to customize present settings.
   * @param startupPreset The name of startup document preset.
   * @param showOptionsDialog Argument controls if options Dialog is shown or not.
   */
  addDocumentWithDialogOption(
    startupPreset: string,
    showOptionsDialog?: boolean
  ): Document;

  /**
   * Arranges the documents in the specified style.
   * @param layoutStyle The document layout style.
   */
  arrange(layoutStyle: DocumentLayoutStyle): boolean;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Document;
}

/**
 * A collection of layers.
 */
declare class Layers {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Layer;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a layer.
   */
  add(): Layer;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Layer;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of group items.
 */
declare class GroupItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: GroupItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a group item.
   */
  add(): GroupItem;

  /**
   * Create a group item from a vector graphics file.
   * @param imageFile The vector graphics file to be embedded.
   */
  createFromFile(imageFile: File): GroupItem;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): GroupItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of page items.
 */
declare class PageItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: PageItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): PageItem;
}

/**
 * A collection of path items.
 */
declare class PathItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: PathItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a path.
   */
  add(): PathItem;

  /**
   * Create an elliptical path item.
   * @param top The ellipse's bounds.
   * @param left The ellipse's bounds.
   * @param width The ellipse's bounds.
   * @param height The height of the ellipse.
   * @param reversed Is the ellipse path reversed?
   * @param inscribed Is the ellipse path inscribed?
   */
  ellipse(
    top?: number,
    left?: number,
    width?: number,
    height?: number,
    reversed?: boolean,
    inscribed?: boolean
  ): PathItem;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): PathItem;

  /**
   * Used to create a regular polygon path item. Not for path item access.
   * @param radius The radius of the polygon points.
   * @param sides The number of sides on the polygon.
   * @param reversed Is the polygon path reversed?
   */
  polygon(
    centerX?: number,
    centerY?: number,
    radius?: number,
    sides?: number,
    reversed?: boolean
  ): PathItem;

  /**
   * Used to create a rectangular path item. Not for path item access.
   * @param top The top coordinate of the rectangle's bounds.
   * @param left The left coordinate of the rectangle's bounds.
   * @param width The width of the rectangle.
   * @param height The height of the rectangle.
   * @param reversed Is the rectangle path reversed?
   */
  rectangle(
    top: number,
    left: number,
    width: number,
    height: number,
    reversed?: boolean
  ): PathItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;

  /**
   * Used to create a rounded-corner rectangular path item. Not for path item access.
   * @param horizontalRadius Horizontal corner radius.
   * @param verticalRadius Vertical corner radius.
   * @param reversed Is the rectangle path reversed?
   */
  roundedRectangle(
    top: number,
    left: number,
    width: number,
    height: number,
    horizontalRadius?: number,
    verticalRadius?: number,
    reversed?: boolean
  ): PathItem;

  /**
   * Used to create a star-shaped path item. Not for path item access.
   * @param radius The outside radius of the star points.
   * @param innerRadius The inside radius of the star points.
   * @param points The number of points on the star.
   * @param reversed Is the star path reversed?
   */
  star(
    centerX?: number,
    centerY?: number,
    radius?: number,
    innerRadius?: number,
    points?: number,
    reversed?: boolean
  ): PathItem;
}

/**
 * A collection of path points.
 */
declare class PathPoints {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: PathPoint;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a path point.
   */
  add(): PathPoint;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): PathPoint;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of compound path items.
 */
declare class CompoundPathItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: CompoundPathItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a compound path item.
   */
  add(): CompoundPathItem;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): CompoundPathItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of stories.
 */
declare class Stories {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Story;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Story;
}

/**
 * A collection of text frame items.
 */
declare class TextFrameItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: TextFrameItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a point text frame item.
   */
  add(): TextFrameItem;

  /**
   * Create an area text frame item.
   * @param textPath The path item associated with the text frame.
   * @param orientation The orientation of the text.
   * @param baseFrame The base text frame if it has one.
   * @param postFix Whether to postfix/prefix the new text frame to the specified base text frame.
   */
  areaText(
    textPath: PathItem,
    orientation?: TextOrientation,
    baseFrame?: TextFrameItem,
    postFix?: boolean
  ): TextFrameItem;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): TextFrameItem;

  /**
   * Create an on-path text frame item.
   * @param textPath The path item associated with the text frame.
   * @param startTValue The start position of text along a path, as a value relative to the path's segments (path text only)
   * @param endTValue The end position of text along a path, as a value relative to the path's segments (path text only)
   * @param orientation The orientation of the text.
   * @param baseFrame The base text frame if it has one.
   * @param postFix Whether to postfix/prefix the new text frame to the specified base text frame.
   */
  pathText(
    textPath: PathItem,
    startTValue?: number,
    endTValue?: number,
    orientation?: TextOrientation,
    baseFrame?: TextFrameItem,
    postFix?: boolean
  ): TextFrameItem;

  /**
   * Create a point text frame item.
   * @param anchor The position (coordinates) of the anchor point.
   * @param orientation The orientation of the text.
   */
  pointText(anchor: Point, orientation?: TextOrientation): TextFrameItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of legacy text items.
 */
declare class LegacyTextItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: LegacyTextItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create text frames from all legacy text items. The original legacy text items will be deleted.
   */
  convertToNative(): boolean;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): LegacyTextItem;
}

/**
 * A collection of text range items.
 */
declare class TextRanges {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: TextRange;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): TextRange;
}

/**
 * A collection of insertion points.
 */
declare class InsertionPoints {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: InsertionPoint;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): InsertionPoint;
}

/**
 * A collection of characters.
 */
declare class Characters {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Character;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a character.
   * @param contents The text string.
   */
  add(contents: string): TextRange;

  /**
   *
   * @param contents The text string.
   */
  addBefore(contents: string): TextRange;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): TextRange;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of words.
 */
declare class Words {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Word;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a word.
   * @param contents The text string.
   */
  add(contents: string): TextRange;

  /**
   *
   * @param contents The text string.
   */
  addBefore(contents: string): TextRange;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): TextRange;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of lines.
 */
declare class Lines {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Line;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): TextRange;
}

/**
 * A collection of Paragraphs.
 */
declare class Paragraphs {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Paragraph;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a text art item.
   * @param contents The text string.
   */
  add(contents: string): TextRange;

  /**
   *
   * @param contents The text string.
   */
  addBefore(contents: string): TextRange;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): TextRange;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of character styles.
 */
declare class CharacterStyles {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: CharacterStyle;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a named character style.
   * @param name The character style name.
   */
  add(name: string): CharacterStyle;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): CharacterStyle;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of paragraph styles.
 */
declare class ParagraphStyles {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: ParagraphStyle;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a named paragraph style.
   * @param name The paragraph style name.
   */
  add(name: string): ParagraphStyle;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): ParagraphStyle;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of custom spot colors.
 */
declare class Spots {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Spot;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a spot color.
   */
  add(): Spot;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Spot;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of swatches.
 */
declare class Swatches {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Swatch;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a swatch.
   */
  add(): Swatch;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Swatch;

  /**
   * Get selected swatches in the document.
   * @param includeSwatchInGroup The selected element should include swatches in group.
   */
  getSelected(includeSwatchInGroup?: boolean): Swatch[];

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of Swatch groups.
 */
declare class SwatchGroups {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: SwatchGroup;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a Swatch group.
   */
  add(): SwatchGroup;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): SwatchGroup;

  /**
   * Get selected swatchGroups in the document.
   */
  getSelected(): SwatchGroup[];

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of gradients.
 */
declare class Gradients {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Gradient;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a gradient.
   */
  add(): Gradient;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Gradient;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of gradient stops.
 */
declare class GradientStops {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: GradientStop;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a gradient stop.
   */
  add(): GradientStop;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): GradientStop;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of patterns.
 */
declare class Patterns {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Pattern;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a pattern.
   */
  add(): Pattern;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Pattern;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of symbols.
 */
declare class Symbols {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Symbol;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a symbol.
   * @param sourceArt The art item from which to make this symbol.
   * @param registrationPoint The symbol registration point.
   */
  add(sourceArt: PageItem, registrationPoint?: SymbolRegistrationPoint): Symbol;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Symbol;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of symbol items.
 */
declare class SymbolItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: SymbolItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * An instance of a symbol item.
   * @param symbol The symbol to make an instance of.
   */
  add(symbol: Symbol): SymbolItem;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): SymbolItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of brushes.
 */
declare class Brushes {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Brush;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a brush.
   * @param brushDefinition The brush definition from which the brush would be created.
   * @param brushName The name of the brush.
   */
  add(brushDefinition: File, brushName?: string): Brush;

  /**
   * Create a brush, select the brush tool and load the created brush in the brush tool.
   * @param brushDefinition The brush definition from which the brush would be created.
   */
  addAndLoad(brushDefinition: File): Brush;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Brush;
}

/**
 * A collection of art styles.
 */
declare class ArtStyles {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Style;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): ArtStyle;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of fonts.
 */
declare class TextFonts {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: TextFont;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): TextFont;

  /**
   * Returns the current font name.
   */
  getCurrentFont(): string;

  /**
   * Get the Text Font with the font name , if not avaiable it will create the substitute font.
   * @param fontName The name of the font to find or create substitute.
   */
  getFontByName(fontName: string): TextFont;

  /**
   * Check if any original font is present with the given name.
   * @param fontName The name of the font to find.
   */
  isFontAvailable(fontName: string): boolean;
}

/**
 * The collection of tags associated with a page item.
 */
declare class Tags {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Tag;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a tag.
   */
  add(): Tag;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Tag;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 *
 */
declare class RasterItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: RasterItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): RasterItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 *
 */
declare class PlacedItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: PlacedItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a placed item.
   */
  add(): PlacedItem;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): PlacedItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * EmbeddedItems Collection.
 */
declare class EmbeddedItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: EmbeddedItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create an embedded item.
   */
  add(): EmbedItem;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): EmbedItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 *
 */
declare class MeshItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: MeshItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): MeshItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 *
 */
declare class GraphItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: GraphItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): GraphItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 *
 */
declare class PluginItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: PluginItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): PluginItem;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 *
 */
declare class NonNativeItems {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: NonNativeItem;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): NonNativeItem;
}

/**
 * A collection of views.
 */
declare class Views {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: View;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): View;
}

/**
 * A collection of variables.
 */
declare class Variables {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: Variable;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a variable.
   */
  add(): Variable;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): Variable;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A collection of datasets.
 */
declare class DataSets {
  /**
   * Number of elements in the collection.
   */
  length: number;

  [n: number]: DataSet;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Create a data set.
   */
  add(): DataSet;

  /**
   * Get the first element in the collection with the provided name.
   */
  getByName(name: string): DataSet;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * Options which may be supplied when opening a file.
 */
declare class OpenOptions {
  /**
   * Add this file to the list of recently opened files.
   */
  addToRecentFiles: boolean;

  /**
   * Convert crop area to Artboard when opening legacy document (pre-Illustrator CS4) in CS4 or later. If false then crop areas are discarded.
   */
  convertCropAreaToArtboard: boolean;

  /**
   * Convert print tiles to Artboard when opening legacy document (pre-Illustrator CS4) in CS4 or later.
   */
  convertTilesToArtboard: boolean;

  /**
   * Create Artboard with dimentions of artwork bounding box when opening legacy document (pre-Illustrator CS4) in CS4 or later.
   */
  createArtboardWithArtworkBoundingBox: boolean;

  /**
   * Open the file as library.
   */
  openAs: LibraryType;

  /**
   * Preserve Legacy Artboard (pre-Illustrator CS4) when opening in CS4 or later.
   */
  preserveLegacyArtboard: boolean;

  /**
   * Choose to preserve the spot colors in the gradient mesh objects for legacy documents (pre-Illustrator CS3)
   */
  updateLegacyGradientMesh: boolean;

  /**
   * Choose to update all text objects for documents saved with legacy texts (pre-Illustrator 11)
   */
  updateLegacyText: boolean;
}

/**
 * Options which may be supplied when saving a document as an FXG file.
 */
declare class FXGSaveOptions {
  /**
   * If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.
   */
  artboardRange: string;

  /**
   * The policy used by FXG to expand blends.
   */
  blendsPolicy: BlendsExpandPolicy;

  /**
   * Choose to downsample the linked images(72ppi)
   */
  downsampleLinkedImages: boolean;

  /**
   * The policy used by FXG to preserve filters.
   */
  filtersPolicy: FiltersPreservePolicy;

  /**
   * The policy used by FXG to preserve gradients.
   */
  gradientsPolicy: GradientsPreservePolicy;

  /**
   * Choose to include metadata (XMP)
   */
  includeMetadata: boolean;

  /**
   * Choose to include unused symbols.
   */
  includeUnusedSymbols: boolean;

  /**
   * Choose to preserve the editing capabilities of FXG.
   */
  preserveEditingCapabilities: boolean;

  /**
   * All the artboards or range of the artboards will be saved.
   */
  saveMultipleArtboards: boolean;

  /**
   * The policy used by FXG to preserve text.
   */
  textPolicy: TextPreservePolicy;

  /**
   * The version of the FXG file format to create.
   */
  version: FXGVersion;
}

/**
 * Options which may be supplied when saving a document as an Illustrator EPS file.
 */
declare class EPSSaveOptions {
  /**
   * If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.
   */
  artboardRange: string;

  /**
   * Use CMYK PostScript.
   */
  cmykPostScript: boolean;

  /**
   * What Illustrator file format version to create.
   */
  compatibility: Compatibility;

  /**
   * Create a raster item of the gradient or gradient mesh so that PostScript Level 2 printers can print the object.
   */
  compatibleGradientPrinting: boolean;

  /**
   * Embed all fonts used by the document in the saved file (version 7 or later)
   */
  embedAllFonts: boolean;

  /**
   * Are linked image files to be included in the saved document.
   */
  embedLinkedFiles: boolean;

  /**
   * How should transparency be flattened for older file format versions (pre-version 9)
   */
  flattenOutput: OutputFlattening;

  /**
   * Include thumbnail image of the EPS artwork.
   */
  includeDocumentThumbnails: boolean;

  /**
   *
   */
  overprint: PDFOverprint;

  /**
   * PostScript level to use (level 1 valid for file format version 8 or older)
   */
  postScript: EPSPostScriptLevelEnum;

  /**
   * EPS preview format.
   */
  preview: EPSPreview;

  /**
   * All the artboards or range of the artboards will be saved.
   */
  saveMultipleArtboards: boolean;
}

/**
 * Options which may be supplied when saving a document as a PDF file.
 */
declare class PDFSaveOptions {
  /**
   * Create acrobat layers from top-level layers - acrobat 6 only option.
   */
  acrobatLayers: boolean;

  /**
   * Considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.
   */
  artboardRange: string;

  /**
   * Link 4 bleed values.
   */
  bleedLink: boolean;

  /**
   * The bleed offset rect.
   */
  bleedOffsetRect: Rect;

  /**
   * Draw color bars.
   */
  colorBars: boolean;

  /**
   * How should color bitmap images be compressed.
   */
  colorCompression: CompressionQuality;

  /**
   * PDF color conversion policy. Three choices are available: (1)No Color Conversion (2) Repurpose (3) Convert to Destination.
   */
  colorConversionID: ColorConversion;

  /**
   * When NoColorConversion is specified for Color Conversion, NoColorDestination is set.
   */
  colorDestinationID: ColorDestination;

  /**
   * If zero, no downsampling, otherwise, the resolution to downsample color bitmap images to.
   */
  colorDownsampling: number;

  /**
   * Downsample if the image's resolution is above this value.
   */
  colorDownsamplingImageThreshold: number;

  /**
   * How should color bitmap images be resampled.
   */
  colorDownsamplingMethod: DownsampleMethod;

  /**
   * If CMS is off, Don't Include Profiles is set.
   */
  colorProfileID: ColorProfile;

  /**
   * Tile size when compressing with JPEG2000.
   */
  colorTileSize: number;

  /**
   * The version of the Acrobat file format to create.
   */
  compatibility: PDFCompatibility;

  /**
   * Should line art and text be compressed?
   */
  compressArt: boolean;

  /**
   * A password string to open the document.
   */
  documentPassword: string;

  /**
   * Enable accessing 128-bit.
   */
  enableAccess: boolean;

  /**
   * Enable copying of text 128-bit.
   */
  enableCopy: boolean;

  /**
   * Enable copying and accessing 40-bit.
   */
  enableCopyAccess: boolean;

  /**
   * Enable plaintext metadata 128-bit - available only for acrobat 6.
   */
  enablePlainText: boolean;

  /**
   * The printing flattener options.
   */
  flattenerOptions: PrintFlattenerOptions;

  /**
   * The transparency flattener preset name.
   */
  flattenerPreset: string;

  /**
   * Include a subset of fonts when less than this percentage of characters are used.
   */
  fontSubsetThreshold: number;

  /**
   * Generate thumbnails for the saved document.
   */
  generateThumbnails: boolean;

  /**
   * How should grayscale bitmap images be compressed.
   */
  grayscaleCompression: CompressionQuality;

  /**
   * If zero, no downsampling, otherwise, the resolution to downsample grayscale images to.
   */
  grayscaleDownsampling: number;

  /**
   * Downsample if the image's resolution is above this value.
   */
  grayscaleDownsamplingImageThreshold: number;

  /**
   * How should grayscale bitmap images be resampled.
   */
  grayscaleDownsamplingMethod: DownsampleMethod;

  /**
   * Tile size when compressing with JPEG2000.
   */
  grayscaleTileSize: number;

  /**
   * How should monochrome bitmap images be compressed.
   */
  monochromeCompression: MonochromeCompression;

  /**
   * If zero, no downsampling, otherwise, the resolution to downsample images to.
   */
  monochromeDownsampling: number;

  /**
   * Downsample if the image's resolution is above this value.
   */
  monochromeDownsamplingImageThreshold: number;

  /**
   * How should monochrome bitmap images be resampled.
   */
  monochromeDownsamplingMethod: DownsampleMethod;

  /**
   * Custom offset (in points) for using the custom paper.
   */
  offset: number;

  /**
   * Should the PDF document be optimized for fast web viewing.
   */
  optimization: boolean;

  /**
   * This is an optional comment which, if present, is added to the PDF file and describes the intended printing condition.
   */
  outputCondition: string;

  /**
   * If selected for Output Intent Profile Name, you can set the name of a registered printing condition.
   */
  outputConditionID: string;

  /**
   * When CMS is on, the output intent profile is the same profile selected for Destination in the Color group box.
   */
  outputIntentProfile: string;

  /**
   * PDF security printing permission.
   */
  pDFAllowPrinting: PDFPrintAllowedEnum;

  /**
   * PDF security changes allowed.
   */
  pDFChangesAllowed: PDFChangesAllowedEnum;

  /**
   * The max string length is 255 bytes. Name of PDF preset to use.
   */
  pDFPreset: string;

  /**
   * This control includes the None option for when the user is not complying with any PDF standard.
   */
  pDFXStandard: PDFXStandard;

  /**
   * This displays the description from the selected preset.
   */
  pDFXStandardDescription: string;

  /**
   * Draw page information.
   */
  pageInformation: boolean;

  /**
   * The page marks style.
   */
  pageMarksType: PageMarksTypes;

  /**
   * A password string to restrict editing security settings.
   */
  permissionPassword: string;

  /**
   * Preserve Illustrator editing capabilities when saving the document.
   */
  preserveEditability: boolean;

  /**
   * Flattening printer resolution.
   */
  printerResolution: number;

  /**
   * Draw registration marks.
   */
  registrationMarks: boolean;

  /**
   * URL to the site where the specified output condition is registered. No validation is performed on the URL.
   */
  registryName: string;

  /**
   * Require a password to open the document.
   */
  requireDocumentPassword: boolean;

  /**
   * Use a password to restrict editing security settings.
   */
  requirePermissionPassword: boolean;

  /**
   * This indicates if manual trapping has been prepared in the document.
   */
  trapped: boolean;

  /**
   * Trim mark weight.
   */
  trimMarkWeight: PDFTrimMarkWeight;

  /**
   * Draw trim marks.
   */
  trimMarks: boolean;

  /**
   * View PDF after saving.
   */
  viewAfterSaving: boolean;
}

/**
 * Options which may be supplied when saving a document as an Illustrator file.
 */
declare class IllustratorSaveOptions {
  /**
   * If SaveMultipleArtboards is true ,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.
   */
  artboardRange: string;

  /**
   * What Illustrator file format version to create.
   */
  compatibility: Compatibility;

  /**
   * Should the saved file be compressed (version 10 or later)
   */
  compressed: boolean;

  /**
   * Embed the document's ICC profile in the saved file (version 9 or later)
   */
  embedICCProfile: boolean;

  /**
   * Are linked image files to be included in the saved document (versions 7 or later)
   */
  embedLinkedFiles: boolean;

  /**
   * How should transparency be flattened for older file format versions (pre-version 9)
   */
  flattenOutput: OutputFlattening;

  /**
   * Include a subset of fonts when less than this percentage of characters are used (version 9 or later)
   */
  fontSubsetThreshold: number;

  /**
   * Save as a PDF compatible file (version 10 or later)
   */
  pdfCompatible: boolean;

  /**
   * All the artboards or range of the artboards will be saved.
   */
  saveMultipleArtboards: boolean;
}

/**
 *
 */
declare class Matrix {
  /**
   *
   */
  mValueA: number;

  /**
   *
   */
  mValueB: number;

  /**
   *
   */
  mValueC: number;

  /**
   *
   */
  mValueD: number;

  /**
   *
   */
  mValueTX: number;

  /**
   *
   */
  mValueTY: number;
}

/**
 * An item that needs to be exported; for example, a document, artboard, or asset.
 */
declare class ExportForScreensItemToExport {
  /**
   * Range of artboards to export [possible values: '', 'all'(default), range]
   */
  artboards: string;

  /**
   * Array of asset id to export (default:empty)
   */
  assets: number[];

  /**
   * Whether to export the document or not.
   */
  document: boolean;
}

/**
 * Options which may be provided when exporting a document as a JPEG100 file.
 */
declare class ExportForScreensOptionsJPEG {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: AntiAliasingMethod;

  /**
   * Should the image be compressed.
   */
  compressionMethod: JPEGCompressionMethodType;

  /**
   * Embed an ICC profile when exporting.
   */
  embedICCProfile: boolean;

  /**
   * Specify the number of detailed scans when downloading a JPEG file using the Progressive option as the CompressionMethod.
   */
  progressiveScan: number;

  /**
   * How should the resulting image be scaled.
   */
  scaleType: ExportForScreensScaleType;

  /**
   * The value by which the resulting image should be scaled.
   */
  scaleTypeValue: number;
}

/**
 * Options which may be provided when exporting a document as an 8 bit PNG file.
 */
declare class ExportForScreensOptionsPNG8 {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: AntiAliasingMethod;

  /**
   * Number of colors in exported color table.
   */
  colorCount: number;

  /**
   * Should the resulting image be interlaced.
   */
  interlaced: boolean;

  /**
   * Should the artboard be matted with a color.
   */
  matte: boolean;

  /**
   * The color to use when matting the artboard (default: white)
   */
  matteColor: RGBColor;

  /**
   * How should the resulting image be scaled.
   */
  scaleType: ExportForScreensScaleType;

  /**
   * The value by which the resulting image should be scaled.
   */
  scaleTypeValue: number;

  /**
   * Should the resulting image use transparency.
   */
  transparency: boolean;
}

/**
 * Options which may be provided when exporting a document as an 24 bit PNG file.
 */
declare class ExportForScreensOptionsPNG24 {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: AntiAliasingMethod;

  /**
   * Should the resulting image rasterize against a black background (with value true) or white background(with value false) if it doesn't use transparency.
   */
  backgroundBlack: boolean;

  /**
   * Should the resulting image be interlaced.
   */
  interlaced: boolean;

  /**
   * How should the resulting image be scaled.
   */
  scaleType: ExportForScreensScaleType;

  /**
   * The value by which the resulting image should be scaled.
   */
  scaleTypeValue: number;

  /**
   * Should the resulting image use transparency.
   */
  transparency: boolean;
}

/**
 * Options which may be provided when exporting a document as a web optimized SVG file.
 */
declare class ExportForScreensOptionsWebOptimizedSVG {
  /**
   * Decimal precision for element coordinate values.
   */
  coordinatePrecision: number;

  /**
   * How should the CSS properties of the document be included in the document.
   */
  cssProperties: SVGCSSPropertyLocation;

  /**
   * The type of font that should be included in the exported file.
   */
  fontType: SVGFontType;

  /**
   * Should the raster images in the exported file be included.
   */
  rasterImageLocation: RasterImageLocation;

  /**
   * How object names (IDs) are generated in exported SVG.
   */
  svgId: SVGIdType;

  /**
   * Reduces the size of the svg.
   */
  svgMinify: boolean;

  /**
   * Makes the SVG Responsive.
   */
  svgResponsive: boolean;
}

/**
 * Options which may be provided when exporting a document as a PDF file.
 */
declare class ExportForScreensPDFOptions {
  /**
   * The max string length is 255 bytes. Name of PDF preset to use.
   */
  pdfPreset: string;
}

/**
 * Options which may be supplied when exporting a document as a JPEG file.
 */
declare class ExportOptionsJPEG {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: boolean;

  /**
   * Should the resulting image be clipped to the artboard.
   */
  artBoardClipping: boolean;

  /**
   * Blur the resulting image this much.
   */
  blurAmount: number;

  /**
   * Horizontal scaling factor.
   */
  horizontalScale: number;

  /**
   * Should the artboard be matted with a color.
   */
  matte: boolean;

  /**
   * The color to use when matting the artboard (default: white)
   */
  matteColor: RGBColor;

  /**
   * Should the image be optimized for web viewing.
   */
  optimization: boolean;

  /**
   * Quality of resulting image.
   */
  qualitySetting: number;

  /**
   * Should the resulting image be saved as HTML.
   */
  saveAsHTML: boolean;

  /**
   * Vertical scaling factor.
   */
  verticalScale: number;
}

/**
 * Options which may be supplied when exporting a document as an 8 bit PNG file.
 */
declare class ExportOptionsPNG8 {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: boolean;

  /**
   * Should the resulting image be clipped to the artboard.
   */
  artBoardClipping: boolean;

  /**
   * Number of colors in exported color table.
   */
  colorCount: number;

  /**
   * Method used to dither colors.
   */
  colorDither: ColorDitherMethod;

  /**
   * Method used to reduce the number of colors.
   */
  colorReduction: ColorReductionMethod;

  /**
   * How much should the colors be dithered.
   */
  ditherPercent: number;

  /**
   * Horizontal scaling factor.
   */
  horizontalScale: number;

  /**
   * Should the resulting image be interlaced.
   */
  interlaced: boolean;

  /**
   * Should the artboard be matted with a color.
   */
  matte: boolean;

  /**
   * The color to use when matting the artboard (default: white)
   */
  matteColor: RGBColor;

  /**
   * Should the resulting image be saved as HTML.
   */
  saveAsHTML: boolean;

  /**
   * Should the resulting image use transparency.
   */
  transparency: boolean;

  /**
   * Vertical scaling factor.
   */
  verticalScale: number;

  /**
   * How much should the color table be changed to match the web palette.
   */
  webSnap: number;
}

/**
 * Options which may be supplied when exporting a document as an 24 bit PNG file.
 */
declare class ExportOptionsPNG24 {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: boolean;

  /**
   * Should the resulting image be clipped to the artboard.
   */
  artBoardClipping: boolean;

  /**
   * Dimensions in which to contain the resulting raster.
   */
  dimensions: Dimensions;

  /**
   * Horizontal scaling factor.
   */
  horizontalScale: number;

  /**
   * Should the artboard be matted with a color.
   */
  matte: boolean;

  /**
   * The color to use when matting the artboard (default: white)
   */
  matteColor: RGBColor;

  /**
   * Should the resulting image be saved as HTML.
   */
  saveAsHTML: boolean;

  /**
   * Should the resulting image use transparency.
   */
  transparency: boolean;

  /**
   * Vertical scaling factor.
   */
  verticalScale: number;
}

/**
 * Options which may be supplied when exporting a document as a GIF file.
 */
declare class ExportOptionsGIF {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: boolean;

  /**
   * Should the resulting image be clipped to the artboard.
   */
  artBoardClipping: boolean;

  /**
   * Number of colors in exported color table.
   */
  colorCount: number;

  /**
   * Method used to dither colors.
   */
  colorDither: ColorDitherMethod;

  /**
   * Method used to reduce the number of colors.
   */
  colorReduction: ColorReductionMethod;

  /**
   * How much should the colors be dithered.
   */
  ditherPercent: number;

  /**
   * Horizontal scaling factor.
   */
  horizontalScale: number;

  /**
   * Level of information loss during compression.
   */
  infoLossPercent: number;

  /**
   * Should the resulting image be interlaced.
   */
  interlaced: boolean;

  /**
   * Should the artboard be matted with a color.
   */
  matte: boolean;

  /**
   * The color to use when matting the artboard (default: white)
   */
  matteColor: RGBColor;

  /**
   * Should the resulting image be saved as HTML.
   */
  saveAsHTML: boolean;

  /**
   * Should the resulting image use transparency.
   */
  transparency: boolean;

  /**
   * Vertical scaling factor.
   */
  verticalScale: number;

  /**
   * How much should the color table be changed to match the web pallet.
   */
  webSnap: number;
}

/**
 * Options which may be supplied when exporting a document as a Photoshop file.
 */
declare class ExportOptionsPhotoshop {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: boolean;

  /**
   * If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.
   */
  artboardRange: string;

  /**
   * Export text objects as editable text layers.
   */
  editableText: boolean;

  /**
   * Embed an ICC profile when exporting.
   */
  embedICCProfile: boolean;

  /**
   * The color space of the exported file.
   */
  imageColorSpace: ImageColorSpace;

  /**
   * Preserve as much of the original document's structure as possible when exporting.
   */
  maximumEditability: boolean;

  /**
   * The resolution of the exported file.
   */
  resolution: number;

  /**
   * All the artboards or range of the artboards will be exported.
   */
  saveMultipleArtboards: boolean;

  /**
   * Should a warning dialog be displayed because of conflicts in the export settings.
   */
  warnings: boolean;

  /**
   * Preserve document layers when exporting.
   */
  writeLayers: boolean;
}

/**
 * Options which may be supplied when exporting a document as an SVG file.
 */
declare class ExportOptionsSVG {
  /**
   * The version of DTD that the exported file should be conforming to.
   */
  DTD: SVGDTDVersion;

  /**
   * If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.
   */
  artboardRange: string;

  /**
   * Should the exported file be compressed.
   */
  compressed: boolean;

  /**
   * Decimal precision for element coordinate values.
   */
  coordinatePrecision: number;

  /**
   * How should the CSS properties of the document be included in the document.
   */
  cssProperties: SVGCSSPropertyLocation;

  /**
   * How should the text in the document be encoded.
   */
  documentEncoding: SVGDocumentEncoding;

  /**
   * Should the raster images in the exported file be included.
   */
  embedRasterImages: boolean;

  /**
   * What font glyphs should be included in the exported file.
   */
  fontSubsetting: SVGFontSubsetting;

  /**
   * The type of font that should be included in the exported file.
   */
  fontType: SVGFontType;

  /**
   *
   */
  includeFileInfo: boolean;

  /**
   *
   */
  includeUnusedStyles: boolean;

  /**
   *
   */
  includeVariablesAndDatasets: boolean;

  /**
   *
   */
  optimizeForSVGViewer: boolean;

  /**
   * Preserve Illustrator editing capabilities when exporting the document.
   */
  preserveEditability: boolean;

  /**
   * Is SVG auto kerning allowed?
   */
  sVGAutoKerning: boolean;

  /**
   * Is SVG text-on-path construct allowed?
   */
  sVGTextOnPath: boolean;

  /**
   * All the artboards or range of the artboards will be saved.
   */
  saveMultipleArtboards: boolean;

  /**
   * Preserve slice data in exported document.
   */
  slices: boolean;
}

/**
 * Options which may be supplied when exporting a document as a Web optimized SVG file.
 */
declare class ExportOptionsWebOptimizedSVG {
  /**
   * If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.
   */
  artboardRange: string;

  /**
   * Decimal precision for element coordinate values.
   */
  coordinatePrecision: number;

  /**
   * How should the CSS properties of the document be included in the document.
   */
  cssProperties: SVGCSSPropertyLocation;

  /**
   * The type of font that should be included in the exported file.
   */
  fontType: SVGFontType;

  /**
   * Should the raster images in the exported file be included.
   */
  rasterImageLocation: RasterImageLocation;

  /**
   * All the artboards or range of the artboards will be saved.
   */
  saveMultipleArtboards: boolean;

  /**
   * How object names (IDs) are generated in exported SVG.
   */
  svgId: SVGIdType;

  /**
   * Reduces the size of the svg.
   */
  svgMinify: boolean;

  /**
   * Makes the SVG Responsive.
   */
  svgResponsive: boolean;
}

/**
 * Options which may be supplied when exporting a document as an Flash (.SWF) file.
 */
declare class ExportOptionsFlash {
  /**
   * How should the arts be clipped during the output.
   */
  artClipping: ArtClippingOption;

  /**
   * If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.
   */
  artboardRange: string;

  /**
   * The background color.
   */
  backgroundColor: RGBColor;

  /**
   * A list of layers to be included as the background in all exported Flash frames.
   */
  backgroundLayers: Layer[];

  /**
   * Controls how the blend art objects are animated when export to Flash frames.
   */
  blendAnimation: BlendAnimationType;

  /**
   * Should the exported file be compressed.
   */
  compressed: boolean;

  /**
   * Should all text be converted to outlines.
   */
  convertTextToOutlines: boolean;

  /**
   * How much curve information should be preserved.
   */
  curveQuality: number;

  /**
   * Should all symbol definitions in the palette be exported to the SWF File.
   */
  exportAllSymbols: boolean;

  /**
   * How should the Flash file be created.
   */
  exportStyle: FlashExportStyle;

  /**
   * Which version of SWF to export.
   */
  exportVersion: FlashExportVersion;

  /**
   * When exporting layers to Flash frames.
   */
  frameRate: number;

  /**
   * Should the kerning information for text objects be ignored.
   */
  ignoreTextKerning: boolean;

  /**
   * How should the images in the exported Flash file be compressed.
   */
  imageFormat: FlashImageFormat;

  /**
   * If true, include minimal XMP metadata in the exported file.
   */
  includeMetadata: boolean;

  /**
   * What method to use.
   */
  jpegMethod: FlashJPEGMethod;

  /**
   * Level of compression.
   */
  jpegQuality: number;

  /**
   * The order in which the layers will be exported to Flash frames.
   */
  layerOrder: LayerOrderType;

  /**
   * Should the Flash file be set to loop when run.
   */
  looping: boolean;

  /**
   * What access should the SWF file have - local or network access.
   */
  playbackAccess: FlashPlaybackSecurity;

  /**
   * Choose whether to preserve artwork appearance or editability (default) during export.
   */
  preserveAppearance: boolean;

  /**
   * Prevent the exported file from being imported by other applications.
   */
  readOnly: boolean;

  /**
   * If a file with the same name already exists, should it be replaced?
   */
  replacing: SaveOptions;

  /**
   * Pixels per inch.
   */
  resolution: number;

  /**
   * All the artboards or range of the artboards will be exported.
   */
  saveMultipleArtboards: boolean;
}

/**
 * Options which may be supplied when exporting a document to AutoCAD formats (.dwg or .dxf)
 */
declare class ExportOptionsAutoCAD {
  /**
   * Alter paths for appearance.
   */
  alterPathsForAppearance: boolean;

  /**
   * Number of colors to export into the AutoCAD file.
   */
  colors: AutoCADColors;

  /**
   * Whether to convert text to outlines.
   */
  convertTextToOutlines: boolean;

  /**
   * Which format to export the file as.
   */
  exportFileFormat: AutoCADExportFileFormat;

  /**
   * Whether to preserve appearance or editability during export.
   */
  exportOption: AutoCADExportOption;

  /**
   * Export selected art only.
   */
  exportSelectedArtOnly: boolean;

  /**
   * Raster format in which to export raster art.
   */
  rasterFormat: AutoCADRasterFormat;

  /**
   * Whether to scale lineweights by the same amount as rest of the drawing.
   */
  scaleLineweights: boolean;

  /**
   * Units from which to map.
   */
  unit: AutoCADUnit;

  /**
   * Ratio by which to scale the output.
   */
  unitScaleRatio: number;

  /**
   * Release of AutoCAD to export to.
   */
  version: AutoCADCompatibility;
}

/**
 * Options which may be supplied when exporting a document as a TIFF file.
 */
declare class ExportOptionsTIFF {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: AntiAliasingMethod;

  /**
   * If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.
   */
  artboardRange: string;

  /**
   * Mac or PC byte order when exporting.
   */
  byteOrder: TIFFByteOrder;

  /**
   * Embed an ICC profile when exporting.
   */
  embedICCProfile: boolean;

  /**
   * The color space of the exported file.
   */
  imageColorSpace: ImageColorSpace;

  /**
   * Compress TIFF file with LZW Compression when exporting.
   */
  lZWCompression: boolean;

  /**
   * The resolution of the exported file.
   */
  resolution: number;

  /**
   * All the artboards or range of the artboards will be exported.
   */
  saveMultipleArtboards: boolean;
}

/**
 * The parent class for all color values used in Illustrator. See the specific color classes for more information.
 */
declare class Color {}

/**
 * An Lab color specification.
 */
declare class LabColor extends Color {
  /**
   * The a color value (between -128.0 and 127.0)
   */
  a: number;

  /**
   * The b color value (between -128.0 and 127.0)
   */
  b: number;

  /**
   * The L color value (between 0.0 and 100.0)
   */
  l: number;
}

/**
 * Dimensions (height and width)
 */
declare class Dimensions {
  /**
   * The Height parameter.
   */
  height: number;

  /**
   * The Width parameter.
   */
  width: number;
}

/**
 * An RGB color specification.
 */
declare class RGBColor extends Color {
  /**
   * The blue color value (between 0.0 and 255.0)
   */
  blue: number;

  /**
   * The green color value (between 0.0 and 255.0)
   */
  green: number;

  /**
   * The red color value (between 0.0 and 255.0)
   */
  red: number;
}

/**
 * A CMYK color specification.
 */
declare class CMYKColor extends Color {
  /**
   * The black color value (between 0.0 and 100.0)
   */
  black: number;

  /**
   * The cyan color value (between 0.0 and 100.0)
   */
  cyan: number;

  /**
   * The magenta color value (between 0.0 and 100.0)
   */
  magenta: number;

  /**
   * The yellow color value (between 0.0 and 100.0)
   */
  yellow: number;
}

/**
 * A gray color specification.
 */
declare class GrayColor extends Color {
  /**
   * The gray value (between 0.0 and 100.0)
   */
  gray: number;
}

/**
 * Represents the 'none' color.
 */
declare class NoColor extends Color {}

/**
 * Information about the spot color.
 */
declare class SpotColor extends Color {
  /**
   *
   */
  spot: Spot;

  /**
   * Percentage level of tint to be applied to the spot color.
   */
  tint: number;
}

/**
 * A Pattern color specification.
 */
declare class PatternColor extends Color {
  /**
   * Additional transformation arising from manipulating the path.
   */
  matrix: Matrix;

  /**
   *
   */
  pattern: Pattern;

  /**
   * Whether or not the prototype is reflected before filling.
   */
  reflect: boolean;

  /**
   * The axis around which to reflect.
   */
  reflectAngle: number;

  /**
   * The angle to rotate the before filling.
   */
  rotation: number;

  /**
   * The fraction to scale the prototype before filling.
   */
  scaleFactor: Point;

  /**
   * The angle to slant the shear by.
   */
  shearAngle: number;

  /**
   * The axis to shear with respect to.
   */
  shearAxis: number;

  /**
   * The angle to translate the (unscaled) prototype before filling.
   */
  shiftAngle: number;

  /**
   * The distance to translate the (unscaled) prototype before filling.
   */
  shiftDistance: number;
}

/**
 * A Gradient color specification.
 */
declare class GradientColor extends Color {
  /**
   * The gradient vector angle.
   */
  angle: number;

  /**
   * Reference to the object defining the gradient.
   */
  gradient: Gradient;

  /**
   * The gradient hilite vector angle.
   */
  hiliteAngle: number;

  /**
   * The gradient hilite vector length.
   */
  hiliteLength: number;

  /**
   * The gradient vector length.
   */
  length: number;

  /**
   * Additional transformation arising from manipulating the path.
   */
  matrix: Matrix;

  /**
   * The gradient vector origin.
   */
  origin: Point;
}

/**
 * Tab stop information (returned by tab stops from a paragraph object)
 */
declare class TabStopInfo {
  /**
   * The alignment of the tab stop.
   */
  alignment: TabStopAlignment;

  /**
   * The character used for decimal tab stops.
   */
  decimalCharacter: string;

  /**
   * The leader dot.
   */
  leader: string;

  /**
   * The position of the tab stop expressed in points.
   */
  position: number;
}

/**
 * An installed printer.
 */
declare class Printer {
  /**
   * The printer name.
   */
  name: string;

  /**
   * The printer information.
   */
  printerInfo: PrinterInfo;
}

/**
 * Printer information.
 */
declare class PrinterInfo {
  /**
   * Does the printer support binary printing?
   */
  binaryPrintingSupport: boolean;

  /**
   * The printer color capability.
   */
  colorSupport: PrinterColorMode;

  /**
   * Does the printer support custom paper size?
   */
  customPaperSupport: boolean;

  /**
   * Does the printer support custom paper transverse?
   */
  customPaperTransverseSupport: boolean;

  /**
   * The printer default resolution.
   */
  deviceResolution: number;

  /**
   * Does the printer support InRIP color separation?
   */
  inRIPSeparationSupport: boolean;

  /**
   * The printer maximum device resolution.
   */
  maxDeviceResolution: number;

  /**
   * Custom paper's maximum height.
   */
  maxPaperHeight: number;

  /**
   * Custom paper's maximum height offset.
   */
  maxPaperHeightOffset: number;

  /**
   * Custom paper's maximum width.
   */
  maxPaperWidth: number;

  /**
   * Custom paper's maximum width offset.
   */
  maxPaperWidthOffset: number;

  /**
   * Custom paper's minimum height.
   */
  minPaperHeight: number;

  /**
   * Custom paper's minimum height offset.
   */
  minPaperHeightOffset: number;

  /**
   * Custom paper's minimum width.
   */
  minPaperWidth: number;

  /**
   * Custom paper's minimum width offset.
   */
  minPaperWidthOffset: number;

  /**
   * The list of supported paper sizes.
   */
  paperSizes: Paper[];

  /**
   * The PostScript level.
   */
  postScriptLevel: PrinterPostScriptLevelEnum;

  /**
   * The printer type.
   */
  printerType: PrinterTypeEnum;
}

/**
 * A PPD file.
 */
declare class PPDFile {
  /**
   * The PPD file information.
   */
  PPDInfo: PPDFileInfo;

  /**
   * The PPD model name.
   */
  name: string;
}

/**
 * PPD file information.
 */
declare class PPDFileInfo {
  /**
   * Path specification for the PPD file.
   */
  PPDFilePath: File;

  /**
   * The PostScript language level.
   */
  languageLevel: string;

  /**
   * List of color separation screens.
   */
  screenList: Screen[];

  /**
   * List of color separation screen spot functions.
   */
  screenSpotFunctionList: ScreenSpotFunction[];
}

/**
 * Paper size.
 */
declare class Paper {
  /**
   * The paper name.
   */
  name: string;

  /**
   * The paper information.
   */
  paperInfo: PaperInfo;
}

/**
 * Paper information.
 */
declare class PaperInfo {
  /**
   * Is it a custom paper?
   */
  customPaper: boolean;

  /**
   * The paper's height (in points)
   */
  height: number;

  /**
   * The imageable area.
   */
  imageableArea: Rect;

  /**
   * The paper's width (in points)
   */
  width: number;
}

/**
 * Color separation screen.
 */
declare class Screen {
  /**
   * The color separation screen name.
   */
  name: string;

  /**
   * The color separation screen information.
   */
  screenInfo: ScreenInfo;
}

/**
 * Screen information.
 */
declare class ScreenInfo {
  /**
   * The screen's angle (in degrees)
   */
  angle: number;

  /**
   * Is it the default screen?
   */
  defaultScreen: boolean;

  /**
   * The screen's frequency.
   */
  frequency: number;
}

/**
 * Color separation screen spot function.
 */
declare class ScreenSpotFunction {
  /**
   * The color separation screen spot function name.
   */
  name: string;

  /**
   * The spot function in terms of the PostScript commands.
   */
  spotFunction: string;
}

/**
 * Printer's ink.
 */
declare class Ink {
  /**
   * The ink information.
   */
  inkInfo: InkInfo;

  /**
   * The ink's name.
   */
  name: string;
}

/**
 * Ink information.
 */
declare class InkInfo {
  /**
   * The ink's screen angle (in degrees)
   */
  angle: number;

  /**
   * The color of the custom ink.
   */
  customColor: Color;

  /**
   * The neutral density.
   */
  density: number;

  /**
   * The dot shape name.
   */
  dotShape: string;

  /**
   * The ink's frequency.
   */
  frequency: number;

  /**
   * The ink type.
   */
  kind: InkType;

  /**
   * The ink printing status.
   */
  printingStatus: InkPrintStatus;

  /**
   * The trapping type.
   */
  trapping: TrappingType;

  /**
   * The order of trapping for the ink.
   */
  trappingOrder: number;
}

/**
 * The new document preset to use for creating a new document.
 */
declare class DocumentPreset {
  /**
   * Layout for artboards.
   */
  artboardLayout: DocumentArtboardLayout;

  /**
   * Number of rows (for rows layout) OR column(for column layouts)of artboards.Range is 1 to (docNumArtboards - 1) or 1 for single row or column layouts.
   */
  artboardRowsOrCols: number;

  /**
   * Spacing between artboards.
   */
  artboardSpacing: number;

  /**
   * The color mode for the new document.
   */
  colorMode: DocumentColorSpace;

  /**
   * Document link for bleed values.
   */
  documentBleedLink: boolean;

  /**
   * Document bleed offset rect.
   */
  documentBleedOffset: Rect;

  /**
   * The height for the new document.
   */
  height: number;

  /**
   * Number of artboards for new document.Range (1:100).
   */
  numArtboards: number;

  /**
   * The preview mode for the new document.
   */
  previewMode: DocumentPreviewMode;

  /**
   * The raster resolution for the new document.
   */
  rasterResolution: DocumentRasterResolution;

  /**
   * The title for the new document.
   */
  title: string;

  /**
   * The transparency grid for the new document.
   */
  transparencyGrid: DocumentTransparencyGrid;

  /**
   * The units for the new document.
   */
  units: RulerUnits;

  /**
   * The width for the new document.
   */
  width: number;
}

/**
 * The print options.
 */
declare class PrintOptions {
  /**
   * The name of the PPD to use.
   */
  PPDName: string;

  /**
   * The printing color management options.
   */
  colorManagementOptions: PrintColorManagementOptions;

  /**
   * The printing color separation options.
   */
  colorSeparationOptions: PrintColorSeparationOptions;

  /**
   * The printing coordinate options.
   */
  coordinateOptions: PrintCoordinateOptions;

  /**
   * The printing flattener options.
   */
  flattenerOptions: PrintFlattenerOptions;

  /**
   * The transparency flattener preset name.
   */
  flattenerPreset: string;

  /**
   * The printing font options.
   */
  fontOptions: PrintFontOptions;

  /**
   * The printing job options.
   */
  jobOptions: PrintJobOptions;

  /**
   * The printing page marks options.
   */
  pageMarksOptions: PrintPageMarksOptions;

  /**
   * The paper options.
   */
  paperOptions: PrintPaperOptions;

  /**
   * The printing PostScript options.
   */
  postScriptOptions: PrintPostScriptOptions;

  /**
   * The name of a print preset to use.
   */
  printPreset: string;

  /**
   * The name of the printer to print to.
   */
  printerName: string;
}

/**
 * The paper options.
 */
declare class PrintPaperOptions {
  /**
   * The custom height (in points) for using the custom paper.
   */
  height: number;

  /**
   * The paper's name.
   */
  name: string;

  /**
   * Custom offset (in points) for using the custom paper.
   */
  offset: number;

  /**
   * Whether to transverse the artwork (rotate 90 degrees) on the custom paper.
   */
  transverse: boolean;

  /**
   * The custom width (in points) for using the custom paper.
   */
  width: number;
}

/**
 * The print job options.
 */
declare class PrintJobOptions {
  /**
   * Artboard Range to be printed if PrintAllArtboards is false.
   */
  artboardRange: string;

  /**
   * The bitmap resolution.
   */
  bitmapResolution: number;

  /**
   * Whether to collate print pages.
   */
  collate: boolean;

  /**
   * The number of copies to print.
   */
  copies: number;

  /**
   * The layers/objects to be printed.
   */
  designation: PrintArtworkDesignation;

  /**
   * The file to be printed to.
   */
  file: File;

  /**
   * The print job name.
   */
  name: string;

  /**
   * Whether to print all artboards.
   */
  printAllArtboards: boolean;

  /**
   * The printing bounds.
   */
  printArea: PrintingBounds;

  /**
   * Whether to print as bitmap.
   */
  printAsBitmap: boolean;

  /**
   * Print pages in reverse order.
   */
  reversePages: boolean;
}

/**
 * Print color separation options.
 */
declare class PrintColorSeparationOptions {
  /**
   * The color separation type.
   */
  colorSeparationMode: PrintColorSeparationMode;

  /**
   * Whether to convert all spot colors to process colors.
   */
  convertSpotColors: boolean;

  /**
   * The list of inks for color separation.
   */
  inkList: Ink[];

  /**
   * Whether to overprint in black.
   */
  overPrintBlack: boolean;
}

/**
 * The print coordinate options.
 */
declare class PrintCoordinateOptions {
  /**
   * Whether to flip artwork horizontally.
   */
  emulsion: boolean;

  /**
   * Whether to proportionally scale the artwork to fit on the page.
   */
  fitToPage: boolean;

  /**
   * The horizontal scaling factor expressed as a percentage (100 = 100%)
   */
  horizontalScale: number;

  /**
   * The artwork orientation.
   */
  orientation: PrintOrientation;

  /**
   * The artwork position on media.
   */
  position: PrintPosition;

  /**
   * The page tiling mode.
   */
  tiling: PrintTiling;

  /**
   * The vertical scaling factor expressed as a percentage (100 = 100%)
   */
  verticalScale: number;
}

/**
 * The page marks options.
 */
declare class PrintPageMarksOptions {
  /**
   * The bleed offset rect.
   */
  bleedOffsetRect: Rect;

  /**
   * Whether to enable color bars printing.
   */
  colorBars: boolean;

  /**
   * The page marks offset rect.
   */
  marksOffsetRect: Rect;

  /**
   * Whether to enable page info marks printing.
   */
  pageInfoMarks: boolean;

  /**
   * The page marks style.
   */
  pageMarksType: PageMarksTypes;

  /**
   * Whether to enable registration marks printing.
   */
  registrationMarks: boolean;

  /**
   * Whether to enable trim marks printing.
   */
  trimMarks: boolean;

  /**
   * Stroke weight of trim marks.
   */
  trimMarksWeight: number;
}

/**
 * The font options for printing.
 */
declare class PrintFontOptions {
  /**
   * The font download mode.
   */
  downloadFonts: PrintFontDownloadMode;

  /**
   * The font substitution policy.
   */
  fontSubstitution: FontSubstitutionPolicy;
}

/**
 * The PostScript options.
 */
declare class PrintPostScriptOptions {
  /**
   * Whether to print in binary mode.
   */
  binaryPrinting: boolean;

  /**
   * Use PostScript level 1 compatible gradient and gradient mesh printing.
   */
  compatibleShading: boolean;

  /**
   * Whether to force continuous tone.
   */
  forceContinuousTone: boolean;

  /**
   * The image compression type.
   */
  imageCompression: PostScriptImageCompressionType;

  /**
   * Whether to print in negative mode.
   */
  negativePrinting: boolean;

  /**
   * The PostScript language level.
   */
  postScriptLevel: PrinterPostScriptLevelEnum;

  /**
   * The shading resolution.
   */
  shadingResolution: number;
}

/**
 * The color management options.
 */
declare class PrintColorManagementOptions {
  /**
   * The color management profile mode.
   */
  colorProfileMode: PrintColorProfile;

  /**
   * The color management intent type.
   */
  intent: PrintColorIntent;

  /**
   * The color management profile name.
   */
  name: string;
}

/**
 * The transparency flattening options.
 */
declare class PrintFlattenerOptions {
  /**
   * Whether to clip complex regions.
   */
  clipComplexRegions: boolean;

  /**
   * Whether to convert all strokes to outlines.
   */
  convertStrokesToOutlines: boolean;

  /**
   * Whether to convert all text to outlines.
   */
  convertTextToOutlines: boolean;

  /**
   * The flattening balance.
   */
  flatteningBalance: number;

  /**
   * The gradient resolution.
   */
  gradientResolution: number;

  /**
   * Overprint.
   */
  overprint: PDFOverprint;

  /**
   * The rasterization resolution.
   */
  rasterizationResolution: number;
}

/**
 * Options which may be supplied when capturing a portion of the artwork as an 24 bit PNG file.
 */
declare class ImageCaptureOptions {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: boolean;

  /**
   * Should the artboard be matted with a color.
   */
  matte: boolean;

  /**
   * The color to use when matting the artboard (default: white)
   */
  matteColor: RGBColor;

  /**
   * The resolution of the captured image file.
   */
  resolution: number;

  /**
   * Should the resulting image use transparency.
   */
  transparency: boolean;
}

/**
 * The document raster effects settings.
 */
declare class RasterEffectOptions {
  /**
   * Should the resulting image be antialiased.
   */
  antiAliasing: boolean;

  /**
   * Should a clipping mask be created for the resulting image.
   */
  clippingMask: boolean;

  /**
   * The color model for the rasterization.
   */
  colorModel: RasterizationColorModel;

  /**
   * Whether to convert all spot colors to process colors in the resulting image.
   */
  convertSpotColors: boolean;

  /**
   * The amount of white space (in points) to be added around the object during rasterization.
   */
  padding: number;

  /**
   * The rasterization resolution in dots-per-inch (dpi)
   */
  resolution: number;

  /**
   * Should the resulting image use transparency.
   */
  transparency: boolean;
}

/**
 * Options which may be supplied when rasterizing the artwork.
 */
declare class RasterizeOptions {
  /**
   * The type of antialiasing method.
   */
  antiAliasingMethod: AntiAliasingMethod;

  /**
   * Should rasterize against a black background instead of white.
   */
  backgroundBlack: boolean;

  /**
   * Should a clipping mask be created for the resulting image.
   */
  clippingMask: boolean;

  /**
   * The color model for the rasterization.
   */
  colorModel: RasterizationColorModel;

  /**
   * Whether to convert all spot colors to process colors in the resulting image.
   */
  convertSpotColors: boolean;

  /**
   * Should all text be converted to outlines before rasterization.
   */
  convertTextToOutlines: boolean;

  /**
   * Should the resulting image incorporates the layer attributes (such as opacity and blend mode)
   */
  includeLayers: boolean;

  /**
   * The amount of white space (in points) to be added around the object during rasterization.
   */
  padding: number;

  /**
   * The rasterization resolution in dots-per-inch (dpi)
   */
  resolution: number;

  /**
   * Should the resulting image use transparency.
   */
  transparency: boolean;
}

/**
 * The Adobe Illustrator application.
 */
declare class Application {
  /**
   * The list of PDF preset names currently available for use.
   */
  PDFPresetsList: string[];

  /**
   * The list of PPD files currently available for use. For performance reasons, the PPDFile entry only contains the model name and file spec of each PPD file.
   */
  PPDFileList: PPDFile[];

  /**
   * The active document.
   */
  activeDocument: Document;

  /**
   * Is a web browser available?
   */
  browserAvailable: boolean;

  /**
   * The build number of the Adobe Illustrator application.
   */
  buildNumber: string;

  /**
   * The list of color settings files currently available for use.
   */
  colorSettingsList: File[];

  /**
   * Coordinate System used by script.
   */
  coordinateSystem: CoordinateSystem;

  /**
   * The default color settings file for the current application locale.
   */
  defaultColorSettings: File;

  /**
   * The open documents.
   */
  documents: Documents;

  /**
   * The list of flattener style names currently available for use.
   */
  flattenerPresetsList: string[];

  /**
   * The amount of unused memory within the Adobe Illustrator partition.
   */
  freeMemory: number;

  /**
   * The Locale of the Adobe Illustrator application.
   */
  locale: string;

  /**
   * The application's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Does paste operation remember layers structure?
   */
  pasteRemembersLayers: boolean;

  /**
   * Path specification for the application.
   */
  path: File;

  /**
   * Preferences for Illustrator.
   */
  preferences: Preferences;

  /**
   * The list of print preset names currently available for use.
   */
  printPresetsList: string[];

  /**
   * The list of installed printers.
   */
  printerList: Printer[];

  /**
   * The version of the Scripting plugin.
   */
  scriptingVersion: string;

  /**
   * The selection visible to the user.
   */
  selection: any;

  /**
   * The list of presets available for creating a new document.
   */
  startupPresetsList: string[];

  /**
   * Installed fonts.
   */
  textFonts: TextFonts;

  /**
   * The list of tracing preset names currently available for use.
   */
  tracingPresetsList: string[];

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * The current users adobe id.
   */
  userAdobeID: string;

  /**
   * The current user's GUID.
   */
  userGUID: string;

  /**
   * What level of interaction with the user should be allowed when handling script commands.
   */
  userInteractionLevel: UserInteractionLevel;

  /**
   * The version of the Adobe Illustrator application.
   */
  version: string;

  /**
   * Is the application visible.
   */
  visible: boolean;

  /**
   * Add the specified to the sequencer.
   * @param sessionIndex The index in the session of the top-most sequence for the item to add.
   * @param destinationSequenceID The UID for the owning sequence.
   * @param destinationIndex The item UID where to insert.
   * @param srcItemIDData The item ID of the item to construct.
   * @param type The source of the item to construct.
   */
  aATAddItem(
    sessionIndex: number,
    destinationSequenceID: number,
    destinationIndex: number,
    srcItemIDData: string,
    type: string
  ): string;

  /**
   * Clear the sequencer.
   */
  aATClear(): string;

  /**
   * Duplicates the specified item(s) from the sequencer.
   * @param sessionIndex The index in the session of the top-most sequence for the item to add.
   * @param item The item UID(s)
   */
  aATDuplicateItem(sessionIndex: number, item: string): string;

  /**
   * Opens the specified item from the sequencer in the item editor.
   * @param sessionIndex The index in the session of the top-most sequence for the item to add.
   * @param item The item UID.
   */
  aATEditItem(sessionIndex: number, item: string): string;

  /**
   * Retrieves a boolean indicating the presence of errors in the last script to execute.
   */
  aATErrorsExist(): boolean;

  /**
   * Executes the active session in the sequencer.
   */
  aATExecuteSession(): void;

  /**
   * Executes the active session in the sequencer.
   * @param file Execute a session file.
   */
  aATExecuteSessionFromFile(file: File): void;

  /**
   * Switches a files relative token and path.
   * @param path The path relative to the folder specified by Relative.
   * @param relative The current relative path token.
   * @param newRelative The new relative path token.
   */
  aATFileRelativeChanged(
    path: string,
    relative: string,
    newRelative: string
  ): string;

  /**
   * Prompts the user to save a file or choose a file or directory and returns a relative path string to the file.
   * @param path The path relative to the folder specified by Relative.
   * @param relative The current relative path token.
   * @param type The type of dialog to show in string format.
   */
  aATFileSaveDialog(path: string, relative: string, type: string): string;

  /**
   * Retrieves a file path to the AAT editor swf.
   */
  aATGetEditorDialogFile(): File;

  /**
   * Retrieves a file path to the AAT error dialog swf.
   */
  aATGetErrorDialogFile(): File;

  /**
   * Gets an XML string listing the relative paths and the UI strings to display them.
   */
  aATGetListOfRelativePaths(): string;

  /**
   * Get the active session for the sequncer.
   */
  aATGetSession(): string;

  /**
   * Loads a session file as an extension to the editor.
   */
  aATLoadLibExtension(): string;

  /**
   * Loads the aat model to the editor.
   */
  aATLoadModel(): string;

  /**
   * Loads a session into the sequencer.
   */
  aATLoadSessionFile(): string;

  /**
   * Loads a UI description as an extension to the editor.
   */
  aATLoadUIExtension(): string;

  /**
   * Moves the specified in the sequencer.
   * @param sessionIndex The index in the session of the top-most sequence for the item to move.
   * @param moveThisID The UID of the item to replace.
   * @param newSessionIndex The index in the session of the destination top-most sequence.
   * @param destinationSequenceID The UID for the owning sequence.
   * @param destinationIndex The index where to insert.
   */
  aATMoveItem(
    sessionIndex: number,
    moveThisID: string,
    newSessionIndex: number,
    destinationSequenceID: string,
    destinationIndex: number
  ): string;

  /**
   * Removes the specified item from the sequencer.
   * @param sessionIndex The index in the session of the top-most sequence for the item to add.
   * @param item The item UID.
   */
  aATRemoveItem(sessionIndex: number, item: string): string;

  /**
   * Replaces the specified to the sequencer.
   * @param sessionIndex The index in the session of the top-most sequence for the item to add.
   * @param replaceThisID The UID of the item to replace.
   * @param srcItemIDData The item ID of the item to construct.
   * @param type The source of the item to construct.
   */
  aATReplaceItem(
    sessionIndex: number,
    replaceThisID: number,
    srcItemIDData: string,
    type: string
  ): string;

  /**
   * Saves the active session in the sequencer to a new file.
   */
  aATSaveAsSession(): string;

  /**
   * Saves the active session in the sequencer to a file.
   */
  aATSaveSession(): string;

  /**
   * Applies the data used in the item editor to the item.
   * @param sessionIndex The index in the session of the top-most sequence for the item to edit.
   * @param item The item UID.
   * @param data The data to apply in XML format.
   */
  applyDataToItem(sessionIndex: number, item: string, data: string): string;

  /**
   * Applies data to the specified item from the sequencer in the item editor.
   * @param sessionIndex The index in the session of the top-most sequence for the item to add.
   * @param item The item UID.
   * @param dataID The data to apply in XML format.
   * @param data The data to apply in XML format.
   */
  applySingleDataPointToItem(
    sessionIndex: number,
    item: string,
    dataID: string,
    data: string
  ): boolean;

  /**
   *
   */
  beep(): void;

  /**
   * Starts the automation tests for the Sync Settings feature.
   */
  beginSyncSettingsAutomationTest(): boolean;

  /**
   * Starts the automation tests for the Typekit Font feature.
   */
  beginTypekitFontAutomationTest(): boolean;

  /**
   * Concatenate two transformation matrices.
   * @param matrix The matrix that is to be added to.
   * @param secondMatrix Second transformation matrix.
   */
  concatenateMatrix(matrix: Matrix, secondMatrix: Matrix): Matrix;

  /**
   * Concatenate a rotation matrix to a transformation matrix.
   * @param matrix The matrix that is to be added to.
   * @param angle Angle of rotation (in degrees)
   */
  concatenateRotationMatrix(matrix: Matrix, angle: number): Matrix;

  /**
   * Concatenate a scale matrix to a transformation matrix.
   * @param matrix The matrix that is to be added to.
   * @param scaleX Horizontal scaling factor expressed as a percentage (100 = 100%)
   * @param scaleY Vertical scaling factor expressed as a percentage (100 = 100%)
   */
  concatenateScaleMatrix(
    matrix: Matrix,
    scaleX?: number,
    scaleY?: number
  ): Matrix;

  /**
   * Concatenate a translation to a transformation matrix.
   * @param matrix The matrix that is to be added to.
   * @param deltaX Horizontal transformation.
   * @param deltaY Vertical transformation.
   */
  concatenateTranslationMatrix(
    matrix: Matrix,
    deltaX?: number,
    deltaY?: number
  ): Matrix;

  /**
   * Converts a sample-component color from one color space to another.
   * @param sourceColorSpace The source color space.
   * @param sourceColor The color to convert, an array of color components. First location of the array should contain alpha if source-has-alpha is true.
   * @param destColorSpace The destination color space.
   * @param colorConvertPurpose The parameter which passes the purpose of conversion.
   * @param sourceHasAlpha True if alpha channel is present in source color.
   * @param destHasAlpha True if alpha channel is present in destination color.
   */
  convertSampleColor(
    sourceColorSpace: ImageColorSpace,
    sourceColor: number[],
    destColorSpace: ImageColorSpace,
    colorConvertPurpose: ColorConvertPurpose,
    sourceHasAlpha?: boolean,
    destHasAlpha?: boolean
  ): number[];

  /**
   * Copy current selection to the clipboard.
   */
  copy(): void;

  /**
   * Cut current selection to the clipboard.
   */
  cut(): void;

  /**
   * Deletes an existing workspace.
   * @param workspaceName Workspace Name.
   */
  deleteWorkspace(workspaceName: string): boolean;

  /**
   * Play an action from the Actions Palette.
   * @param action The name of the action to play (note that the case of letters in the Action name is important and must match the case of the name in the Actions palette)
   * @param from The name of the action set containing the action being played (note that the case of letters in the Action Set name is important and must match the case of the name in the Actions palette)
   * @param dialogs Are dialog boxes associated with the action to be presented?
   */
  doScript(action: string, from: string, dialogs?: boolean): void;

  /**
   * Dump the PGF portion of ai file to txt file.
   * @param file The AI file to be opened.
   * @param documentColorSpace Choose color space only for documents saved with multiple color models (pre-Illustrator 9)
   * @param pGFFile Folder to save the output PGF file.
   */
  dumpPGFFile(
    file: File,
    documentColorSpace?: DocumentColorSpace,
    pGFFile?: File
  ): boolean;

  /**
   * Executes a menu command using the menu shortcut string.
   * @param menuCommandString Menu command shortcut.
   */
  executeMenuCommand(menuCommandString: string): void;

  /**
   * Returns the JSON Data required by CCX Welcome.
   * @param mode Mode for which the data is to be provided.
   */
  getCCXUserJSONData(mode?: string): string;

  /**
   * Retrieves a string containing the results of the last script to execute.
   */
  getExecutionOutput(): string;

  /**
   * Returns the JSON Data required by Hello.
   */
  getHelloJSONData(): string;

  /**
   * Returns an identity matrix.
   */
  getIdentityMatrix(): Matrix;

  /**
   * Returns if the specified filePath is open.
   * @param filePath The filePath to be checked.
   */
  getIsFileOpen(filePath: string): boolean;

  /**
   * Get detailed info from the specified PPD file.
   * @param name The model name of the PPD file.
   */
  getPPDFileInfo(name: string): PPDFileInfo;

  /**
   * Given a preset type, returns the full path to the application's default document profile for the type.
   * @param presetType The preset type.
   */
  getPresetFileOfType(presetType: DocumentPresetType): File;

  /**
   * Given a preset name, tries and retrieves the settings from the preset template.
   * @param preset The name of the preset.
   */
  getPresetSettings(preset: string): DocumentPreset;

  /**
   * Returns a rotation transformation matrix.
   * @param angle Angle of rotation (in degrees)
   */
  getRotationMatrix(angle?: number): Matrix;

  /**
   * Returns a scale transformation matrix.
   * @param scaleX Horizontal scaling factor expressed as a percentage (100 = 100%)
   * @param scaleY Vertical scaling factor expressed as a percentage (100 = 100%)
   */
  getScaleMatrix(scaleX?: number, scaleY?: number): Matrix;

  /**
   * Get the scriptable help group object that represents the search widget in the app bar.
   */
  getScriptableHelpGroup(): any;

  /**
   * Returns a translation matrix.
   * @param deltaX Horizontal transformation.
   * @param deltaY Vertical transformation.
   */
  getTranslationMatrix(deltaX?: number, deltaY?: number): Matrix;

  /**
   * Retrieves a string representing the AAT version.
   */
  getVersionString(): string;

  /**
   * Invert a matrix.
   * @param matrix The matrix to invert.
   */
  invertMatrix(matrix: Matrix): Matrix;

  /**
   * Compares two matrices for equality.
   * @param matrix First transformation matrix to compare.
   * @param secondMatrix Second transformation matrix.
   */
  isEqualMatrix(matrix: Matrix, secondMatrix: Matrix): boolean;

  /**
   * Checks if fill is active or not.
   */
  isFillActive(): boolean;

  /**
   * Tests if a matrix is singular (cannot be inverted)
   * @param matrix The matrix to check.
   */
  isSingularMatrix(matrix: Matrix): boolean;

  /**
   * Checks if stroke is active or not.
   */
  isStrokeActive(): boolean;

  /**
   * Is In Touch Workspace.
   */
  isTouchWorkspace(): boolean;

  /**
   * Is user sharing the application usage data.
   */
  isUserSharingAppUsageData(): boolean;

  /**
   * Launch cep Extension given its ID.
   * @param extensionID Arguments for Launching Extension - ID of extension in manifest.xml of corresponding extension.
   */
  launchExtension(extensionID: string): number;

  /**
   * Load an action into action palette.
   * @param actionFilePath The path on the system of the action file to be loaded.
   */
  loadAction(actionFilePath: File): void;

  /**
   * Load the color settings from the file. If the file is an empty file spec, the color management will be turned off.
   * @param fileSpec File spec for the color settings.
   */
  loadColorSettings(fileSpec: File): void;

  /**
   * Open the specified document file.
   * @param file The file to be opened.
   * @param documentColorSpace Choose color space only for documents saved with multiple color models (pre-Illustrator 9)
   * @param options Options for opening a particular type of file.
   */
  open(
    file: File,
    documentColorSpace?: DocumentColorSpace,
    options?: any
  ): Document;

  /**
   * For Internal Use.
   * @param assetURL For Internal use.
   * @param thumbnailURL For Internal use.
   * @param assetType For internal use.
   * @param options For internal use.
   */
  openCloudLibraryAssetForEditing(
    assetURL: File,
    thumbnailURL: File,
    assetType: string,
    options?: any
  ): Document;

  /**
   * Paste clipboard into the current document.
   */
  paste(): void;

  /**
   * Quit the application.
   */
  quit(): void;

  /**
   * Redo the last transaction.
   */
  redo(): void;

  /**
   * Force Illustrator to redraw its window(s)
   */
  redraw(): void;

  /**
   * Generate Creative Suite ActionScript Wrappers in specified directory.
   * @param outputFolder Location for the output files.
   */
  reflectCSAW(outputFolder: File): void;

  /**
   * Resets the current workspace.
   */
  resetWorkspace(): boolean;

  /**
   * Runs API Tests from the TestAPI Plug-in.
   * @param testName Arguments for Running Tests - eg. Name of Test/Suite.
   */
  runAPITest(testName: string): void;

  /**
   * Saves a new workspace.
   * @param workspaceName Workspace Name.
   */
  saveWorkspace(workspaceName: string): boolean;

  /**
   * Sends the script message to the required plugin.
   * @param pluginName Plugin to which message needs to be sent.
   * @param messageSelector Functionality that is to be executed.
   * @param inputString Pass any data encoded in a string.
   */
  sendScriptMessage(
    pluginName: string,
    messageSelector: string,
    inputString: string
  ): string;

  /**
   * For Internal Use.
   * @param options Options for the PNG24 export.
   */
  setThumbnailOptionsForCloudLibrary(options: any): void;

  /**
   * Invokes application's color picker.
   * @param color The color to load in the color picker initially.
   */
  showColorPicker(color: Color): Color;

  /**
   * Get presets from the file.
   * @param fileSpec File spec to import from.
   */
  showPresets(fileSpec: File): string[];

  /**
   * Switches between workspaces.
   * @param workspaceName Workspace Name.
   */
  switchWorkspace(workspaceName: string): boolean;

  /**
   * Translate the placeholder text to regular text. A method to enter unicode points in hex values.
   * @param text The placeholder text to be translated.
   */
  translatePlaceholderText(text: string): string;

  /**
   * Returns a string translated from the key and source data passed in.
   * @param key The string to translate.
   * @param source The plugin name from the source of the key.
   */
  translateString(key: string, source: string): string;

  /**
   * Undo the last transaction.
   */
  undo(): void;

  /**
   * Unloads an action into action palette.
   * @param setName Name of the set to be unloaded.
   * @param actionName Name of the action to be unloaded.
   */
  unloadAction(setName: string, actionName: string): void;
}

/**
 * A document.
 */
declare class Document {
  /**
   * The XMP packet string associated with the document.
   */
  XMPString: string;

  /**
   * The active data set.
   */
  activeDataSet: DataSet;

  /**
   * The active layer.
   */
  activeLayer: Layer;

  /**
   * The document's current view.
   */
  activeView: View;

  /**
   * All artboards in the document.
   */
  artboards: Artboards;

  /**
   * All assets in the document.
   */
  assets: Assets;

  /**
   * The brushes defined in this document.
   */
  brushes: Brushes;

  /**
   * The list of character styles in this document.
   */
  characterStyles: CharacterStyles;

  /**
   * The name of the color profile of the document.
   */
  colorProfileName: string;

  /**
   * The compound path artwork in this collection.
   */
  compoundPathItems: CompoundPathItems;

  /**
   *
   */
  cropBox: Rect;

  /**
   *
   */
  cropStyle: CropOptions;

  /**
   * The data sets defined in this document.
   */
  dataSets: DataSets;

  /**
   * Default fill color.
   */
  defaultFillColor: Color;

  /**
   * Will art beneath a filled object be overprinted by default?
   */
  defaultFillOverprint: boolean;

  /**
   * Should a new path be filled?
   */
  defaultFilled: boolean;

  /**
   * Default type of line capping.
   */
  defaultStrokeCap: StrokeCap;

  /**
   * Default stroke color.
   */
  defaultStrokeColor: Color;

  /**
   * The default distance into the dash pattern at which the pattern should be started.
   */
  defaultStrokeDashOffset: number;

  /**
   * Default dash lengths (set to {} for a solid line)
   */
  defaultStrokeDashes: number[];

  /**
   * Default type of joints.
   */
  defaultStrokeJoin: StrokeJoin;

  /**
   * Specifies whether a join is mitered (pointed) or beveled (squared-off) by default.
   */
  defaultStrokeMiterLimit: number;

  /**
   * Will art beneath a stroked object be overprinted by default?
   */
  defaultStrokeOverprint: boolean;

  /**
   * Default width of stroke.
   */
  defaultStrokeWidth: number;

  /**
   * Should a new path be stroked?
   */
  defaultStroked: boolean;

  /**
   * The color space used for the document.
   */
  documentColorSpace: DocumentColorSpace;

  /**
   * The embedded art items in this layer.
   */
  embeddedItems: EmbeddedItems;

  /**
   * The file associated with the document.
   */
  fullName: File;

  /**
   * The bounds of the illustration excluding stroke width.
   */
  geometricBounds: [Number, Number, Number, Number];

  /**
   * The gradients available in this document.
   */
  gradients: Gradients;

  /**
   * The graph art items in this document.
   */
  graphItems: GraphItems;

  /**
   * The graphic styles defined in this document.
   */
  graphicStyles: ArtStyles;

  /**
   * The group items in this document.
   */
  groupItems: GroupItems;

  /**
   *
   */
  height: number;

  /**
   * The list of inks in this document.
   */
  inkList: Ink[];

  /**
   * The Kinsoku set.
   */
  kinsokuSet: string[];

  /**
   * The layers in this document.
   */
  layers: Layers;

  /**
   * The text frame items in this story.
   */
  legacyTextItems: LegacyTextItems;

  /**
   * The mesh art items in this document.
   */
  meshItems: MeshItems;

  /**
   * The Mojikumi set.
   */
  mojikumiSet: string[];

  /**
   * The document's name.
   */
  name: string;

  /**
   * The non-native art items in this document.
   */
  nonNativeItems: NonNativeItems;

  /**
   *
   */
  outputResolution: number;

  /**
   * All the artwork in this document.
   */
  pageItems: PageItems;

  /**
   *
   */
  pageOrigin: Point;

  /**
   * The list of paragraph styles in this document.
   */
  paragraphStyles: ParagraphStyles;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Path specification for the document.
   */
  path: File;

  /**
   * The path artwork in this document.
   */
  pathItems: PathItems;

  /**
   * The patterns available in this document.
   */
  patterns: Patterns;

  /**
   * The placed art items in this document.
   */
  placedItems: PlacedItems;

  /**
   * The plugin art items in this document.
   */
  pluginItems: PluginItems;

  /**
   *
   */
  printTiles: boolean;

  /**
   * The document raster effects settings.
   */
  rasterEffectSettings: RasterEffectOptions;

  /**
   * The raster art items in this document.
   */
  rasterItems: RasterItems;

  /**
   *
   */
  rulerOrigin: Point;

  /**
   *
   */
  rulerUnits: RulerUnits;

  /**
   * Has the document been saved?
   */
  saved: boolean;

  /**
   * The selection within the document.
   */
  selection: any;

  /**
   *
   */
  showPlacedImages: boolean;

  /**
   *
   */
  splitLongPaths: boolean;

  /**
   * The custom spot colors available in this document.
   */
  spots: Spots;

  /**
   * Is the file a stationery file?
   */
  stationery: boolean;

  /**
   * The story items in this document.
   */
  stories: Stories;

  /**
   * The Swatch Groups in this document.
   */
  swatchGroups: SwatchGroups;

  /**
   * The swatches in this document.
   */
  swatches: Swatches;

  /**
   * The symbol items in this document.
   */
  symbolItems: SymbolItems;

  /**
   * The symbols defined in this document.
   */
  symbols: Symbols;

  /**
   * The tags in this document.
   */
  tags: Tags;

  /**
   * The text frame items in this document.
   */
  textFrames: TextFrameItems;

  /**
   *
   */
  tileFullPages: boolean;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   *
   */
  useDefaultScreen: boolean;

  /**
   * The variables defined in this document.
   */
  variables: Variables;

  /**
   * The locked variables.
   */
  variablesLocked: boolean;

  /**
   * The views in this document.
   */
  views: Views;

  /**
   * The visible bounds of the illustration including stroke width.
   */
  visibleBounds: [Number, Number, Number, Number];

  /**
   *
   */
  width: number;

  /**
   * Activate the first window associated with the document.
   */
  activate(): void;

  /**
   * Close the specified document(s)
   * @param saving Specifies whether changes should be saved before closing.
   */
  close(saving?: SaveOptions): void;

  /**
   * Converts the coordinate system of a single point from one coordinate system to another.
   * @param coordinate The Coordinate to convert.
   * @param source The source coordinate system.
   * @param destination The destination coordinate system.
   */
  convertCoordinate(
    coordinate: Point,
    source: CoordinateSystem,
    destination: CoordinateSystem
  ): Point;

  /**
   * Export the specified document(s)
   * @param exportFile The file to export the document to.
   * @param exportFormat The file type to export the document as.
   * @param options Options for the file type specified.
   */
  exportFile(exportFile: File, exportFormat: ExportType, options?: any): void;

  /**
   * Export the specified document/asset(s)/artboard(s)
   * @param exportFolder The folder where the exported documents/assets/artboards are saved.
   * @param exportFormat The file type in which the document is exported.
   * @param options Options for the file type specified.
   * @param itemToExport What to export.
   * @param fileNamePrefix String prepended to each file name.
   */
  exportForScreens(
    exportFolder: File,
    exportFormat: ExportForScreensType,
    options?: any,
    itemToExport?: ExportForScreensItemToExport,
    fileNamePrefix?: string
  ): void;

  /**
   * Save all PDF presets to a file.
   * @param file File to export to.
   */
  exportPDFPreset(file: File): void;

  /**
   * Saves all perspective grid presets to a file.
   * @param file File to export to.
   */
  exportPerspectiveGridPreset(file: File): void;

  /**
   * Export the current print setting to the preset file.
   * @param file File to export to.
   */
  exportPrintPreset(file: File): void;

  /**
   * Export the selection as Ai file.
   * @param exportFile The file to export the selection to.
   */
  exportSelectionAsAi(exportFile: File): void;

  /**
   * Export the selection as PNG file.
   * @param exportFile The file to export the selection to.
   * @param options Options for the PNG24 export.
   */
  exportSelectionAsPNG(exportFile: File, options?: any): void;

  /**
   * Save datasets into an XML library. The datasets contain variables and their associated dynamic data.
   * @param file File spec to export to.
   */
  exportVariables(file: File): void;

  /**
   * Change the artboard to selected art bounds.
   * @param index The index of the artboard to update.
   */
  fitArtboardToSelectedArt(index?: number): boolean;

  /**
   * Gets the active plane of the active perspective grid of the document.
   */
  getPerspectiveActivePlane(): PerspectiveGridPlaneType;

  /**
   * Hides the current active perspective grid for the document, if there is visible perspective grid.
   */
  hidePerspectiveGrid(): boolean;

  /**
   * Capture the artwork content inside the clip bound as raster image, and write out the captured image data into the target image file.
   * @param imageFile The file to which the captured image should be written.
   * @param clipBounds The rectangular region of the artwork for image capture. If the parameter is omitted, the entire artwork bound is captured.
   * @param options Describes the image capture options.
   */
  imageCapture(
    imageFile: File,
    clipBounds?: Rect,
    options?: ImageCaptureOptions
  ): void;

  /**
   * Load the character styles from the Illustrator file.
   * @param fileSpec File spec to import from.
   */
  importCharacterStyles(fileSpec: File): void;

  /**
   * Import the file into current Ai document.
   * @param importFile The file to import in the current document.
   * @param isLinked Is AssetLiveLinked.
   * @param libraryName For Internal Use.
   * @param itemName For Internal Use.
   * @param elementRef For Internal Use.
   * @param modifiedTime For Internal Use.
   * @param creationTime For Internal Use.
   * @param adobeStockId For Internal Use.
   * @param adobeStockLicense For Internal Use.
   * @param shouldLoadToPlaceGun Whether or not to load the imported file to placegun.
   */
  importFile(
    importFile: File,
    isLinked: boolean,
    libraryName?: string,
    itemName?: string,
    elementRef?: string,
    modifiedTime?: number,
    creationTime?: number,
    adobeStockId?: string,
    adobeStockLicense?: string,
    shouldLoadToPlaceGun?: boolean
  ): void;

  /**
   * Load all PDF presets from a file.
   * @param fileSpec File to import from.
   * @param replacingPreset Should existing editable presets be replaced?
   */
  importPDFPreset(fileSpec: File, replacingPreset?: boolean): void;

  /**
   * Load the paragraph styles from the Illustrator file.
   * @param fileSpec File spec to import from.
   */
  importParagraphStyles(fileSpec: File): void;

  /**
   * Loads mentioned perspective grid preset, if preset name is specified, else loads all(if no preset name is specified) presets, from the specified file.
   * @param fileSpec File to import from.
   * @param perspectivePreset Name of perspective grid preset.
   */
  importPerspectiveGridPreset(fileSpec: File, perspectivePreset?: string): void;

  /**
   * Apply the named print preset from the file to the current print setting.
   * @param printPreset The name of a print preset to import.
   * @param fileSpec File to import from.
   */
  importPrintPreset(printPreset: string, fileSpec: File): void;

  /**
   * Import a library containing datasets, variables and their associated dynamic data. Importing variables will overwrite existing variables and datasets.
   * @param fileSpec File spec to import from.
   */
  importVariables(fileSpec: File): void;

  /**
   * Print the document.
   * @param options Print options.
   */
  print(options?: PrintOptions): void;

  /**
   * Process a gesture based on input points.
   * @param gesturePointsFile File Path containing points constituting the gesture.
   */
  processGesture(gesturePointsFile: string): void;

  /**
   * Rasterize the source art(s) within the specified clip bounds. The source art(s) are disposed as a result of the rasterization.
   * @param sourceArt The page item(s) to be rasterized.
   * @param clipBounds The rectangular region of the artwork for the rasterization. If the parameter is omitted, the bounds of the source art(s) is used instead.
   * @param options Describes the rasterization options.
   */
  rasterize(
    sourceArt: any,
    clipBounds?: Rect,
    options?: RasterizeOptions
  ): PageItem;

  /**
   * Rearrange Artboards in the document.
   * @param artboardLayout Layout of artboards for rearrangement.
   * @param artboardRowsOrCols Number of rows (for rows layout) OR column(for column layouts)of artboards.Range is 1 to (docNumArtboards - 1) or 1 for single row or column layouts.
   * @param artboardSpacing Spacing between artboards.
   * @param artboardMoveArtwork Whether to move artwork with artboards.
   */
  rearrangeArtboards(
    artboardLayout?: DocumentArtboardLayout,
    artboardRowsOrCols?: number,
    artboardSpacing?: number,
    artboardMoveArtwork?: boolean
  ): boolean;

  /**
   * Save the document.
   */
  save(): void;

  /**
   * Save the document with specific save options.
   * @param saveIn The file to save the document in.
   * @param options Options for the file type specified.
   */
  saveAs(saveIn: File, options?: any): void;

  /**
   * Select art objects in active artboard.
   */
  selectObjectsOnActiveArtboard(): boolean;

  /**
   * Selects a predefined preset to define grid for the current document.
   * @param perspectivePreset Name of perspective grid preset.
   */
  selectPerspectivePreset(perspectivePreset: string): boolean;

  /**
   * Sets the active perspective plane for the active grid of the document.
   * @param perspectiveGridPlane Type of perspective grid plane.
   */
  setPerspectiveActivePlane(
    perspectiveGridPlane: PerspectiveGridPlaneType
  ): boolean;

  /**
   * Shows the current active perspective grid for the document, if no active perspective grid then shows the default perspective grid for the document.
   */
  showPerspectiveGrid(): boolean;

  /**
   * Capture the current document window to the target TIFF image file.
   * @param imageFile The TIFF file to which the captured image should be written.
   * @param windowSize The size to make the window before capture.
   */
  windowCapture(imageFile: File, windowSize: Point): void;
}

/**
 * A layer.
 */
declare class Layer {
  /**
   * The absolute drawing order of the layer.
   */
  absoluteZOrderPosition: number;

  /**
   * Is the artwork used to create a knockout.
   */
  artworkKnockout: KnockoutState;

  /**
   * The mode used when compositing an object.
   */
  blendingMode: BlendModes;

  /**
   * Color used when outlining artwork in this layer.
   */
  color: RGBColor;

  /**
   * The compound path artwork in this layer.
   */
  compoundPathItems: CompoundPathItems;

  /**
   * Is rendered as dimmed in this layer?
   */
  dimPlacedImages: boolean;

  /**
   * The graph art items in this layer.
   */
  graphItems: GraphItems;

  /**
   * The group items in this layer.
   */
  groupItems: GroupItems;

  /**
   * Is any artwork in this layer selected? Setting this property to false deselects all artwork in the layer.
   */
  hasSelectedArtwork: boolean;

  /**
   * Is the artwork isolated.
   */
  isIsolated: boolean;

  /**
   * Nested layers.
   */
  layers: Layers;

  /**
   * The text frame items in this story.
   */
  legacyTextItems: LegacyTextItems;

  /**
   * Is the layer editable?
   */
  locked: boolean;

  /**
   * The mesh art items in this layer.
   */
  meshItems: MeshItems;

  /**
   * The layer's name.
   */
  name: string;

  /**
   * The non-native art items in this layer.
   */
  nonNativeItems: NonNativeItems;

  /**
   * The layer's opacity (between 0.0 and 100.0)
   */
  opacity: number;

  /**
   * All the artwork in this layer.
   */
  pageItems: PageItems;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The path artwork in this layer.
   */
  pathItems: PathItems;

  /**
   * The placed art items in this layer.
   */
  placedItems: PlacedItems;

  /**
   * The plugin art items in this layer.
   */
  pluginItems: PluginItems;

  /**
   * Is the layer rendered in preview mode?
   */
  preview: boolean;

  /**
   * Is the layer printable?
   */
  printable: boolean;

  /**
   * The raster art items in this layer.
   */
  rasterItems: RasterItems;

  /**
   * Is the layer sliced (default: false)
   */
  sliced: boolean;

  /**
   * The symbol items in this layer.
   */
  symbolItems: SymbolItems;

  /**
   * The text frame items in this layer.
   */
  textFrames: TextFrameItems;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Is the layer visible?
   */
  visible: boolean;

  /**
   * The drawing order of the layer.
   */
  zOrderPosition: number;

  /**
   * Move the object.
   */
  move(relativeObject: object, insertionLocation: ElementPlacement): Layer;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;

  /**
   * Arranges the layer relative to other layers.
   * @param zOrderCmd How to arrange the layer.
   */
  zOrder(zOrderCmd: ZOrderMethod): void;
}

/**
 * A view.
 */
declare class View {
  /**
   * The bounding rectangle of this view.
   */
  bounds: Rect;

  /**
   * The center point of this view.
   */
  centerPoint: Point;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The mode of display.
   */
  screenMode: ScreenMode;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * The zoom factor of this view.
   */
  zoom: number;
}

/**
 * A gradient.
 */
declare class Gradient {
  /**
   * The stops in this gradient.
   */
  gradientStops: GradientStops;

  /**
   * The gradient's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The gradient type.
   */
  type: GradientType;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A gradient stop.
 */
declare class GradientStop {
  /**
   * The color linked to this gradient stop.
   */
  color: Color;

  /**
   * Midpoint key value in percent.
   */
  midPoint: number;

  /**
   * The opacity (between 0.0 and 100.0) value for the gradient stop.
   */
  opacity: number;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Location of color in the blend (in percent)
   */
  rampPoint: number;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * Preferences for Illustrator.
 */
declare class Preferences {
  /**
   * Options to use when opening or placing a AutoCAD file.
   */
  AutoCADFileOptions: OpenOptionsAutoCAD;

  /**
   * Options to use when opening or placing a PDF file.
   */
  PDFFileOptions: OpenOptionsPDF;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Options to use when opening or placing a Photoshop file.
   */
  photoshopFileOptions: OpenOptionsPhotoshop;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Retrieve the value of the application preference key as boolean.
   * @param key The preference key.
   */
  getBooleanPreference(key: string): boolean;

  /**
   * Retrieve the value of the application preference key as integer.
   * @param key The preference key.
   */
  getIntegerPreference(key: string): number;

  /**
   * Retrieve the value of the application preference key as real number.
   * @param key The preference key.
   */
  getRealPreference(key: string): number;

  /**
   * Retrieve the value of the application preference key as string type.
   * @param key The preference key.
   */
  getStringPreference(key: string): string;

  /**
   * Checks whether the application preference key exists.
   * @param key The preference key.
   */
  preferenceExists(key: string): boolean;

  /**
   * Delete the application preference key.
   * @param key The preference key.
   */
  removePreference(key: string): void;

  /**
   * Set the value of the application preference key as boolean.
   * @param key The preference key.
   * @param value The boolean value of the preference key.
   */
  setBooleanPreference(key: string, value: boolean): void;

  /**
   * Set the value of the application preference key as integer.
   * @param key The preference key.
   * @param value The boolean value of the preference key.
   */
  setIntegerPreference(key: string, value: number): void;

  /**
   * Set the value of the application preference key as real number.
   * @param key The preference key.
   * @param value The real value of the preference key.
   */
  setRealPreference(key: string, value: number): void;

  /**
   * Set the value of the application preference key as string type.
   * @param key The preference key.
   * @param value The string value of the preference key.
   */
  setStringPreference(key: string, value: string): void;
}

/**
 * A custom color.
 */
declare class Spot {
  /**
   *
   */
  color: Color;

  /**
   * Type of the custom color.
   */
  colorType: ColorModel;

  /**
   * The custom color's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Kind of the spot color (i.e. RGB, CMYK or LAB), it is the name of color kind contained in spot.
   */
  spotKind: SpotColorKind;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Gets the internal color of a spot.
   */
  getInternalColor(): number[];

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * Dynamic object used to create data-driven graphics.
 */
declare class Variable {
  /**
   * The variable's type.
   */
  kind: VariableKind;

  /**
   * The name of this variable.
   */
  name: string;

  /**
   * All the artwork in this document.
   */
  pageItems: PageItems;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A set of variables and their associated dynamic data which will be used for dynamic publishing.
 */
declare class DataSet {
  /**
   * The name of this dataset.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Displays the dynamic data that has been captured in the dataset.
   */
  display(): void;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;

  /**
   * Re-apply the dynamic data of the active dataset to the artboard.
   */
  update(): void;
}

/**
 * A color swatch.
 */
declare class Swatch {
  /**
   * The color information of the swatch.
   */
  color: Color;

  /**
   * The swatch's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A Swatch group.
 */
declare class SwatchGroup {
  /**
   * Name of the swatch group.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Add a spot swatch to the group.
   * @param spot The spot swatch to be added to the group.
   */
  addSpot(spot: Spot): void;

  /**
   * Add a swatch to the group.
   * @param swatch The swatch to be added to the group.
   */
  addSwatch(swatch: Swatch): void;

  /**
   * Get all swatches in the swatch group.
   */
  getAllSwatches(): Swatch[];

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A pattern.
 */
declare class Pattern {
  /**
   * The pattern's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A symbol.
 */
declare class Symbol {
  /**
   * The symbol's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Duplicate this object.
   */
  duplicate(
    relativeObject: object,
    insertionLocation: ElementPlacement
  ): Symbol;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A brush.
 */
declare class Brush {
  /**
   * The brush's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Apply a brush or art style to object(s)
   * @param artItem The page item(s) to apply to.
   */
  applyTo(artItem: any): void;
}

/**
 * An art style.
 */
declare class ArtStyle {
  /**
   * The art style's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Apply a brush or art style to object(s)
   * @param artItem The page item(s) to apply to.
   */
  applyTo(artItem: any): void;

  /**
   * Merge an art style to object(s) current style(s)
   * @param artItem The page item(s) to merge to.
   */
  mergeTo(artItem: any): void;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * An installed font.
 */
declare class TextFont {
  /**
   * The font's Axis Vector.
   */
  axisVector: number[];

  /**
   * The font's family name.
   */
  family: string;

  /**
   * The font's full name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The font's style name.
   */
  style: string;

  /**
   * The class name of the object.
   */
  typename: string;
}

/**
 * A page item object.
 */
declare class PageItem {
  /**
   * The value of the Adobe URL tag assigned to this artwork item.
   */
  URL: string;

  /**
   * The absolute drawing order of the layer.
   */
  absoluteZOrderPosition: number;

  /**
   * Is the artwork used to create a knockout.
   */
  artworkKnockout: KnockoutState;

  /**
   * The mode used when compositing an object.
   */
  blendingMode: BlendModes;

  /**
   * The bounds of the artwork including stroke width and controls.
   */
  controlBounds: [Number, Number, Number, Number];

  /**
   * Can the art item be modified.
   */
  editable: boolean;

  /**
   * The bounds of the artwork excluding stroke width.
   */
  geometricBounds: [Number, Number, Number, Number];

  /**
   * The height of the art item.
   */
  height: number;

  /**
   * Is this artwork item hidden?
   */
  hidden: boolean;

  /**
   * Is the artwork isolated.
   */
  isIsolated: boolean;

  /**
   * The layer to which this artwork belongs.
   */
  layer: Layer;

  /**
   * The left position of the art item.
   */
  left: number;

  /**
   * Is this artwork item locked?
   */
  locked: boolean;

  /**
   * The item's name.
   */
  name: string;

  /**
   * The note assigned to this artwork item.
   */
  note: string;

  /**
   * The object's opacity (between 0.0 and 100.0)
   */
  opacity: number;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Is this artwork item aligned to Pixel Grid?
   */
  pixelAligned: boolean;

  /**
   * The position of the top left corner of the art item.
   */
  position: Point;

  /**
   * Is this artwork item selected?
   */
  selected: boolean;

  /**
   * Is the art item sliced (default: false)
   */
  sliced: boolean;

  /**
   * The collection of tags associated with this page item.
   */
  tags: Tags;

  /**
   * The top position of the art item.
   */
  top: number;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * The visibility variable bound to this page item.
   */
  visibilityVariable: any;

  /**
   * The visible bounds of the artwork including stroke width.
   */
  visibleBounds: [Number, Number, Number, Number];

  /**
   * The width of the art item.
   */
  width: number;

  /**
   * Should the text frame object be wrapped inside this object?
   */
  wrapInside: boolean;

  /**
   * Use this offset when wrapping text around this object.
   */
  wrapOffset: number;

  /**
   * Wrap text frame objects around this object (text frame must be above the object)
   */
  wrapped: boolean;

  /**
   * The drawing order of the art within it's group or layer.
   */
  zOrderPosition: number;

  /**
   * Apply effect to selected artItem.
   */
  applyEffect(liveEffectXML: string): void;

  /**
   * Place art object(s)in perspective grid at spedified perspective plane and coordinate.
   * @param positionX Position towards X direction of specified or active perspective grid plane.
   * @param positionY Position towards Y direction of specified or active perspective grid plane.
   * @param perspectiveGridPlane Type of perspective grid plane.
   */
  bringInPerspective(
    positionX: number,
    positionY: number,
    perspectiveGridPlane: PerspectiveGridPlaneType
  ): void;

  /**
   * Duplicate this object.
   */
  duplicate(
    relativeObject: object,
    insertionLocation: ElementPlacement
  ): PageItem;

  /**
   * Move the object.
   */
  move(relativeObject: object, insertionLocation: ElementPlacement): PageItem;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;

  /**
   * Scale art object(s)
   * @param scaleX Horizontal scaling factor expressed as a percentage (100 = 100%)
   * @param scaleY Vertical scaling factor expressed as a percentage (100 = 100%)
   * @param changePositions Are art object positions and orientations effected?
   * @param changeFillPatterns Are the fill patterns assigned to paths to be transformed?
   * @param changeFillGradients Are the fill gradients assigned to paths to be transformed?
   * @param changeStrokePattern Are the stroke patterns assigned to paths to be transformed?
   * @param changeLineWidths The amount line widths are to be scaled (expressed as a percentage)
   * @param scaleAbout The point on the art item's bounding box to which the scale is applied.
   */
  resize(
    scaleX: number,
    scaleY: number,
    changePositions?: boolean,
    changeFillPatterns?: boolean,
    changeFillGradients?: boolean,
    changeStrokePattern?: boolean,
    changeLineWidths?: number,
    scaleAbout?: Transformation
  ): void;

  /**
   * Rotate art object(s)
   * @param angle Angle of rotation (in degrees). Rotation is performed counter-clock wise.
   * @param changePositions Are art object positions and orientations effected?
   * @param changeFillPatterns Are the fill patterns assigned to paths to be transformed?
   * @param changeFillGradients Are the fill gradients assigned to paths to be transformed?
   * @param changeStrokePattern Are the stroke patterns assigned to paths to be transformed?
   * @param rotateAbout The point on the art item's bounding box to which the rotation is applied.
   */
  rotate(
    angle: number,
    changePositions?: boolean,
    changeFillPatterns?: boolean,
    changeFillGradients?: boolean,
    changeStrokePattern?: boolean,
    rotateAbout?: Transformation
  ): void;

  /**
   * Sends the script message to the required plugin.
   * @param pluginName Plugin to which message needs to be sent.
   * @param messageSelector Functionality that is to be executed.
   * @param inputString Pass any data encoded in a string.
   */
  sendScriptMessage(
    pluginName: string,
    messageSelector: string,
    inputString: string
  ): string;

  /**
   * Transform art object(s) using a transformation matrix.
   * @param transformationMatrix The transformation matrix to be applied to the objects.
   * @param changePositions Are art object positions and orientations effected?
   * @param changeFillPatterns Are the fill patterns assigned to paths to be transformed?
   * @param changeFillGradients Are the fill gradients assigned to paths to be transformed?
   * @param changeStrokePattern Are the stroke patterns assigned to paths to be transformed?
   * @param changeLineWidths The amount line widths are to be scaled (expressed as a percentage)
   * @param transformAbout The point on the art item's bounding box to which scale and rotation operations apply.
   */
  transform(
    transformationMatrix: Matrix,
    changePositions?: boolean,
    changeFillPatterns?: boolean,
    changeFillGradients?: boolean,
    changeStrokePattern?: boolean,
    changeLineWidths?: number,
    transformAbout?: Transformation
  ): void;

  /**
   * Reposition art object(s)
   * @param deltaX Horizontal transformation.
   * @param deltaY Vertical transformation.
   * @param transformObjects Are art object positions and orientations affected?
   * @param transformFillPatterns Are the fill patterns assigned to paths to be transformed?
   * @param transformFillGradients Are the fill gradients assigned to paths to be transformed?
   * @param transformStrokePattern Are the stroke patterns assigned to paths to be transformed?
   */
  translate(
    deltaX?: number,
    deltaY?: number,
    transformObjects?: boolean,
    transformFillPatterns?: boolean,
    transformFillGradients?: boolean,
    transformStrokePattern?: boolean
  ): void;

  /**
   * Arranges the art relative to other art in the group or layer.
   * @param zOrderCmd How to arrange the art.
   */
  zOrder(zOrderCmd: ZOrderMethod): void;
}

/**
 * Compound path artwork item.
 */
declare class CompoundPathItem extends PageItem {
  /**
   * The path artwork in this compound path.
   */
  pathItems: PathItems;
}

/**
 * A tag associated with a piece of artwork.
 */
declare class Tag {
  /**
   * The tag's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * The data stored in this tag.
   */
  value: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * An artwork path item.
 */
declare class PathItem extends PageItem {
  /**
   * The area of this path in square points.
   */
  area: number;

  /**
   * Should this be used as a clipping path?
   */
  clipping: boolean;

  /**
   * Is this path closed?
   */
  closed: boolean;

  /**
   * Should the even-odd rule be used to determine insideness?
   */
  evenodd: boolean;

  /**
   * Fill color.
   */
  fillColor: Color;

  /**
   * Will art beneath a filled object be overprinted?
   */
  fillOverprint: boolean;

  /**
   * Should the path be filled?
   */
  filled: boolean;

  /**
   * Is this path a guide object?
   */
  guides: boolean;

  /**
   * The length of this path in points.
   */
  length: number;

  /**
   *
   */
  pathPoints: PathPoints;

  /**
   * The polarity the path.
   */
  polarity: PolarityValues;

  /**
   * The resolution of the path.
   */
  resolution: number;

  /**
   * All the selected points in the path.
   */
  selectedPathPoints: any[];

  /**
   * Type of line capping.
   */
  strokeCap: StrokeCap;

  /**
   * Stroke color.
   */
  strokeColor: Color;

  /**
   * The default distance into the dash pattern at which the pattern should be started.
   */
  strokeDashOffset: number;

  /**
   * Dash lengths (set to {} for a solid line)
   */
  strokeDashes: number[];

  /**
   * Type of joints.
   */
  strokeJoin: StrokeJoin;

  /**
   * Whether a join is mitered (pointed) or beveled (squared-off)
   */
  strokeMiterLimit: number;

  /**
   * Will art beneath a stroked object be overprinted?
   */
  strokeOverprint: boolean;

  /**
   * Width of stroke.
   */
  strokeWidth: number;

  /**
   * Should the path be stroked?
   */
  stroked: boolean;

  /**
   * Set the path using the provided array of path point (x, y) coordinate pairs.
   * @param pathPoints Array of (x, y) coordinate pairs for the path points.
   */
  setEntirePath(pathPoints: any[]): void;
}

/**
 * A point on a path.
 */
declare class PathPoint {
  /**
   * The position (coordinates) of the anchor point.
   */
  anchor: Point;

  /**
   * Location of the left direction point (in position)
   */
  leftDirection: Point;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The type of point: smooth/corner.
   */
  pointType: PointType;

  /**
   * Location of the right direction point (out position)
   */
  rightDirection: Point;

  /**
   * The path point selected state.
   */
  selected: PathPointSelection;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * Raster artwork item.
 */
declare class RasterItem extends PageItem {
  /**
   * The number of bits per channel.
   */
  bitsPerChannel: number;

  /**
   * Dimensions of raster art object regardless of transformations.
   */
  boundingBox: Rect;

  /**
   * The number of image channels.
   */
  channels: number;

  /**
   * List of colorant names.
   */
  colorants: string[];

  /**
   * Is the raster art a colorized grayscale image?
   */
  colorizedGrayscale: boolean;

  /**
   * The content variable bound to this raster art object.
   */
  contentVariable: any;

  /**
   * Is the raster art embedded within the illustration?
   */
  embedded: boolean;

  /**
   * The file containing the raster artwork.
   */
  file: File;

  /**
   * The color space of the raster image.
   */
  imageColorSpace: ImageColorSpace;

  /**
   * The transformation matrix of the raster art object.
   */
  matrix: Matrix;

  /**
   * Is the raster art overprinting?
   */
  overprint: boolean;

  /**
   * Status of the linked image.
   */
  status: RasterLinkState;

  /**
   * Is the raster art transparent?
   */
  transparent: boolean;

  /**
   * Colorize the RasterItem with a CMYK or RGB Color.
   * @param rasterColor The color to use for coloring the TIFF image.
   */
  colorize(rasterColor: Color): void;

  /**
   * Trace this raster object using default options. Reorders this raster to the source art.
   */
  trace(): PluginItem;
}

/**
 * Placed artwork item.
 */
declare class PlacedItem extends PageItem {
  /**
   * Dimensions of placed art object, regardless of transformations.
   */
  boundingBox: Rect;

  /**
   * The content variable bound to this placed art object.
   */
  contentVariable: any;

  /**
   * The file containing the placed artwork.
   */
  file: File;

  /**
   * The transformation matrix of the placed art object.
   */
  matrix: Matrix;

  /**
   * Embed the placed art within the illustration.
   */
  embed(): void;

  /**
   * Relink the placed art with supplied art from file.
   * @param fileSpec File spec to relink from.
   */
  relink(fileSpec: File): void;

  /**
   * Trace this raster object using default options. Reorders this placed to the source art.
   */
  trace(): PluginItem;
}

/**
 * Embedded artwork item.
 */
declare class EmbedItem extends PageItem {
  /**
   * The file containing the placed artwork.
   */
  file: File;
}

/**
 * Graph artwork item.
 */
declare class GraphItem extends PageItem {
  /**
   * The content variable bound to this graph.
   */
  contentVariable: any;
}

/**
 * Non-native artwork item.
 */
declare class NonNativeItem extends PageItem {}

/**
 * Mesh artwork item.
 */
declare class MeshItem extends PageItem {}

/**
 * Plugin artwork item.
 */
declare class PluginItem extends PageItem {
  /**
   * Is the plugin group a tracing?
   */
  isTracing: boolean;

  /**
   * The tracing object associated with this plugin item.
   */
  tracing: TracingObject;
}

/**
 * An artwork group item.
 */
declare class GroupItem extends PageItem {
  /**
   * Are the group elements clipped to the clipping path?
   */
  clipped: boolean;

  /**
   * The compound path artwork in this group.
   */
  compoundPathItems: CompoundPathItems;

  /**
   * The graph art items in this group.
   */
  graphItems: GraphItems;

  /**
   * The group items in this group.
   */
  groupItems: GroupItems;

  /**
   * The text frame items in this story.
   */
  legacyTextItems: LegacyTextItems;

  /**
   * The mesh art items in this group.
   */
  meshItems: MeshItems;

  /**
   * The non-native art items in this group.
   */
  nonNativeItems: NonNativeItems;

  /**
   * All the artwork in this group.
   */
  pageItems: PageItems;

  /**
   * The path artwork in this group.
   */
  pathItems: PathItems;

  /**
   * The placed art items in this group.
   */
  placedItems: PlacedItems;

  /**
   * The plugin art items in this group.
   */
  pluginItems: PluginItems;

  /**
   * The raster art items in this group.
   */
  rasterItems: RasterItems;

  /**
   * The symbol items in this group.
   */
  symbolItems: SymbolItems;

  /**
   * The text frame items in this group.
   */
  textFrames: TextFrameItems;
}

/**
 * An instance of a Symbol.
 */
declare class SymbolItem extends PageItem {
  /**
   * The symbol that was used to create this symbol item.
   */
  symbol: Symbol;

  /**
   * Break link to the symbol.
   */
  breakLink(): void;
}

/**
 * A text path item.
 */
declare class TextPath {
  /**
   * The area of this path in square points.
   */
  area: number;

  /**
   * The mode used when compositing an object.
   */
  blendingMode: BlendModes;

  /**
   * Should this be used as a clipping path?
   */
  clipping: boolean;

  /**
   * Is this path closed?
   */
  closed: boolean;

  /**
   * Can the text path be modified.
   */
  editable: boolean;

  /**
   * Should the even-odd rule be used to determine insideness?
   */
  evenodd: boolean;

  /**
   * Fill color.
   */
  fillColor: Color;

  /**
   * Will art beneath a filled object be overprinted?
   */
  fillOverprint: boolean;

  /**
   * Should the path be filled?
   */
  filled: boolean;

  /**
   * Is this path a guide object?
   */
  guides: boolean;

  /**
   * The height of the text path.
   */
  height: number;

  /**
   * The left position of the text path.
   */
  left: number;

  /**
   * Note assigned to the path.
   */
  note: string;

  /**
   * The object's opacity (between 0.0 and 100.0)
   */
  opacity: number;

  /**
   * The object's container.
   */
  parent: object;

  /**
   *
   */
  pathPoints: PathPoints;

  /**
   * The polarity the path.
   */
  polarity: PolarityValues;

  /**
   * The position of the top left corner of the text path.
   */
  position: Point;

  /**
   * The resolution of the path.
   */
  resolution: number;

  /**
   * All the selected points in the path.
   */
  selectedPathPoints: any[];

  /**
   * Type of line capping.
   */
  strokeCap: StrokeCap;

  /**
   * Stroke color.
   */
  strokeColor: Color;

  /**
   * The default distance into the dash pattern at which the pattern should be started.
   */
  strokeDashOffset: number;

  /**
   * Dash lengths (set to {} for a solid line)
   */
  strokeDashes: number[];

  /**
   * Type of joints.
   */
  strokeJoin: StrokeJoin;

  /**
   * Whether a join is mitered (pointed) or beveled (squared-off)
   */
  strokeMiterLimit: number;

  /**
   * Will art beneath a stroked object be overprinted?
   */
  strokeOverprint: boolean;

  /**
   * Width of stroke.
   */
  strokeWidth: number;

  /**
   * Should the path be stroked?
   */
  stroked: boolean;

  /**
   * The top position of the text path.
   */
  top: number;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * The width of the text path.
   */
  width: number;

  /**
   * Set the path using the provided array of anchor points.
   * @param pathPoints Array of anchor values for the path points.
   */
  setEntirePath(pathPoints: any[]): void;
}

/**
 * A contiguous block of text.
 */
declare class Story {
  /**
   * All the characters in this text range.
   */
  characters: Characters;

  /**
   * All the insertion points in this text range.
   */
  insertionPoints: InsertionPoints;

  /**
   * The number of characters in the story.
   */
  length: number;

  /**
   * All the lines in this text range.
   */
  lines: Lines;

  /**
   * All the paragraphs in this text range.
   */
  paragraphs: Paragraphs;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The text frame items in this story.
   */
  textFrames: TextFrameItems;

  /**
   * The text range of the story.
   */
  textRange: TextRange;

  /**
   * All the text in this text range.
   */
  textRanges: TextRanges;

  /**
   * The selected text (ranges) in the story.
   */
  textSelection: TextRange[];

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * All the words in this text range.
   */
  words: Words;
}

/**
 * Text frame item.
 */
declare class TextFrameItem extends PageItem {
  /**
   * The position of the anchor point (start of base line for point text)
   */
  anchor: Point;

  /**
   * The type of a text anti-aliasing on text frame item.
   */
  antialias: TextAntialias;

  /**
   * All the characters in this text range.
   */
  characters: Characters;

  /**
   * The column count in the text frame (area text only)
   */
  columnCount: number;

  /**
   * The column gutter in the text frame (area text only)
   */
  columnGutter: number;

  /**
   * The content variable bound to this text art item.
   */
  contentVariable: any;

  /**
   * The text contents of this text frame.
   */
  contents: string;

  /**
   * The end position of text along a path, as a value relative to the path's segments (path text only)
   */
  endTValue: number;

  /**
   * The first baseline offset type for text frame item (for Area Text only)
   */
  firstBaseline: FirstBaselineType;

  /**
   * The first baseline offset minimum value for text frame item (for Area Text only)
   */
  firstBaselineMin: number;

  /**
   * Flow text between linked frame horizontally first. (area text only)
   */
  flowLinksHorizontally: boolean;

  /**
   * All the insertion points in this text range.
   */
  insertionPoints: InsertionPoints;

  /**
   * The type of a text frame item.
   */
  kind: TextType;

  /**
   * All the lines in this text range.
   */
  lines: Lines;

  /**
   * The transformation matrix of the text frame object.
   */
  matrix: Matrix;

  /**
   * The linked text frame following this one.
   */
  nextFrame: TextFrameItem;

  /**
   * Is the optical alignment active?
   */
  opticalAlignment: boolean;

  /**
   * The orientation of the text in the frame.
   */
  orientation: TextOrientation;

  /**
   * All the paragraphs in this text range.
   */
  paragraphs: Paragraphs;

  /**
   * The linked text frame preceding this one.
   */
  previousFrame: TextFrameItem;

  /**
   * The row count in the text frame (area text only)
   */
  rowCount: number;

  /**
   * The row gutter in the text frame (area text only)
   */
  rowGutter: number;

  /**
   * The amount of spacing (path text only)
   */
  spacing: number;

  /**
   * The start position of text along a path, as a value relative to the path's segments (path text only)
   */
  startTValue: number;

  /**
   * The story of the text frame.
   */
  story: Story;

  /**
   * The path for the text frame (area and path text)
   */
  textPath: TextPath;

  /**
   * The text range of the text frame.
   */
  textRange: TextRange;

  /**
   * All the text in this text range.
   */
  textRanges: TextRanges;

  /**
   * The selected text (ranges) in the story.
   */
  textSelection: TextRange[];

  /**
   * All the words in this text range.
   */
  words: Words;

  /**
   * Convert Area Type Text Object To Point Type Object.
   */
  convertAreaObjectToPointObject(): TextFrameItem;

  /**
   * Convert Point Type Text Object To Area Type Object.
   */
  convertPointObjectToAreaObject(): TextFrameItem;

  /**
   * Convert text item to path items.
   */
  createOutline(): GroupItem;

  /**
   * Generates the thumbnail with the properties of first character in the text frame.
   * @param textString The text string which is to be used in the thumbnail generation.
   * @param fontSize The size in points of the text string.
   * @param textColor The color of the text string.
   * @param destinationPath The location at which the thumbnail is to be stored.
   */
  generateThumbnailWithTextFrameProperties(
    textString: string,
    fontSize: number,
    textColor: Color,
    destinationPath: File
  ): void;
}

/**
 * Unconverted legacy text items from documents in pre-version 11 formats.
 */
declare class LegacyTextItem extends PageItem {
  /**
   * Has the legacy text item been updated to a native text frame item?
   */
  converted: boolean;

  /**
   * Create a native text frame from a legacy text item. The original legacy text item is deleted.
   */
  convertToNative(): GroupItem;
}

/**
 * A range of characters from a text item.
 */
declare class TextRange {
  /**
   * The character properties for the text range.
   */
  characterAttributes: CharacterAttributes;

  /**
   * Offset of the first character of the range from the beginning of the story, in characters.
   */
  characterOffset: number;

  /**
   * List of referenced character styles in the text range.
   */
  characterStyles: CharacterStyles;

  /**
   * All the characters in this text range.
   */
  characters: Characters;

  /**
   * The text string.
   */
  contents: string;

  /**
   * End index of the text range.
   */
  end: number;

  /**
   * All the insertion points in this text range.
   */
  insertionPoints: InsertionPoints;

  /**
   * Controls the spacing between two characters (in milli-ems)
   */
  kerning: number;

  /**
   * Length of text range.
   */
  length: number;

  /**
   * All the lines in this text range.
   */
  lines: Lines;

  /**
   * The paragraph properties for the text range.
   */
  paragraphAttributes: ParagraphAttributes;

  /**
   * List of referenced paragraph styles in the text range.
   */
  paragraphStyles: ParagraphStyles;

  /**
   * All the paragraphs in this text range.
   */
  paragraphs: Paragraphs;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Start index of the text range.
   */
  start: number;

  /**
   * The story of the text range.
   */
  story: Story;

  /**
   * All the text in this text range.
   */
  textRanges: TextRanges;

  /**
   * The selected text (ranges) in the text range.
   */
  textSelection: TextRange[];

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * All the words in this text range.
   */
  words: Words;

  /**
   * Change the capitalization of text.
   * @param type The type of case.
   */
  changeCaseTo(type: CaseChangeType): void;

  /**
   * Deselect the text range.
   */
  deSelect(): void;

  /**
   * Duplicate this object.
   */
  duplicate(
    relativeObject: object,
    insertionLocation: ElementPlacement
  ): TextRange;

  /**
   * Get the length of the first paragraph.
   */
  getParagraphLength(): number;

  /**
   * Get the length of the first text run.
   */
  getTextRunLength(): number;

  /**
   * Move the object.
   */
  move(relativeObject: object, insertionLocation: ElementPlacement): TextRange;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;

  /**
   * Select the text range.
   * @param addToDocument Whether to add the text range to the document text selection.
   */
  select(addToDocument?: boolean): void;
}

/**
 * A location between characters, used to insert new text objects.
 */
declare class InsertionPoint {
  /**
   * All the characters in this text range.
   */
  characters: Characters;

  /**
   * All the lines in this text range.
   */
  lines: Lines;

  /**
   * All the paragraphs in this text range.
   */
  paragraphs: Paragraphs;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The story of the text range.
   */
  story: Story;

  /**
   * All the text in this text range.
   */
  textRanges: TextRanges;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * All the words in this text range.
   */
  words: Words;
}

/**
 * A named style that remembers character attributes.
 */
declare class CharacterStyle {
  /**
   * The character properties for the text range.
   */
  characterAttributes: CharacterAttributes;

  /**
   * The character style's name.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Adds an element.
   */
  add(): CharacterStyle;

  /**
   * Apply the character style to text object(s)
   * @param textItem The text object(s) to apply the style to.
   * @param clearingOverrides Whether to clear any text attributes before apply the style.
   */
  applyTo(textItem: any, clearingOverrides?: boolean): void;

  /**
   * Remove all the attributes from this character style.
   */
  clear(): void;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A named style that remembers paragraph attributes.
 */
declare class ParagraphStyle {
  /**
   * The character properties for the text range.
   */
  characterAttributes: CharacterAttributes;

  /**
   * The paragraph style's name.
   */
  name: string;

  /**
   * The paragraph properties for the text range.
   */
  paragraphAttributes: ParagraphAttributes;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Adds an element.
   */
  add(): ParagraphStyle;

  /**
   * Apply the paragraph style to text object(s)
   * @param textItem The text object(s) to apply the style to.
   * @param clearingOverrides Whether to clear any text attributes before apply the style.
   */
  applyTo(textItem: any, clearingOverrides?: boolean): void;

  /**
   * Remove all the attributes from this paragraph style.
   */
  clear(): void;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * Properties of a character.
 */
declare class CharacterAttributes {
  /**
   * The percentage of space reduction around a Japanese character (100 = 100%)
   */
  Tsume: number;

  /**
   * The em amount of left aki.
   */
  akiLeft: number;

  /**
   * The em amount of right aki amount.
   */
  akiRight: number;

  /**
   * The character alignment type.
   */
  alignment: StyleRunAlignmentType;

  /**
   * The alternate glyphs form.
   */
  alternateGlyphs: AlternateGlyphsForm;

  /**
   * Whether to use automatic leading.
   */
  autoLeading: boolean;

  /**
   * The Japanese text baseline direction.
   */
  baselineDirection: BaselineDirectionType;

  /**
   * The baseline position of text.
   */
  baselinePosition: FontBaselineOption;

  /**
   * The amount of shift (in points) of the text baseline.
   */
  baselineShift: number;

  /**
   * The case of text.
   */
  capitalization: FontCapsOption;

  /**
   * Whether the OpenType connection forms should be used.
   */
  connectionForms: boolean;

  /**
   * Whether the contextual ligature should be used.
   */
  contextualLigature: boolean;

  /**
   * Diacritics positioning attribute.
   */
  diacVPos: DiacVPosType;

  /**
   * Diacritics x offset attribute.
   */
  diacXOffset: number;

  /**
   * Diacritics y offset attribute.
   */
  diacYOffset: number;

  /**
   * Digit set attribute.
   */
  digitSet: DigitSetType;

  /**
   * Direction override attribute.
   */
  dirOverride: DirOverrideType;

  /**
   * Whether the discretionary ligature should be used.
   */
  discretionaryLigature: boolean;

  /**
   * Which figure style to use in OpenType font.
   */
  figureStyle: FigureStyleType;

  /**
   * The color of the text fill.
   */
  fillColor: Color;

  /**
   * Whether the OpenType fractions should be used.
   */
  fractions: boolean;

  /**
   * Character horizontal scaling factor expressed as a percentage (100 = 100%)
   */
  horizontalScale: number;

  /**
   * Does the Japanese OpenType support italics?
   */
  italics: boolean;

  /**
   * Justification alternates attribute.
   */
  justificationAlternates: boolean;

  /**
   * Does the Japanese OpenType support kana?
   */
  kana: boolean;

  /**
   * Kashidas attribute.
   */
  kashidas: KashidasType;

  /**
   * The automatic kerning method to use.
   */
  kerningMethod: AutoKernType;

  /**
   * The language of text.
   */
  language: LanguageType;

  /**
   * The amount of space between two lines of text (in points)
   */
  leading: number;

  /**
   * Whether the ligature should be used.
   */
  ligature: boolean;

  /**
   * Whether line breaks are allowed.
   */
  noBreak: boolean;

  /**
   * The OpenType baseline position.
   */
  openTypePosition: FontOpenTypePositionOption;

  /**
   * Whether the OpenType ordinals should be used.
   */
  ordinals: boolean;

  /**
   * Whether the OpenType ornaments should be used.
   */
  ornaments: boolean;

  /**
   * Whether to overprint the fill of the text.
   */
  overprintFill: boolean;

  /**
   * Whether to overprint the stroke of the text.
   */
  overprintStroke: boolean;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Does the Japanese OpenType support proportional font?
   */
  proportionalMetrics: boolean;

  /**
   * The character rotation angle (in degrees)
   */
  rotation: number;

  /**
   * Font size in points.
   */
  size: number;

  /**
   * Whether to draw a strike through line over the text.
   */
  strikeThrough: boolean;

  /**
   * The color of the text stroke.
   */
  strokeColor: Color;

  /**
   * Line width of stroke.
   */
  strokeWeight: number;

  /**
   * Whether the OpenType stylistic alternates should be used.
   */
  stylisticAlternates: boolean;

  /**
   * Stylistic sets attribute.
   */
  stylisticSets: number;

  /**
   * Whether the OpenType swash should be used.
   */
  swash: boolean;

  /**
   * The Tate-Chu-Yoko horizontal adjustment in points.
   */
  tateChuYokoHorizontal: number;

  /**
   * The Tate-Chu-Yoko vertical adjustment in points.
   */
  tateChuYokoVertical: number;

  /**
   * The text font.
   */
  textFont: TextFont;

  /**
   * Whether the OpenType titling alternates should be used.
   */
  titling: boolean;

  /**
   * The tracking or range kerning amount in thousands of an em.
   */
  tracking: number;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Whether to underline the text.
   */
  underline: boolean;

  /**
   * Character vertical scaling factor expressed as a percentage (100 = 100%)
   */
  verticalScale: number;

  /**
   *
   */
  wariChuCharactersAfterBreak: number;

  /**
   *
   */
  wariChuCharactersBeforeBreak: number;

  /**
   * Whether WariChu is enabled.
   */
  wariChuEnabled: boolean;

  /**
   *
   */
  wariChuJustification: WariChuJustificationType;

  /**
   * The Wari-Chu line gap.
   */
  wariChuLineGap: number;

  /**
   * The number of Wari-Chu (multiple text lines fit into a space meant for one) lines.
   */
  wariChuLines: number;

  /**
   * The Wari-Chu scale.
   */
  wariChuScale: number;
}

/**
 * Properties of a paragraph.
 */
declare class ParagraphAttributes {
  /**
   * Auto leading amount (in percentage)
   */
  autoLeadingAmount: number;

  /**
   * Is BunriKinshi enabled?
   */
  bunriKinshi: boolean;

  /**
   * The Burasagari type.
   */
  burasagariType: BurasagariTypeEnum;

  /**
   * Composer engine attribute.
   */
  composerEngine: ComposerEngineType;

  /**
   * Desired glyph scaling expressed as a percentage.
   */
  desiredGlyphScaling: number;

  /**
   * Desired letter spacing expressed as a percentage.
   */
  desiredLetterSpacing: number;

  /**
   * Desired word spacing expressed as a percentage.
   */
  desiredWordSpacing: number;

  /**
   * Whether to enable every line composer (as opposed to single line composer)?
   */
  everyLineComposer: boolean;

  /**
   * First line left indent expressed in points.
   */
  firstLineIndent: number;

  /**
   * Is hyphenation enabled for the capitalized words?
   */
  hyphenateCapitalizedWords: boolean;

  /**
   * Is hyphenation enabled for the paragraph?
   */
  hyphenation: boolean;

  /**
   * Hyphenation preference scale for better spacing (0) or fewer hyphens (1)
   */
  hyphenationPreference: number;

  /**
   * Size of the hyphenation zone.
   */
  hyphenationZone: number;

  /**
   * Paragraph justification.
   */
  justification: Justification;

  /**
   * The Kashida Width attribute.
   */
  kashidaWidth: KashidaWidthType;

  /**
   * The Kinsoku Shori name.
   */
  kinsoku: string;

  /**
   * The preferred Kinsoku order.
   */
  kinsokuOrder: KinsokuOrderEnum;

  /**
   * Is KurikaeshiMojiShori enabled?
   */
  kurikaeshiMojiShori: boolean;

  /**
   * Auto leading type.
   */
  leadingType: AutoLeadingType;

  /**
   * Left indent of margin expressed in points.
   */
  leftIndent: number;

  /**
   * Maximum number of consecutive hypenated lines.
   */
  maximumConsecutiveHyphens: number;

  /**
   * Maximum glyph scaling expressed as a percentage.
   */
  maximumGlyphScaling: number;

  /**
   * Maximum letter spacing expressed as a percentage.
   */
  maximumLetterSpacing: number;

  /**
   * Maximum word spacing expressed as a percentage.
   */
  maximumWordSpacing: number;

  /**
   * Minimum number of characters after a hyphen.
   */
  minimumAfterHyphen: number;

  /**
   * Minimum number of characters before a hyphen.
   */
  minimumBeforeHyphen: number;

  /**
   * Minimum glyph scaling expressed as a percentage.
   */
  minimumGlyphScaling: number;

  /**
   * Minimum hyphenated word size.
   */
  minimumHyphenatedWordSize: number;

  /**
   * Minimum letter spacing expressed as a percentage.
   */
  minimumLetterSpacing: number;

  /**
   * Minimum word spacing expressed as a percentage.
   */
  minimumWordSpacing: number;

  /**
   * The Mojikumi name.
   */
  mojikumi: string;

  /**
   * Main writing direction attribute.
   */
  paragraphDirection: ParagraphDirectionType;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Right indent of margin expressed in points.
   */
  rightIndent: number;

  /**
   * Is Roman hanging punctuation enabled?
   */
  romanHanging: boolean;

  /**
   * Single word justification.
   */
  singleWordJustification: Justification;

  /**
   * Spacing after paragraph in points.
   */
  spaceAfter: number;

  /**
   * Spacing before paragraph in points.
   */
  spaceBefore: number;

  /**
   * Tab stop settings.
   */
  tabStops: TabStopInfo[];

  /**
   * The class name of the object.
   */
  typename: string;
}

/**
 * Options which are applied when opening or placing a Photoshop file.
 */
declare class OpenOptionsPhotoshop {
  /**
   * Should use the specified LayerComp.
   */
  layerComp: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Should hidden layers be preserved when the document is converted (default: false)
   */
  preserveHiddenLayers: boolean;

  /**
   * Should image maps be preserved when the document is converted (default: true)
   */
  preserveImageMaps: boolean;

  /**
   * Should layers be Preserve when the document is converted (default: true)
   */
  preserveLayers: boolean;

  /**
   * Should slices be preserved when the document is converted (default: true)
   */
  preserveSlices: boolean;

  /**
   * The class name of the object.
   */
  typename: string;
}

/**
 * Options which may be supplied when opening a PDF file.
 */
declare class OpenOptionsPDF {
  /**
   * What box should be used when placing a multipage document (default: PDF media box)
   */
  pDFCropToBox: PDFBoxType;

  /**
   * Range of pages when opening a multipage document [possible values: 'all', range(for example: '1,2,3-5,8')]
   */
  pageRangeToOpen: string;

  /**
   * What page should be used when opening a multipage document (default: 1)
   */
  pageToOpen: number;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Import PDF pages as links for optimal performance (default: true for PageRangeToOpen=all; false otherwise)
   */
  placeAsLinks: boolean;

  /**
   * The class name of the object.
   */
  typename: string;
}

/**
 * Options which may be supplied when opening a AutoCAD file.
 */
declare class OpenOptionsAutoCAD {
  /**
   * To center the created artwork on the artboard (default: true)
   */
  centerArtwork: boolean;

  /**
   * How to scale the AutoCAD drawing on import (default: Fit Artboard)
   */
  globalScaleOption: AutoCADGlobalScaleOption;

  /**
   * Percentage scaling to apply globally on the AutoCAD drawing (default: 1.0)
   */
  globalScalePercent: number;

  /**
   * To merge the layers of the artwork (default: false)
   */
  mergeLayers: boolean;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * To scale lineweights by the same amount as rest of the drawing (default: false)
   */
  scaleLineweights: boolean;

  /**
   * Name of layout in the AutoCAD drawing to import.
   */
  selectedLayoutName: string;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Units to which to map (default: Millimeters)
   */
  unit: AutoCADUnit;

  /**
   * Ratio by which to scale while mapping the units (default: 1.0)
   */
  unitScaleRatio: number;
}

/**
 * Tracing options that guide the tracing process.
 */
declare class TracingOptions {
  /**
   * ColorFidelity when TracingColorTypeValue is TracingFullColor.
   */
  colorFidelity: number;

  /**
   * The color group name used for tracing. Use 'All' or any color group name available in color Palette (library).
   */
  colorGroup: string;

  /**
   * Corner fidelity for tracing.
   */
  cornerFidelity: number;

  /**
   * Tracing with fills. Fills, Strokes or both must be on.
   */
  fills: boolean;

  /**
   * The gray levels for a grayscale mode tracing..
   */
  grayLevels: number;

  /**
   * Controls whether to ignore white fill color. Works only if TracingMethod is TracingMethodAbutting and mode is Black and white.
   */
  ignoreWhite: boolean;

  /**
   * Maximum stroke weight (stroke only).
   */
  maxStrokeWeight: number;

  /**
   * Specifies minimum area of pixels to be vectorized.
   */
  noiseFidelity: number;

  /**
   * The color palette (Library) name used for tracing. Use 'Document Library' or any other imported library name.
   */
  palette: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Path fidelity for tracing.
   */
  pathFidelity: number;

  /**
   * The name of the preset in use. Read-only.
   */
  preset: string;

  /**
   * Controls whether to snap curve to lines.
   */
  snapCurveToLines: boolean;

  /**
   * Tracing with strokes. Fills, Strokes or both must be on.
   */
  strokes: boolean;

  /**
   * The threshold value for a black and white mode tracing.
   */
  threshold: number;

  /**
   * Color Type used for tracing, TracingLimitedColor or TracingFullColor .
   */
  tracingColorTypeValue: TracingColorType;

  /**
   * Maximum number of colors allowed for tracing when TracingColorTypeValue is TracingLimitedColor.
   */
  tracingColors: number;

  /**
   * Method for tracing, either abutting or adjoining paths.
   */
  tracingMethod: TracingMethodType;

  /**
   * The tracing mode: color, gray, black and white.
   */
  tracingMode: TracingModeType;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * The visualization mode.
   */
  viewMode: ViewType;

  /**
   * Load options from preset.
   * @param presetName The name of the preset.
   */
  loadFromPreset(presetName: string): boolean;

  /**
   * Store options to a preset kAiVectorizeSuite. Will overwrite an existing (unlocked) preset if names match.
   * @param presetName The name of the preset.
   */
  storeToPreset(presetName: string): boolean;
}

/**
 * A tracing object.
 */
declare class TracingObject {
  /**
   * The number of anchors in the tracing result.
   */
  anchorCount: number;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The number of paths in the tracing result.
   */
  pathCount: number;

  /**
   * The source art used when creating a new tracing object.
   */
  sourceArt: PageItem;

  /**
   * The options used when tracing the artwork.
   */
  tracingOptions: TracingOptions;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * The number of colors used in the tracing result.
   */
  usedColorCount: number;

  /**
   * Expand the tracing to paths. Deletes this tracing object.
   * @param viewed Expand as viewed with the raster and vector view modes.
   */
  expandTracing(viewed?: boolean): GroupItem;

  /**
   * Release the source artwork for the tracing object. Deletes this tracing object.
   */
  releaseTracing(): PageItem;
}

/**
 * An (exportable) asset.
 */
declare class Asset {
  /**
   * The UID for the asset which is unique within a document.
   */
  assetID: number;

  /**
   * Name of the asset.
   */
  assetName: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Gets the normalized name without special characters, such that it can be used as a file name.
   */
  getNormalizedName(): string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * An artboard object.
 */
declare class Artboard {
  /**
   * Size and position of artboard.
   */
  artboardRect: Rect;

  /**
   * The name of the artboard.
   */
  name: string;

  /**
   * The object's container.
   */
  parent: object;

  /**
   * Ruler origin of artboard.It is relative to left-bottom corner of the Artboard.
   */
  rulerOrigin: Point;

  /**
   * Pixel aspect ratio, used in ruler visualization if the units are pixels.
   */
  rulerPAR: number;

  /**
   * Show center mark.
   */
  showCenter: boolean;

  /**
   * Show cross hairs.
   */
  showCrossHairs: boolean;

  /**
   * Show title and action safe areas (for video)
   */
  showSafeAreas: boolean;

  /**
   * The class name of the object.
   */
  typename: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * Describes a point. This class is also a two-element collection.
 */
declare class Point {
  /**
   * The left coordinate.
   */
  left: number;

  /**
   * The array length.
   */
  length: number;

  /**
   * The top coordinate.
   */
  top: number;

  /**
   * The left coordinate.
   */
  x: number;

  /**
   * The top coordinate.
   */
  y: number;
}

/**
 * Describes a rectangle. This class is also a four-element collection.
 */
declare class Rectangle {
  /**
   * The bottom coordinate.
   */
  bottom: number;

  /**
   * The height.
   */
  height: number;

  /**
   * The left coordinate.
   */
  left: number;

  /**
   * The array length.
   */
  length: number;

  /**
   * The right coordinate.
   */
  right: number;

  /**
   * The top coordinate.
   */
  top: number;

  /**
   * The width.
   */
  width: number;

  /**
   * The left coordinate.
   */
  x: number;

  /**
   * The top coordinate.
   */
  y: number;
}

declare class Rect {
  bottom: number;
  height: number;
  left: number;
  length: number;
  right: number;
  top: number;
  width: number;
  x: number;
  y: number;
}

declare enum ElementPlacement {
  INSIDE = 0,
  PLACEATBEGINNING = 1,
  PLACEATEND = 2,
  PLACEBEFORE = 3,
  PLACEAFTER = 4
}

declare enum PerspectiveGridType {
  OnePointPerspectiveGridType = 0,
  TwoPointPerspectiveGridType = 1,
  ThreePointPerspectiveGridType = 2,
  InvalidPerspectiveGridType = 3
}

declare enum ViewRasterType {
  TRACINGVIEWRASTERADJUSTEDIMAGE = 0,
  TRACINGVIEWRASTERNOIMAGE = 1,
  TRACINGVIEWRASTERORIGINALIMAGE = 2,
  TRACINGVIEWRASTERTRANSPARENTIMAGE = 3
}

declare enum ViewVectorType {
  TRACINGVIEWVECTORNOTRACINGRESULT = 0,
  TRACINGVIEWVECTOROUTLINES = 1,
  TRACINGVIEWVECTOROUTLINESWITHTRACING = 2,
  TRACINGVIEWVECTORTRACINGRESULT = 3
}

declare module aiMenu {
  let file: {
    new: "New";
    newFromTemplate: "newFromTemplate";
    open: "open";
    browseInBridge: "Adobe Bridge Browse";
    close: "close";
    save: "save";
    saveAs: "saveas";
    saveACopy: "saveacopy";
    saveAsTemplate: "saveastemplate";
    saveSelectedSlices: "Adobe AI Save Selected Slices";
    revert: "revert";
    searchAdobeStock: "Search Adobe Stock";
    place: "AI Place";
    export: {
      export: "export";
      exportForScreens: "exportForScreens";
      saveForWebAndDevices: "Adobe AI Save For Web";
    };
    exportSelection: "exportSelection";
    packageMenuItem: "Package Menu Item";
    scripts: {
      otherScript: "ai_browse_for_script";
    };
    documentSetup: "document";
    documentColorMode: {
      cmykColor: "doc-color-cmyk";
      rgbColor: "doc-color-rgb";
    };
    fileInfo: "File Info";
    print: "Print";
    exit: "quit";
  };
  let edit: {
    undo: "undo";
    redo: "redo";
    cut: "cut";
    copy: "copy";
    paste: "paste";
    pasteInFront: "pasteFront";
    pasteInBack: "pasteBack";
    pasteInPlace: "pasteInPlace";
    pasteOnAllArtboards: "pasteInAllArtboard";
    clear: "clear";
    findAndReplace: "Find and Replace";
    findNext: "Find Next";
    checkSpelling: "Check Spelling";
    definePattern: "Define Pattern Menu Item";
    editColors: {
      recolorArtwork: "Recolor Art Dialog";
      adjustColorBalance: "Adjust3";
      blendFrontToBack: "Colors3";
      blendHorizontally: "Colors4";
      blendVertically: "Colors5";
      convertToCMYK: "Colors8";
      convertToGrayscale: "Colors7";
      convertToRGB: "Colors9";
      invertColors: "Colors6";
      overprintBlack: "Overprint2";
      saturate: "Saturate3";
    };
    editOriginal: "EditOriginal Menu Item";
    transparencyFlattenerPresets: "Transparency Presets";
    tracingPresets: "TracingPresets";
    printPresets: "Print Presets";
    adobePDFPresets: "PDF Presets";
    sWFPresets: "SWFPresets";
    perspectiveGridPresets: "PerspectiveGridPresets";
    colorSettings: "color";
    assignProfile: "assignprofile";
    keyboardShortcuts: "KBSC Menu Item";
    preferences: {
      general: "preference";
      selectionAndAnchorDisplay: "selectPref";
      type: "keyboardPref";
      units: "unitundoPref";
      guidesAndGrid: "guidegridPref";
      smartGuides: "snapPref";
      slices: "slicePref";
      hyphenation: "hyphenPref";
      pluginsAndScratchDisks: "pluginPref";
      userInterface: "UIPref";
      fileHandlingAndClipboard: "FileClipboardPref";
      appearanceOfBlack: "BlackPref";
    };
  };
  let preferences: {
    general: "preference";
    selectionAndAnchorDisplay: "selectPref";
    type: "keyboardPref";
    units: "unitundoPref";
    guidesAndGrid: "guidegridPref";
    smartGuides: "snapPref";
    slices: "slicePref";
    hyphenation: "hyphenPref";
    pluginsAndScratchDisks: "pluginPref";
    userInterface: "UIPref";
    fileHandlingAndClipboard: "FileClipboardPref";
    appearanceOfBlack: "BlackPref";
  };
  let object: {
    transform: {
      transformAgain: "transformagain";
      move: "transformmove";
      rotate: "transformrotate";
      reflect: "transformreflect";
      scale: "transformscale";
      shear: "transformshear";
      transformEach: "Transform v23";
      resetBoundingBox: "AI Reset Bounding Box";
    };
    arrange: {
      bringToFront: "sendToFront";
      bringForward: "sendForward";
      sendBackward: "sendBackward";
      sendToBack: "sendToBack";
      sendToCurrentLayer: "Selection Hat 2";
    };
    group: "group";
    ungroup: "ungroup";
    lock: {
      selection: "lock";
      allArtworkAbove: "Selection Hat 5";
      otherLayers: "Selection Hat 7";
    };
    unlockAll: "unlockAll";
    hide: {
      selection: "hide";
      allArtworkAbove: "Selection Hat 4";
      otherLayers: "Selection Hat 6";
    };
    showAll: "showAll";
    expand: "Expand3";
    expandAppearance: "expandStyle";
    flattenTransparency: "FlattenTransparency1";
    rasterize: "Rasterize 8 menu item";
    createGradientMesh: "make mesh";
    createObjectMosaic: "AI Object Mosaic Plug-in4";
    createTrimMarks: "TrimMark v25";
    slice: {
      make: "AISlice Make Slice";
      release: "AISlice Release Slice";
      createFromGuides: "AISlice Create from Guides";
      createFromSelection: "AISlice Create from Selection";
      duplicateSlice: "AISlice Duplicate";
      combineSlices: "AISlice Combine";
      divideSlices: "AISlice Divide";
      deleteAll: "AISlice Delete All Slices";
      sliceOptions: "AISlice Slice Options";
      clipToArtboard: "AISlice Clip to Artboard";
    };
    path: {
      join: "join";
      average: "average";
      outlineStroke: "OffsetPath v22";
      offsetPath: "OffsetPath v23";
      simplify: "simplify menu item";
      addAnchorPoints: "Add Anchor Points2";
      removeAnchorPoints: "Remove Anchor Points menu";
      divideObjectsBelow: "Knife Tool2";
      splitIntoGrid: "Rows and Columns….";
      cleanUp: "cleanup menu item";
    };
    blend: {
      make: "Path Blend Make";
      release: "Path Blend Release";
      expand: "Path Blend Expand";
      blendOptions: "Path Blend Options";
      replaceSpine: "Path Blend Replace Spine";
      reverseSpine: "Path Blend Reverse Spine";
      reverseFrontToBack: "Path Blend Reverse Stack";
    };
    envelopeDistort: {
      makeWithWarp: "Make Warp";
      makeWithMesh: "Create Envelope Grid";
      makeWithTopObject: "Make Envelope";
      release: "Release Envelope";
      envelopeOptions: "Envelope Options";
      expand: "Expand Envelope";
      editContents: "Edit Envelope Contents";
    };
    perspective: {
      attachToActivePlane: "Attach to Active Plane";
      releaseWithPerspective: "Release with Perspective";
      movePlaneToMatchObject: "Show Object Grid Plane";
      editText: "Edit Original Object";
    };
    livePaint: {
      make: "Make Planet X";
      merge: "Marge Planet X";
      release: "Release Planet X";
      gapOptions: "Planet X Options";
      expand: "Expand Planet X";
    };
    textWrap: {
      make: "Make Text Wrap";
      release: "Release Text Wrap";
      textWrapOptions: "Text Wrap Options…";
    };
    clippingMask: {
      make: "makeMask";
      release: "releaseMask";
      editContents: "editMask";
    };
    compoundPath: {
      make: "compoundPath";
      release: "noCompoundPath";
    };
    artboards: {
      convertToArtboards: "setCropMarks";
      rearrange: "ReArrange Artboards";
      fitToArtworkBounds: "Fit Artboard to artwork bounds";
      fitToSelectedArt: "Fit Artboard to selected Art";
    };
    graph: {
      type: "setGraphStyle";
      data: "editGraphData";
      design: "graphDesigns";
      column: "setBarDesign";
      marker: "setIconDesign";
    };
    cropImage: "Crop Image";
    makeMesh: "make mesh";
  };
  let type: {
    glyphs: "alternate glyph palette plugin";
    areaTypeOptions: "area-type-options";
    typeOnAPath: {
      rainbow: "Rainbow";
      threeDRibbon: "3D ribbon";
      skew: "Skew";
      stairStep: "Stair Step";
      gravity: "Gravity";
      typeOnAPathOptions: "typeOnPathOptions";
      updateLegacyTypeOnAPath: "updateLegacyTOP";
    };
    threadedText: {
      create: "threadTextCreate";
      releaseSelection: "releaseThreadedTextSelection";
      removeThreading: "removeThreading";
    };
    compositeFonts: "Adobe internal composite font plugin";
    kinsokuShoriSettings: "Adobe Kinsoku Settings";
    mojikumiSettings: "Adobe MojiKumi Settings";
    fitHeadline: "fitHeadline";
    createOutlines: "outline";
    findFont: "Adobe Illustrator Find Font Menu Item";
    changeCase: {
      upperCase: "UpperCase Change Case Item";
      lowerCase: "LowerCase Change Case Item";
      titleCase: "Title Case Change Case Item";
      sentenceCase: "Sentence case Change Case Item";
    };
    smartPunctuation: "Adobe Illustrator Smart Punctuation Menu Item";
    opticalMarginAlignment: "Adobe Optical Alignment Item";
    showHiddenCharacters: "showHiddenChar";
    typeOrientation: {
      horizontal: "type-horizontal";
      vertical: "type-vertical";
    };
  };
  let select: {
    all: "selectall";
    allOnActiveArtboard: "selectallinartboard";
    deselect: "deselectall";
    globalEdit: "SmartEdit Menu Item";
    reselect: "Find Reselect menu item";
    inverse: "Inverse menu item";
    nextObjectAbove: "Selection Hat 8";
    nextObjectBelow: "Selection Hat 9";
    same: {
      appearance: "Find Appearance menu item";
      appearanceAttribute: "Find Appearance Attributes menu item";
      blendingMode: "Find Blending Mode menu item";
      fillAndStroke: "Find Fill & Stroke menu item";
      fillColor: "Find Fill Color menu item";
      opacity: "Find Opacity menu item";
      strokeColor: "Find Stroke Color menu item";
      strokeWeight: "Find Stroke Weight menu item";
      graphicStyle: "Find Style menu item";
      symbolInstance: "Find Symbol Instance menu item";
      linkBlockSeries: "Find Link Block Series menu item";
    };
    object: {
      allOnSameLayers: "Selection Hat 3";
      directionHandles: "Selection Hat 1";
      notAlignedToPixelGrid: "Selection Hat 12";
      bristleBrushStrokes: "Bristle Brush Strokes menu item";
      brushStrokes: "Brush Strokes menu item";
      clippingMasks: "Clipping Masks menu item";
      strayPoints: "Stray Points menu item";
      textObjects: "Text Objects menu item";
      flashDynamicText: "Dynamic Text";
      flashInputText: "Input Text";
    };
    saveSelection: "Selection Hat 10";
    editSelection: "Selection Hat 11";
  };
  let effect: {
    applyLastEffect: "Adobe Apply Last Effect";
    lastEffect: "Adobe Last Effect";
    documentRasterEffectsSettings: "Live Rasterize Effect Setting";
    live3D: {
      extrudeAndBevel: "Live 3DExtrude";
      revolve: "Live 3DRevolve";
      rotate: "Live 3DRotate";
    };
    convertTo: {
      rectangle: "Live Rectangle";
      roundedRectangle: "Live Rounded Rectangle";
      ellipse: "Live Ellipse";
    };
    cropMarks: "Live Trim Marks";
    distortAndTransform: {
      freeDistort: "Live Free Distort";
      puckerAndBloat: "Live Pucker & Bloat";
      roughen: "Live Roughen";
      transform: "Live Transform";
      tweak: "Live Scribble and Tweak";
      twist: "Live Twist";
      zigZag: "Live Zig Zag";
    };
    path: {
      offsetPath: "Live Offset Path";
      outlineObject: "Live Outline Object";
      outlineStroke: "Live Outline Stroke";
    };
    pathfinder: {
      add: "Live Pathfinder Add";
      intersect: "Live Pathfinder Intersect";
      exclude: "Live Pathfinder Exclude";
      subtract: "Live Pathfinder Subtract";
      minusBack: "Live Pathfinder Minus Back";
      divide: "Live Pathfinder Divide";
      trim: "Live Pathfinder Trim";
      merge: "Live Pathfinder Merge";
      crop: "Live Pathfinder Crop";
      outline: "Live Pathfinder Outline";
      hardMix: "Live Pathfinder Hard Mix";
      softMix: "Live Pathfinder Soft Mix";
      trap: "Live Pathfinder Trap";
    };
    rasterize: "Live Rasterize";
    stylize: {
      dropShadow: "Live Adobe Drop Shadow";
      feather: "Live Feather";
      innerGlow: "Live Inner Glow";
      outerGlow: "Live Outer Glow";
      roundCorners: "Live Adobe Round Corners";
      scribble: "Live Scribble Fill";
      glowingEdges: "Live PSAdapter_plugin_GlwE";
    };
    svgFilters: {
      applySVGFilter: "Live SVG Filters";
      importSVGFilter: "SVG Filter Import";
    };
    warp: {
      arc: "Live Deform Arc";
      arcLower: "Live Deform Arc Lower";
      arcUpper: "Live Deform Arc Upper";
      arch: "Live Deform Arch";
      bulge: "Live Deform Bulge";
      shellLower: "Live Deform Shell Lower";
      shellUpper: "Live Deform Shell Upper";
      flag: "Live Deform Flag";
      wave: "Live Deform Wave";
      fish: "Live Deform Fish";
      rise: "Live Deform Rise";
      fisheye: "Live Deform Fisheye";
      inflate: "Live Deform Inflate";
      squeeze: "Live Deform Squeeze";
      twist: "Live Deform Twist";
    };
    effectGallery: "Live PSAdapter_plugin_GEfc";
    artistic: {
      coloredPencil: "Live PSAdapter_plugin_ClrP";
      cutout: "Live PSAdapter_plugin_Ct";
      dryBrush: "Live PSAdapter_plugin_DryB";
      filmGrain: "Live PSAdapter_plugin_FlmG";
      fresco: "Live PSAdapter_plugin_Frsc";
      neonGlow: "Live PSAdapter_plugin_NGlw";
      paintDaubs: "Live PSAdapter_plugin_PntD";
      paletteKnife: "Live PSAdapter_plugin_PltK";
      plasticWrap: "Live PSAdapter_plugin_PlsW";
      posterEdges: "Live PSAdapter_plugin_PstE";
      roughPastels: "Live PSAdapter_plugin_RghP";
      smudgeStick: "Live PSAdapter_plugin_SmdS";
      sponge: "Live PSAdapter_plugin_Spng";
      underpainting: "Live PSAdapter_plugin_Undr";
      watercolor: "Live PSAdapter_plugin_Wtrc";
    };
    blur: {
      gaussianBlur: "Live PSAdapter_plugin_GblR";
      radialBlur: "Live PSAdapter_plugin_RdlB";
      smartBlur: "Live PSAdapter_plugin_SmrB";
    };
    brushStrokes: {
      accentedEdges: "Live PSAdapter_plugin_AccE";
      angledStrokes: "Live PSAdapter_plugin_AngS";
      crosshatch: "Live PSAdapter_plugin_Crsh";
      darkStrokes: "Live PSAdapter_plugin_DrkS";
      inkOutlines: "Live PSAdapter_plugin_InkO";
      spatter: "Live PSAdapter_plugin_Spt";
      sprayedStrokes: "Live PSAdapter_plugin_SprS";
      sumiE: "Live PSAdapter_plugin_Smie";
    };
    distort: {
      diffuseGlow: "Live PSAdapter_plugin_DfsG";
      glass: "Live PSAdapter_plugin_Gls";
      oceanRipple: "Live PSAdapter_plugin_OcnR";
    };
    pixelate: {
      colorHalftone: "Live PSAdapter_plugin_ClrH";
      crystallize: "Live PSAdapter_plugin_Crst";
      mezzotint: "Live PSAdapter_plugin_Mztn";
      pointillize: "Live PSAdapter_plugin_Pntl";
    };
    sharpen: {
      unsharpMask: "Live PSAdapter_plugin_USMk";
    };
    sketch: {
      basRelief: "Live PSAdapter_plugin_BsRl";
      chalkAndCharcoal: "Live PSAdapter_plugin_ChlC";
      charcoal: "Live PSAdapter_plugin_Chrc";
      chrome: "Live PSAdapter_plugin_Chrm";
      contCrayon: "Live PSAdapter_plugin_CntC";
      graphicPen: "Live PSAdapter_plugin_GraP";
      halftonePattern: "Live PSAdapter_plugin_HlfS";
      notePaper: "Live PSAdapter_plugin_NtPr";
      photocopy: "Live PSAdapter_plugin_Phtc";
      plaster: "Live PSAdapter_plugin_Plst";
      reticulation: "Live PSAdapter_plugin_Rtcl";
      stamp: "Live PSAdapter_plugin_Stmp";
      tornEdges: "Live PSAdapter_plugin_TrnE";
      waterPaper: "Live PSAdapter_plugin_WtrP";
    };
    stylize: {
      glowingEdges: "Live PSAdapter_plugin_GlwE";
    };
    texture: {
      craquelure: "Live PSAdapter_plugin_Crql";
      grain: "Live PSAdapter_plugin_Grn";
      mosaicTiles: "Live PSAdapter_plugin_MscT";
      patchwork: "Live PSAdapter_plugin_Ptch";
      stainedGlass: "Live PSAdapter_plugin_StnG";
      texturizer: "Live PSAdapter_plugin_Txtz";
    };
    video: {
      deInterlace: "Live PSAdapter_plugin_Dntr";
      nTSCColors: "Live PSAdapter_plugin_NTSC";
    };
  };
  let view: {
    preview: "preview";
    overprintPreview: "ink";
    pixelPreview: "raster";
    proofSetup: {
      cmyk: "proof-document";
      macRgb: "proof-mac-rgb";
      sRgb: "proof-win-rgb";
      monitorRgb: "proof-monitor-rgb";
      colorBlindnessPType: "proof-colorblindp";
      colorBlindnessDType: "proof-colorblindd";
      customize: "proof-custom";
    };
    proofColors: "proofColors";
    zoomIn: "zoomin";
    zoomOut: "zoomout";
    fitArtboardInWindow: "fitin";
    fitAllInWindow: "fitall";
    actualSize: "actualsize";
    hideEdges: "edge";
    hideArtboards: "artboard";
    hidePrintTiling: "pagetiling";
    showSlices: "AISlice Feedback Menu";
    lockSlices: "AISlice Lock Menu";
    showTemplate: "showtemplate";
    showGradientGuide: "Gradient Feedback";
    rulers: {
      showRulers: "ruler";
      showVideoRulers: "videoruler";
      changeToGlobalRulers: "rulerCoordinateSystem";
    };
    hideBoundingBox: "AI Bounding Box Toggle";
    showTransparencyGrid: "TransparencyGrid Menu Item";
    showTextThreads: "textthreads";
    hideGradientAnnotator: "Gradient Feedback";
    showLivePaintGaps: "Show Gaps Planet X";
    guides: {
      hideGuides: "showguide";
      lockGuides: "lockguide";
      makeGuides: "makeguide";
      releaseGuides: "releaseguide";
      clearGuides: "clearguide";
    };
    smartGuides: "Snapomatic on-off menu item";
    perspectiveGrid: {
      showGrid: "Show Perspective Grid";
      showRulers: "Show Ruler";
      snapToGrid: "Snap to Grid";
      lockGrid: "Lock Perspective Grid";
      lockStationPoint: "Lock Station Point";
      defineGrid: "Define Perspective Grid";
      saveGridAsPreset: "Save Perspective Grid as Preset";
    };
    showGrid: "showgrid";
    snapToGrid: "snapgrid";
    snapToPoint: "snappoint";
    newView: "newview";
    editViews: "editview";
  };
  let window: {
    newWindow: "newwindow";
    arrange: {
      cascade: "cascade";
      tile: "tile";
      floatInWindow: "floatInWindow";
      floatAllInWindows: "floatAllInWindows";
      consolidateAllWindows: "consolidateAllWindows";
    };
    workspace: {
      saveWorkspace: "Adobe Save Workspace";
      newWorkspace: "Adobe New Workspace";
      manageWorkspaces: "Adobe Manage Workspace";
    };
    cssMenu: "CSS Menu Item";
    tools: "AdobeBuiltInToolbox1";
    actions: "Adobe Action Palette";
    align: "AdobeAlignObjects2";
    appearance: "Style Palette";
    artboards: "Adobe Artboard Palette";
    attributes: "internal palettes posing as plug-in menus-attributes";
    brushes: "Adobe BrushManager Menu Item";
    color: "Adobe Color Palette";
    colorGuide: "Adobe Harmony Palette";
    kulerPanel: "Adobe Illustrator Kuler Panel";
    documentInfo: "DocInfo1";
    flattenerPreview: "Adobe Flattening Preview";
    gradient: "Adobe Gradient Palette";
    graphicStyles: "Adobe Style Palette";
    info: "internal palettes posing as plug-in menus-info";
    layers: "AdobeLayerPalette1";
    links: "Adobe LinkPalette Menu Item";
    magicWand: "AI Magic Wand";
    navigator: "AdobeNavigator";
    pathfinder: "Adobe PathfinderUI";
    separationsPreview: "Adobe Separation Preview Panel";
    stroke: "Adobe Stroke Palette";
    svgInteractivity: "Adobe SVG Interactivity Palette";
    swatches: "Adobe Swatches Menu Item";
    symbols: "Adobe Symbol Palette";
    transform: "AdobeTransformObjects1";
    transparency: "Adobe Transparency Palette Menu Item";
    variables: "Adobe Variables Palette Menu Item";
    character: "internal palettes posing as plug-in menus-character";
    characterStyles: "Character Styles";
    glyphs: "alternate glyph palette plugin 2";
    openType: "internal palettes posing as plug-in menus-opentype";
    paragraph: "internal palettes posing as plug-in menus-paragraph";
    paragraphStyles: "Adobe Paragraph Styles Palette";
    tabs: "internal palettes posing as plug-in menus-tab";
    otherArtStyleLibrary: "Adobe Art Style Plugin Other libraries menu item";
    otherSymbolLibrary: "Adobe Symbol Palette Plugin Other libraries menu item";
  };
  let help: {
    illustratorHelp: "helpcontent";
    aboutIllustrator: "about";
    systemInfo: "System Info";
  };
  let panels: {
    newSymbol: "Adobe New Symbol Shortcut";
    showColorPanel_Secondary: "Adobe Color Palette Secondary";
    actionsBatch: "Adobe Actions Batch";
    addNewFill: "Adobe New Fill Shortcut";
    addNewStroke: "Adobe New Stroke Shortcut";
    newGraphicStyle: "Adobe New Style Shortcut";
    newLayer: "AdobeLayerPalette2";
    newLayerWithDialog: "AdobeLayerPalette3";
    updateLink: "Adobe Update Link Shortcut";
    navigatorOptions: "AdobeNavigator2";
    newSwatch: "Adobe New Swatch Shortcut Menu";
  };
}

/**
 * The $ object provides a number of debugging facilities and informational methods.
 */
interface $ {
  /**
   * The ExtendScript build information.
   */
  readonly build: string;

  /**
   * The ExtendScript build date.
   */
  readonly buildDate: Date;

  /**
   * The character used as the decimal point character in formatted numeric output.
   */
  decimalPoint: string;

  /**
   * The name of the current ExtendScript engine, if set.
   */
  readonly engineName: string;

  /**
   * The most recent run-time error information.
   * Assigning error text to this property generates a run-time error; however, the preferred way to generate a run-time error is to throw an Error object.
   */
  error: Error;

  /**
   * The file name of the current script.
   */
  readonly fileName: string;

  /**
   * Gets or sets low-level debug output flags.
   * A logical AND of bit flag values:
   * 0x0002 (2): Displays each line with its line number as it is executed.
   * 0x0040 (64): Enables excessive garbage collection. Usually, garbage collection starts when the number of objects has increased by a certain amount since the last garbage collection. This flag causes ExtendScript to garbage collect after almost every statement. This impairs performance severely, but is useful when you suspect that an object gets released too soon.
   * 0x0080 (128): Displays all calls with their arguments and the return value.
   * 0x0100 (256): Enables extended error handling (see strict).
   * 0x0200 (512): Enables the localization feature of the toString method. Equivalent to the localize property.
   */
  flags: number;

  /**
   * A reference to the global object, which contains the JavaScript global namespace.
   */
  readonly global: any;

  /**
   * A high-resolution timer, measuring the time in microseconds. The timer starts when ExtendScript is
   * initialized during the application startup sequence. Every read access resets the timer to Zero.
   */
  readonly hiresTimer: number;

  /**
   * The path for include files for the current script.
   */
  readonly includePath: string;

  /**
   * The current debugging level, which enables or disables the JavaScript debugger.
   * One of 0 (no debugging), 1 (break on runtime errors), or 2 (full debug mode).
   */
  level: number;

  /**
   * The current line number of the currently executing script.
   */
  readonly line: number;

  /**
   * Gets or sets the current locale.
   * The string contains five characters in the form LL_RR, where LL is an ISO 639 language specifier, and RR is an ISO 3166 region specifier.Initially, this is the value that the application or the platform returns for the current user. You can set it to temporarily change the locale for testing. To return to the application or platform setting, set to undefined, null, or the empty string.
   */
  locale: string;

  /**
   * Set to true to enable the extended localization features of the built-in toString() method.
   */
  localize: boolean;

  /**
   * The ExtendScript memory cache size, in bytes.
   */
  memCache: number;

  /**
   * The current operating system version information.
   */
  readonly os: string;

  /**
   * An array of objects containing information about the display screens attached to your computer.
   * Each object has the properties left, top, right, bottom, which contain the four corners of each screen in global coordinates.A property primary is true if that object describes the primary display.
   */
  readonly screens: object[];

  /**
   * The current stack trace.
   */
  readonly stack: string;

  /**
   * Sets or clears strict mode for object modification.
   * When true, any attempt to write to a read-only property causes a runtime error. Some objects do not permit the creation of new properties when true.
   */
  strict: any;

  /**
   * The version number of the ExtendScript engine.
   * Formatted as a three-part number and description; for example: "3.92.95 (debug)".
   */
  readonly version: string;

  /**
   * Shows an About box for the ExtendScript component, and returns the text for the box.
   */
  about(): string;

  /**
   * Breaks execution at the current position.
   * @param condition A string containing a JavaScript statement to be used as a condition. If the statement evaluates to true or nonzero when this point is reached, execution stops.
   */
  bp(condition?: any): void;

  /**
   * Invokes the platform-specific color selection dialog, and returns the selected color.
   * @param color The color to be preselected in the dialog, as 0xRRGGBB, or -1 for the platform default.
   */
  colorPicker(color: number): number;

  /**
   * Loads and evaluates a file.
   * @param file The file to load.
   * @param timeout An optional timeout in milliseconds.
   */
  evalFile(file: File, timeout?: number): any;

  /**
   * Initiates garbage collection in the ExtendScript engine.
   */
  gc(): void;

  /**
   * Retrieves the value of an environment variable.
   * @param name The name of the variable.
   */
  getenv(name: string): string;

  /**
   * Sets the value of an environment variable.
   * @param name The name of the variable.
   * @param value The value of the variable.
   */
  setenv(name: string, value: string): void;

  /**
   * Suspends the calling thread for a number of milliseconds.
   * During a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated. This can happen if there is a break request, or if the script timeout has expired.
   * @param msecs Number of milliseconds to sleep.
   */
  sleep(msecs: number): void;

  /**
   * Converts this object to a string.
   */
  toString(): string;

  /**
   * Prints text to the Console.
   * @param text The text to print. All arguments are concatenated.
   */
  write(text: any): void;

  /**
   * Prints text to the Console, and adds a newline character.
   * @param text The text to print. All arguments are concatenated.
   */
  writeln(text: any): void;
}
declare const $: $;


interface FileConstructor {
  readonly prototype: File;

  /**
   * Creates and returns a new File object referring to a given file system location.
   * @param path The full or partial path name of the file,in platform-specific or URI format. The value stored in the object is the absolute path. The file that the path refers to does not need to exist.If the path refers to an existing folder: The File function returns a Folder object instead of a File object. The new operator returns a File object for a nonexisting file with the same name.
   */
  new (path?: string): File;
  (path?: string): File;

  /**
   * The name of the file system.
   * This is a class property accessed through the File constructor. Valid values are "Windows", "Macintosh", and "Unix".
   */
  readonly fs: string;

  /**
   * Decodes a UTF-8 encoded string as required by RFC 2396, and returns the decoded string.
   * See also String.decodeURI().
   * @param uri The UTF-8 encoded string to decode.
   */
  decode(uri: string): string;

  /**
   * Encodes a string as required by RFC 2396, and returns the encoded string.
   * All special characters are encoded in UTF-8 and stored as escaped characters starting with the percent sign followed by two hexadecimal digits. For example, the string "my file" is encoded as "my%20file".
   * Special characters are those with a numeric value greater than 127, except the following: / - _ . ! ~ * ' ( )
   * See also encodeURI().
   * @param name The string to encode.
   */
  encode(name: string): string;

  /**
   * Reports whether a given encoding is available.
   * @param name The encoding name. Typical values are "ASCII", "binary", or "UTF-8".For a complete list of supported encodings, see the JavaScript Tools Guide.
   */
  isEncodingAvailable(name: string): boolean;

  /**
   * Opens a dialog so the user can select one or more files to open.
   * Opens the built-in platform-specific file-browsing dialog in which a user can select an existing file or multiple files, and creates new File objects to represent the selected files.
   * If the user clicks OK, returns a File object for the selected file, or an array of objects if multiple files are selected.
   * If the user cancels, returns null.
   * @param prompt The prompt text, displayed if the dialog allows a prompt.
   * @param filter A filter that limits the types of files displayed in the dialog. In Windows,a filter expression such as "Javascript files:*.jsx;All files:*.*". In Mac OS, a filter function that takes a File instance and returns true if the file should be included in the display, false if it should not.
   * @param multiSelect When true, the user can select multiple files and the return value is an array.
   */
  openDialog(prompt?: string, filter?: any, multiSelect?: boolean): File;

  /**
   * Opens a dialog so the user can select a file name to save to.
   * Opens the built-in platform-specific file-browsing dialog in which a user can select an existing file location to which to save information, and creates a new File object to represent the selected file location.
   * If the user clicks OK, returns a File object for the selected file location.
   * If the user cancels, returns null.
   * @param prompt The prompt text, displayed if the dialog allows a prompt.
   * @param filter In Windows only, a filter that limits the types of files displayed in the dialog. In Windows only,a filter expression such as "Javascript files:*.jsx;All files:*.*". Not used In Mac OS.
   */
  saveDialog(prompt?: string, filter?: any): File;
}
declare const File: FileConstructor;

/**
 * Represents a file in the local file system in a platform-independent manner.
 */
interface File {
  /**
   * The full path name for the referenced file in URI notation.
   */
  readonly absoluteURI: string;

  /**
   * If true, the object refers to a file system alias or shortcut.
   */
  readonly alias: boolean;

  /**
   * The creation date of the referenced file, or null if the object does not refer to a file on disk.
   */
  readonly created: Date;

  /**
   * In Mac OS, the file creator as a four-character string. In Windows or UNIX, value is "????".
   */
  readonly creator: string;

  /**
   * The localized name of the referenced file, without the path specification.
   */
  readonly displayName: string;

  /**
   * Gets or sets the encoding for subsequent read/write operations.
   * One of the encoding constants listed in the JavaScript Tools Guide. If the value is not recognized, uses the system default encoding.A special encoder, BINARY, is used to read binary files. It stores each byte of the file as one Unicode character regardless of any encoding. When writing, the lower byte of each Unicode character is treated as a single byte to write.
   */
  encoding: string;

  /**
   * When true, a read attempt caused the current position to be at the end of the file, or the file is not open.
   */
  readonly eof: boolean;

  /**
   * A string containing a message describing the most recent file system error.
   * Typically set by the file system, but a script can set it. Setting this value clears any error message and resets the error bit for opened files. Contains the empty string if there is no error.
   */
  error: string;

  /**
   * If true, this object refers to a file or file-system alias that actually exists in the file system.
   */
  readonly exists: boolean;

  /**
   * The platform-specific full path name for the referenced file.
   */
  readonly fsName: string;

  /**
   * The full path name for the referenced file in URI notation.
   */
  readonly fullName: string;

  /**
   * When true, the file is not shown in the platform-specific file browser.
   * If the object references a file-system alias or shortcut, the flag is altered on the alias, not on the original file.
   */
  hidden: boolean;

  /**
   * The size of the file in bytes.
   * Can be set only for a file that is not open, in which case it truncates or pads the file with 0-bytes to the new length.
   */
  length: number;

  /**
   * How line feed characters are written in the file system.
   * One of the values "Windows", "Macintosh", or "Unix".
   */
  lineFeed: string;

  /**
   * The date of the referenced file's last modification, or null if the object does not refer to a file on the disk.
   */
  readonly modified: Date;

  /**
   * The file name portion of the absolute URI for the referenced file, without the path specification.
   */
  readonly name: string;

  /**
   * The Folder object for the folder that contains this file.
   */
  readonly parent: Folder;

  /**
   * The path portion of the absolute URI for the referenced file, without the file name.
   */
  readonly path: string;

  /**
   * When true, prevents the file from being altered or deleted.
   * If the referenced file is a file-system alias or shortcut, the flag is altered on the alias, not on the original file.
   */
  readonly: boolean;

  /**
   * The path name for the object in URI notation, relative to the current folder.
   */
  readonly relativeURI: string;

  /**
   * The file type as a four-character string.
   * In Mac OS, the Mac OS file type.
   * In Windows, "appl" for .EXE files, "shlb" for .DLL files and "TEXT" for any other file.
   */
  readonly type: string;

  /**
   * Changes the path specification of the referenced file.
   * @param path A string containing the new path, absolute or relative to the current folder.
   */
  changePath(path: string): boolean;

  /**
   * Closes this open file.
   * Returns true if the file was closed successfully, false if an I/O error occurred.
   */
  close(): boolean;

  /**
   * Copies this object’s referenced file to the specified target location.
   * Resolves any aliases to find the source file. If a file exists at the target location, it is overwritten.
   * Returns true if the copy was successful.
   * @param target A string with the URI path to the target location, or a File object that references the target location.
   */
  copy(target: string): boolean;

  /**
   * Makes this file a file-system alias or shortcut to the specified file.
   * The referenced file for this object must not yet exist on disk. Returns true if the operation was successful.
   * @param path A string containing the path of the target file.
   */
  createAlias(path: string): void;

  /**
   * Executes or opens this file using the appropriate application, as if it had been double-clicked in a file browser.
   * You can use this method to run scripts, launch applications, and so on.Returns true immediately if the application launch was successful.
   */
  execute(): boolean;

  /**
   * Retrieves and returns the path for this file, relative to the specified base path, in URI notation.
   * If no base path is supplied, the URI is relative to the path of the current folder.Returns a string containing the relative URI.
   * @param basePath A base path in URI notation.
   */
  getRelativeURI(basePath: string): string;

  /**
   * Opens the referenced file for subsequent read/write operations. The method resolves any aliases to find the file.
   * Returns true if the file was opened successfully.The method attempts to detect the encoding of the open file. It reads a few bytes at the current location and tries to detect the Byte Order Mark character 0xFFFE. If found, the current position is advanced behind the detected character and the encoding property is set to one of the strings UCS-2BE, UCS-2LE, UCS4-BE, UCS-4LE, or UTF-8. If the marker character is not found, it checks for zero bytes at the current location and makes an assumption about one of the above formats (except UTF-8). If everything fails, the encoding property is set to the system encoding.
   * IMPORTANT: Be careful about opening a file more than once. The operating system usually permits you to do so, but if you start writing to the file using two different File objects, you can destroy your data.
   * @param mode The read-write mode, a single-character string. One of these characters: r (read) Opens for reading. If the file does not exist or cannot be found, the call fails. w (write) Opens a file for writing. If the file exists, its contents are destroyed. If the file does not exist, creates a new, empty file. e (edit) Opens an existing file for reading and writing. a (append) Opens an existing file for reading and writing, and moves the current position to the end of the file.
   * @param type In Mac OS, the type of a newly created file, a 4-character string. Ignored in Windows and UNIX.
   * @param creator In Mac OS, the creator of a newly created file, a 4-character string. Ignored in Windows and UNIX.
   */
  open(mode: string, type?: string, creator?: string): boolean;

  /**
   * Opens the built-in platform-specific file-browsing dialog, in which the user can select an existing file or files, and creates new File objects to represent the selected files.
   * Differs from the class method openDialog() in that it presets the current folder to this File object’s parent folder and the current file to this object’s associated file.
   * If the user clicks OK, returns a File or Folder object for the selected file or folder, or an array of objects.
   * If the user cancels, returns null.
   * @param prompt A string containing the prompt text, if the dialog allows a prompt.
   * @param filter A filter that limits the types of files displayed in the dialog. In Windows,a filter expression such as "Javascript files:*.jsx;All files:*.*". In Mac OS, a filter function that takes a File instance and returns true if the file should be included in the display, false if it should not.
   * @param multiSelect When true, the user can select multiple files and the return value is an array.
   */
  openDlg(prompt?: string, filter?: any, multiSelect?: boolean): File;

  /**
   * Reads the contents of the file, starting at the current position.
   * Returns a string that contains up to the specified number of characters. If a number of characters is not supplied, reads from the current position to the end of the file. If the file is encoded, multiple bytes might be read to create single Unicode characters.
   * @param chars An integer specifying the number of characters to read.
   */
  read(chars?: number): string;

  /**
   * Reads a single text character from the file at the current position.
   * Line feeds are recognized as CR, LF, CRLF or LFCR pairs.If the file is encoded, multiple bytes might be read to create a single Unicode character. Returns a string that contains the character.
   */
  readch(): string;

  /**
   * Reads a single line of text from the file at the current position.
   * Line feeds are recognized as CR, LF, CRLF or LFCR pairs.. If the file is encoded, multiple bytes might be read to create single Unicode characters. Returns a string that contains the text.
   */
  readln(): string;

  /**
   * Deletes the file associated with this object from disk immediately, without moving it to the system trash.
   * Does not resolve aliases; instead, deletes the referenced alias or shortcut file itself. Returns true if the file was successfully removed.
   * IMPORTANT: Cannot be undone. It is recommended that you prompt the user for permission before deleting.
   */
  remove(): boolean;

  /**
   * Renames the associated file.
   * Does not resolve aliases, but renames the referenced alias or shortcut file itself. Returns true if the file was successfully renamed.
   * @param newName The new file name, with no path information.
   */
  rename(newName: string): boolean;

  /**
   * Attempts to resolve the file-system alias or shortcut that this object refers to.
   * If successful, creates and returns a new File object that points to the resolved file system element. Returns null if this object does not refer to an alias, or if the alias could not be resolved.
   */
  resolve(): File;

  /**
   * Opens the built-in platform-specific file-browsing dialog, in which the user can select an existing file location to which to save information, and creates a new File object to represent the selected file.
   * Differs from the class method saveDialog() in that it presets the current folder to this File object’s parent folder and the file to this object’s associated file.
   * If the user clicks OK, returns a File object for the selected file.
   * If the user cancels, returns null.
   * @param prompt A string containing the prompt text, if the dialog allows a prompt.
   * @param filter In Windows only, a filter that limits the types of files displayed in the dialog. In Windows only,a filter expression such as "Javascript files:*.jsx;All files:*.*". Not used In Mac OS.
   */
  saveDlg(prompt?: string, filter?: any): File;

  /**
   * Seeks to a given position in the file.
   * The new position cannot be less than 0 or greater than the current file size. Returns true if the position was changed.
   * @param pos The new current position in the file as an offset in bytes from the start, current position, or end, depending on the mode.
   * @param mode The seek mode. One of: 0: Seek to absolute position, where pos=0 is the first byte of the file. This is the default. 1: Seek relative to the current position. 2. Seek backward from the end of the file.
   */
  seek(pos: number, mode?: number): boolean;

  /**
   * Retrieves the current position as a byte offset from the start of the file.
   * Returns a number, the position index.
   */
  tell(): number;

  /**
   * Creates and returns a serialized string representation of this object.
   * Pass the resulting string to eval() to recreate the object.
   */
  toSource(): string;

  /**
   * Converts this object to a string.
   */
  toString(): string;

  /**
   * Writes the specified text to the file at the current position.
   * You can supply multiple text values; the strings are concatenated to form a single string.For encoded files, writing a single Unicode character may write multiple bytes. Returns true if the write was successful.IMPORTANT: Be careful not to write to a file that is open in another application or object, as this can overwrite existing data.
   * @param text A text string to be written.
   */
  write(text: string): boolean;

  /**
   * Writes a string to the file at the current position and appends a line-feed sequence.
   * You can supply multiple text values. The strings are concatenated into a single string, which is written in the file followed by one line-feed sequence, of the style specified by this object's linefeed property.For encoded files, writing a single Unicode character may write multiple bytes.Returns true if the write was successful.IMPORTANT: Be careful not to write to a file that is open in another application or object, as this can overwrite existing data.
   * @param text A text string to be written.
   */
  writeln(text: string): boolean;
}

interface FolderConstructor {
  readonly prototype: Folder;

  /**
   * Creates and returns a new Folder object referring to a given file-system location.
   * If the path name refers to an already existing disk file, a File object is returned instead.Returns the new Folder object.
   * @param path The absolute or relative path to the folder associated with this object, specified in URI format. The value stored in the object is the absolute path.The path need not refer to an existing folder. If the path refers to an existing file, rather than a folder: The Folder() function returns a File object instead of a Folder object. The new operator returns a Folder object for a nonexisting folder with the same name.
   */
  new (path?: string): Folder;
  (path?: string): Folder;

  /**
   * The folder containing the application data for all users.
   * In Windows, the value of %APPDATA% (by default, C:\\Documents and Settings\\All Users\\Application Data)
   * In Mac OS, /Library/Application Support
   */
  readonly appData: Folder;

  /**
   * In Mac OS, a Folder object for the folder containing the bundle of the running application.
   */
  readonly appPackage: Folder;

  /**
   * A Folder object for the folder containing common files for all programs installed by the user.
   * In Windows, the value of %CommonProgramFiles% (by default, C:\\Program Files\\Common Files)
   * In Mac OS, /Library/Application Support
   */
  readonly commonFiles: Folder;

  /**
   * A Folder object for the current folder.
   * Assign a Folder object or a string containing the new path name to set the current folder. This is a class property accessed through the Folder constructor.
   */
  current: Folder;

  /**
   * A Folder object for the folder that contains the user’s desktop.
   * In Windows, C:\\Documents and Settings\\username\\Desktop
   * In Mac OS, ~/Desktop
   */
  readonly desktop: Folder;

  /**
   * The name of the current file system.
   * One of "Windows", "Macintosh", or "Unix".
   */
  readonly fs: string;

  /**
   * A folder pointing to the user's My Documents folder.
   * In Windows, C:\\Documents and Settings\\username\\My Documents
   * In Mac OS,~/Documents
   */
  readonly myDocuments: Folder;

  /**
   * A Folder object for the folder containing the executable image of the running application.
   */
  readonly startup: Folder;

  /**
   * A Folder object for the folder containing the operating system files.
   * In Windows, the value of %windir% (by default, C:\\Windows)
   * In Mac OS, /System
   */
  readonly system: Folder;

  /**
   * A Folder object for the default folder for temporary files.
   */
  readonly temp: Folder;

  /**
   * A Folder object for the folder containing deleted items. On Windows, the trash folder is a virtual
   * folder containing a database; therefore, the property value is null on Windows.
   */
  readonly trash: Folder;

  /**
   * A Folder object for the folder containing the user's application data.
   * In Windows, the value of %USERDATA% (by default, C:\\Documents and Settings\\username\\Application Data)
   * In Mac OS,~/Library/Application Support.
   */
  readonly userData: Folder;

  /**
   * Decodes a UTF-8 encoded string as required by RFC 2396, and returns the decoded string.
   * See also String.decodeURI().
   * @param uri The UTF-8 string to decode.
   */
  decode(uri: string): string;

  /**
   * Encodes a string as required by RFC 2396, and returns the encoded string.
   * All special characters are encoded in UTF-8 and stored as escaped characters starting with the percent sign followed by two hexadecimal digits. For example, the string "my file" is encoded as "my%20file".
   * Special characters are those with a numeric value greater than 127, except the following: / - _ . ! ~ * ' ( )
   * See also encodeURI().
   * @param name The string to encode.
   */
  encode(name: string): string;

  /**
   * Reports whether a given encoding is available.
   * @param name The encoding name. Typical values are "ASCII", "binary", or "UTF-8".For a complete list of supported encodings, see the JavaScript Tools Guide.
   */
  isEncodingAvailable(name: string): boolean;

  /**
   * Opens the built-in platform-specific file-browsing dialog, and creates a new File or Folder object for the selected file or folder.
   * Differs from the object method selectDlg() in that it does not preselect a folder.
   * If the user clicks OK, returns a File or Folder object for the selected file or folder.
   * If the user cancels, returns null.
   * @param prompt The prompt text, if the dialog allows a prompt.
   */
  selectDialog(prompt?: string): Folder;
}
declare const Folder: FolderConstructor;

/**
 * Represents a file-system folder or directory in a platform-independent manner.
 */
interface Folder {
  /**
   * The full path name for the referenced folder in URI notation.
   */
  readonly absoluteURI: string;

  /**
   * When true, the object refers to a file system alias or shortcut.
   */
  readonly alias: boolean;

  /**
   * The creation date of the referenced folder, or null if the object does not refer to a folder on disk.
   */
  readonly created: Date;

  /**
   * The localized name portion of the absolute URI for the referenced folder, without the path specification.
   */
  readonly displayName: string;

  /**
   * A message describing the most recent file system error.
   * Typically set by the file system, but a script can set it. Setting this value clears any error message and resets the error bit for opened files. Contains the empty string if there is no error.
   */
  error: string;

  /**
   * When true, this object refers to a folder that currently exists in the file system.
   */
  readonly exists: boolean;

  /**
   * The platform-specific name of the referenced folder as a full path name.
   */
  readonly fsName: string;

  /**
   * The full path name for the referenced folder in URI notation. .
   */
  readonly fullName: string;

  /**
   * The date of the referenced folder's last modification, or null if the object does not refer to a folder on disk.
   */
  readonly modified: Date;

  /**
   * The folder name portion of the absolute URI for the referenced file, without the path specification.
   */
  readonly name: string;

  /**
   * TThe Folder object for the folder that contains this folder, or null if this object refers to the root folder of a volume.
   */
  readonly parent: Folder;

  /**
   * The path portion of the object absolute URI for the referenced file, without the folder name.
   */
  readonly path: string;

  /**
   * The path name for the referenced folder in URI notation, relative to the current folder.
   */
  readonly relativeURI: string;

  /**
   * Changes the path specification of the referenced folder.
   * @param path A string containing the new path, absolute or relative to the current folder.
   */
  changePath(path: string): boolean;

  /**
   * Creates a folder at the location given by this object's path property.
   * Returns true if the folder was created.
   */
  create(): boolean;

  /**
   * Opens this folder in the platform-specific file browser (as if it had been double-clicked in the file browser).
   * Returns true immediately if the folder was opened successfully.
   */
  execute(): boolean;

  /**
   * Retrieves the contents of this folder, filtered by the supplied mask.
   * Returns an array of File and Folder objects, or null if this object's referenced folder does not exist.
   * @param mask A search mask for file names, specified as a string or a function. A mask string can contain question mark (?) and asterisk (*) wild cards. Default is "*", which matches all file names. Can also be the name of a function that takes a File or Folder object as its argument. It is called for each file or folder found in the search; if it returns true, the object is added to the return array. NOTE: In Windows, all aliases end with the extension .lnk. ExtendScript strips this from the file name when found, in order to preserve compatibility with other operating systems. You can search for all aliases by supplying the search mask "*.lnk", but note that such code is not portable.
   */
  getFiles(mask: any): Array<File | Folder>;

  /**
   * Retrieves and returns the path for this file, relative to the specified base path, in URI notation.
   * If no base path is supplied, the URI is relative to the path of the current folder.Returns a string containing the relative URI.
   * @param basePath A base path in URI notation.
   */
  getRelativeURI(basePath?: string): string;

  /**
   * Deletes the folder associated with this object from disk immediately, without moving it to the system trash.
   * Folders must be empty before they can be deleted. Does not resolve aliases; instead, deletes the referenced alias or shortcut file itself. Returns true if the file was successfully removed.
   * IMPORTANT: Cannot be undone. It is recommended that you prompt the user for permission before deleting.
   */
  remove(): boolean;

  /**
   * Renames the associated folder.
   * Does not resolve aliases, but renames the referenced alias or shortcut file itself. Returns true if the folder was successfully renamed.
   * @param newName The new folder name, with no path information.
   */
  rename(newName: string): boolean;

  /**
   * Attempts to resolve the file-system alias or shortcut that this object refers to.
   * If successful, creates and returns a new Folder object that points to the resolved file system element. Returns null if this object does not refer to an alias, or if the alias could not be resolved.
   */
  resolve(): Folder;

  /**
   * Opens the built-in platform-specific file-browsing dialog, and creates a new File or Folder object for the selected file or folder.
   * Differs from the class method selectDialog() in that it preselects this folder.
   * If the user clicks OK, returns a File or Folder object for the selected file or folder.
   * If the user cancels, returns null.
   * @param prompt The prompt text, if the dialog allows a prompt.
   */
  selectDlg(prompt?: string): Folder;

  /**
   * Creates and returns a serialized string representation of this object.
   * Pass the resulting string to eval() to recreate the object.
   */
  toSource(): string;

  /**
   * Converts this object to a string.
   */
  toString(): string;
}

interface SocketConstructor {
  readonly prototype: Socket;

  /**
   * Creates a new Socket object.
   */
  new (): Socket;
  (): Socket;
}
declare const Socket: SocketConstructor;

/**
 * Creates a TCP/IP connection, or establishes a TCP/IP server.
 */
interface Socket {
  /**
   * When true, the connection is active.
   */
  readonly connected: boolean;

  /**
   * Sets or retrieves the name of the encoding used to transmit data.
   * Typical values are "ASCII", "BINARY", or "UTF-8".
   */
  encoding: string;

  /**
   * When true, the receive buffer is empty.
   */
  readonly eof: boolean;

  /**
   * A message describing the most recent error. Setting this value clears any error message.
   */
  error: string;

  /**
   * The name of the remote computer when a connection is established.
   * If the connection is shut down or does not exist, the property contains the empty string.
   */
  readonly host: string;

  /**
   * The timeout in seconds to be applied to read or write operations.
   */
  timeout: number;

  /**
   * Terminates the open connection.
   * Returns true if the connection was closed, false on I/O errors.
   * Deleting the object also closes the connection, but not until JavaScript garbage-collects the object. The connection might stay open longer than you wish if you do not close it explicitly.
   */
  close(): boolean;

  /**
   * Instructs the object to start listening for an incoming connection.
   * The call to open() and the call to listen()are mutually exclusive. Call one function or the other, not both.
   * @param port The TCP/IP port number to listen on. Valid port numbers are 1 to 65535. Typical values are 80 for a Web server, 23 for a Telnet server and so on.
   * @param encoding The encoding to be used for the connection Typical values are "ASCII", "BINARY", or "UTF-8".
   */
  listen(port: number, encoding?: string): boolean;

  /**
   * Opens the connection for subsequent read/write operations.
   * The call to open() and the call to listen() are mutually exclusive. Call one function or the other, not both.
   * @param host The server to connect to. This can be a DNS name, an IPv4 address, or an IPv6 address, followed by a colon and a port number.
   * @param encoding The encoding to be used for the connection Typical values are "ASCII", "binary", or "UTF-8".
   */
  open(host: string, encoding?: string): boolean;

  /**
   * Checks a listening object for a new incoming connection.
   * If a connection request was detected, the method returns a new Socket object that wraps the new connection. Use this connection object to communicate with the remote computer. After use, close the connection and delete the JavaScript object. If no new connection request was detected, the method returns null.
   */
  poll(): Socket;

  /**
   * Reads up to the specified number of characters from the connection. CR characters are ignored unless the encoding is set to "BINARY".
   * Returns a string that contains up to the number of characters that were supposed to be read, or the number of characters read before the connection closed or timed out.
   * @param count The number of characters to read. If not supplied, the connection attempts to read as many characters it can get and returns immediately.
   */
  read(count?: number): string;

  /**
   * Reads one line of text up to the next line feed.
   * Line feeds are recognized as LF or CRLF pairs. CR characters are ignored. Returns a string containing the characters.
   */
  readln(): string;

  /**
   * Concatenates all arguments into a single string and writes that string to the connection.
   * @param text Any number of string values. All arguments are concatenated to form the string to be written. CRLF sequences are converted to LFs unless the encoding is set to "BINARY".
   */
  write(text: string): boolean;

  /**
   * Concatenates all arguments into a single string, appends a LF character, and writes that string to the connection.
   * @param text Any number of string values. All arguments are concatenated to form the string to be written. CRLF sequences are converted to LFs unless the encoding is set to "BINARY".
   */
  writeln(text: string): boolean;
}

/**
 * Provides information about a method, a property or a method parameters.
 */
interface ReflectionInfo {
  /**
   * The description of method or function arguments.
   */
  readonly arguments: ReflectionInfo[];

  /**
   * The data type.
   */
  readonly dataType: string;

  /**
   * The default value.
   */
  readonly defaultValue: any;

  /**
   * The long description text.
   */
  readonly description: string;

  /**
   * The short description text.
   */
  readonly help: string;

  /**
   * Contains true if the class describes a collection class.
   */
  readonly isCollection: boolean;

  /**
   * The maximum value.
   */
  readonly max: number;

  /**
   * The minimum value.
   */
  readonly min: number;

  /**
   * The element name.
   */
  readonly name: string;

  /**
   * The class object that this element belongs to.
   */
  readonly parent: Reflection;

  /**
   * Sample code, if present.
   */
  readonly sampleCode: string;

  /**
   * A file containing sample code. May be null.
   */
  readonly sampleFile: File;

  /**
   * The element type.
   * One of unknown, readonly, readwrite, createonly, method or parameter.
   */
  readonly type: string;
}
declare const ReflectionInfo: ReflectionInfo;

/**
 * Provides information about a class.
 */
interface Reflection {
  /**
   * The long description text.
   */
  readonly description: string;

  /**
   * The short description text.
   */
  readonly help: string;

  /**
   * An array of method descriptions.
   */
  readonly methods: ReflectionInfo[];

  /**
   * The class name.
   */
  readonly name: string;

  /**
   * An array of property descriptions.
   */
  readonly properties: ReflectionInfo[];

  /**
   * Sample code, if present.
   */
  readonly sampleCode: string;

  /**
   * A file containing sample code. May be null.
   */
  readonly sampleFile: File;

  /**
   * An array of class method descriptions.
   */
  readonly staticMethods: ReflectionInfo[];

  /**
   * An array of class property descriptions.
   */
  readonly staticProperties: ReflectionInfo[];

  /**
   * Finds an element description by name.
   * @param name The name of the element to find.
   */
  find(name: string): ReflectionInfo;

  /**
   * Returns this class information as XML in OMV format.
   */
  toXML(): XML;
}
declare const Reflection: Reflection;

interface QNameConstructor {
  readonly prototype: QName;

  /**
   * Creates a QName object.
   * @param uri The URI, specified as a Namespace object, an existing QName object, or string. If this is a Namespace object, the URI is set to the namespace URI, and there is no local name. If this is a QName object, the URI and localName is set to those of that object. If this is a string, the URI is set to that string.
   * @param name The local name. Used only if URI is given as a string.
   */
  new (uri: any, name?: string): QName;
  (uri: any, name?: string): QName;
}
declare const QName: QNameConstructor;

/**
 * A qualified XML name, containing the URI and the local name.
 */
interface QName {
  /**
   * The local name part of the qualified name.
   */
  readonly localName: string;

  /**
   * The URI part of the qualified name.
   */
  readonly uri: string;
}

interface NamespaceConstructor {
  readonly prototype: Namespace;

  /**
   * Creates a Namespace object.
   * @param prefix The URIprefix, specified as an existing Namespace object, QName object, or string. If this is a Namespace or a QName object, the URI and prefix are set to that of the object. If this is a string, the prefix is set to that string, and the URI must be specified.
   * @param uri The URI if the prefix is specified as a string.
   */
  new (prefix: any, uri?: string): Namespace;
  (prefix: any, uri?: string): Namespace;
}
declare const Namespace: NamespaceConstructor;

/**
 * A XML namespace object.
 */
interface Namespace {
  /**
   * The named prefix.
   */
  readonly prefix: string;

  /**
   * The URI.
   */
  readonly uri: string;
}

interface XMLConstructor {
  readonly prototype: XML;

  /**
   * Parses an XML string. Throws an error if the XML is incorrect.
   * @param text The text to parse.
   */
  new (text: string): XML;
  (text: string): XML;

  /**
   * Controls whether XML comments should be parsed (false) or ignored (true).
   */
  ignoreComments: boolean;

  /**
   * Controls whether XML preprocessing instructions should be parsed (false) or ignored (true).
   */
  ignoreProcessingInstructions: boolean;

  /**
   * Controls whether whitespace should be parsed (false) or ignored (true).
   */
  ignoreWhitespace: boolean;

  /**
   * The number of spaces used to indent pretty-printed XML.
   */
  prettyIndent: number;

  /**
   * When true, XML is pretty-printed when converting to a string.
   */
  prettyPrinting: boolean;

  /**
   * Returns an object containing the default parsing and print settings for XML.
   */
  defaultSettings(): object;

  /**
   * Sets the parsing and print setting for XML using an object returned by the settings() method.
   * @param obj The object containing the settings to set.
   */
  setSettings(obj: object): void;

  /**
   * Returns an object containing the current parsing and print settings for XML.
   */
  settings(): object;
}
declare const XML: XMLConstructor;

/**
 * Wraps XML into an object.
 */
interface XML {
  /**
   * Adds a namespace declaration to the node. Returns the XML object itself.
   * @param namespace The namespace to add.
   */
  addNamespace(namespace: Namespace): XML;

  /**
   * Appends the given XML to this XML as a child. Returns the XML object itself.
   * If the argument is not XML, creates a new XML element containing the argument as text. The element name of that new XML is the same as the last element in the original XML.
   * @param child The child XML to add.
   */
  appendChild(child: XML): XML;

  /**
   * Returns a list containing all attribute elements matching the given name.
   * @param name The attribute name to look for.
   */
  attribute(name: string): XML;

  /**
   * Returns a list containing all attribute elements.
   */
  attributes(): XML;

  /**
   * Returns a list containing all children of this XML matching the given element name.
   * If the argument is a number, uses the number as index into the array of children.
   * @param name The name or the index of the child element.
   */
  child(name: string): XML;

  /**
   * Returns a number representing the ordinal position of this XML object within the context of its parent.
   */
  childIndex(): number;

  /**
   * Returns an XML object containing all the properties of this XML object in order.
   */
  children(): XML;

  /**
   * Returns an XML object containing the properties of this XML object that represent XML comments.
   */
  comments(): XML;

  /**
   * Checks if this XML object contains the given XML object.
   * @param xml The XML to search for.
   */
  contains(xml: XML): boolean;

  /**
   * Creates a copy of this XML object.
   */
  copy(): XML;

  /**
   * Returns all the XML-valued descendants of this XML object with the given name.
   * If the name parameter is omitted, returns all descendants of this XML object.
   * @param name The name of the descendant to find.
   */
  descendants(name?: string): XML;

  /**
   * Returns a list of XML children that are elements with a given name, or all children that are XML elements.
   * @param name The element name. If not supplied, gets all children that are XML elements.
   */
  elements(name?: string): XML;

  /**
   * Reports whether this XML object contains complex content.
   * An XML object is considered to contain complex content if it represents an XML element that has child elements. XML objects representing attributes, comments, processing instructions and text nodes do not have complex content. The existence of attributes, comments, processing instructions and text nodes within an XML object is not significant in determining if it has complex content.
   */
  hasComplexContent(): boolean;

  /**
   * Reports whether this XML object contains simple content.
   * An XML object is considered to contain simple content if it represents a text node, represents an attribute node or if it represents an XML element that has no child elements. XML objects representing comments and processing instructions do not have simple content. The existence of attributes, comments, processing instructions and text nodes within an XML object is not significant in determining if it has simple content.
   */
  hasSimpleContent(): boolean;

  /**
   * Returns an array of Namespace objects mirroring the current list of valid namespaces at this element.
   * The last element of thereturned array is the default namespace.
   */
  inScopeNamespaces(): Namespace[];

  /**
   * Inserts the given child2 after the given child1 in this XML object and returns this XML object.
   * If child1 is null, the method inserts child2 before all children of this XML object (that is, after none of them). If child1 does not exist in this XML object, the method returns without modifying this XML object.
   * @param child1 The child to insert the other child after. If null, the method inserts child2 before all children of this XML object.
   * @param child2 The XML to insert.
   */
  insertChildAfter(child1: XML, child2: XML): void;

  /**
   * Inserts the given child2 before the given child1 in this XML object and returns this XML object.
   * If child1 is null, the method inserts child2 after all children of this XML object (that is, before none of them). If child1 does not exist in this XML object, the method returns without modifying this XML object.
   * @param child1 The child to search for. If null, the method inserts child2 after all children of this XML object.
   * @param child2 The XML to insert.
   */
  insertChildBefore(child1: XML, child2: XML): void;

  /**
   * Returns the number of elements contained in an XML list. If this XML object is not a list, returns 1.
   */
  length(): number;

  /**
   * Returns the local name of this XML object.
   * This value corresponds to the element name unless the name has a namespace prefix. For example, if the element has the name "ns:tag", the return value is "tag".
   */
  localName(): string;

  /**
   * Returns a QName object containing the URI and the local name of the element.
   */
  name(): QName;

  /**
   * Returns a Namespace object containing the namespace URI of the current element.
   */
  namespace(): Namespace;

  /**
   * Returns an array containing all namespace declarations of this XML object.
   */
  namespaceDeclarations(): Namespace[];

  /**
   * Returns the type of this XML object as one of the strings "element", "attribute", "comment", "processing-instruction", or "text".
   */
  nodeKind(): string;

  /**
   * Puts all text nodes in this and all descendant XML objects into a normal form by merging adjacent text nodes and eliminating empty text nodes. Returns this XML object.
   */
  normalize(): XML;

  /**
   * Returns the parent object of this XML object.
   * The root object, as returned by the XML constructor, does not have a parent and returns null. Note that the E4X standard does not define what happens if this XML object is a list containing elements with multiple parents.
   */
  parent(): XML;

  /**
   * Inserts a given child into this object before its existing XML properties, and returns this XML object.
   * @param child The XML to insert.
   */
  prependChild(child: XML): XML;

  /**
   * Returns a list of preprocessing instructions.
   * Collects processing-instructions with the given name, if supplied. Otherwise, returns an XML list containing all the children of this XML object that are processing-instructions regardless of their name.
   * @param name The name of the preprocessing instruction to return.
   */
  processingInstructions(name?: string): XML;

  /**
   * Removes the given namespace from this XML, and returns this XML.
   * @param namespace The namespace to remove.
   */
  removeNamespace(namespace: Namespace): XML;

  /**
   * Replaces the value of specified XML properties of this XML object returns this XML object.
   * This method acts like the assignment operator.
   * @param name The property name. Can be a numeric property name, a name for a set of XML elements, or the properties wildcard “*”. If this XML object contains no properties that match the name, the method returns without modifying this XML object.
   * @param value The XML with which to replace the value of the matching property. Can be an XML object, XML list or any value that can be converted to a String with toString().
   */
  replace(name: string, value: XML): XML;

  /**
   * Replaces all of the XML-valued properties in this object with a new value, and returns this XML object.
   * @param value The new value, which can be a single XML object or an XML list.
   */
  setChildren(value: XML): XML;

  /**
   * Replaces the local name of this XML objectwith a string constructed from the given name
   * The local name is any part behind a colon character. If there is no colon, it is the entire name.
   * @param name The name to set.
   */
  setLocalName(name: string): void;

  /**
   * Replaces the name of this XML object with the given QName object.
   * @param name The fully qualified name.
   */
  setName(name: QName): void;

  /**
   * Sets the namespace for this XML element.
   * If the namespace has not been declared in the tree above this element, adds a namespace declaration.
   * @param namespace The namespace to set.
   */
  setNamespace(namespace: Namespace): void;

  /**
   * Returns an XML list containing all XML properties of this XML object that represent XML text nodes.
   */
  text(): XML;

  /**
   * Returns the string representation of this object.
   * For text and attribute nodes, this is the textual value of the node; for other elements, this is the result of calling the toXMLString() method. If this XML object is a list, concatenates the result of calling toString() on each element.
   */
  toString(): string;

  /**
   * Returns an XML-encoded string representation of this XML object.
   * Always includes the start tag, attributes and end tag of the XML object regardless of its content. It is provided for cases when the default XML to string conversion rules are not desired. Interprets the global settings XML.prettyPrint and XML.prettyIndent.
   */
  toXMLString(): string;

  /**
   * Evaluates the given XPath expression in accordance with the W3C XPath recommendation, using this XML object as the context node.
   * @param expr The XPath expression to use.
   */
  xpath(expr: string): XML;
}

/**
 * An XML list object.
 * In this implementation, an XMLList object is synonymous to the XML object. The constructor accepts an XML list, but everything else works like theXML object.
 */
interface XMLList {}
declare const XMLList: XMLList;

interface UnitValueConstructor {
  readonly prototype: UnitValue;

  /**
   * Creates a new UnitValue object.
   */
  new (value: string | UnitValue): UnitValue;
  (value: string | UnitValue): UnitValue;

  /**
   * The base unit for all conversions.
   */
  baseUnit: UnitValue;
}
declare const UnitValue: UnitValueConstructor;

/**
 * Represents a measurement as a combination of values and unit.
 * Note that this object is not available in all applications.
 */
interface UnitValue {
  /**
   * The base unit.
   */
  baseUnit: UnitValue;

  /**
   * The unit name.
   */
  readonly type: string;

  /**
   * The numeric value.
   */
  value: number;

  /**
   * Returns this instance as a different unit.
   * @param unitName The unit name.
   */
  as(unitName: string): UnitValue;

  /**
   * Converts this instance to a different unit.
   * @param unitName The unit name.
   */
  convert(unitName: string): any;
}

/**
 * Only for TypeScript compatibility
 */
interface CallableFunction extends Function {}

interface NewableFunction extends Function {}

interface IArguments {
  [index: number]: any;
  length: number;
  callee: Function;
}

/**
 * Make all properties in T optional
 */
type Partial<T> = { [P in keyof T]?: T[P] };

/**
 * Make all properties in T readonly
 */
type Readonly<T> = { readonly [P in keyof T]: T[P] };

/**
 * From T pick a set of properties K
 */
type Pick<T, K extends keyof T> = { [P in K]: T[P] };

/**
 * Construct a type with a set of properties K of type T
 */
type Record<K extends string, T> = { [P in K]: T };

/**
 * A global class containing central information about ScriptUI. Not instantiable.
 */
declare class ScriptUI {
  /**
   * Collects the enumerated values that can be used in the alignment and alignChildren properties of controls and containers.
   * Predefined alignment values are: TOP, BOTTOM, LEFT, RIGHT, FILL, CENTER
   */
  static readonly Alignment: string;

  /**
   * Collects the enumerated values that can be used as the style argument to the ScriptUI.newFont() method.
   * Predefined styles are REGULAR, BOLD, ITALIC, BOLDITALIC.
   */
  static readonly FontStyle: object;

  /**
   * The font constants defined by the host application.
   */
  static readonly applicationFonts: object;

  /**
   * An object whose properties are the names of compatability modes supported by the host application.
   * The presence of ScriptUI.compatability.su1PanelCoordinates means that the application allows backward compatibility with the coordinate system of Panel elements in ScriptUI version 1.
   */
  static readonly compatibility: object;

  /**
   * A string containing the internal version number of the ScriptUI module.
   */
  static readonly coreVersion: string;

  /**
   * An object whose properties define attributes of the environment in which ScriptUI operates.
   */
  static readonly environment: Environment;

  /**
   * An object whose properties and methods provide access to objects used in the ScriptUI event system.
   * It contains one function, createEvent(), which allows you to create event objects in order to simulate user-interaction event
   */
  static readonly events: Events;

  /**
   * A string containing the name of the UI component framework with which this version of ScriptUI is compatible.
   */
  static readonly frameworkName: string;

  /**
   * A string containing the version number of the ScriptUI component framework
   */
  static readonly version: any;

  /**
   * Finds and returns the resource for a given text string from the host application's resource data.
   * If no string resource matches the given text, the text itself is returned.
   * @param text The text to match.
   */
  static getResourceText(text: string): string;

  /**
   * Creates a new font object for use in text controls and titles.
   * @param name The font name, or the font family name.
   * @param style The font style; can be string, or one of the values of ScriptUI.FontStyle.
   * @param size The font size in points.
   */
  static newFont(name: string, style: string, size: number): ScriptUIFont;

  /**
   * Loads a new image from resources or disk files into an image object.
   * Creates a new global image object for use in controls that can display images, loading the associated images from the specified resources or image files.
   * @param normal The resource name or the disk file path to the image used for the normal state.
   * @param disabled The resource name, or the disk file path to the image used for the disabled state.
   * @param pressed The resource name, or the file-system path to the image used for the pressed state.
   * @param rollover The resource name, or the file-system path to the image used for the rollover state.
   */
  static newImage(
    normal: string,
    disabled?: string,
    pressed?: string,
    rollover?: string
  ): ScriptUIImage;
}

/**
 * The instance represents a top-level window or dialog box, which contains user-interface elements.
 * The globally available Window object provides access to predefined and script-defined windows.
 */
declare class Window extends _Control {
  /**
   * Set to true to make this window active.
   * A modal dialog that is visible is by definition the active dialog.
   * An active palette is the front-most window.
   * An active control is the one with focus—that is, the one that accepts keystrokes, or in the case of a Button, be selected when the user typesReturn or Enter.
   */
  active: boolean;

  /**
   * Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.
   * Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.
   */
  alignChildren: string;

  /**
   * For windows of type dialog, the UI element to notify when the user presses a cancellation key combination.
   * The cancellation key is the Esc key. By default, looks for a button whose name or text is "cancel" (case disregarded).
   */
  cancelElement: object;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the window.
   */
  characters: number;

  /**
   * The collection of UI elements that have been added to this container.
   * An array indexed by number or by a string containing an element's name. The length property of this array is the number of child elements for container elements, and is zero for controls.
   */
  readonly children: object[];

  /**
   * For windows of type dialog, the UI element to notify when the user presses a Enter key.
   * By default, looks for a button whose name or text is "ok" (case disregarded).
   */
  defaultElement: object;

  /**
   * The bounds of the window frame in screen coordinates.
   * The frame consists of the title bar and borders that enclose the content region of a window, depending on the windowing system.
   */
  readonly frameBounds: Bounds | [number, number, number, number];

  /**
   * The top left corner of the window frame in screen coordinates.
   * The same as [frameBounds.x, frameBounds.y]. Set this value to move the window frame to the specified location on the screen. The frameBounds value changes accordingly.
   */
  frameLocation: Point | [number, number];

  /**
   * The size and location of the window's frame in screen coordinates.
   */
  readonly frameSize: Dimension | [number, number];

  /**
   * Deprecated. Use ScriptUI.frameworkName instead.
   */
  static readonly frameworkName: string;

  /**
   * The graphics object that can be used to customize the window’s appearance, in response to the onDraw event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager;

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number;

  /**
   * True if the window is expanded.
   */
  maximized: boolean;

  /**
   * True if the window is minimized or iconified.
   */
  minimized: boolean;

  /**
   * The opacity of the window, in the range [0..1].
   * A value of 1.0 (the default) makes the window completely opaque, a value of 0 makes it completely transparent. Intermediate values make it partially transparent to any degree.
   */
  opacity: number;

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string;

  /**
   * The keypress combination that invokes this element's onShortcutKey() callback.
   */
  shortcutKey: string;

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number;

  /**
   * The title, label, or displayed text, a localizeable string.
   * Does not apply to containers of type group.
   */
  text: string;

  /**
   * Deprecated. Use ScriptUI.version instead.
   */
  static readonly version: any;

  /**
   * Creates a new window.
   * @param type The window type. One of: window: Creates a simple window that can be used as a main window for an application. (Not supported by Photoshop CS3.) palette: Creates a modeless dialog, also called a floating palette. (Not supported by Photoshop CS3.) dialog: Creates a modal dialog. This argument can also be a ScriptUI resource specification; in that case, all other arguments are ignored.
   * @param title The window title, a localizable string.
   * @param bounds The window's position and size.
   * @param properties An object containing creation-only properties.
   */
  constructor(
    type: string,
    title?: string,
    bounds?: Bounds | [number, number, number, number],
    properties?: Partial<_ControlPropertiesMap["window"]>
  );

  /**
   * Creates and returns a new control or container object and adds it to the children of this window.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd;

  /**
   * Displays a platform-standard dialog containing a short message and an OK button.
   * @param message TThe string for the displayed message.
   * @param title A string to appear as the title of the dialog, if the platform supports a title. Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is "Script Alert".
   * @param errorIcon When true, the platform-standard alert icon is replaced by the platform-standard error icon in the dialog. Ignored in Mac OS, which does not support icons for alert dialogs.
   */
  static alert(message: string, title?: string, errorIcon?: boolean): void;

  /**
   * Centers this window on screen or with repect to another window.
   * @param window The relative window. If not specified, centers on the screen.
   */
  center(window?: Window): void;

  /**
   * Closes this window.
   * . If an onClose() callback is defined for the window, calls that function before closing the window.
   * @param return_ A number to be returned from the show() method that invoked this window as a modal dialog.
   */
  close(return_?: any): void;

  /**
   * Displays a platform-standard dialog containing a short message and two buttons labeled Yes and No.
   * Returns true if the user clicked Yes, false if the user clicked No.
   * @param message The string for the displayed message.
   * @param noAsDefault When true, the No button is the default choice, selected when the user types Enter. Default is false, meaning that Yes is the default choice.
   * @param title A string to appear as the title of the dialog, if the platform supports a title. Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is "Script Alert".
   */
  static confirm(
    message: string,
    noAsDefault: boolean,
    title?: string
  ): boolean;

  /**
   * Use this method to find an existing window.
   * This includes windows defined by ScriptUI resource strings, windows already created by a script, and windows created by the application (if the application supports this case). This function is not supported by all applications. Returns a Window object found or generated from the resource, or null if no such window or resource exists.
   * @param type The name of a predefined resource available to JavaScript in the current application; or the window type. If a title is specified, the type is used if more than one window with that title is found. Can be null or the empty string.
   * @param title The window title.
   */
  static find(type: string, title: string): Window;

  /**
   * Sends a notification message to all listeners, simulating the specified user interaction event.
   * @param eventName The event name; if omitted, the default event is sent. One of: onClose, onMove, onMoving, onResize, onResizing, onShow
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the window acquires the keyboard focus.
   * Called when the user gives the window the keyboard focus by clicking it or otherwise making it the active window.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, calledwhen the window is about to be closed.
   * Called when a request is made to close the window, either by an explicit call to the close() function or by a user action (clicking the OS-specific close icon in the title bar). The function is called before the window actually closes; it can return false to cancel the close operation.
   */
  onClose(): boolean;

  /**
   * An event-handler callback function, called when the window loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active window to another window.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, calledwhen the windowhas been moved
   */
  onMove(): void;

  /**
   * An event-handler callback function, calledwhen the window is being moved
   * Called while a window in being moved, each time the position changes. A handler can monitor the move operation.
   */
  onMoving(): void;

  /**
   * An event-handler callback function, called after the window has been resized
   */
  onResize(): void;

  /**
   * An event-handler callback function, called while a window is being resized
   * Called while a window is being resized, each time the height or width changes. A handler can monitor the resize operation.
   */
  onResizing(): void;

  /**
   * In Windows only, an event-handler callback function, called a shortcut-key sequence is typed that matches the shortcutKey value for this window.
   */
  onShortcutKey(): void;

  /**
   * An event-handler callback function, called just before the window is displayed
   * Called when a request is made to open the window using the show() method, before the window is made visible, but after automatic layout is complete. A handler can modify the results of the automatic layout.
   */
  onShow(): void;

  /**
   * Displays a modal dialog that returns the user’s text input.
   * Returns the value of the text edit field if the user clicked OK, null if the user clicked Cancel.
   * @param prompt The string for the displayed message.
   * @param default_ The initial value to be displayed in the text edit field.
   * @param title A string to appear as the title of the dialog. In Windows, this appears in the window’s frame; in Mac OS it appears above the message. The default title string is "Script Prompt".
   */
  static prompt(prompt: string, default_?: string, title?: string): string;

  /**
   * Removes the specified child control from this window’s children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void;
}

/**
 * Controls the automatic layout behavior for a window or container.
 * The subclass AutoLayoutManager implements the default automatic layout behavior.
 */
declare class LayoutManager {
  /**
   * Invokes the automatic layout behavior for the managed container.
   * Adjusts sizes and positions of the child elements of this window or container according to the placement and alignment property values in the parent and children.
   * Invoked automatically the first time the window is displayed. Thereafter, the script must invoke it explicitly to change the layout in case of changes in the size or position of the parent or children.
   */
  layout(): void;

  /**
   * Performs a layout after a Window is resized, based on the new size.
   * Resizes the child elements of the managed container with a given alignment type, after the window has been resized by the user.
   */
  resize(): void;
}

/**
 * A drawing pen that defines a color and line width used to stroke paths.
 * Create with ScriptUIGraphics.newPen(). Use as a value of  foregroundColor properties, and pass as an argument to drawString() and strokePath() methods.
 */
declare class ScriptUIPen {
  /**
   * The pen color.
   * The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.
   */
  readonly color: number[];

  /**
   * The pixel width of the drawing line.
   */
  lineWidth: number;

  /**
   * The theme name.
   * The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.
   */
  readonly theme: string;

  /**
   * The pen type, solid or theme.
   * One of these constants: ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR
   */
  readonly type: string;
}

/**
 * A painting brush that encapsulates a color or pattern used to fill paths.
 * Create with ScriptUIGraphics.newBrush(). Use as a value of  backgroundColor properties, and pass as an argument to the fillPath() method.
 */
declare class ScriptUIBrush {
  /**
   * The brush color.
   * The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.
   */
  readonly color: number[];

  /**
   * The theme name.
   * The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.
   */
  readonly theme: string;

  /**
   * The brush type, solid or theme.
   * One of these constants: ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR
   */
  readonly type: number;
}

/**
 * A helper object that encapsulates a drawing path for a figure to be drawn into a window or control.
 * Create with the newPath(), moveto(), lineto(), rectPath(), and ellipsePath() methods.Used as value of currentPath, where it is acted upon by methods such as closePath().Pass as optional argument to fillPath() and strokePath(), which otherwise act upon the current path.
 */
declare class ScriptUIPath {}

/**
 * An object used to draw custom graphics, found in the graphics property of window, container, and control objects.
 * Allows a script to customize aspects of the element’s appearance, such as the color and font. Use an onDraw callback function to set these properties or call the functions.All measurements are in pixels.
 */
declare class ScriptUIGraphics {
  /**
   * Contains the enumerated constants for the type argument of newBrush().
   * Type constants are: SOLID_COLOR, THEME_COLOR.
   */
  static readonly BrushType: object;

  /**
   * Contains the enumerated constants for the type argument of newPen().
   * Type constants are: SOLID_COLOR, THEME_COLOR.
   */
  static readonly PenType: object;

  /**
   * The background color for containers; for non-containers, the parent background color.
   * The paint color and style is defined in this brush object.This property is only supported for controls likedropdownlist, edittext, and listbox.
   */
  backgroundColor: ScriptUIBrush;

  /**
   * The current drawing path, encapsulated in a path object.
   */
  readonly currentPath: ScriptUIPath;

  /**
   * The current position in the current drawing path.
   */
  readonly currentPoint: Point | [number, number];

  /**
   * The background color for containers when disabled or inactive; for non-containers, the parent background color.
   * The paint color and style is defined in this brush object.This property is only supported for controls likedropdownlist, edittext, and listbox.
   */
  disabledBackgroundColor: ScriptUIBrush;

  /**
   * The text color when the element is disabled or inactive.
   * The paint color and style is defined in this pen object.
   */
  disabledForegroundColor: ScriptUIPen;

  /**
   * The default font to use for displaying text.
   */
  font: ScriptUIFont;

  /**
   * The text color.
   * The paint color and style is defined in this pen object.
   */
  foregroundColor: ScriptUIPen;

  /**
   * Closes the current path.
   * Defines a line from the current postion (currentPoint) to the start point of the current path (the value of currentPath).
   */
  closePath(): void;

  /**
   * Draws a focus ring within a region of this element.
   * @param left The left coordinate of the region. Value is relative to the origin of this element.
   * @param top The top coordinate of the region. Value is relative to the origin of this element.
   * @param width The width of the region in pixels.
   * @param height The height of the region in pixels.
   */
  drawFocusRing(left: number, top: number, width: number, height: number): void;

  /**
   * Draws an image within a given region of the element.
   * Uses the version of the image that is appropriate to the element's current state.
   * @param image The image to draw. This object contains different versions of an image appropriate to various element states, such as a dimmed version for the disabled state.
   * @param left The left coordinate of the region, relative to the origin of this element.
   * @param top The top coordinate of the region, relative to the origin of this element.
   * @param width The width in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image width.
   * @param height The height in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image height.
   */
  drawImage(
    image: ScriptUIImage,
    left: number,
    top: number,
    width?: number,
    height?: number
  ): void;

  /**
   * Draw the platform-specific control associated with this element.
   */
  drawOSControl(): void;

  /**
   * Draw a string of text starting at a given point in this element, using a given drawing pen and font.
   * @param text The text string.
   * @param pen The drawing pen to use.
   * @param x The left coordinate, relative to the origin of this element.
   * @param y The top coordinate, relative to the origin of this element.
   * @param font The font to use. Default is the  font value in this object.
   */
  drawString(
    text: string,
    pen: ScriptUIPen,
    x: number,
    y: number,
    font?: ScriptUIFont
  ): void;

  /**
   * Defines an elliptical path within a given rectangular area in the currentPath object, which can be filled using fillPath() or stroked using strokePath().
   * Returns a Point object for the upper left corner of the area, which is the new currentPoint.
   * @param left The left coordinate of the region, relative to the origin of this element.
   * @param top The top coordinate of the region, relative to the origin of this element.
   * @param width The width of the region in pixels.
   * @param height The height of the region in pixels.
   */
  ellipsePath(
    left: number,
    top: number,
    width: number,
    height: number
  ): Point | [number, number];

  /**
   * Fills a path using a given painting brush.
   * @param brush The brush object that defines the fill color.
   * @param path The path object. Default is the currentPath.
   */
  fillPath(brush: ScriptUIBrush, path?: ScriptUIPath): void;

  /**
   * Adds a path segment to the currentPath.
   * The line is defined from the currentPoint to the specified destination point. Returns the Point objectfor the destination point, which becomes the new value of currentPoint.
   * @param x The X coordinate for the destination point, relative to the origin of this element.
   * @param y The Y coordinate for the destination point, relative to the origin of this element.
   */
  lineTo(x: number, y: number): Point | [number, number];

  /**
   * Calculates the size needed to display a string using the given font.
   * Returns a Dimension object that contains the height and width of the string in pixels.
   * @param text The text string to measure.
   * @param font The font to use. Default is the font value in this object.
   * @param boundingWidth The bounding width.
   */
  measureString(
    text: string,
    font?: ScriptUIFont,
    boundingWidth?: number
  ): Dimension | [number, number];

  /**
   * Adds a given point to the currentPath, and makes it the current drawing position.
   * Returns the Point object which is the new value of currentPoint.
   * @param x The X coordinate for the new point, relative to the origin of this element.
   * @param y The Y coordinate for the new point, relative to the origin of this element.
   */
  moveTo(x: number, y: number): Point | [number, number];

  /**
   * Creates a new painting brush object.
   * @param type The brush type, solid or theme. One of the constants ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR.
   * @param color The brush color. If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque. If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application.
   */
  newBrush(type: number, color: number[]): ScriptUIBrush;

  /**
   * Creates a new, empty path object.
   * Replaces any existing path in currentPath.
   */
  newPath(): ScriptUIPath;

  /**
   * Creates a new drawing pen object.
   * @param type The pen type, solid or theme. One of the constants ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR.
   * @param color The pen color. If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque. If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application.
   * @param width The width of the pen line in pixels. The line is centered around the current point. For example, if the value is 2, drawing a line from (0, 10) to (5, 10) paints the two rows of pixels directly above and below y-position 10.
   */
  newPen(type: number, color: number[], width: number): ScriptUIPen;

  /**
   * Defines a rectangular path in the currentPath object.
   * The rectangle can be filled using fillPath() or stroked using strokePath().Returns the Point objectfor the upper left corner of the rectangle, which becomes the new value of currentPoint.
   * @param left The left coordinate relative to the origin of this element.
   * @param top The top coordinate relative to the origin of this element.
   * @param width The width in pixels.
   * @param height The height in pixels.
   */
  rectPath(
    left: number,
    top: number,
    width: number,
    height: number
  ): Point | [number, number];

  /**
   * Strokes the path segments of a path with a given drawing pen.
   * @param pen The drawing pen that defines the color and line width.
   * @param path The path object. Default is the currentPath.
   */
  strokePath(pen: ScriptUIPen, path?: ScriptUIPath): void;
}

/**
 * Describes an input state at the time of the triggering  ScriptUIGraphics.onDraw() event.
 * Contains properties that report whether the current control has the input focus, and the particular mouse button and keypress state. Passed in as argument to ScriptUIGraphics.onDraw().
 */
declare class DrawState {
  /**
   * True if the Alt key is being pressed (in Windows only).
   */
  readonly altKeyPressed: boolean;

  /**
   * True if the Caps Lock key is being pressed.
   */
  readonly capsLockKeyPressed: boolean;

  /**
   * True if the Command key is being pressed (in Mac OS only).
   */
  readonly cmdKeyPressed: boolean;

  /**
   * True if the Ctrl key is being pressed.
   */
  readonly ctrlKeyPressed: boolean;

  /**
   * True if the element has the input focus.
   */
  readonly hasFocus: boolean;

  /**
   * True if the left mouse button is being pressed.
   */
  readonly leftButtonPressed: boolean;

  /**
   * True if the middle mouse button is being pressed.
   */
  readonly middleButtonPressed: boolean;

  /**
   * True if the cursor is hovering over this element.
   */
  readonly mouseOver: boolean;

  /**
   * True if the Num Lock key is being pressed.
   */
  readonly numLockKeyPressed: boolean;

  /**
   * True if the Option key is being pressed (in Mac OS only).
   */
  readonly optKeyPressed: boolean;

  /**
   * True if the right mouse button is being pressed.
   */
  readonly rightButtonPressed: boolean;

  /**
   * True if the Shift key is being pressed.
   */
  readonly shiftKeyPressed: boolean;
}

/**
 * Encapsulates the qualities of a font used to draw text into a control.
 * Create with the newFont() method.Used as a value of font. Passed as an argument to drawString() and measureString().
 */
declare class ScriptUIFont {
  /**
   * The font family name.
   */
  readonly family: string;

  /**
   * The complete font name, consisting of the family and style, if specified.
   */
  readonly name: string;

  /**
   * The font point size.
   */
  readonly size: number;

  /**
   * The font style. One of the constants in ScriptUIGraphics.FontStyle.
   */
  readonly style: object;

  /**
   * The name of a substitution font, a fallback font to substitute for this font if the requested font family or style is not available.
   */
  readonly substitute: string;
}

/**
 * Encapsulates a set of images that can be drawn into a control.
 * Different images can reflect the current state, such as a dimmed version for a disabled control. Create with the newImage() method. Passed as an argument to drawImage().
 */
declare class ScriptUIImage {
  /**
   * The image format. One of: resource, JPEG, GIF, TIFF, PNG, or PICT (Macintosh).
   */
  readonly format: string;

  /**
   * The image name. Either the file name, or the resource name.
   */
  readonly name: string;

  /**
   * The full path to the file that contains the image.
   */
  readonly pathname: string;

  /**
   * The image size in pixels.
   */
  readonly size: Dimension | [number, number];
}

/**
 * A text label that the user cannot change.
 */
declare class StaticText extends _Control {
  /**
   * Always false. This element cannot have input focus.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The text to display, a localizable string.
   */
  text: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A pushbutton element containing a mouse-sensitive text string.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class Button extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The text to display, a localizable string.
   */
  text: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * Amouse-sensitive pushbutton that displays an image instead of text.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class IconButton extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The image object that defines the image to be drawn.
   */
  image: ScriptUIImage;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * An editable text field that the user can select and change.
 * Calls the onChange() callback if the text is changed and the user types Enter or the control loses focus, or if its notify() method is called. Calls the onChanging() callback when any change is made to the text. The textselection property contains currently selected text.
 */
declare class EditText extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The current text displayed in the field, a localizable string.
   */
  text: string;

  /**
   * The currently selected text, or the empty string if there is no text selected.
   * Setting the value replaces the current text selection and modifies the value of the text property. If there is no current selection, inserts the new value into the text string at the current insertion point. The textselection value is reset to an empty string after it modifies the text value. Note that setting the textselection property before the element’s parent Window exists is an undefined operation.
   */
  textselection: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   * The handler is called only when the change is complete—that is, when focus moves to another control, or the user types Enter. The exact behavior depends on the creation parameter enterKeySignalsOnChange;see the properties property.
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for each keypress while this control has the input focus.
   */
  onChanging(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * Displays a list of choices, represented by ListItem objects.
 * When you create the object, you specify whether it allows the user to select only one or multiple items. If a list contains more items than can be displayed in the available area, a scrollbar may appear that allows the user to scroll through all the list items.You can specify the items on creation of the list object, or afterward using the list object’s add() method. You can remove items programmatically with the list object’s remove() and removeAll() methods. You can create a list box with multiple columns; in this case, each row is a selectable choice, and each ListItem represents one row.
 */
declare class ListBox extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child ListItem elements.
   */
  readonly children: object[];

  /**
   * For a multi-column list box, the column properties.
   * A JavaScript object with two read-only properties whose values are set by the creation parameters:
   * titles: An array of column title strings, whose length matches the number of columns specified at creation.
   * preferredWidths: An array of column widths, whose length matches the number of columns specified at creation.
   * visible: An array of boolean visible attributes, whose length matches the number of columns specified at creation.This property can be used to show/hide a column. Avaiblable in ScriptUI Version 6.0 or later provided ScriptUI.frameworkName == 'Flex'.
   */
  readonly columns: object;

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number];

  /**
   * The array of choice items displayed in the list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method. Each item has a selected property that is true when it is in the selected state.
   */
  readonly items: ListItem[];

  /**
   * The currently selected item for a single-selection list, or an array of items for current selection in a multi-selection list.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items. You can set the value using the index of an item or an array of indices, rather than object references. If set to an index value that is out of range, the operation is ignored. When set with index values, the property still returns object references.
   * If you set the value to an array for a single-selection list, only the first item in the array is selected.
   * If you set the value to a single item for a multi-selection list, that item is added to the current selection.
   */
  selection: ListItem;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Adds an item to the choices in this list.
   * Returns the item control object. If this is a multi-column list box, each added ListItem represents one selectable row.Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
   * @param type The type of the child element, the string "item".
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem;

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when an item in the listbox is double-clicked
   * Check the selection property to identify the item that was double-clicked.
   */
  onDoubleClick(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index, text value, or as a ListItem object.
   */
  remove(what: any): void;

  /**
   * Removes all child items from the list.
   */
  removeAll(): void;
}

/**
 * Displays a single visible item. When you click the control, a list drops down or pops up, and allows you to select one of the other items in the list.
 * Drop-down lists can have nonselectable separator items for visually separating groups of related items, as in a menu. You can specify the items on creation of the list object, or afterward using the list object’s add() method. You can remove items programmatically with the list object’s remove() and removeAll() methods. Calls the onChange() callback if the item selection is changed or if its notify() method is called.
 */
declare class DropDownList extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number];

  /**
   * The array of choice items displayed in the drop-down or pop-up list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method. Items in a drop-down list can be of type separator, in which case they cannot be selected, and are shown as a horizontal line. Each item has a selected property that is true when it is in the selected state.
   */
  readonly items: ListItem[];

  /**
   * The currently selectedlist item.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.
   */
  selection: ListItem | number;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Adds an item or separator to the choices in this list.
   * Returns the item control object for type="item", or null for type="separator".
   * @param type The type of the child element. Either item (a basic, selectable item with a text label) or separator
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem;

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index, text value, or as a ListItem object.
   */
  remove(what: any): void;

  /**
   * Removes all child items from the list.
   */
  removeAll(): void;
}

/**
 * An item in a list box, drop-down list, or tree view.
 * You can specify initial items in the creation parameters when creating the parent list. Create new items using the add() method (ListBox.add(), DropDownList.add(), TreeView.add()) in the parent list with control type="item", or, for DropDownList controls, type="separator".For a multi-column list box, the object represents one selectable row. Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
 */
declare class ListItem {
  /**
   * The checked state of an item in a list.
   * When true, the item is marked with the platform-appropriate checkmark. When false, no checkmark is drawn, but space is reserved for it in the left margin, so that the item lines up with other checkable items. When undefined, no space is reserved for a checkmark.
   */
  checked: boolean;

  /**
   * The expansion state of an item of type node that is a child of a TreeView list control.
   * When true, the item is in the expanded state and its children are shown, when false, it is collapsed and children are hidden.
   */
  expanded: boolean;

  /**
   * An image object for an icon to display in the item.
   * When specified, the image appropriate to the selections state is drawn to the left of the text label. If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the subitems property.
   */
  image: ScriptUIImage;

  /**
   * The 0-based index of this item in the items collection of its parent list control.
   */
  readonly index: number;

  /**
   * The parent element, a list control.
   */
  readonly parent: object;

  /**
   * The selection state of this item.
   * When true, the item is part of the selection for its parent list. When false, the item is not selected. Set to true to select this item in a single-selection list, or to add it to the selection array for a multi-selection list.
   */
  selected: boolean;

  /**
   * When the parent is a multi-column ListBox, this describes the labels for this selectable row in additional columns.
   * A array of JavaScript objects whose length is one less than the number of columns. The first member describes the label in the second column. Each member object has two properties, of which you can specify one or both:
   * text: A display string for the corresponding label.
   * image: An ScriptUIImage object for the corresponding label.
   */
  readonly subItems: any[];

  /**
   * The label text to display for the item, a localizable string.
   * If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the subitems property.
   */
  text: string;

  /**
   * The element type.
   * Normally "item", but an item whose parent is a DropDownList control can have type "separator". A separator item is not mouse-sensitive and is drawn as a horizontal line across the drop-down or pop-up menu.
   */
  readonly type: string;
}

/**
 * A dual-state control showing a box that has a checkmark when the value is true, and is empty when the value is false.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class Checkbox extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The text to display, a localizable string.
   */
  text: string;

  /**
   * The selection state of the control.
   * When true, the control is in the selected or set state and displays the check mark. When false, shows an empty box.
   */
  value: boolean;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A scrollbar with a draggable scroll indicator and stepper buttons to move the indicator.
 * The scrollbar control has a horizontal orientation if the width is greater than the height at creation time, or vertical if its height is greater than its width.
 * Calls the onChange() callback after the position of the indicator is changed or if its notify() method is called. Calls the onChanging() callback repeatedly while the user is moving the indicator. Scrollbars are often created with an associated EditText field to display the current value of the scrollbar, and to allow setting the scrollbar's position to a specific value.
 */
declare class Scrollbar extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The amount to increment or decrement a scrollbar indicator's position when the user clicks ahead or behind the moveable element.
   * Default is 20% of the range between the maxvalue and minvalue property values.
   */
  jumpdelta: number;

  /**
   * The maximum value allowed in the value property.
   * Together with minvalue, sets the scrolling range. Default is 100.
   */
  maxvalue: number;

  /**
   * The minimum value allowed in the value property.
   * Together with  maxvalue, sets the scrolling range.Default is 0.
   */
  minvalue: number;

  /**
   * The key sequence that invokes the  onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The amount by which to increment or decrement a scrollbar element's position when the user clicks a stepper button.
   */
  stepdelta: number;

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.
   */
  value: number;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control.
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for any motion of the position indicator while this control has the input focus.
   */
  onChanging(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A dual-state control, grouped with other radiobuttons, of which only one can be in the selected state.
 * Shows the selected state when value=true, empty when value=false. Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class RadioButton extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The label text for this button, a localizable string.
   */
  text: string;

  /**
   * The selection state of this button, selected when true.
   */
  value: boolean;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A slider bar that indicates a numeric value with a moveable position indicator.
 * All slider controls have a horizontal orientation. Calls the onChange() callback after the position of the indicator is changed or if its notify() method is called. Calls the onChanging() callback repeatedly while the user is moving the indicator. The value property contains the current position of the indicator within the range of minvalue to maxvalue.
 */
declare class Slider extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The maximum value allowed in the value property.
   * Together with minvalue, sets therange.Default is 100.
   */
  maxvalue: number;

  /**
   * The minimum value allowed in the value property.
   * Together with maxvalue, sets the range.Default is 0.
   */
  minvalue: number;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.
   */
  value: number;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control.
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for any motion of the position indicator while this control has the input focus.
   */
  onChanging(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A horizontal bar with an indicator that shows the progress of an operation.
 * All progressbar controls have a horizontal orientation. The value property contains the current position of the progress indicator; the default is 0. There is a minvalue property, but it is always 0; attempts to set it to a different value are silently ignored.
 */
declare class Progressbar extends _Control {
  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The maximum value in the range. Default is 100.
   */
  maxvalue: number;

  /**
   * The minimum value in the range; always 0. If set to a different value, it is ignored.
   */
  minvalue: number;

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by 0 to maxvalue, it is automatically reset to the closest boundary.
   */
  value: number;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;
}

/**
 * A hierarchical list whose items can contain child items.
 * The ListItem children of this control (in the items array) can be of type node, which means that they can contain child items. An item with child items can expanded, so that the child items are displayed, or collapsed, so that the child items are hidden Individual items can be selected at any level of the tree.
 */
declare class TreeView extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number];

  /**
   * The array of top-level items displayed in the list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method.
   */
  readonly items: ListItem[];

  /**
   * The currently selectedlist item.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.
   */
  selection: ListItem;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Adds an item to the top-level choices in this list.
   * Returns the item control object.
   * @param type The type of the child element, the string "item".
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem;

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the user collapses (closes) an expanded node in the treeview.
   * @param item The ListItem node that collapsed.
   */
  onCollapse(item: ListItem): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the user expands (opens) a collapsed node in the treeview.
   * @param item The ListItem node that expanded.
   */
  onExpand(item: ListItem): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index in the top-level item list, text value, or as a ListItem object.
   */
  remove(what: any): void;

  /**
   * Removes all child items from the list.
   */
  removeAll(): void;
}

/**
 * A control that contains a Flash Player, which can load and play Flash movies stored in SWF files.
 * The ScriptUI FlashPlayer element runs the Flash application within an Adobe application. The Flash application runs ActionScript, a different implementation of JavaScript from the ExtendScript version of JavaScript that Adobe applications run. A control object of this type contains functions that allow your script to load SWF files, control movie playback, and communicate with the ActionScript environment.
 */
declare class FlashPlayer extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A function definition for a callback from the Flash ActionScript environment.
   * The Flash ActionScript code can call any callback function defined on the ExtendScript side of the FlashPlayer object, invoking it by name as a property of the control object. The function can take any arguments of a supported data types, and can return any value of a supported data type. data types:Number, String, Boolean, null, undefined, Object, Array.
   */
  callback(): void;

  /**
   * Invokes an ActionScript function defined in the Flash application.
   * Returns the result of the invoked function, which must be one of the allowed types. The ActionScript class and date objects are not supported as return values.
   * @param name The name of a Flash ActionScript function that has been registered with the ExternalInterface object by the currently loaded SWF file.
   * @param argument An argument to pass through to the function. There can be any number of arguments. An argument must be one of these data types:Number, String, Boolean, null, undefined, Object, Array. No other data types are supported.
   */
  invokePlayerFunction(name: string, argument?: any): any;

  /**
   * Loads a movie into the Flash Player, and begins playing it.
   * @param file The File object for the SWF file to load.
   */
  loadMovie(file: File): void;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * Restarts a movie that has been stopped.
   * Do not use on a movie that is currently playing.The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented).
   * @param rewind When true, restarts the movie from the beginning; otherwise, starts playing from the	point where it was stopped.
   */
  playMovie(rewind: boolean): void;

  /**
   * Halts playback of the current movie.
   * The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented).Using stopMovie() from the player's hosting environment has no effect on an SWF file playing in a ScriptUI Flash Player element. It is, however, possible to produce an SWF using Flash Authoring that can stop itself in response to user interaction.
   */
  stopMovie(): void;
}

/**
 * A container for other controls within a window.
 * A group can specify layout options for its child elements. Hiding a group hides all its children. Making it visible makes visible those children that are not individually hidden.
 */
declare class Group extends _Control {
  /**
   * Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.
   * Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.
   */
  alignChildren: string;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager;

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number;

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string;

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number;

  /**
   * Adds a child element to this container.
   * Creates and returns a new control or container object and adds it to the children of this group.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd;

  /**
   * An event-handler callback function, called when the group is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * Removes the specified child control from this group's children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void;
}

/**
 * A container for other types of controls, with an optional frame.
 * A panel can specify layout options for its child elements. Hiding a panel hides all its children. Making it visible makes visible those children that are not individually hidden.
 */
declare class Panel extends _Control {
  /**
   * Specifies how to align the child elements.
   */
  alignChildren: string;

  /**
   * Reserve space for the specified number of characters; affects calculation of preferredSize .
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager;

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number;

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string;

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number;

  /**
   * The title or label text, a localizable string.
   */
  text: string;

  /**
   * Adds a child element to this container.
   * Creates and returns a new control or container object and adds it to the children of this group.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd;

  /**
   * An event-handler callback function, called when the panel is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * Removes the specified child control from this group's children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void;
}

/**
 * Defines the location of a window or UI element. Contains a 2-element array.
 * Specifies the origin point of an element as horizontal and vertical pixel offsets from the origin of the element's coordinate space.
 * A Point object is created when you set an element’s location property. You can set the property using a JavaScript object with properties named x and y, or an array with 2 values in the order [x, y].
 */
declare class Point {
  /**
   * The left coordinate.
   */
  left: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The top coordinate.
   */
  top: number;

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  x: number;

  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  y: number;

  [0]: number;

  [1]: number;
}

/**
 * Defines the size of a window or UI element. Contains a 2-element array.
 * Specifies the height and width of an element in pixels. A Dimension object is created when you set an element’s size property. You can set the property using a JavaScript object with named properties {width: wd, height: ht}, or an array with 2 values in the order [wd, ht].
 */
declare class Dimension {
  /**
   * The height in pixels.
   */
  height: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The width in pixels.
   */
  width: number;

  [0]: number;

  [1]: number;
}

/**
 * Defines the boundaries of a window within the screen’s coordinate space, or of a UI element within the container’s coordinate space.
 * A Bounds object is created when you set an element’s bounds property. You can set the property using a JavaScript object with properties named left, top, right, bottom or x, y, width, height, or an array with 4 values in the order [x, y, wd, ht].
 */
declare class Bounds {
  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  bottom: number;

  /**
   * The height in pixels.
   */
  height: number;

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  left: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The width in pixels.
   */
  right: number;

  /**
   * The height in pixels.
   */
  top: number;

  /**
   * The width in pixels.
   */
  width: number;

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  x: number;

  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  y: number;

  [0]: number;

  [1]: number;

  [2]: number;

  [3]: number;
}

/**
 * Encapsulates input event information for an event that propagates through a container and control hierarchy.
 * Implements W3C standard event handling. This object is passed to a function that you register to respond to events of a certain type that occur in a window or control. Use windowObj.addEventListener() or controlObj.addEventListener() to register a handler function.
 */
declare class UIEvent {
  /**
   * True if the event is of a type that bubbles.
   */
  readonly bubbles: boolean;

  /**
   * True if the default action associated with the event can be canceled with preventDefault().
   */
  readonly cancelable: boolean;

  /**
   * True if this event can be captured.
   */
  readonly captures: boolean;

  /**
   * The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.
   */
  readonly currentTarget: boolean;

  /**
   * The click count for a mouse-click event.
   */
  readonly detail: any;

  /**
   * The current phase of event propagation; one of none, target, capture, bubble.
   */
  readonly eventPhase: string;

  /**
   * The event target object for this event.
   */
  readonly target: object;

  /**
   * The date and time at which the event occurred.
   */
  readonly timeStamp: Date;

  /**
   * The name of the event that thisobject represents.
   * Event types are listed in the JavaScript Tools Guide.
   */
  readonly type: string;

  /**
   * The ScriptUI element that this event relates to.
   */
  readonly view: any;

  /**
   * Creates an event.
   * The UIEvent object is normally created by ScriptUI and passed to your event handler. However, you can simulate a user action by constructing an event object and sending it to a target object’s dispatchEvent() function.
   * @param type The event type. See UIEvent.type property.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param view The ScriptUI element that this event relates to.
   * @param detail The click count for a mouse-click event.
   */
  constructor(
    type: string,
    captures: boolean,
    bubbles: boolean,
    view?: object,
    detail?: number
  );

  /**
   * Initializes a UI event as a core W3C event.
   * @param type The event type.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param cancelable Set to true if the default action is cancelable.
   */
  initEvent(
    type: string,
    captures: boolean,
    bubbles: boolean,
    cancelable: boolean
  ): void;

  /**
   * Initializes an event.
   * @param type The event type.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param view The ScriptUI element that this event relates to.
   * @param detail The click count for a mouse-click event.
   */
  initUIEvent(
    type: string,
    captures: boolean,
    bubbles: boolean,
    view?: object,
    detail?: number
  ): void;

  /**
   * Prevents the default action associated with this event from being called.
   */
  preventDefault(): void;

  /**
   * Stops the propagation of this event.
   */
  stopPropagation(): void;
}

/**
 * Base class for UIEvent.
 * Encapsulates input event information for an event that propagates through a container and control hierarchy.Implements W3C standard event handling.
 */
declare class Event {
  /**
   *
   */
  static readonly AT_TARGET: any;

  /**
   *
   */
  static readonly BUBBLING_PHASE: any;

  /**
   *
   */
  static readonly CAPTURING_PHASE: any;

  /**
   *
   */
  static readonly NOT_DISPATCHING: any;

  /**
   * True if the event is of a type that bubbles.
   */
  readonly bubbles: boolean;

  /**
   * True if the default action associated with the event can be canceled with preventDefault().
   */
  readonly cancelable: boolean;

  /**
   * True if this event can be captured.
   */
  readonly captures: boolean;

  /**
   * The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.
   */
  readonly currentTarget: boolean;

  /**
   * The current phase of event propagation; one of none, target, capture, bubble.
   */
  readonly eventPhase: string;

  /**
   * The event target object for this event.
   */
  readonly target: object;

  /**
   * The date and time at which the event occurred.
   */
  readonly timeStamp: Date;

  /**
   * The name of the event that this object represents.
   * Event types are listed in the JavaScript Tools Guide.
   */
  readonly type: string;

  /**
   * Prevents the default action associated with this event from being called.
   */
  preventDefault(): void;

  /**
   * Stops the propagation of this event.
   */
  stopPropagation(): void;
}

/**
 * Defines attributes of the ScriptUI environment.
 * Access through the ScriptUI.environment property.
 */
declare class Environment {
  /**
   * An object that reports the active state of the keyboard at any time.
   * Provides access to the key state independent of the event-handling framework.
   */
  readonly keyboardState: KeyboardState;
}

/**
 * Provides access to objects used in the ScriptUI event system.
 * Access through the ScriptUI.events property.
 */
declare class Events {
  /**
   * Creates an instance of the specified Event subclass.
   * The Event returned is a UIEvent,
   * KeyboardEvent or MouseEvent object,
   * depending on the requested type. This object can be passed as a parameter to an element's dispatchEvent
   * function in order to simulate a user-interaction event.
   * @param eventType The name of an event type: one of "UIEvent", "KeyboardEvent", or "MouseEvent".
   */
  createEvent(eventType: string): Event;
}

/**
 * Reports the active state of the keyboard.
 * Access through the ScriptUI.environment.keyboardState property.
 * Query the properties of this object at any time to determine the current key that is down and any modifiers that are pressed.
 */
declare class KeyboardState {
  /**
   * True if the Alt or Option key is pressed.
   */
  readonly altKey: boolean;

  /**
   * True if the Ctrl key is pressed.
   */
  readonly ctrlKey: boolean;

  /**
   * A string containing the name of the currently pressed key, such as "a", or an empty string.
   */
  readonly keyName: string;

  /**
   * True if the Cmd key (in Mac OS) or Windows key (in Windows) is pressed.
   */
  readonly metaKey: boolean;

  /**
   * True if the Shift key is pressed.
   */
  readonly shiftKey: boolean;
}

/**
 * Added by types-for-adobe
 */
declare class _Control {
  /**
   * The alignment style for child elements of a container. If defined, this value overrides the alignChildren setting for the parent container.
   * This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive.
   * For orientation=row:top, bottom, fill
   * For orientation=column: left, right, fill
   * For orientation=stack:top, bottom, left, right, fill
   */
  alignment: string;

  /**
   * The boundaries of the element, in parent-relative coordinates.
   * Setting an element's size or location changes its bounds property, and vice-versa.
   */
  bounds: Bounds | [number, number, number, number];

  /**
   * True if this element is enabled.
   * An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.
   */
  enabled: boolean;

  /**
   * The help text that is displayed when the mouse hovers over the element.
   */
  helpTip: string;

  /**
   * The number of pixels to indent the element during automatic layout.
   * Applies for column orientation and left alignment, or row orientation and top alignment.
   */
  indent: number;

  /**
   * The upper left corner of this element relative to its parent.
   * The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.
   */
  location: Point | [number, number];

  /**
   * The maximum height and width to which the element can be resized.
   */
  maximumSize: Dimension | [number, number];

  /**
   * The minimum height and width to which the element can be resized.
   */
  minimumSize: Dimension | [number, number];

  /**
   * The parent element.
   */
  readonly parent: object;

  /**
   * The preferred size, used by layout managers to determine the best size for each element.
   * If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes. A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.
   * To set a specific value for only one dimension, specify the other dimension as -1.
   */
  preferredSize: Dimension | [number, number];

  /**
   * The current dimensions of this element.
   * Initially undefined, and unless explicitly set by a script, it is defined by a LayoutManager . A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.
   */
  size: Dimension | [number, number];

  /**
   * The element type.
   */
  readonly type: string;

  /**
   * True if this element is shown, false if it is hidden.
   * When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.
   */
  visible: boolean;

  /**
   * The window that this element belongs to.
   */
  readonly window: Window;

  /**
   * The bounds of this element relative to the top-level parent window.
   */
  readonly windowBounds: Bounds | [number, number, number, number];

  /**
   * Registers an event handler for a particular type of event occuring in this element.
   * @param eventName The name of the event. Event names are listed in the JavaScript Tools Guide.
   * @param handler The function that handles the event. This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the UIEvent object.
   * @param capturePhase When true, the handler is called only in the capturing phase of the event propagation. Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.
   */
  addEventListener(
    eventName: string,
    handler: Function,
    capturePhase?: boolean
  ): boolean;

  /**
   * Simulates the occurrence of an event in this target.
   * A script can create a UIEvent object for a specific event and pass it to this method to start the event propagation for the event.
   */
  dispatchEvent(): Event;

  /**
   * Hides this element.
   */
  hide(): void;

  /**
   * Unregisters an event handler for a particular type of event occuring in this element.
   * All arguments must be identical to those that were used to register the event handler.
   * @param eventName The name of the event.
   * @param handler The function that handles the event.
   * @param capturePhase Whether to call the handler only in the capturing phase of the event propagation.
   */
  removeEventListener(
    eventName: string,
    handler: Function,
    capturePhase?: boolean
  ): boolean;

  /**
   * Shows this element.
   * When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states.
   * If an onShow() callback is defined for a window, calls that function before showing the window.When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states. For a modal dialog, opens the dialog and does not return until the dialog is dismissed. If it is dismissed via the close() method, this method returns any result value passed to that method. Otherwise, returns 0.
   */
  show(): number | undefined;
}

/**
 * Creation properties map
 * An object that contains one or more creation properties of the element (properties used only when the element is created).
 */
interface _ControlPropertiesMap {
  /**
   * Creation properties of a Button
   * But the third argument to the add() method that creates it can be the initial text value.
   * @param name A unique name for the control. Special name "ok" makes the button primary for parent dialog, and the special name "cancel" makes the button default cancel button for parent dialog.
   */
  button: {
    name: string;
  };

  /**
   * Creation properties of a CheckBox
   * The third argument to the add() method that creates it is the text to be displayed.
   * @param name A unique name for the control.
   */
  checkbox: {
    name: string;
  };

  /**
   * Creation properties of a DropDownList
   * @param name A unique name for the control.
   * @param items An array of strings for the text of each list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   */
  dropdownlist: {
    name: string;
    items: string[];
  };

  /**
   * Creation properties of an EditText
   * @param name A unique name for the control.
   * @param multiline When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.
   * @param borderless When true, the control is drawn with no border. Default is false.
   * @param scrollable For multiline elements only. When true (the default), the text field has a vertical scrollbar that is enabled when the element contains more text than fits in the visible area. When false, no vertical scrollbar appears; if the element contains more text than fits in the visible area, the arrow keys can be used to scroll the text up and down.
   * @param readonly When false (the default), the control accepts text input. When true, the control does not accept input but only displays the contents of the text property.
   * @param noecho When false (the default), the control displays input text. When true, the control does not display input text (used for password input fields).
   * @param enterKeySignalsOnChange When false (the default), the control signals an onChange event when the editable text is changed and the control loses the keyboard focus (that is, the user tabs to another control, clicks outside the control, or types Enter). When true, the control only signals an onChange() event when the editable text is changed and the user types Enter; other changes to the keyboard focus do not signal the event.
   * @param wantReturn Only applies to multiple line edit controls in ScriptUI Version 6.0 or later. When true the RETURN/ENTER keystroke is considered as text-input advancing the cursor to the next line. The default value is false.
   */
  edittext: {
    name: string;
    multiline: boolean;
    borderless: boolean;
    scrollable: boolean;
    readonly: boolean;
    noecho: boolean;
    enterKeySignalsOnChange: boolean;
    wantReturn: boolean;
  };

  /**
   * Creation properties of a FlashPlayer
   * @param name A unique name for the control.
   */
  flashplayer: {
    name: string;
  };

  /**
   * Creation properties of a Group
   * @param name A unique name for the control.
   */
  group: {
    name: string;
  };

  /**
   * Creation properties of an IconButton
   * @param name A unique name for the control.
   * @param style A string for the visual style, either "button", which has a visible border with a raised or 3D appearance, or "toolbutton", which has a flat appearance, appropriate for inclusion in a toolbar.
   * @param toggle For a button-style control, a value of true causes it to get a button-pressed appearance the first time it is clicked, and alternate with the unpressed appearance each time it is clicked. The toggle state is reflected in the control’s value property.
   */
  iconbutton: {
    name: string;
    style: "button" | "toolbutton";
    toggle: boolean;
  };

  /**
   * Creation properties of a ListBox
   * @param name A unique name for the control.
   * @param multiselect When false (the default), only one item can be selected. When true, multiple items can be selected.
   * @param selected When true, multiple items can be selected.
   * @param items An array of strings for the text of each list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   * @param numberOfColumns A number of columns in which to display the items; default is 1. When there are multiple columns, each ListItem object represents a selectable row. Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
   * @param showHeaders True to display column titles.
   * @param columnWidths An array of numbers for the preferred width in pixels of each column.
   * @param columnTitles A corresponding array of strings for the title of each column, to be shown if showHeaders is true.
   */
  listbox: {
    name: string;
    multiselect: boolean;
    selected: boolean;
    items: string[];
    numberOfColumns: number;
    showHeaders: boolean;
    columnWidths: number[];
    columnTitles: string[];
  };

  /**
   * Creation properties of a Panel
   * @param name A unique name for the control.
   * @param borderStyle A string that specifies the appearance of the border drawn around the panel. One of black, etched, gray, raised, sunken. Default is etched.
   * @param su1PanelCoordinates Photoshop only. When true, this panel automatically adjusts the positions of its children for compatability with Photoshop CS. Default is false, meaning that the panel does not adjust the positions of its children, even if the parent window has automatic adjustment enabled.
   */
  panel: {
    name: string;
    borderStyle: string;
    su1PanelCoordinates: boolean;
  };

  /**
   * Creation properties of a ProgressBar
   * The third argument of the add() method that creates it is the initial value (default 0), and the fourth argument is the maximum value of the range (default 100).
   * @param name A unique name for the control.
   */
  progressbar: {
    name: string;
  };

  /**
   * Creation properties of a RadioButton
   * The third argument of the add() method that creates can be the label text.
   * @param name A unique name for the control.
   */
  radiobutton: {
    name: string;
  };

  /**
   * Creation properties of a Scrollbar
   * The third argument of the add() method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.
   * @param name A unique name for the control.
   */
  scrollbar: {
    name: string;
  };

  /**
   * Creation properties of a Slider
   * The third argument of the add() method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.
   * @param name A unique name for the control.
   */
  slider: {
    name: string;
  };

  /**
   * Creation properties of a StaticText
   * @param name A unique name for the control.
   * @param multiline When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.
   * @param scrolling When false (the default), the displayed text cannot be scrolled. When true, the displayed text can be vertically scrolled using the Up Arrow and Down Arrow; this case implies multiline=true.
   * @param truncate If middle or end, defines where to remove characters from the text and replace them with an ellipsis if the specified title does not fit within the space reserved for it. If none, and the text does not fit, characters are removed from the end, without any replacement ellipsis character.
   */
  statictext: {
    name: string;
    multiline: boolean;
    scrolling: boolean;
    truncate: string;
  };

  /**
   * Creation properties of a TreeView
   * @param name A unique name for the control.
   * @param items An array of strings for the text of each top-level list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   */
  treeview: {
    name: string;
    items: string[];
  };

  /**
   * Creation properties of a Window
   * @param resizeable When true, the window can be resized by the user. Default is false.
   * @param su1PanelCoordinates Photoshop only. When true, the child panels of this window automatically adjust the positions of their children for compatability with Photoshop CS (in which the vertical coordinate was measured from outside the frame). Default is false. Individual panels can override the parent window’s setting.
   * @param closeButton Bridge only. When true, the title bar includes a button to close the window, if the platform and window type allow it. When false, it does not. Default is true. Not used for dialogs.
   * @param maximizeButton Bridge only. When true, the title bar includes a button to expand the window to its maximum size (typically, the entire screen), if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Not used for dialogs.
   * @param minimizeButton Bridge only. When true, the title bar includes a button to minimize or iconify the window, if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Main windows cannot have a minimize button in Mac OS. Not used for dialogs.
   * @param independent When true, a window of type window is independent of other application windows, and can be hidden behind them in Windows. In Mac OS, has no effect. Default is false.
   * @param borderless When true, the window has no title bar or borders. Properties that control those features are ignored.
   */
  window: {
    resizeable: boolean;
    su1PanelCoordinates: boolean;
    closeButton: boolean;
    maximizeButton: boolean;
    minimizeButton: boolean;
    independent: boolean;
    borderless: boolean;
  };

  /**
   * A ListItem object has no creation properties.
   */
  listitem: {};
}

interface _WindowPanelGroupAdd {
  (
    type: "button",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["button"]>
  ): Button;
  (
    type: "checkbox",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["checkbox"]>
  ): Checkbox;
  (
    type: "dropdownlist",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["dropdownlist"]>
  ): DropDownList;
  (
    type: "edittext",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["edittext"]>
  ): EditText;
  (
    type: "flashplayer",
    bounds?: Bounds | [number, number, number, number],
    movieToLoad?: string | File,
    properties?: Partial<_ControlPropertiesMap["flashplayer"]>
  ): FlashPlayer;
  (
    type: "group",
    bounds?: Bounds | [number, number, number, number],
    properties?: Partial<_ControlPropertiesMap["group"]>
  ): Group;
  (
    type: "iconbutton",
    bounds?: Bounds | [number, number, number, number],
    icon?: string | File,
    properties?: Partial<_ControlPropertiesMap["iconbutton"]>
  ): IconButton;
  (
    type: "listbox",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["listbox"]>
  ): ListBox;
  (
    type: "panel",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["panel"]>
  ): Panel;
  (
    type: "progressbar",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["progressbar"]>
  ): Progressbar;
  (
    type: "radiobutton",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["radiobutton"]>
  ): RadioButton;
  (
    type: "scrollbar",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    min?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["scrollbar"]>
  ): Scrollbar;
  (
    type: "slider",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    min?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["slider"]>
  ): Slider;
  (
    type: "statictext",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["statictext"]>
  ): StaticText;
  (
    type: "treeview",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["treeview"]>
  ): TreeView;
}

interface ExternalObjectConstructor {
  readonly prototype: ExternalObject;

  /**
   * Creates a new ExternalObject object.
   */
  new (lib: string): ExternalObject;
  (lib: string): ExternalObject;
}
declare const ExternalObject: ExternalObjectConstructor;

interface ExternalObject {
  /**
   * Set to true to write status information to standard output (the
   * JavaScript Console in the ExtendScript Toolkit). Set to false to turn
   * logging off. Default is false.
   */
  log: boolean;

  /**
   * A set of alternate paths in which to search for the shared library files, a
   * single string with multiple path specifications delimited by semicolons
   * (;). Paths can be absolute or relative to the Folder.startup location.
   */
  searchFolders: string;

  /**
   * The version of the library, as returned by ESGetVersion()
   */
  version: number;

  /**
   * Reports whether a compiled C/C++ library can be found, but does not load it. If logging is on, the
   * paths searched are reported to the JavaScript Console in the ExtendScript Toolkit.
   * Returns true if the library is found, false otherwise.
   * @param spec The file specification for the compiled library, with or without path information.
   */
  search(spec: string): boolean;

  /**
   * Explicitly shuts down the ExternalObject dynamic library wrapped by this instance.
   * It can be helpful to force a shutdown of the external library if termination of external libraries during
   * the shutdown of the hosting application does not occur in the correct order.
   */
  terminate(): undefined;
}

interface CSXSEventConstructor {
  readonly prototype: CSXSEvent;

  /**
   * Creates a new CSXSEvent object.
   */
  new (type?: string, scope?: string, data?: string): CSXSEvent;
  (type?: string, scope?: string, data?: string): CSXSEvent;
}
declare const CSXSEvent: CSXSEventConstructor;

interface CSXSEvent {
  /**
   * Retrieves the unique identifier of the application from which this event was dispatched.
   */
  readonly appId: string;

  /**
   * Retrieves or sets the payload of this event.
   */
  data: string;

  /**
   * Retrieves the unique identifier of the extension from which this event was dispatched.
   */
  readonly extensionId: string;

  /**
   * Retrieves the scope of this event.
   */
  scope: string;

  /**
   * Retrieves the type of this event.
   */
  type: string;

  /**
   * Dispatch the event
   */
  dispatch(): void;
}
`;

let es5 = `
declare const NaN: number;
declare const Infinity: number;

/**
  * Evaluates JavaScript code and executes it.
  * @param x A String value that contains valid JavaScript code.
  */
declare function eval(x: string): any;

/**
  * Converts A string to an integer.
  * @param s A string to convert into a number.
  * @param radix A value between 2 and 36 that specifies the base of the number in numString.
  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
  * All other strings are considered decimal.
  */
declare function parseInt(s: string, radix?: number): number;

/**
  * Converts a string to a floating-point number.
  * @param string A string that contains a floating-point number.
  */
declare function parseFloat(string: string): number;

/**
  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).
  * @param number A numeric value.
  */
declare function isNaN(number: number): boolean;

/**
  * Determines whether a supplied number is finite.
  * @param number Any numeric value.
  */
declare function isFinite(number: number): boolean;

/**
  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).
  * @param encodedURI A value representing an encoded URI.
  */
declare function decodeURI(encodedURI: string): string;

/**
  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).
  * @param encodedURIComponent A value representing an encoded URI component.
  */
declare function decodeURIComponent(encodedURIComponent: string): string;

/**
  * Encodes a text string as a valid Uniform Resource Identifier (URI)
  * @param uri A value representing an encoded URI.
  */
declare function encodeURI(uri: string): string;

/**
  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).
  * @param uriComponent A value representing an encoded URI component.
  */
declare function encodeURIComponent(uriComponent: string): string;

/**
  * Computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.
  * @param string A string value
  */
declare function escape(string: string): string;

/**
  * Computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.
  * @param string A string value
  */
declare function unescape(string: string): string;

interface Symbol {
  /** Returns a string representation of an object. */
  toString(): string;

  /** Returns the primitive value of the specified object. */
  valueOf(): symbol;
}

declare type PropertyKey = string | number | symbol;

interface PropertyDescriptor {
    configurable?: boolean;
    enumerable?: boolean;
    value?: any;
    writable?: boolean;
    get?(): any;
    set?(v: any): void;
}

interface PropertyDescriptorMap {
    [s: string]: PropertyDescriptor;
}

interface Object {
    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */
    constructor: Function;

    /** Returns a string representation of an object. */
    toString(): string;

    /** Returns a date converted to a string using the current locale. */
    toLocaleString(): string;

    /** Returns the primitive value of the specified object. */
    valueOf(): Object;

    /**
      * Determines whether an object has a property with the specified name.
      * @param v A property name.
      */
    hasOwnProperty(v: PropertyKey): boolean;

    /**
      * Determines whether an object exists in another object's prototype chain.
      * @param v Another object whose prototype chain is to be checked.
      */
    isPrototypeOf(v: Object): boolean;

    /**
      * Determines whether a specified property is enumerable.
      * @param v A property name.
      */
    propertyIsEnumerable(v: PropertyKey): boolean;
}

interface ObjectConstructor {
    new(value?: any): Object;
    (): any;
    (value: any): any;

    /** A reference to the prototype for a class of objects. */
    readonly prototype: Object;

    /**
      * Returns the prototype of an object.
      * @param o The object that references the prototype.
      */
    getPrototypeOf(o: any): any;

    /**
      * Gets the own property descriptor of the specified object.
      * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.
      * @param o Object that contains the property.
      * @param p Name of the property.
    */
    getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;

    /**
      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly
      * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.
      * @param o Object that contains the own properties.
      */
    getOwnPropertyNames(o: any): string[];

    /**
      * Creates an object that has the specified prototype or that has null prototype.
      * @param o Object to use as a prototype. May be null.
      */
    create(o: object | null): any;

    /**
      * Creates an object that has the specified prototype, and that optionally contains specified properties.
      * @param o Object to use as a prototype. May be null
      * @param properties JavaScript object that contains one or more property descriptors.
      */
    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;

    /**
      * Adds a property to an object, or modifies attributes of an existing property.
      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.
      * @param p The property name.
      * @param attributes Descriptor for the property. It can be for a data property or an accessor property.
      */
    defineProperty(o: any, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): any;

    /**
      * Adds one or more properties to an object, and/or modifies attributes of existing properties.
      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.
      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.
      */
    defineProperties(o: any, properties: PropertyDescriptorMap & ThisType<any>): any;

    /**
      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.
      * @param o Object on which to lock the attributes.
      */
    seal<T>(o: T): T;

    /**
      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
      * @param o Object on which to lock the attributes.
      */
    freeze<T>(a: T[]): ReadonlyArray<T>;

    /**
      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
      * @param o Object on which to lock the attributes.
      */
    freeze<T extends Function>(f: T): T;

    /**
      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
      * @param o Object on which to lock the attributes.
      */
    freeze<T>(o: T): Readonly<T>;

    /**
      * Prevents the addition of new properties to an object.
      * @param o Object to make non-extensible.
      */
    preventExtensions<T>(o: T): T;

    /**
      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.
      * @param o Object to test.
      */
    isSealed(o: any): boolean;

    /**
      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.
      * @param o Object to test.
      */
    isFrozen(o: any): boolean;

    /**
      * Returns a value that indicates whether new properties can be added to an object.
      * @param o Object to test.
      */
    isExtensible(o: any): boolean;

    /**
      * Returns the names of the enumerable properties and methods of an object.
      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
      */
    keys(o: {}): string[];
}

/**
  * Provides functionality common to all JavaScript objects.
  */
declare const Object: ObjectConstructor;

/**
  * Creates a new function.
  */
interface Function {
    /**
      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.
      * @param thisArg The object to be used as the this object.
      * @param argArray A set of arguments to be passed to the function.
      */
    apply(this: Function, thisArg: any, argArray?: any): any;

    /**
      * Calls a method of an object, substituting another object for the current object.
      * @param thisArg The object to be used as the current object.
      * @param argArray A list of arguments to be passed to the method.
      */
    call(this: Function, thisArg: any, ...argArray: any[]): any;

    /**
      * For a given function, creates a bound function that has the same body as the original function.
      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
      * @param thisArg An object to which the this keyword can refer inside the new function.
      * @param argArray A list of arguments to be passed to the new function.
      */
    bind(this: Function, thisArg: any, ...argArray: any[]): any;

    /** Returns a string representation of a function. */
    toString(): string;

    prototype: any;
    readonly length: number;

    // Non-standard extensions
    arguments: any;
    caller: Function;
}

interface FunctionConstructor {
    /**
      * Creates a new function.
      * @param args A list of arguments the function accepts.
      */
    new(...args: string[]): Function;
    (...args: string[]): Function;
    readonly prototype: Function;
}

declare const Function: FunctionConstructor;

/**
 * Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.
 */
type ThisParameterType<T> = T extends (this: unknown, ...args: any[]) => any ? unknown : T extends (this: infer U, ...args: any[]) => any ? U : unknown;

/**
 * Removes the 'this' parameter from a function type.
 */
type OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;

interface CallableFunction extends Function {
    /**
      * Calls the function with the specified object as the this value and the elements of specified array as the arguments.
      * @param thisArg The object to be used as the this object.
      * @param args An array of argument values to be passed to the function.
      */
    apply<T, R>(this: (this: T) => R, thisArg: T): R;
    apply<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R;

    /**
      * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.
      * @param thisArg The object to be used as the this object.
      * @param args Argument values to be passed to the function.
      */
    call<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A): R;

    /**
      * For a given function, creates a bound function that has the same body as the original function.
      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
      * @param thisArg The object to be used as the this object.
      * @param args Arguments to bind to the parameters of the function.
      */
    bind<T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>;
    bind<T, A0, A extends any[], R>(this: (this: T, arg0: A0, ...args: A) => R, thisArg: T, arg0: A0): (...args: A) => R;
    bind<T, A0, A1, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1): (...args: A) => R;
    bind<T, A0, A1, A2, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2): (...args: A) => R;
    bind<T, A0, A1, A2, A3, A extends any[], R>(this: (this: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: T, arg0: A0, arg1: A1, arg2: A2, arg3: A3): (...args: A) => R;
    bind<T, AX, R>(this: (this: T, ...args: AX[]) => R, thisArg: T, ...args: AX[]): (...args: AX[]) => R;
}

interface NewableFunction extends Function {
    /**
      * Calls the function with the specified object as the this value and the elements of specified array as the arguments.
      * @param thisArg The object to be used as the this object.
      * @param args An array of argument values to be passed to the function.
      */
    apply<T>(this: new () => T, thisArg: T): void;
    apply<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, args: A): void;

    /**
      * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.
      * @param thisArg The object to be used as the this object.
      * @param args Argument values to be passed to the function.
      */
    call<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, ...args: A): void;

    /**
      * For a given function, creates a bound function that has the same body as the original function.
      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.
      * @param thisArg The object to be used as the this object.
      * @param args Arguments to bind to the parameters of the function.
      */
    bind<T>(this: T, thisArg: any): T;
    bind<A0, A extends any[], R>(this: new (arg0: A0, ...args: A) => R, thisArg: any, arg0: A0): new (...args: A) => R;
    bind<A0, A1, A extends any[], R>(this: new (arg0: A0, arg1: A1, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1): new (...args: A) => R;
    bind<A0, A1, A2, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2): new (...args: A) => R;
    bind<A0, A1, A2, A3, A extends any[], R>(this: new (arg0: A0, arg1: A1, arg2: A2, arg3: A3, ...args: A) => R, thisArg: any, arg0: A0, arg1: A1, arg2: A2, arg3: A3): new (...args: A) => R;
    bind<AX, R>(this: new (...args: AX[]) => R, thisArg: any, ...args: AX[]): new (...args: AX[]) => R;
}

interface IArguments {
    [index: number]: any;
    length: number;
    callee: Function;
}

interface String {
    /** Returns a string representation of a string. */
    toString(): string;

    /**
      * Returns the character at the specified index.
      * @param pos The zero-based index of the desired character.
      */
    charAt(pos: number): string;

    /**
      * Returns the Unicode value of the character at the specified location.
      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.
      */
    charCodeAt(index: number): number;

    /**
      * Returns a string that contains the concatenation of two or more strings.
      * @param strings The strings to append to the end of the string.
      */
    concat(...strings: string[]): string;

    /**
      * Returns the position of the first occurrence of a substring.
      * @param searchString The substring to search for in the string
      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.
      */
    indexOf(searchString: string, position?: number): number;

    /**
      * Returns the last occurrence of a substring in the string.
      * @param searchString The substring to search for.
      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.
      */
    lastIndexOf(searchString: string, position?: number): number;

    /**
      * Determines whether two strings are equivalent in the current locale.
      * @param that String to compare to target string
      */
    localeCompare(that: string): number;

    /**
      * Matches a string with a regular expression, and returns an array containing the results of that search.
      * @param regexp A variable name or string literal containing the regular expression pattern and flags.
      */
    match(regexp: string | RegExp): RegExpMatchArray | null;

    /**
      * Replaces text in a string, using a regular expression or search string.
      * @param searchValue A string to search for.
      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.
      */
    replace(searchValue: string | RegExp, replaceValue: string): string;

    /**
      * Replaces text in a string, using a regular expression or search string.
      * @param searchValue A string to search for.
      * @param replacer A function that returns the replacement text.
      */
    replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;

    /**
      * Finds the first substring match in a regular expression search.
      * @param regexp The regular expression pattern and applicable flags.
      */
    search(regexp: string | RegExp): number;

    /**
      * Returns a section of a string.
      * @param start The index to the beginning of the specified portion of stringObj.
      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.
      * If this value is not specified, the substring continues to the end of stringObj.
      */
    slice(start?: number, end?: number): string;

    /**
      * Split a string into substrings using the specified separator and return them as an array.
      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.
      * @param limit A value used to limit the number of elements returned in the array.
      */
    split(separator: string | RegExp, limit?: number): string[];

    /**
      * Returns the substring at the specified location within a String object.
      * @param start The zero-based index number indicating the beginning of the substring.
      * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.
      * If end is omitted, the characters from start through the end of the original string are returned.
      */
    substring(start: number, end?: number): string;

    /** Converts all the alphabetic characters in a string to lowercase. */
    toLowerCase(): string;

    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */
    toLocaleLowerCase(): string;

    /** Converts all the alphabetic characters in a string to uppercase. */
    toUpperCase(): string;

    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */
    toLocaleUpperCase(): string;

    /** Removes the leading and trailing white space and line terminator characters from a string. */
    trim(): string;

    /** Returns the length of a String object. */
    readonly length: number;

    // IE extensions
    /**
      * Gets a substring beginning at the specified location and having the specified length.
      * @param from The starting position of the desired substring. The index of the first character in the string is zero.
      * @param length The number of characters to include in the returned substring.
      */
    substr(from: number, length?: number): string;

    /** Returns the primitive value of the specified object. */
    valueOf(): string;

    readonly [index: number]: string;
}

interface StringConstructor {
    new(value?: any): String;
    (value?: any): string;
    readonly prototype: String;
    fromCharCode(...codes: number[]): string;
}

/**
  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.
  */
declare const String: StringConstructor;

interface Boolean {
    /** Returns the primitive value of the specified object. */
    valueOf(): boolean;
}

interface BooleanConstructor {
    new(value?: any): Boolean;
    (value?: any): boolean;
    readonly prototype: Boolean;
}

declare const Boolean: BooleanConstructor;

interface Number {
    /**
      * Returns a string representation of an object.
      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.
      */
    toString(radix?: number): string;

    /**
      * Returns a string representing a number in fixed-point notation.
      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
      */
    toFixed(fractionDigits?: number): string;

    /**
      * Returns a string containing a number represented in exponential notation.
      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
      */
    toExponential(fractionDigits?: number): string;

    /**
      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.
      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.
      */
    toPrecision(precision?: number): string;

    /** Returns the primitive value of the specified object. */
    valueOf(): number;
}

interface NumberConstructor {
    new(value?: any): Number;
    (value?: any): number;
    readonly prototype: Number;

    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */
    readonly MAX_VALUE: number;

    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */
    readonly MIN_VALUE: number;

    /**
      * A value that is not a number.
      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.
      */
    readonly NaN: number;

    /**
      * A value that is less than the largest negative number that can be represented in JavaScript.
      * JavaScript displays NEGATIVE_INFINITY values as -infinity.
      */
    readonly NEGATIVE_INFINITY: number;

    /**
      * A value greater than the largest number that can be represented in JavaScript.
      * JavaScript displays POSITIVE_INFINITY values as infinity.
      */
    readonly POSITIVE_INFINITY: number;
}

/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */
declare const Number: NumberConstructor;

interface TemplateStringsArray extends ReadonlyArray<string> {
    readonly raw: ReadonlyArray<string>;
}

/**
 * The type of 'import.meta'.
 *
 * If you need to declare that a given property exists on 'import.meta',
 * this type may be augmented via interface merging.
 */
interface ImportMeta {
}

interface Math {
    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */
    readonly E: number;
    /** The natural logarithm of 10. */
    readonly LN10: number;
    /** The natural logarithm of 2. */
    readonly LN2: number;
    /** The base-2 logarithm of e. */
    readonly LOG2E: number;
    /** The base-10 logarithm of e. */
    readonly LOG10E: number;
    /** Pi. This is the ratio of the circumference of a circle to its diameter. */
    readonly PI: number;
    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */
    readonly SQRT1_2: number;
    /** The square root of 2. */
    readonly SQRT2: number;
    /**
      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).
      * For example, the absolute value of -5 is the same as the absolute value of 5.
      * @param x A numeric expression for which the absolute value is needed.
      */
    abs(x: number): number;
    /**
      * Returns the arc cosine (or inverse cosine) of a number.
      * @param x A numeric expression.
      */
    acos(x: number): number;
    /**
      * Returns the arcsine of a number.
      * @param x A numeric expression.
      */
    asin(x: number): number;
    /**
      * Returns the arctangent of a number.
      * @param x A numeric expression for which the arctangent is needed.
      */
    atan(x: number): number;
    /**
      * Returns the angle (in radians) from the X axis to a point.
      * @param y A numeric expression representing the cartesian y-coordinate.
      * @param x A numeric expression representing the cartesian x-coordinate.
      */
    atan2(y: number, x: number): number;
    /**
      * Returns the smallest integer greater than or equal to its numeric argument.
      * @param x A numeric expression.
      */
    ceil(x: number): number;
    /**
      * Returns the cosine of a number.
      * @param x A numeric expression that contains an angle measured in radians.
      */
    cos(x: number): number;
    /**
      * Returns e (the base of natural logarithms) raised to a power.
      * @param x A numeric expression representing the power of e.
      */
    exp(x: number): number;
    /**
      * Returns the greatest integer less than or equal to its numeric argument.
      * @param x A numeric expression.
      */
    floor(x: number): number;
    /**
      * Returns the natural logarithm (base e) of a number.
      * @param x A numeric expression.
      */
    log(x: number): number;
    /**
      * Returns the larger of a set of supplied numeric expressions.
      * @param values Numeric expressions to be evaluated.
      */
    max(...values: number[]): number;
    /**
      * Returns the smaller of a set of supplied numeric expressions.
      * @param values Numeric expressions to be evaluated.
      */
    min(...values: number[]): number;
    /**
      * Returns the value of a base expression taken to a specified power.
      * @param x The base value of the expression.
      * @param y The exponent value of the expression.
      */
    pow(x: number, y: number): number;
    /** Returns a pseudorandom number between 0 and 1. */
    random(): number;
    /**
      * Returns a supplied numeric expression rounded to the nearest number.
      * @param x The value to be rounded to the nearest number.
      */
    round(x: number): number;
    /**
      * Returns the sine of a number.
      * @param x A numeric expression that contains an angle measured in radians.
      */
    sin(x: number): number;
    /**
      * Returns the square root of a number.
      * @param x A numeric expression.
      */
    sqrt(x: number): number;
    /**
      * Returns the tangent of a number.
      * @param x A numeric expression that contains an angle measured in radians.
      */
    tan(x: number): number;
}
/** An intrinsic object that provides basic mathematics functionality and constants. */
declare const Math: Math;

/** Enables basic storage and retrieval of dates and times. */
interface Date {
    /** Returns a string representation of a date. The format of the string depends on the locale. */
    toString(): string;
    /** Returns a date as a string value. */
    toDateString(): string;
    /** Returns a time as a string value. */
    toTimeString(): string;
    /** Returns a value as a string value appropriate to the host environment's current locale. */
    toLocaleString(): string;
    /** Returns a date as a string value appropriate to the host environment's current locale. */
    toLocaleDateString(): string;
    /** Returns a time as a string value appropriate to the host environment's current locale. */
    toLocaleTimeString(): string;
    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */
    valueOf(): number;
    /** Gets the time value in milliseconds. */
    getTime(): number;
    /** Gets the year, using local time. */
    getFullYear(): number;
    /** Gets the year using Universal Coordinated Time (UTC). */
    getUTCFullYear(): number;
    /** Gets the month, using local time. */
    getMonth(): number;
    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */
    getUTCMonth(): number;
    /** Gets the day-of-the-month, using local time. */
    getDate(): number;
    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */
    getUTCDate(): number;
    /** Gets the day of the week, using local time. */
    getDay(): number;
    /** Gets the day of the week using Universal Coordinated Time (UTC). */
    getUTCDay(): number;
    /** Gets the hours in a date, using local time. */
    getHours(): number;
    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */
    getUTCHours(): number;
    /** Gets the minutes of a Date object, using local time. */
    getMinutes(): number;
    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */
    getUTCMinutes(): number;
    /** Gets the seconds of a Date object, using local time. */
    getSeconds(): number;
    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */
    getUTCSeconds(): number;
    /** Gets the milliseconds of a Date, using local time. */
    getMilliseconds(): number;
    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */
    getUTCMilliseconds(): number;
    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */
    getTimezoneOffset(): number;
    /**
      * Sets the date and time value in the Date object.
      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.
      */
    setTime(time: number): number;
    /**
      * Sets the milliseconds value in the Date object using local time.
      * @param ms A numeric value equal to the millisecond value.
      */
    setMilliseconds(ms: number): number;
    /**
      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).
      * @param ms A numeric value equal to the millisecond value.
      */
    setUTCMilliseconds(ms: number): number;

    /**
      * Sets the seconds value in the Date object using local time.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setSeconds(sec: number, ms?: number): number;
    /**
      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setUTCSeconds(sec: number, ms?: number): number;
    /**
      * Sets the minutes value in the Date object using local time.
      * @param min A numeric value equal to the minutes value.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setMinutes(min: number, sec?: number, ms?: number): number;
    /**
      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).
      * @param min A numeric value equal to the minutes value.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setUTCMinutes(min: number, sec?: number, ms?: number): number;
    /**
      * Sets the hour value in the Date object using local time.
      * @param hours A numeric value equal to the hours value.
      * @param min A numeric value equal to the minutes value.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setHours(hours: number, min?: number, sec?: number, ms?: number): number;
    /**
      * Sets the hours value in the Date object using Universal Coordinated Time (UTC).
      * @param hours A numeric value equal to the hours value.
      * @param min A numeric value equal to the minutes value.
      * @param sec A numeric value equal to the seconds value.
      * @param ms A numeric value equal to the milliseconds value.
      */
    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
    /**
      * Sets the numeric day-of-the-month value of the Date object using local time.
      * @param date A numeric value equal to the day of the month.
      */
    setDate(date: number): number;
    /**
      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).
      * @param date A numeric value equal to the day of the month.
      */
    setUTCDate(date: number): number;
    /**
      * Sets the month value in the Date object using local time.
      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
      */
    setMonth(month: number, date?: number): number;
    /**
      * Sets the month value in the Date object using Universal Coordinated Time (UTC).
      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.
      */
    setUTCMonth(month: number, date?: number): number;
    /**
      * Sets the year of the Date object using local time.
      * @param year A numeric value for the year.
      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.
      * @param date A numeric value equal for the day of the month.
      */
    setFullYear(year: number, month?: number, date?: number): number;
    /**
      * Sets the year value in the Date object using Universal Coordinated Time (UTC).
      * @param year A numeric value equal to the year.
      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.
      * @param date A numeric value equal to the day of the month.
      */
    setUTCFullYear(year: number, month?: number, date?: number): number;
    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */
    toUTCString(): string;
    /** Returns a date as a string value in ISO format. */
    toISOString(): string;
    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */
    toJSON(key?: any): string;
}

interface DateConstructor {
    new(): Date;
    new(value: number | string): Date;
    new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;
    (): string;
    readonly prototype: Date;
    /**
      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.
      * @param s A date string
      */
    parse(s: string): number;
    /**
      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.
      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.
      * @param month The month as an number between 0 and 11 (January to December).
      * @param date The date as an number between 1 and 31.
      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.
      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.
      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.
      * @param ms An number from 0 to 999 that specifies the milliseconds.
      */
    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;
    now(): number;
}

declare const Date: DateConstructor;

interface RegExpMatchArray extends Array<string> {
    index?: number;
    input?: string;
}

interface RegExpExecArray extends Array<string> {
    index: number;
    input: string;
}

interface RegExp {
    /**
      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.
      * @param string The String object or string literal on which to perform the search.
      */
    exec(string: string): RegExpExecArray | null;

    /**
      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.
      * @param string String on which to perform the search.
      */
    test(string: string): boolean;

    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */
    readonly source: string;

    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */
    readonly global: boolean;

    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */
    readonly ignoreCase: boolean;

    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */
    readonly multiline: boolean;

    lastIndex: number;

    // Non-standard extensions
    compile(): this;
}

interface RegExpConstructor {
    new(pattern: RegExp | string): RegExp;
    new(pattern: string, flags?: string): RegExp;
    (pattern: RegExp | string): RegExp;
    (pattern: string, flags?: string): RegExp;
    readonly prototype: RegExp;

    // Non-standard extensions
    $1: string;
    $2: string;
    $3: string;
    $4: string;
    $5: string;
    $6: string;
    $7: string;
    $8: string;
    $9: string;
    lastMatch: string;
}

declare const RegExp: RegExpConstructor;

interface Error {
    name: string;
    message: string;
    stack?: string;
}

interface ErrorConstructor {
    new(message?: string): Error;
    (message?: string): Error;
    readonly prototype: Error;
}

declare const Error: ErrorConstructor;

interface EvalError extends Error {
}

interface EvalErrorConstructor {
    new(message?: string): EvalError;
    (message?: string): EvalError;
    readonly prototype: EvalError;
}

declare const EvalError: EvalErrorConstructor;

interface RangeError extends Error {
}

interface RangeErrorConstructor {
    new(message?: string): RangeError;
    (message?: string): RangeError;
    readonly prototype: RangeError;
}

declare const RangeError: RangeErrorConstructor;

interface ReferenceError extends Error {
}

interface ReferenceErrorConstructor {
    new(message?: string): ReferenceError;
    (message?: string): ReferenceError;
    readonly prototype: ReferenceError;
}

declare const ReferenceError: ReferenceErrorConstructor;

interface SyntaxError extends Error {
}

interface SyntaxErrorConstructor {
    new(message?: string): SyntaxError;
    (message?: string): SyntaxError;
    readonly prototype: SyntaxError;
}

declare const SyntaxError: SyntaxErrorConstructor;

interface TypeError extends Error {
}

interface TypeErrorConstructor {
    new(message?: string): TypeError;
    (message?: string): TypeError;
    readonly prototype: TypeError;
}

declare const TypeError: TypeErrorConstructor;

interface URIError extends Error {
}

interface URIErrorConstructor {
    new(message?: string): URIError;
    (message?: string): URIError;
    readonly prototype: URIError;
}

declare const URIError: URIErrorConstructor;

interface JSON {
    /**
      * Converts a JavaScript Object Notation (JSON) string into an object.
      * @param text A valid JSON string.
      * @param reviver A function that transforms the results. This function is called for each member of the object.
      * If a member contains nested objects, the nested objects are transformed before the parent object is.
      */
    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
    /**
      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
      * @param value A JavaScript value, usually an object or array, to be converted.
      * @param replacer A function that transforms the results.
      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
      */
    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
    /**
      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
      * @param value A JavaScript value, usually an object or array, to be converted.
      * @param replacer An array of strings and numbers that acts as a approved list for selecting the object properties that will be stringified.
      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
      */
    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;
}

/**
  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.
  */
declare const JSON: JSON;


interface ReadonlyArray<T> {
    /**
      * Gets the length of the array. This is a number one higher than the highest element defined in an array.
      */
    readonly length: number;
    /**
      * Returns a string representation of an array.
      */
    toString(): string;
    /**
      * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.
      */
    toLocaleString(): string;
    /**
      * Combines two or more arrays.
      * @param items Additional items to add to the end of array1.
      */
    concat(...items: ConcatArray<T>[]): T[];
    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;
    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): T[];
    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
      */
    indexOf(searchElement: T, fromIndex?: number): number;
    /**
      * Returns the index of the last occurrence of a specified value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
      */
    lastIndexOf(searchElement: T, fromIndex?: number): number;
    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => unknown, thisArg?: any): boolean;
    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => unknown, thisArg?: any): boolean;
    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => void, thisArg?: any): void;
    /**
      * Calls a defined callback function on each element of an array, and returns an array that contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    map<U>(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => U, thisArg?: any): U[];
    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    filter<S extends T>(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => value is S, thisArg?: any): S[];
    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => unknown, thisArg?: any): T[];
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T): T;
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue: T): T;
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T): T;
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue: T): T;
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;

    readonly [n: number]: T;
}

interface ConcatArray<T> {
    readonly length: number;
    readonly [n: number]: T;
    join(separator?: string): string;
    slice(start?: number, end?: number): T[];
}

interface Array<T> {
    /**
      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.
      */
    length: number;
    /**
      * Returns a string representation of an array.
      */
    toString(): string;
    /**
      * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.
      */
    toLocaleString(): string;
    /**
      * Removes the last element from an array and returns it.
      */
    pop(): T | undefined;
    /**
      * Appends new elements to an array, and returns the new length of the array.
      * @param items New elements of the Array.
      */
    push(...items: T[]): number;
    /**
      * Combines two or more arrays.
      * @param items Additional items to add to the end of array1.
      */
    concat(...items: ConcatArray<T>[]): T[];
    /**
      * Combines two or more arrays.
      * @param items Additional items to add to the end of array1.
      */
    concat(...items: (T | ConcatArray<T>)[]): T[];
    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;
    /**
      * Reverses the elements in an Array.
      */
    reverse(): T[];
    /**
      * Removes the first element from an array and returns it.
      */
    shift(): T | undefined;
    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): T[];
    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: T, b: T) => number): this;
    /**
      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
      * @param start The zero-based location in the array from which to start removing elements.
      * @param deleteCount The number of elements to remove.
      */
    splice(start: number, deleteCount?: number): T[];
    /**
      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
      * @param start The zero-based location in the array from which to start removing elements.
      * @param deleteCount The number of elements to remove.
      * @param items Elements to insert into the array in place of the deleted elements.
      */
    splice(start: number, deleteCount: number, ...items: T[]): T[];
    /**
      * Inserts new elements at the start of an array.
      * @param items  Elements to insert at the start of the Array.
      */
    unshift(...items: T[]): number;
    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
      */
    indexOf(searchElement: T, fromIndex?: number): number;
    /**
      * Returns the index of the last occurrence of a specified value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
      */
    lastIndexOf(searchElement: T, fromIndex?: number): number;
    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;
    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;
    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;
    /**
      * Calls a defined callback function on each element of an array, and returns an array that contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];
    /**
     * Returns the elements of an array that meet the condition specified in a callback function.
     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.
     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    filter<S extends T>(callbackfn: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];
    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: T, index: number, array: T[]) => any, thisArg?: any): T[];
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;

    [n: number]: T;
}

interface ArrayConstructor {
    new(arrayLength?: number): any[];
    new <T>(arrayLength: number): T[];
    new <T>(...items: T[]): T[];
    (arrayLength?: number): any[];
    <T>(arrayLength: number): T[];
    <T>(...items: T[]): T[];
    isArray(arg: any): arg is Array<any>;
    readonly prototype: Array<any>;
}

declare const Array: ArrayConstructor;

interface TypedPropertyDescriptor<T> {
    enumerable?: boolean;
    configurable?: boolean;
    writable?: boolean;
    value?: T;
    get?: () => T;
    set?: (value: T) => void;
}

declare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;
declare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;
declare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;
declare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;

declare type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;

interface PromiseLike<T> {
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;
}

/**
 * Represents the completion of an asynchronous operation
 */
interface Promise<T> {
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;

    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
}

interface ArrayLike<T> {
    readonly length: number;
    readonly [n: number]: T;
}

/**
 * Make all properties in T optional
 */
type Partial<T> = {
    [P in keyof T]?: T[P];
};

/**
 * Make all properties in T required
 */
type Required<T> = {
    [P in keyof T]-?: T[P];
};

/**
 * Make all properties in T readonly
 */
type Readonly<T> = {
    readonly [P in keyof T]: T[P];
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

/**
 * Construct a type with a set of properties K of type T
 */
type Record<K extends keyof any, T> = {
    [P in K]: T;
};

/**
 * Exclude from T those types that are assignable to U
 */
type Exclude<T, U> = T extends U ? never : T;

/**
 * Extract from T those types that are assignable to U
 */
type Extract<T, U> = T extends U ? T : never;

/**
 * Exclude null and undefined from T
 */
type NonNullable<T> = T extends null | undefined ? never : T;

/**
 * Obtain the parameters of a function type in a tuple
 */
type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;

/**
 * Obtain the parameters of a constructor function type in a tuple
 */
type ConstructorParameters<T extends new (...args: any) => any> = T extends new (...args: infer P) => any ? P : never;

/**
 * Obtain the return type of a function type
 */
type ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;

/**
 * Obtain the return type of a constructor function type
 */
type InstanceType<T extends new (...args: any) => any> = T extends new (...args: any) => infer R ? R : any;

/**
 * Marker for contextual 'this' type
 */
interface ThisType<T> { }

/**
  * Represents a raw buffer of binary data, which is used to store data for the
  * different typed arrays. ArrayBuffers cannot be read from or written to directly,
  * but can be passed to a typed array or DataView Object to interpret the raw
  * buffer as needed.
  */
interface ArrayBuffer {
    /**
      * Read-only. The length of the ArrayBuffer (in bytes).
      */
    readonly byteLength: number;

    /**
      * Returns a section of an ArrayBuffer.
      */
    slice(begin: number, end?: number): ArrayBuffer;
}

/**
 * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.
 */
interface ArrayBufferTypes {
    ArrayBuffer: ArrayBuffer;
}
type ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];

interface ArrayBufferConstructor {
    readonly prototype: ArrayBuffer;
    new(byteLength: number): ArrayBuffer;
    isView(arg: any): arg is ArrayBufferView;
}
declare const ArrayBuffer: ArrayBufferConstructor;

interface ArrayBufferView {
    /**
      * The ArrayBuffer instance referenced by the array.
      */
    buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    byteOffset: number;
}

interface DataView {
    readonly buffer: ArrayBuffer;
    readonly byteLength: number;
    readonly byteOffset: number;
    /**
      * Gets the Float32 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getFloat32(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Gets the Float64 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getFloat64(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Gets the Int8 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getInt8(byteOffset: number): number;

    /**
      * Gets the Int16 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getInt16(byteOffset: number, littleEndian?: boolean): number;
    /**
      * Gets the Int32 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getInt32(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Gets the Uint8 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getUint8(byteOffset: number): number;

    /**
      * Gets the Uint16 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getUint16(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Gets the Uint32 value at the specified byte offset from the start of the view. There is
      * no alignment constraint; multi-byte values may be fetched from any offset.
      * @param byteOffset The place in the buffer at which the value should be retrieved.
      */
    getUint32(byteOffset: number, littleEndian?: boolean): number;

    /**
      * Stores an Float32 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Float64 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Int8 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      */
    setInt8(byteOffset: number, value: number): void;

    /**
      * Stores an Int16 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Int32 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Uint8 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      */
    setUint8(byteOffset: number, value: number): void;

    /**
      * Stores an Uint16 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;

    /**
      * Stores an Uint32 value at the specified byte offset from the start of the view.
      * @param byteOffset The place in the buffer at which the value should be set.
      * @param value The value to set.
      * @param littleEndian If false or undefined, a big-endian value should be written,
      * otherwise a little-endian value should be written.
      */
    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;
}

interface DataViewConstructor {
    new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;
}
declare const DataView: DataViewConstructor;

/**
  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested
  * number of bytes could not be allocated an exception is raised.
  */
interface Int8Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Int8Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Int8Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Int8Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}
interface Int8ArrayConstructor {
    readonly prototype: Int8Array;
    new(length: number): Int8Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int8Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int8Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Int8Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      */
    from(arrayLike: ArrayLike<number>): Int8Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array;


}
declare const Int8Array: Int8ArrayConstructor;

/**
  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Uint8Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Uint8Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Uint8Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Uint8Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Uint8ArrayConstructor {
    readonly prototype: Uint8Array;
    new(length: number): Uint8Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Uint8Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      */
    from(arrayLike: ArrayLike<number>): Uint8Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;

}
declare const Uint8Array: Uint8ArrayConstructor;

/**
  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.
  * If the requested number of bytes could not be allocated an exception is raised.
  */
interface Uint8ClampedArray {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Uint8ClampedArray;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Uint8ClampedArray;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Uint8ClampedArray;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Uint8ClampedArrayConstructor {
    readonly prototype: Uint8ClampedArray;
    new(length: number): Uint8ClampedArray;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint8ClampedArray;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint8ClampedArray;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Uint8ClampedArray;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      */
    from(arrayLike: ArrayLike<number>): Uint8ClampedArray;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray;
}
declare const Uint8ClampedArray: Uint8ClampedArrayConstructor;

/**
  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Int16Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;
    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Int16Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Int16Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Int16Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Int16ArrayConstructor {
    readonly prototype: Int16Array;
    new(length: number): Int16Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int16Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int16Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Int16Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      */
    from(arrayLike: ArrayLike<number>): Int16Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array;


}
declare const Int16Array: Int16ArrayConstructor;

/**
  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Uint16Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Uint16Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Uint16Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Uint16Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Uint16ArrayConstructor {
    readonly prototype: Uint16Array;
    new(length: number): Uint16Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint16Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint16Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Uint16Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      */
    from(arrayLike: ArrayLike<number>): Uint16Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array;


}
declare const Uint16Array: Uint16ArrayConstructor;
/**
  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Int32Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Int32Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Int32Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Int32Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Int32ArrayConstructor {
    readonly prototype: Int32Array;
    new(length: number): Int32Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Int32Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Int32Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Int32Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      */
    from(arrayLike: ArrayLike<number>): Int32Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array;

}
declare const Int32Array: Int32ArrayConstructor;

/**
  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the
  * requested number of bytes could not be allocated an exception is raised.
  */
interface Uint32Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;
    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Uint32Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Uint32Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Uint32Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Uint32ArrayConstructor {
    readonly prototype: Uint32Array;
    new(length: number): Uint32Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Uint32Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Uint32Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Uint32Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      */
    from(arrayLike: ArrayLike<number>): Uint32Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array;

}
declare const Uint32Array: Uint32ArrayConstructor;

/**
  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number
  * of bytes could not be allocated an exception is raised.
  */
interface Float32Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Float32Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Float32Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Float32Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Float32ArrayConstructor {
    readonly prototype: Float32Array;
    new(length: number): Float32Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float32Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float32Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Float32Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      */
    from(arrayLike: ArrayLike<number>): Float32Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array;


}
declare const Float32Array: Float32ArrayConstructor;

/**
  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested
  * number of bytes could not be allocated an exception is raised.
  */
interface Float64Array {
    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * The ArrayBuffer instance referenced by the array.
      */
    readonly buffer: ArrayBufferLike;

    /**
      * The length in bytes of the array.
      */
    readonly byteLength: number;

    /**
      * The offset in bytes of the array.
      */
    readonly byteOffset: number;

    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    copyWithin(target: number, start: number, end?: number): this;

    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param callbackfn A function that accepts up to three arguments. The every method calls
      * the callbackfn function for each element in array1 until the callbackfn returns false,
      * or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    every(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;

    /**
        * Returns the this object after filling the section identified by start and end with value
        * @param value value to fill array section with
        * @param start index to start filling the array at. If start is negative, it is treated as
        * length+start where length is the length of the array.
        * @param end index to stop filling the array at. If end is negative, it is treated as
        * length+end.
        */
    fill(value: number, start?: number, end?: number): this;

    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param callbackfn A function that accepts up to three arguments. The filter method calls
      * the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    filter(callbackfn: (value: number, index: number, array: Float64Array) => any, thisArg?: any): Float64Array;

    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    find(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number | undefined;

    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    findIndex(predicate: (value: number, index: number, obj: Float64Array) => boolean, thisArg?: any): number;

    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;

    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      *  search starts at index 0.
      */
    indexOf(searchElement: number, fromIndex?: number): number;

    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the
      * resulting String. If omitted, the array elements are separated with a comma.
      */
    join(separator?: string): string;

    /**
      * Returns the index of the last occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
      * search starts at index 0.
      */
    lastIndexOf(searchElement: number, fromIndex?: number): number;

    /**
      * The length of the array.
      */
    readonly length: number;

    /**
      * Calls a defined callback function on each element of an array, and returns an array that
      * contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the
      * callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array. The return value of
      * the callback function is the accumulated result, and is provided as an argument in the next
      * call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the
      * callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an
      * argument instead of an array value.
      */
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;

    /**
      * Calls the specified callback function for all the elements in an array, in descending order.
      * The return value of the callback function is the accumulated result, and is provided as an
      * argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls
      * the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start
      * the accumulation. The first call to the callbackfn function provides this value as an argument
      * instead of an array value.
      */
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;

    /**
      * Reverses the elements in an Array.
      */
    reverse(): Float64Array;

    /**
      * Sets a value or an array of values.
      * @param array A typed or untyped array of values to set.
      * @param offset The index in the current array at which the values are to be written.
      */
    set(array: ArrayLike<number>, offset?: number): void;

    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array.
      */
    slice(start?: number, end?: number): Float64Array;

    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param callbackfn A function that accepts up to three arguments. The some method calls the
      * callbackfn function for each element in array1 until the callbackfn returns true, or until
      * the end of the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    some(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;

    /**
      * Sorts an array.
      * @param compareFn The name of the function used to determine the order of the elements. If
      * omitted, the elements are sorted in ascending, ASCII character order.
      */
    sort(compareFn?: (a: number, b: number) => number): this;

    /**
      * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements
      * at begin, inclusive, up to end, exclusive.
      * @param begin The index of the beginning of the array.
      * @param end The index of the end of the array.
      */
    subarray(begin: number, end?: number): Float64Array;

    /**
      * Converts a number to a string by using the current locale.
      */
    toLocaleString(): string;

    /**
      * Returns a string representation of an array.
      */
    toString(): string;

    [index: number]: number;
}

interface Float64ArrayConstructor {
    readonly prototype: Float64Array;
    new(length: number): Float64Array;
    new(arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): Float64Array;
    new(buffer: ArrayBufferLike, byteOffset: number, length?: number): Float64Array;

    /**
      * The size in bytes of each element in the array.
      */
    readonly BYTES_PER_ELEMENT: number;

    /**
      * Returns a new array from a set of elements.
      * @param items A set of elements to include in the new array object.
      */
    of(...items: number[]): Float64Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      */
    from(arrayLike: ArrayLike<number>): Float64Array;

    /**
      * Creates an array from an array-like or iterable object.
      * @param arrayLike An array-like or iterable object to convert to an array.
      * @param mapfn A mapping function to call on every element of the array.
      * @param thisArg Value of 'this' used to invoke the mapfn.
      */
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array;

}
declare const Float64Array: Float64ArrayConstructor;

/////////////////////////////
/// ECMAScript Internationalization API
/////////////////////////////

declare namespace Intl {
    interface CollatorOptions {
        usage?: string;
        localeMatcher?: string;
        numeric?: boolean;
        caseFirst?: string;
        sensitivity?: string;
        ignorePunctuation?: boolean;
    }

    interface ResolvedCollatorOptions {
        locale: string;
        usage: string;
        sensitivity: string;
        ignorePunctuation: boolean;
        collation: string;
        caseFirst: string;
        numeric: boolean;
    }

    interface Collator {
        compare(x: string, y: string): number;
        resolvedOptions(): ResolvedCollatorOptions;
    }
    var Collator: {
        new(locales?: string | string[], options?: CollatorOptions): Collator;
        (locales?: string | string[], options?: CollatorOptions): Collator;
        supportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];
    };

    interface NumberFormatOptions {
        localeMatcher?: string;
        style?: string;
        currency?: string;
        currencyDisplay?: string;
        useGrouping?: boolean;
        minimumIntegerDigits?: number;
        minimumFractionDigits?: number;
        maximumFractionDigits?: number;
        minimumSignificantDigits?: number;
        maximumSignificantDigits?: number;
    }

    interface ResolvedNumberFormatOptions {
        locale: string;
        numberingSystem: string;
        style: string;
        currency?: string;
        currencyDisplay?: string;
        minimumIntegerDigits: number;
        minimumFractionDigits: number;
        maximumFractionDigits: number;
        minimumSignificantDigits?: number;
        maximumSignificantDigits?: number;
        useGrouping: boolean;
    }

    interface NumberFormat {
        format(value: number): string;
        resolvedOptions(): ResolvedNumberFormatOptions;
    }
    var NumberFormat: {
        new(locales?: string | string[], options?: NumberFormatOptions): NumberFormat;
        (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;
        supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];
    };

    interface DateTimeFormatOptions {
        localeMatcher?: string;
        weekday?: string;
        era?: string;
        year?: string;
        month?: string;
        day?: string;
        hour?: string;
        minute?: string;
        second?: string;
        timeZoneName?: string;
        formatMatcher?: string;
        hour12?: boolean;
        timeZone?: string;
    }

    interface ResolvedDateTimeFormatOptions {
        locale: string;
        calendar: string;
        numberingSystem: string;
        timeZone: string;
        hour12?: boolean;
        weekday?: string;
        era?: string;
        year?: string;
        month?: string;
        day?: string;
        hour?: string;
        minute?: string;
        second?: string;
        timeZoneName?: string;
    }

    interface DateTimeFormat {
        format(date?: Date | number): string;
        resolvedOptions(): ResolvedDateTimeFormatOptions;
    }
    var DateTimeFormat: {
        new(locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;
        (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;
        supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];
    };
}

interface String {
    /**
      * Determines whether two strings are equivalent in the current or specified locale.
      * @param that String to compare to target string
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.
      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.
      */
    localeCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
}

interface Number {
    /**
      * Converts a number to a string by using the current or specified locale.
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
      * @param options An object that contains one or more properties that specify comparison options.
      */
    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;
}

interface Date {
    /**
      * Converts a date and time to a string by using the current or specified locale.
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
      * @param options An object that contains one or more properties that specify comparison options.
      */
    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
    /**
      * Converts a date to a string by using the current or specified locale.
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
      * @param options An object that contains one or more properties that specify comparison options.
      */
    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;

    /**
      * Converts a time to a string by using the current or specified locale.
      * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.
      * @param options An object that contains one or more properties that specify comparison options.
      */
    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
}
`;

let AEFTshim = `/**
 * The $ object provides a number of debugging facilities and informational methods.
 */
interface $ {
  /**
   * The ExtendScript build information.
   */
  readonly build: string

  /**
   * The ExtendScript build date.
   */
  readonly buildDate: Date

  /**
   * The character used as the decimal point character in formatted numeric output.
   */
  decimalPoint: string

  /**
   * The name of the current ExtendScript engine, if set.
   */
  readonly engineName: string

  /**
   * The most recent run-time error information.
   * Assigning error text to this property generates a run-time error; however, the preferred way to generate a run-time error is to throw an Error object.
   */
  error: Error

  /**
   * The file name of the current script.
   */
  readonly fileName: string

  /**
   * Gets or sets low-level debug output flags.
   * A logical AND of bit flag values:
   * 0x0002 (2): Displays each line with its line number as it is executed.
   * 0x0040 (64): Enables excessive garbage collection. Usually, garbage collection starts when the number of objects has increased by a certain amount since the last garbage collection. This flag causes ExtendScript to garbage collect after almost every statement. This impairs performance severely, but is useful when you suspect that an object gets released too soon.
   * 0x0080 (128): Displays all calls with their arguments and the return value.
   * 0x0100 (256): Enables extended error handling (see strict).
   * 0x0200 (512): Enables the localization feature of the toString method. Equivalent to the localize property.
   */
  flags: number

  /**
   * A reference to the global object, which contains the JavaScript global namespace.
   */
  readonly global: any

  /**
   * A high-resolution timer, measuring the time in microseconds. The timer starts when ExtendScript is
   * initialized during the application startup sequence. Every read access resets the timer to Zero.
   */
  readonly hiresTimer: number

  /**
   * The path for include files for the current script.
   */
  readonly includePath: string

  /**
   * The current debugging level, which enables or disables the JavaScript debugger.
   * One of 0 (no debugging), 1 (break on runtime errors), or 2 (full debug mode).
   */
  level: number

  /**
   * The current line number of the currently executing script.
   */
  readonly line: number

  /**
   * Gets or sets the current locale.
   * The string contains five characters in the form LL_RR, where LL is an ISO 639 language specifier, and RR is an ISO 3166 region specifier.Initially, this is the value that the application or the platform returns for the current user. You can set it to temporarily change the locale for testing. To return to the application or platform setting, set to undefined, null, or the empty string.
   */
  locale: string

  /**
   * Set to true to enable the extended localization features of the built-in toString() method.
   */
  localize: boolean

  /**
   * The ExtendScript memory cache size, in bytes.
   */
  memCache: number

  /**
   * The current operating system version information.
   */
  readonly os: string

  /**
   * An array of objects containing information about the display screens attached to your computer.
   * Each object has the properties left, top, right, bottom, which contain the four corners of each screen in global coordinates.A property primary is true if that object describes the primary display.
   */
  readonly screens: object[]

  /**
   * The current stack trace.
   */
  readonly stack: string

  /**
   * Sets or clears strict mode for object modification.
   * When true, any attempt to write to a read-only property causes a runtime error. Some objects do not permit the creation of new properties when true.
   */
  strict: any

  /**
   * The version number of the ExtendScript engine.
   * Formatted as a three-part number and description; for example: "3.92.95 (debug)".
   */
  readonly version: string

  /**
   * Shows an About box for the ExtendScript component, and returns the text for the box.
   */
  about(): string

  /**
   * Breaks execution at the current position.
   * @param condition A string containing a JavaScript statement to be used as a condition. If the statement evaluates to true or nonzero when this point is reached, execution stops.
   */
  bp(condition?: any): void

  /**
   * Invokes the platform-specific color selection dialog, and returns the selected color.
   * @param color The color to be preselected in the dialog, as 0xRRGGBB, or -1 for the platform default.
   */
  colorPicker(color: number): number

  /**
   * Loads and evaluates a file.
   * @param file The file to load.
   * @param timeout An optional timeout in milliseconds.
   */
  evalFile(file: File, timeout?: number): any

  /**
   * Initiates garbage collection in the ExtendScript engine.
   */
  gc(): void

  /**
   * Retrieves the value of an environment variable.
   * @param name The name of the variable.
   */
  getenv(name: string): string

  /**
   * Sets the value of an environment variable.
   * @param name The name of the variable.
   * @param value The value of the variable.
   */
  setenv(name: string, value: string): void

  /**
   * Suspends the calling thread for a number of milliseconds.
   * During a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated. This can happen if there is a break request, or if the script timeout has expired.
   * @param msecs Number of milliseconds to sleep.
   */
  sleep(msecs: number): void

  /**
   * Converts this object to a string.
   */
  toString(): string

  /**
   * Prints text to the Console.
   * @param text The text to print. All arguments are concatenated.
   */
  write(text: any): void

  /**
   * Prints text to the Console, and adds a newline character.
   * @param text The text to print. All arguments are concatenated.
   */
  writeln(text: any): void
}
declare const $: $

/**
 * The global BridgeTalk object.
 */
declare var BridgeTalk: any;

/**
 * The Infinity global property is a predefined variable with the value for infinity.
 */
declare var Infinity: number;

/**
 * The NaN global property is a predefined variable with the value NaN (Not-a-Number), as specified by the IEEE-754 standard.
 */
declare var NaN: number;

/**
 * The application object
 */
declare var app: Application;
declare interface Application {}

/**
 * Displays an alert box
 * @param message The text to display
 * @param title The title of the alert; ignored on the Macintosh
 * @param errorIcon Display an Error icon; ignored on the Macintosh
 */
declare function alert(
  message: string,
  title?: string,
  errorIcon?: boolean
): void;

/**
 * Displays an alert box with Yes and No buttons; returns true for Yes
 * @param message The text to display
 * @param noAsDefault Set to true to set the No button as the default button
 * @param title The title of the alert; ignored on the Macintosh
 */
declare function confirm(
  message: string,
  noAsDefault?: boolean,
  title?: string
): boolean;

/**
 * Decodes a string created with encodeURI().
 * @param uri The text to decode.
 */
declare function decodeURI(uri: string): string;

/**
 * Decodes a string created with encodeURIComponent().
 * @param uri The text to decode.
 */
declare function decodeURIComponent(uri: string): string;

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'();/?:@&=+$,#. The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURI(text: string): string;

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'(). The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURIComponent(text: string): string;

/**
 * Creates a URL-encoded string from aString.
 * In the new string, characters of aString that require URL encoding are replaced with the format %xx, where xx is the hexadecimal value of the character code in the Unicode character set.This format is used to transmit information appended to a URL during, for example, execution of the GET method.Use the unescape() global function to translate the string back into its original format. Returns a string which is aString URL-encoded.
 * @param aString The string to be encoded.
 */
declare function escape(aString: string): string;

/**
 * Evaluates its argument as a JavaScript script, and returns the result of evaluation.
 * You can pass the result of an object's toSource() method to reconstruct that object.
 * @param stringExpression The string to evaluate.
 */
declare function eval(stringExpression: string): any;

/**
 * Evaluates an expression and reports whether the result is a finite number.
 * Returns true if the expression is a finite number, false otherwise. False if the value is infinity or negative infinity.
 * @param expression Any valid JavaScript expression.
 */
declare function isFinite(expression: number): boolean;

/**
 * Evaluates an expression and reports whether the result is "Not-a-Number" (NaN).
 * Returns true if the result of evaluation is not a number (NaN), false if the value is a number.
 * @param expression Any valid JavaScript expression.
 */
declare function isNaN(expression: number): boolean;

/**
 * Returns true if the supplied string is a valid XML name.
 * @param name The XML name to test.
 */
declare function isXMLName(name: string): boolean;

/**
 * Localizes a ZString-encoded string and merges additional arguments into the string.
 * @param what The string to localize. A ZString-encoded string that can contain placeholder for additional arguments in the form %1 to %n.
 * @param arguments Optional argument(s) to be merged into the string. There may be more than one argument.
 */
declare function localize(what: string, ...arguments: any[]): string;

/**
 * Extracts a floating-point number from a string.
 * Parses a string to find the first set of characters that can be converted to a floating point number, and returns that number, or NaN if it does not encounter characters that it can converted to a number.The function supports exponential notation.
 * @param text The string from which to extract a floating point number.
 */
declare function parseFloat(text: string): number;

/**
 * Extracts an integer from a string.
 * Parses a string to find the first set of characters, in a specified base, that can be converted to an integer, and returns that integer, or NaN if it does not encounter characters that it can convert to a number.
 * @param text The string from which to extract an integer.
 * @param base The base of the string to parse (from base 2 to base 36). If not supplied, base is determined by the format of string.
 */
declare function parseInt(text: string, base?: number): number;

/**
 * Displays a dialog allowing the user to enter text
 * Returns null if the user cancelled the dialog, the text otherwise
 * @param prompt The text to display
 * @param default_ The default text to preset the edit field with
 * @param title The title of the dialog;
 */
declare function prompt(
  prompt: string,
  default_?: string,
  title?: string
): string;

/**
 * Defines the default XML namespace.
 * This is a replacement function for the standard JavaScript statement set default xml namespace.
 * @param namespace The namespace to use. Omit this parameter to return to the empty namespace. This is either a Namespace object or a string.
 */
declare function setDefaultXMLNamespace(namespace: Namespace): void;

/**
 * Translates URL-encoded string into a regular string, and returns that string.
 * Use the escape() global function to URL-encode strings.
 * @param stringExpression The URL-encoded string to convert.
 */
declare function unescape(stringExpression: string): string;

/**
 * Creates a source code representation of the supplied argument, and returns it as a string.
 * @param what The object to uneval.
 */
declare function uneval(what: any): string;

declare class Global {
  app: Application;
}

/** CONSTANTS */
declare const enum AppVersion {
  CS3 = 8.0,
  CS4 = 9.0,
  CS5 = 10.0,
  CS5_5 = 10.5,
  CS6 = 11.0,
  CC = 12.0,
  CC2014 = 13.0,
  CC2015 = 13.5,
  CC2015_1 = 13.6,
  CC2015_2 = 13.7,
  CC2015_3 = 13.8,
  CC2017 = 14.0,
  CC2018 = 15.0,
  CC2019 = 16.0
}

declare const enum CommandID {
  /**
   * File
   */
  NewProject = 2,
  NewFolder = 2139,
  NewAdobePhotoshopFile = 3147,
  NewMAXONCINEMA4DFile = 4007,
  OpenProject = 3,
  OpenRecentProject1 = 2330,
  OpenRecentProject2 = 2331,
  OpenRecentProject3 = 2332,
  OpenRecentProject4 = 2333,
  OpenRecentProject5 = 2334,
  BrowseInBridge = 3689,

  Close = 4,
  CloseProject = 3154,
  Save = 5,
  SaveAs = 6,
  SaveACopy = 2166,
  SaveACopyAsXML = 3785,
  IncrementAndSave = 3088,
  Revert = 7,

  ImportFile = 2003,
  ImportMultipleFiles = 2236,
  ImportPlaceholder = 2126,
  ImportSolid = 3000,
  ImportRecentFootage1 = 2310,
  ImportRecentFootage2 = 2311,
  ImportRecentFootage3 = 2312,
  ImportRecentFootage4 = 2313,
  ImportRecentFootage5 = 2314,
  ImportRecentFootage6 = 2315,
  ImportRecentFootage7 = 2316,
  ImportRecentFootage8 = 2317,
  ImportRecentFootage9 = 2318,
  ImportRecentFootage10 = 2319,
  ExportAddToAdobeMediaEncoderQueue = 3800,
  ExportAddToRenderQueue = 2161,

  AddFootageToComp = 2005,
  NewCompFromSelection = 2796,

  CollectFiles = 2482,
  ConsolidateAllFootage = 2107,
  RemoveUnsedFootage = 2109,
  ReduceProject = 2735,
  FindMissingEffects = 4002,
  FindMissingFonts = 4003,
  FindMissingFootage = 4004,
  WatchFolder = 2457,

  RunScriptFile = 8000,
  OpenScriptEditor = 8001,

  CreateProxyStill = 2778,
  CreateProxyMovie = 2779,
  SetProxyFile = 2003,
  SetProxyNone = 2119,
  InterpretFootageMain = 2077,
  InterpretFootageProxy = 2103,
  InterpretFootageRememberInterpretation = 2254,
  InterpretFootageApplyInterpretation = 2255,
  ReplaceFootageFile = 2003,
  ReplaceFootageWithLayeredComp = 3070,
  ReplaceFootagePlaceholder = 2126,
  ReplaceFootageSolid = 3000,
  ReloadFootage = 2257,
  RevealInExploler = 2562,
  RevealInFinder = 2562,
  RevealInBridge = 3690,

  ProjectSettings = 2611,

  /**
   * Edit
   */
  Undo = 16,
  Redo = 17,

  Cut = 18,
  Copy = 19,
  CopyWithPropertyLinks = 10310,
  CopyExpressionOnly = 53,
  Paste = 20,
  Clear = 21,

  Duplicate = 2080,
  SplitLayer = 2158,
  LiftWorkArea = 2613,
  ExtractWorkArea = 2614,
  SelectAll = 23,
  DeselectAll = 2004,

  PurgeAllMemoryAndDiskCache = 10200,
  PurgeAllMemory = 2373,
  PurgeUndo = 2371,
  PurgeImageCacheMemory = 2372,
  PurgeSnapshot = 2481,

  EditOriginal = 2142,
  EditInAdobeAudition = 3697,

  TemplatesRenderSettings = 2149,
  TemplatesOutputModule = 2150,
  PasteMochaMask = 5006,

  /**
   * Composition
   */
  NewComposition = 2000,

  CompositionSettings = 2007,
  SetPosterTime = 2012,
  TrimCompToWorkArea = 2360,
  CropCompToRegionOfInterest = 2997,
  AddToAdobeMediaEncoderQueue = 3800,
  AddToRenderQueue = 2161,
  AddOutputModule = 2154,

  SaveFrameAs = 2233,
  SaveFrameAsPhotoshopLayers = 5001,
  PreRender = 2780,

  CompositionFlowchart = 2258,
  CompositionMiniFlowchart = 3792,

  /**
   * Layer
   */
  NewText = 2836,
  NewSolid = 2038,
  NewLight = 2563,
  NewCamera = 2564,
  NewNullObject = 2767,
  NewShapeLayer = 3736,
  NewAdjustmentLayer = 2279,
  // NewAdobePhotoshopFile = 3147,
  // NewMAXONCINEMA4DFile = 4007,
  LayerSettings = 2021,

  OpenLayer = 3784,
  OpenLayerSource = 2523,
  // RevealInExploler = 2562,
  // RevealInFinder = 2562,

  NewMask = 2367,
  ResetMask = 2448,
  RemoveMask = 2368,
  RemoveAllMasks = 2369,
  UnlockAllMasks = 2456,
  LockOtherMasks = 2455,
  HideLockedMasks = 2524,

  QualityBest = 2045,
  QualityDraft = 2044,
  QualityWireframe = 2042,
  QualityBilinear = 10207,
  QualityBicubic = 10208,

  HideOtherVideo = 2054,
  ShowAllVideo = 2055,
  UnlockAllLayers = 2244,

  FlipHorizontal = 3766,
  FlipVertical = 3767,
  CenterInView = 3819,
  CenterAnchorPointInLayerContent = 10312,
  FitToComp = 2156,
  FitToCompWidth = 2732,
  FitToCompHeight = 2733,
  EnableTimeRemapping = 2153,
  TimeReverseLayer = 2135,
  TimeStretch = 2024,
  FreezeFrame = 3695,
  AddMarker = 2157,

  LayerStylesConvertToEditableStyles = 3740,
  LayerStylesShowAll = 3743,
  LayerStylesRemoveAll = 2072,
  LayerStylesDropShadow = 9000,
  LayerStylesInnerShadow = 9001,
  LayerStylesOuterGlow = 9002,
  LayerStylesInnerGlow = 9003,
  LayerStylesBevelAndEmboss = 9004,
  LayerStylesSatin = 9005,
  LayerStylesColorOverlay = 9006,
  LayerStylesGradientOverlay = 9007,
  LayerStylesStroke = 9008,

  GroupShapes = 3741,
  UngroupShapes = 3742,

  ConvertToEditableText = 3799,
  CreateShapesFromText = 3781,
  CreateMasksFromText = 2933,
  CreateShapesFromVectorLayer = 3973,
  CreateStereo3DRig = 3843,
  CreateOrbitNull = 3844,
  LinkFocusDistanceToPointOfInterest = 3845,
  LinkFocusDistanceToLayer = 3847,
  SetFocusDitanceToLayer = 3846,
  AutoTrace = 3044,
  PreCompose = 2071,

  /**
   * Animation
   */
  SaveAnimationPreset = 3075,
  ApplyAnimationPreset = 2450,
  RecentAnimationPreset1 = 2460,
  RecentAnimationPreset2 = 2461,
  RecentAnimationPreset3 = 2462,
  RecentAnimationPreset4 = 2463,
  RecentAnimationPreset5 = 2464,
  BrowsePresets = 3691,

  ConvertAudioToKeyframes = 5015,
  ConvertExpressionToKeyframes = 2639,
  RPFCameraImport = 5018,
  SequenceLayers = 5003,
  TimeReverseKeyframes = 3693,

  RemoveAllTextAnimators = 3058,

  AddExpression = 2702,
  SeparateDimensions = 3764,
  TrackCamera = 3983,
  TrackInMochaAE = 5007,
  WarpStabilizerVFX = 3986,
  TrackMotion = 2568,
  TrackMask = 10311,
  TrackThisProperty = 2643,

  RevealPropertiesWithKeyframes = 2387,
  RevealPropertiesWithAnimation = 4011,
  RevealAllModifiedProperties = 2771,

  /**
   * View
   */
  ZoomIn = 2092,
  ZoomOut = 2093,

  ResolutionFull = 2048,
  ResolutionHalf = 2047,
  ResolutionThird = 2081,
  ResolutionQuarter = 2046,
  ResolutionCustom = 2049,

  UseDisplayColorManagement = 3704,

  ShowRulers = 2280,

  ShowGuides = 2274,
  SnapToGuides = 2286,
  LockGuides = 2275,
  ClearGuides = 2276,

  ShowGrid = 2277,
  SnapToGrid = 2278,

  ShowLayerControls = 2435,

  /**
   * Window
   */
  Align = 5022,
  Audio = 2029,
  Brushed = 3014,
  Character = 3011,
  EffectsAndPresets = 3718,
  Info = 2028,
  MaskInterpolation = 5027,
  MediaBrowser = 4013,
  Metadata = 3788,
  MotionSketch = 5024,
  Paint = 3045,
  Paragraph = 3012,
  Preview = 2031,
  Progress = 4005,
  Smoother = 5028,
  Tools = 2010,
  Tracker = 5005,
  Wiggler = 5030
}

declare enum Language {
  ENGLISH,
  JAPANESE,
  GERMAN,
  FRENCH,
  ITALIAN,
  SPANISH,
  KOREAN,
  CHINESE,
  RUSSIAN,
  PORTUGUESE
}

declare enum PurgeTarget {
  /** Purges all data that After Effects has cached to physical memory. */
  ALL_CACHES,
  /** Purges all data saved in the undo cache. */
  UNDO_CACHES,
  /** Purges all data cached as composition/layer snapshots. */
  SNAPSHOT_CACHES,
  /** Purges all saved image data. */
  IMAGE_CACHES
}

declare enum FrameBlendingType {
  FRAME_MIX,
  NO_FRAME_BLEND,
  PIXEL_MOTION
}

declare enum BlendingMode {
  ADD,
  ALPHA_ADD,
  CLASSIC_COLOR_BURN,
  CLASSIC_COLOR_DODGE,
  CLASSIC_DIFFERENCE,
  COLOR,
  COLOR_BURN,
  COLOR_DODGE,
  DANCING_DISSOLVE,
  DARKEN,
  DARKER_COLOR,
  DIFFERENCE,
  DISSOLVE,
  EXCLUSION,
  HARD_LIGHT,
  HARD_MIX,
  HUE,
  LIGHTEN,
  LIGHTER_COLOR,
  LINEAR_BURN,
  LINEAR_DODGE,
  LINEAR_LIGHT,
  LUMINESCENT_PREMUL,
  LUMINOSITY,
  MULTIPLY,
  NORMAL,
  OVERLAY,
  PIN_LIGHT,
  SATURATION,
  SCREEN,
  SILHOUETE_ALPHA,
  SILHOUETTE_LUMA,
  SOFT_LIGHT,
  STENCIL_ALPHA,
  STENCIL_LUMA,
  VIVID_LIGHT
}

declare enum TrackMatteType {
  ALPHA,
  ALPHA_INVERTED,
  LUMA,
  LUMA_INVERTED,
  NO_TRACK_MATTE
}

declare enum LayerQuality {
  BEST,
  DRAFT,
  WIREFRAME
}

declare enum AutoOrientType {
  /** Layer faces in the direction of the motion path. */
  ALONG_PATH,
  /** Layer always faces the active camera or points at its point of interest. */
  CAMERA_OR_POINT_OF_INTEREST,
  /** Each character in a per-character 3D text layer automatically faces the active camera. */
  CHARACTERS_TOWARD_CAMERA,
  /** Layer rotates freely, independent of any motion path, point of interest, or other layers. */
  NO_AUTO_ORIENT
}

declare enum LayerSamplingQuality {
  BICUBIC,
  BILINEAR
}

declare enum AlphaMode {
  IGNORE,
  STRAIGHT,
  PREMULTIPLIED
}

declare enum FieldSeparationType {
  OFF,
  UPPER_FIELD_FIRST,
  LOWER_FIELD_FIRST
}

declare enum PulldownPhase {
  OFF,
  SSWWW,
  SWWWS,
  SWWWW_24P_ADVANCE,
  WSSWW,
  WSWWW_24P_ADVANCE,
  WWSSW,
  WWSWW_24P_ADVANCE,
  WWWSS,
  WWWSW_24P_ADVANCE,
  WWWWS_24P_ADVANCE
}

declare enum PulldownMethod {
  PULLDOWN_3_2,
  ADVANCE_24P
}

declare enum ImportAsType {
  COMP_CROPPED_LAYERS,
  FOOTAGE,
  COMP,
  PROJECT
}

declare enum LightType {
  PARALLEL,
  SPOT,
  POINT,
  AMBIENT
}

declare enum MaskMode {
  NONE,
  ADD,
  SUBTRACT,
  INTERSECT,
  LIGHTEN,
  DARKEN,
  DIFFERENCE
}

declare enum MaskMotionBlur {
  SAME_AS_LAYER,
  ON,
  OFF
}

declare enum MaskFeatherFalloff {
  FFO_LINEAR,
  FFO_SMOOTH
}

declare enum PostRenderAction {
  NONE,
  IMPORT,
  IMPORT_AND_REPLACE_USAGE,
  SET_PROXY
}

declare enum GetSettingsFormat {
  STRING,
  STRING_SETTABLE,
  NUMBER,
  NUMBER_SETTABLE,
  SPEC
}

declare enum TimeDisplayType {
  FRAMES,
  TIMECODE
}

declare enum FootageTimecodeDisplayStartType {
  FTCS_START_0,
  FTCS_USE_SOURCE_MEDIA
}

declare enum FeetFramesFilmType {
  MM16,
  MM35
}

declare enum FramesCountType {
  FC_START_0,
  FC_START_1,
  FC_TIMECODE_CONVERSION
}

declare enum CloseOptions {
  /** Close without saving. */
  DO_NOT_SAVE_CHANGES,
  /** Prompt for whether to save changes before close. */
  PROMPT_TO_SAVE_CHANGES,
  /** Save automatically on close. */
  SAVE_CHANGES
}

declare enum PropertyValueType {
  NO_VALUE,
  ThreeD_SPATIAL,
  ThreeD,
  TwoD_SPATIAL,
  TwoD,
  OneD,
  COLOR,
  CUSTOM_VALUE,
  MARKER,
  LAYER_INDEX,
  MASK_INDEX,
  SHAPE,
  TEXT_DOCUMENT
}

declare enum KeyframeInterpolationType {
  LINEAR,
  BEZIER,
  HOLD
}

declare enum PropertyType {
  PROPERTY,
  INDEXED_GROUP,
  NAMED_GROUP
}

declare enum ResolveType {
  ACCEPT_THEIRS,
  ACCEPT_YOURS,
  ACCEPT_THEIRS_AND_COPY
}

declare enum RQItemStatus {
  WILL_CONTINUE,
  NEEDS_OUTPUT,
  UNQUEUED,
  QUEUED,
  RENDERING,
  USER_STOPPED,
  ERR_STOPPED,
  DONE
}

declare enum LogType {
  ERRORS_ONLY,
  ERRORS_AND_SETTINGS,
  ERRORS_AND_PER_FRAME_INFO
}

declare enum PREFType {
  PREF_Type_MACHINE_SPECIFIC,
  PREF_Type_MACHINE_INDEPENDENT,
  PREF_Type_MACHINE_INDEPENDENT_RENDER,
  PREF_Type_MACHINE_INDEPENDENT_OUTPUT,
  PREF_Type_MACHINE_INDEPENDENT_COMPOSITION,
  PREF_Type_MACHINE_SPECIFIC_TEXT,
  PREF_Type_MACHINE_SPECIFIC_PAINT
}

declare enum ParagraphJustification {
  LEFT_JUSTIFY,
  CENTER_JUSTIFY,
  RIGHT_JUSTIFY,
  FULL_JUSTIFY_LASTLINE_LEFT,
  FULL_JUSTIFY_LASTLINE_RIGHT,
  FULL_JUSTIFY_LASTLINE_CENTER,
  FULL_JUSTIFY_LASTLINE_FULL,
  MULTIPLE_JUSTIFICATIONS
}

declare enum ViewerType {
  VIEWER_COMPOSITION,
  VIEWER_LAYER,
  VIEWER_FOOTAGE
}

declare enum FastPreviewType {
  FP_OFF,
  FP_ADAPTIVE_RESOLUTION,
  FP_DRAFT,
  FP_FAST_DRAFT,
  FP_WIREFRAME
}

declare enum ChannelType {
  CHANNEL_RGB,
  CHANNEL_RED,
  CHANNEL_GREEN,
  CHANNEL_BLUE,
  CHANNEL_ALPHA,
  CHANNEL_RED_COLORIZE,
  CHANNEL_GREEN_COLORIZE,
  CHANNEL_BLUE_COLORIZE,
  CHANNEL_RGB_STRAIGHT,
  CHANNEL_ALPHA_OVERLAY,
  CHANNEL_ALPHA_BOUNDARY
}

/** CC2015.3- */
declare enum GpuAccelType {
  CUDA,
  METAL,
  OPENCL,
  SOFTWARE
}

/** CC2017- */
declare enum ToolType {
  Tool_Arrow,
  Tool_Rotate,
  Tool_CameraMaya,
  Tool_CameraOrbit,
  Tool_CameraTrackXY,
  Tool_CameraTrackZ,
  Tool_Paintbrush,
  Tool_CloneStamp,
  Tool_Eraser,
  Tool_Hand,
  Tool_Magnify,
  Tool_PanBehind,
  Tool_Rect,
  Tool_RoundedRect,
  Tool_Oval,
  Tool_Polygon,
  Tool_Star,
  Tool_TextH,
  Tool_TextV,
  Tool_Pen,
  Tool_Feather,
  Tool_PenPlus,
  Tool_PenMinus,
  Tool_PenConvert,
  Tool_Pin,
  Tool_PinStarch,
  Tool_PinDepth,
  Tool_Quickselect,
  Tool_Hairbrush
}

/**
 * TYPES
 */

/** Clears text from the Info panel. */
declare var clearOutput: () => void;

/** Converts string time value to a numeric time value. */
declare var currentFormatToTime: (
  formattedTime: string,
  fps: number,
  isDuration?: boolean
) => number;

/** Converts a numeric time value to a string time value. */
declare var timeToCurrentFormat: (
  time: number,
  fps: number,
  isDuration?: boolean
) => string;

/** Writes text to the Info panel, with no line break added. */
declare var write: (text: string) => void;

/** Writes text to the Info panel, adding a line break at the end. */
declare var writeLn: (text: string) => void;

/** When true, the specified object exists. */
declare var isValid: (obj: object) => boolean;

/** Provides access to objects and application settings within the After Effects application. The single global object is always available by its name, app. */
declare class Application {
  /** The current After Effects project. */
  readonly project: Project;

  /** The locale (language and region) in which the application is running. */
  readonly isoLanguage: string;

  /** The version number of the After Effects application. */
  readonly version: string;

  /** The name of this build of the application. */
  readonly buildName: string;

  /** The number of this build of the application. */
  readonly buildNumber: number;

  /** When true, the local application is running in Watch Folder mode. */
  readonly isWatchFolder: boolean;

  /** When true, the local After Effects application is running as a render engine. */
  readonly isRenderEngine: boolean;

  /** The language After Effects is running. */
  readonly language: Language;

  /** Application settings that can be set via scripting. */
  readonly settings: Settings;

  /** A callback function that is called when an error occurs in the application. */
  onError: string | null;

  /** A numeric status code used when executing a script
   * externally (that is, from a command line or AppleScript).
   * 0 if no error occurred. A positive number indicates an
   * error that occurred while running the script.
   */
  exitCode: number;

  /** When true, the application remains open after running a script from the command line on Windows. */
  exitAfterLaunchAndEval: boolean;

  /** When true, the project is saved if the application closes unexpectedly. */
  saveProjectOnCrash: boolean;

  /** Memory in use by this application. */
  readonly memoryInUse: number;

  /** The effects available in the application. */
  readonly effects: {
    displayName: string;
    matchName: string;
    version: string;
    category: string;
  }[];

  /** The currently focused or last-focused viewer panel. */
  readonly activeViewer: Viewer | null;

  /** Preferences */
  readonly preferences: Preferences;

  /** CC2017- */
  availableGPUAccelTypes: GpuAccelType;

  /** Creates a new project in After Effects. */
  newProject(): Project | null;

  /** Opens a project or an Open Project dialog box. */
  open(file?: File): Project | null;

  /** Quits the application. */
  quit(): void;

  /** Starts Watch Folder mode; does not return until Watch Folder mode is turned off. */
  watchFolder(folder_object_to_watch: Folder): void;

  /** Pauses a current watch-folder process. */
  pauseWatchFolder(pause: boolean): void;

  /** Ends a current watch-folder process. */
  endWatchFolder(): void;

  /** Purges a targeted type of cached information(replicates Purge options in the Edit menu). */
  purge(target: PurgeTarget): void;

  /** Groups the actions that follow it into a single undoable step. */
  beginUndoGroup(undoString: string): void;

  /** Ends an undo group; needed only when a script contains more than one undo group. */
  endUndoGroup(): void;

  /** Begins suppression of dialogs in the user interface. */
  beginSuppressDialogs(): void;

  /** Ends suppression of dialogs in the user interface. */
  endSuppressDialogs(alert: boolean): void;

  /** Sets memory usage limits as in the Memory & Cache preferences area. */
  setMemoryUsageLimits(
    imageCachePercentage: number,
    maximumMemoryPercentage: number
  ): void;

  /** Sets whether preferences are saved when the application is quit. */
  setSavePreferencesOnQuit(doSave: boolean): void;

  /** Brings the After Effects main window to the front of the screen. */
  activate(): void;

  /** Schedules a JavaScript script for delayed execution. */
  scheduleTask(stringToExecute: string, delay: number, repeat: boolean): number;

  /** Cancels a scheduled task. */
  cancelTask(taskID: number): void;

  /** Loads a color swatch from an Adobe Swatch Exchange (ASE) file. */
  parseSwatchFile(file: File): Swatch;

  findMenuCommandId(str: string): number;

  executeCommand(id: number): void;

  /** CC2015- */
  getenv(name: string): string;
  setTimeout(func: () => void, delay?: number): number;
  cancelTimeout(id: number): void;
}

declare class Preferences {
  deletePref(section: string, key: string, type?: PREFType): void;
  getPrefAsBool(section: string, key: string, type?: PREFType): boolean;
  getPrefAsFloat(section: string, key: string, type?: PREFType): number;
  getPrefAsLong(section: string, key: string, type?: PREFType): number;
  getPrefAsString(section: string, key: string, type?: PREFType): string;
  havePref(section: string, key: string, type?: PREFType): boolean;
  reload(): void;
  savePrefAsBool(
    section: string,
    key: string,
    value: boolean,
    type?: PREFType
  ): void;
  savePrefAsFloat(
    section: string,
    key: string,
    value: number,
    type?: PREFType
  ): void;
  savePrefAsLong(
    section: string,
    key: string,
    value: number,
    type?: PREFType
  ): void;
  savePrefAsString(
    section: string,
    key: string,
    value: string,
    type?: PREFType
  ): void;
  saveToDisk(): void;
}

/** The AVItem object provides access to attributes and methods of audio/visual files imported into After Effects. */
declare class AVItem extends Item {
  /** The name of the object as shown in the Project panel. */
  name: string;

  /** The width of the item. */
  width: number;

  /** The height of the item. */
  height: number;

  /** The pixel aspect ratio of the item. */
  pixelAspect: number;

  /** The frame rate of the item. */
  frameRate: number;

  /** The frame duration for the item. */
  frameDuration: number;

  /** The total duration of the item. */
  duration: number;

  /** When true, a proxy source is used for this item. */
  useProxy: boolean;

  /** The FootageItem object used as proxy for the item. */
  readonly proxySource: FootageSource;

  /** Current time of the item. */
  time: number;

  /** The CompItem objects that use this item. */
  readonly usedIn: CompItem[];

  /** When true, the item has a video component. */
  readonly hasVideo: boolean;

  /** When true, the item has an audio component. */
  readonly hasAudio: boolean;

  /** When true, the item cannot be found or is a placeholder. */
  readonly footageMissing: boolean;

  /** Sets a proxy for the item. */
  setProxy(file: File): void;

  /** Sets a sequence as a proxy for the item. */
  setProxyWithSequence(file: File, forceAlphabetical: boolean): void;

  /** Sets a solid as a proxy for the item. */
  setProxyWithSolid(
    color: [number, number, number],
    name: string,
    width: number,
    height: number,
    pixelAspect: number
  ): void;

  /** Sets a placeholder as a proxy for the item. */
  setProxyWithPlaceholder(
    name: string,
    width: number,
    height: number,
    frameRate: number,
    duration: number
  ): void;

  /** Removes the proxy for the item. */
  setProxyToNone(): void;
}

/** The AVLayer object provides an interface to those layers that contain AVItem objects (composition layers, footage layers, solid layers, text layers, and sound layers). */
declare class AVLayer extends Layer {
  /** The source item for this layer. */
  readonly source: any;

  /** When true, the layer has no expressly set name, but contains a named source. */
  readonly isNameFromSource: boolean;

  /** The height of the layer. */
  readonly height: number;

  /** The width of the layer. */
  readonly width: number;

  /** When true, the layer's audio is enabled. */
  audioEnabled: boolean;

  /** When true, the layer's motion blur is enabled. */
  motionBlur: boolean;

  /** When true, the layer's effects are active. */
  effectsActive: boolean;

  /** When true, this is an adjustment layer. */
  adjustmentLayer: boolean;

  /** When true, this is a guide layer. */
  guideLayer: boolean;

  /** When true, this is a 3D layer. */
  threeDLayer: boolean;

  /** When true, 3D is set on a per-character basis in this text layer. */
  threeDPerChar: boolean;

  /** When true, this is an environment layer. */
  environmentLayer: boolean;

  /** When true, it is legal to change the value of collapseTransformation. */
  readonly canSetCollapseTransformation: boolean;

  /** When true, collapse transformation is on. */
  collapseTransformation: boolean;

  /** When true, frame blending is enabled. */
  readonly frameBlending: boolean;

  /** The type of frame blending for the layer. */
  frameBlendingType: FrameBlendingType;

  /** When true, it is legal to change the value of timeRemapEnabled. */
  readonly canSetTimeRemapEnabled: boolean;

  /** When true, time remapping is enabled on this layer. */
  timeRemapEnabled: boolean;

  /** When true, the layer contains an audio component. */
  readonly hasAudio: boolean;

  /** When true, the layer's audio is active at the current time. */
  readonly audioActive: boolean;

  /** The blending mode of the layer. */
  blendingMode: BlendingMode;

  /** When true, preserve transparency is enabled. */
  preserveTransparency: boolean;

  /** if layer has a track matte, specifies the way it is applied. */
  trackMatteType: TrackMatteType;

  /** When true, this layer is being used as a track matte for the layer below it. */
  readonly isTrackMatte: boolean;

  /** When true, the layer above is being used as a track matte on this layer. */
  readonly hasTrackMatte: boolean;

  /** The layer quality setting. */
  quality: LayerQuality;

  /** The layer sampling quality setting. */
  samplingQuality: LayerSamplingQuality;

  /** Reports whether this layer's audio is active at a given time. */
  audioActiveAtTime(time: number): boolean;

  /** Calculates a transformation from a set of points in this layer. */
  calculateTransformFromPoints(
    pointTopLeft: [number, number, number],
    pointTopRight: typeof pointTopLeft,
    pointBottomRight: typeof pointTopLeft
  ): object;

  /** Changes the source item for this layer. */
  replaceSource(newSource: AVItem, fixExpressions: boolean): void;

  /** Retrieves the source rectangle of a layer. */
  sourceRectAtTime(
    timeT: number,
    extents: boolean
  ): { top: number; left: number; width: number; height: number };

  /** Opens the layer in a Layer panel. */
  openInViewer(): Viewer | null;

  /** CC 2014.2(13.2)- */
  sourcePointToComp(point: [number, number]): [number, number];

  /** CC 2014.2(13.2)- */
  compPointToSource(point: [number, number]): [number, number];

  /** Shortcuts */
  readonly timeRemap: Property;
  readonly mask: MaskPropertyGroup;
  readonly effect: PropertyGroup;
  readonly layerStyle: _LayerStyles;
  readonly geometryOption: _GeometryOptionsGroup;
  readonly materialOption: _MaterialOptionsGroup;
  readonly audio: _AudioGroup;
}

/** The CameraLayer object represents a camera layer within a composition. Create it using the LayerCollection object’s addCamera method */
declare class CameraLayer extends Layer {
  /** Shortcuts */
  readonly cameraOption: _CameraOptionsGroup;
}

/** Like an array, a collection associates a set of objects or values as a logical group and provides access to them by index. However, most collection objects are read-only. You do not assign objects to them yourself—their contents update automatically as objects are created or deleted. */
declare class Collection {
  /** The number of objects in the collection. */
  readonly length: number;
}

/** The CompItem object represents a composition, and allows you to manipulate and get information about it. Access the objects by position index number in a project’s item collection. */
declare class CompItem extends AVItem {
  /** The duration of a single frame. */
  frameDuration: number;

  /** When true, indicates that the composition uses drop-frame timecode. */
  dropFrame: boolean;

  /** The work area start time. */
  workAreaStart: number;

  /** The work area duration. */
  workAreaDuration: number;

  /** The number of layers in the composition. */
  readonly numLayers: number;

  /** When true, shy layers are visible in the Timeline panel. */
  hideShyLayers: boolean;

  /** When true, motion blur is enabled for this composition. */
  motionBlur: boolean;

  /** When true, Draft 3D mode is enabled for the Composition panel. */
  draft3d: boolean;

  /** When true, time filtering is enabled for this composition. */
  frameBlending: boolean;

  /** When true, the frame rate of nested compositions is preserved. */
  preserveNestedFrameRate: boolean;

  /** When true, the resolution of nested compositions is preserved. */
  preserveNestedResolution: boolean;

  /** The background color of the composition. */
  bgColor: [number, number, number];

  /** The current active camera layer. */
  readonly activeCamera: CameraLayer | null;

  /** Changes the display of the start time in the Timeline panel. */
  displayStartTime: number;

  /** The factor by which the x and y resolution of the Composition panel is downsampled. */
  resolutionFactor: [number, number];

  /** The camera shutter angle. */
  shutterAngle: number;

  /** The camera shutter phase. */
  shutterPhase: number;

  /** The minimum number of motion blur samples per frame for Classic 3D layers, shape layers, and certain effects. */
  motionBlurSamplesPerFrame: number;

  /** The maximum number of motion blur samples of 2D layer motion. */
  motionBlurAdaptiveSampleLimit: number;

  /** The layers of the composition. */
  readonly layers: LayerCollection;

  /** CC 2017(14.0)- The markers of the composition. */
  readonly markerProperty: Property;

  /** The selected layers of the composition. */
  readonly selectedLayers: Layer[];

  /** The selected properties of the composition. */
  readonly selectedProperties: PropertyBase[];

  /** The rendering plug-in module to be used to render this composition. */
  renderer: string;

  /** The set of available rendering plug-in modules. */
  readonly renderers: string[];

  /** Creates and returns a duplicate of this composition. */
  duplicate(): CompItem;

  /** Gets a layer from this composition. */
  layer(index: number): Layer;
  layer(otherLayer: Layer, relIndex: number): Layer;
  layer(name: string): Layer;

  /** Opens the composition in a Composition panel. */
  openInViewer(): Viewer | null;

  /** Save the specific frame to a png file */
  saveFrameToPng(time: number, file: File): void;

  /** Open this Composition in the Preview panel, and change the zoom and exposure settings. */
  ramPreviewTest(unknown: any, zoom: number, exposure: number): void;
}

/** The FileSource object describes footage that comes from a file. */
declare class FileSource extends FootageSource {
  /** The file that defines this asset. */
  readonly file: File;

  /** The file that contains footage missing from this asset. */
  readonly missingFootagePath: string;

  /** Reloads the asset from the file, if it is a mainSource of a FootageItem. */
  reload(): void;
}

/** The FolderItem object corresponds to a folder in your Project panel. It can contain various types of items (footage, compositions, solids) as well as other folders. */
declare class FolderItem extends Item {
  /** The contents of this folder. */
  readonly items: ItemCollection;

  /** The number of items contained in the folder. */
  readonly numItems: number;

  /** Gets an item from the folder. */
  item(index: number): Item;
}

/** The FootageItem object represents a footage item imported into a project, which appears in the Project panel. These are accessed by position index number in a project’s item collection. */
declare class FootageItem extends AVItem {
  /** The footage source file. */
  readonly file: File | null;

  /** All settings related to the footage item. */
  readonly mainSource: FootageSource;

  /** Replaces a footage file with another footage file. */
  replace(file: File): void;

  /** Replaces a footage file with a placeholder object. */
  replaceWithPlaceholder(
    name: string,
    width: number,
    height: number,
    frameRate: number,
    duration: number
  ): void;

  /** Replaces a footage file with an image sequence. */
  replaceWithSequence(file: File, forceAlphabetical: boolean): void;

  /** Replaces a footage file with a solid. */
  replaceWithSolid(
    color: [number, number, number],
    name: string,
    width: number,
    height: number,
    pixelAspect: number
  ): void;

  /** Opens the footage in a Footage panel. */
  openInViewer(): Viewer | null;
}

declare class PlaceholderItem extends FootageItem {}

/** The FootageSource object holds information describing the source of some footage. It is used as the mainSource of a FootageItem, or the proxySource of a CompItem or FootageItem. */
declare class FootageSource {
  /** The footage source file. */
  readonly file: File | null;

  /** When true, a footage clip or proxy includes an alpha channel. */
  hasAlpha: boolean;

  /** The mode of an alpha channel. */
  alphaMode: AlphaMode;

  /** The color to be premultiplied. */
  premulColor: [number, number, number];

  /** When true, an alpha channel in a footage clip or proxy should be inverted. */
  invertAlpha: boolean;

  /** When true, footage is a still image. */
  readonly isStill: boolean;

  /** The field separation type. */
  fieldSeparationType: FieldSeparationType;

  /** How the fields are to be separated in non-still footage. */
  highQualityFieldSeparation: boolean;

  /** The pulldown type for the footage. */
  removePulldown: PulldownPhase;

  /** How many times an image sequence is set to loop. */
  loop: number;

  /** The native frame rate of the footage. */
  nativeFrameRate: number;

  /** The effective frame rate as displayed and rendered in compositions by After Effects. */
  readonly displayFrameRate: number;

  /** The rate to which footage should conform. */
  conformFrameRate: number;

  /** Estimates the alphaMode setting. */
  guessAlphaMode(): void;

  /** Estimates the pulldownType setting. */
  guessPulldown(method: PulldownMethod): void;
}

/** The ImportOptions object encapsulates the options used to import a file with the Project.importFile methods. */
declare class ImportOptions {
  constructor(file?: File);

  /** The type of file to be imported. */
  importAs: ImportAsType;

  /** When true, import a sequence of files, rather than an individual file. */
  sequence: boolean;

  /** When true, the “Force alphabetical order” option is set. */
  forceAlphabetical: boolean;

  /** The file to import, or the first file of the sequence to import. */
  file: File;

  /** Restricts input to a particular file type. */
  canImportAs(type: ImportAsType): boolean;
}

/** The Item object represents an item that can appear in the Project panel. */
declare class Item {
  /** The name of the object as shown in the Project panel. */
  name: string;

  /** A descriptive string. */
  comment: string;

  /** A unique identifier for this item. */
  readonly id: number;

  /** The parent folder of this item. */
  parentFolder: FolderItem;

  /** When true, this item is currently selected. */
  selected: boolean;

  /** The type of item. */
  readonly typeName: string;

  /** The label color for the item. */
  label: number;

  /** Deletes the item from the project. */
  remove(): void;
}

/** The ItemCollection object represents a collection of items. The ItemCollection belonging to a Project object contains all the Item objects for items in the project. The ItemCollection belonging to a FolderItem object contains all the Item objects for items in that folder. */
declare class ItemCollection extends Collection {
  /** Retrieves a Item object in the collection by its index number. The first object is at index 1. */
  readonly [index: number]: Item;

  /** Creates a new CompItem object and adds it to the collection. */
  addComp(
    name: string,
    width: number,
    height: number,
    pixelAspect: number,
    duration: number,
    frameRate: number
  ): CompItem;

  /** Creates a new FolderItem object and adds it to the collection. */
  addFolder(name: string): FolderItem;
}

/** The KeyframeEase object encapsulates the keyframe ease settings of a layer’s AE property. Keyframe ease is determined by the speed and influence values that you set using the property’s setTemporalEaseAtKey method. */
declare class KeyframeEase {
  constructor(speed: number, influence: number);

  /** The speed setting for a keyframe. */
  speed: number;

  /** The influence setting for a keyframe. */
  influence: number;
}

/** The Layer object provides access to layers within compositions. It can be accessed from an item’s layer collection either by index number or by a name string. */
declare interface Layer {
  (index: number): PropertyBase;
  (name: string): PropertyBase;
}

declare class Layer {
  /** The index position of the layer. */
  readonly index: number;

  /** The name of the layer. */
  name: string;

  /** The parent of this layer. */
  parent: Layer | null;

  /** The current time of the layer. */
  readonly time: number;

  /** The start time of the layer. */
  startTime: number;

  /** The time stretch percentage of the layer. */
  stretch: number;

  /** The “in” point of the layer. */
  inPoint: number;

  /** The “out” point of the layer. */
  outPoint: number;

  /** When true, the layer is enabled. */
  enabled: boolean;

  /** When true, the layer is soloed. */
  solo: boolean;

  /** When true, the layer is shy. */
  shy: boolean;

  /** When true, the layer is locked. */
  locked: boolean;

  /** When true, the layer contains a video component. */
  readonly hasVideo: boolean;

  /** When true, the layer is active at the current time. */
  readonly active: boolean;

  /** When true, this is a null layer. */
  readonly nullLayer: boolean;

  /** All selected AE properties in the layer. */
  readonly selectedProperties: PropertyBase[];

  /** A descriptive comment for the layer. */
  comment: string;

  /** The composition that contains this layer. */
  readonly containingComp: CompItem;

  /** When true, the layer’s name has been explicitly set. */
  readonly isNameSet: boolean;

  /** The label color for the layer. */
  label: number;

  /** The type of automatic orientation for the layer. */
  autoOrient: AutoOrientType;

  /** Deletes the layer from the composition. */
  remove(): void;

  /** Moves the layer to the top of the composition (makes it the first layer). */
  moveToBeginning(): void;

  /** Moves the layer to the bottom of the composition (makes it the last layer). */
  moveToEnd(): void;

  /** Moves the layer below another layer. */
  moveAfter(layer: Layer): void;

  /** Moves the layer above another layer. */
  moveBefore(layer: Layer): void;

  /** Duplicates the layer. */
  duplicate(): Layer;

  /** Copies the layer to the top (beginning) of another composition. */
  copyToComp(intoComp: CompItem): void;

  /** Reports whether this layer will be active at a specified time. */
  activeAtTime(time: number): boolean;

  /** Sets a new parent for this layer. */
  setParentWithJump(newParent?: Layer): void;

  /** Applies a named collection of animation settings to the layer. */
  applyPreset(presetName: File): void;

  /** From PropertyGroup */
  readonly matchName: string;
  readonly propertyDepth: number;
  readonly propertyType: PropertyType;
  selected: boolean;
  readonly numProperties: number;

  propertyGroup(countUp?: number): PropertyGroup;
  property(index: number): PropertyBase;
  property(name: string): PropertyBase;

  /** Shortcuts */
  readonly marker: Property;
  readonly transform: _TransformGroup;

  /** Transform shortcuts */
  readonly anchorPoint: Property;
  readonly position: Property;
  readonly xPosition: Property;
  readonly yPosition: Property;
  readonly zPosition: Property;
  readonly scale: Property;
  readonly orientation: Property;
  readonly rotation: Property;
  readonly xRotation: Property;
  readonly yRotation: Property;
  readonly zRotation: Property;
  readonly opacity: Property;
  readonly pointOfInterest: Property;
}

/** The LayerCollection object represents a set of layers. The LayerCollection belonging to a CompItem object contains all the layer objects for layers in the composition. The methods of the collection object allow you to manipulate the layer list. */
declare class LayerCollection extends Collection {
  /** Retrieves a Layer object in the collection by its index number. The first object is at index 1. */
  readonly [index: number]: Layer;

  /** Creates a new AVLayer and adds it to this collection. */
  add(item: AVItem, duration?: number): AVLayer;

  /** Creates a new, null layer and adds it to this collection. */
  addNull(duration?: number): AVLayer;

  /** Creates a new layer, a FootageItem with a SolidSource, and adds it to this collection. */
  addSolid(
    color: [number, number, number],
    name: string,
    width: number,
    height: number,
    pixelAspect: number,
    duration?: number
  ): AVLayer;

  /** Creates a new point text layer and adds it to this collection. */
  addText(sourceText?: string | TextDocument): TextLayer;

  /** Creates a new paragraph (box) text layer and adds it to this collection. */
  addBoxText(
    size: [number, number],
    sourceText?: string | TextDocument
  ): TextLayer;

  /** Creates a new camera layer and adds it to this collection. */
  addCamera(name: string, centerPoint: [number, number]): CameraLayer;

  /** Creates a new light layer and adds it to this collection. */
  addLight(name: string, centerPoint: [number, number]): LightLayer;

  /** Creates a new shape layer and adds it to this collection. */
  addShape(): ShapeLayer;

  /** Retrieves the layer object with a specified name. */
  byName(name: string): Layer | null;

  /** Collects specified layers into a new composition. */
  precompose(
    layerIndicies: number[],
    name: string,
    moveAllAttributes?: boolean
  ): CompItem;
}

/** The LightLayer object represents a light layer within a composition. Create it using the LayerCollection object’s addLight method */
declare class LightLayer extends Layer {
  /** For light layers, the type of light. */
  lightType: LightType;

  /** Shortcuts */
  readonly lightOption: _LightOptionsGroup;
}

/** The MarkerValue object represents a layer marker, which associates a comment, and optionally a chapter reference point, Web-page link, or Flash Video cue point with a particular point in a layer. */
declare class MarkerValue {
  constructor(
    comment: string,
    chapter?: string,
    url?: string,
    frameTarget?: string,
    cuePointName?: string,
    params?: string
  );

  /** A comment on the associated layer. */
  comment: string;

  /** The amount of time represented by the marker. */
  duration: number;

  /** A chapter link reference point for the associated layer. */
  chapter: string;

  /** The Flash Video cue point name. */
  cuePointName: string;

  /** Whether the Flash Video cue point is for an event or navigation. */
  eventCuePoint: boolean;

  /** A URL for Web page to be associated with the layer. */
  url: string;

  /** A specific frame target within the Web page specified by url. */
  frameTarget: string;

  /** Retrieves the key-value pairs associated with the marker value. */
  getParameters(): object;

  /** Sets the key-value pairs associated with the marker value. */
  setParameters(keyValuePairs: object): void;
}

declare interface MaskPropertyGroup {
  (index: number): MaskPropertyGroup;
  (name: string): MaskPropertyGroup;
}

/** The MaskPropertyGroup object encapsulates mask attributes in a layer. */
declare class MaskPropertyGroup extends PropertyGroup {
  /** The mask mode. */
  maskMode: MaskMode;

  /** When true, the mask is inverted. */
  inverted: boolean;

  /** When true, the shape of the mask is RotoBezier. */
  rotoBezier: boolean;

  /** How motion blur is applied to this mask. */
  maskMotionBlur: MaskMotionBlur;

  /** When true, the mask is locked. */
  locked: boolean;

  /** The color used to draw the mask outline in the user interface. */
  color: [number, number, number];

  /** The feather falloff mode for the mask. */
  maskFeatherFalloff: MaskFeatherFalloff;

  /** The shape of the mask */
  maskShape: Property;
}

/** The OMCollection contains all of the output modules in a render queue. The collection provides access to the OutputModule objects, but does not provide any additional functionality. The first OutputModule object in the collection is at index position 1. */
declare class OMCollection extends Collection {
  /** Retrieves a OutputModule object in the collection by its index number. The first object is at index 1. */
  readonly [index: number]: OutputModule;
}

/** An OutputModule object of a RenderQueueItem generates a single file or sequence via a render operation, and contains attributes and methods relating to the file to be rendered. */
declare class OutputModule {
  /** The path and name of the file to be rendered. */
  file: File;

  /** An action to be taken after rendering. */
  postRenderAction: PostRenderAction;

  /** The user-interface name of the output module. */
  readonly name: string;

  /** All templates for the output module */
  readonly templates: string[];

  /** When true, writes all source footage XMP metadata to the output file. */
  includeSourceXMP: boolean;

  /** Removes this output module from the render-queue item’s list. */
  remove(): void;

  /** Saves a new output-module template. */
  saveAsTemplate(name: string): void;

  /** Applies an output-module template. */
  applyTemplate(templateName: string): void;

  getSetting(key: string): string | number;

  getSettings(
    format?: GetSettingsFormat
  ): {
    "Audio Bit Depth": string;
    "Audio Channels": string;
    "Audio Sample Rate": string;
    Channels: string;
    Color: string;
    Crop: string;
    "Crop Bottom": string;
    "Crop Left": string;
    "Crop Right": string;
    "Crop Top": string;
    Depth: string;
    Format: string;
    "Include Project Link": string;
    "Include Source XMP Metadata": string;
    "Lock Aspect Ratio": string;
    "Output Audio": string;
    "Output File Info": string;
    "Post-Render Action": string;
    Resize: string;
    "Resize Quality": string;
    "Resize to": object;
    "Starting #": string;
    "Use Comp Frame Number": string;
    "Use Region of Interest": string;
    "Video Output": string;
  };

  setSetting(key: string, value: string | number): void;

  setSettings(settings: object): void;
}

/** The PlaceholderSource object describes the footage source of a placeholder. */
declare class PlaceholderSource extends FootageSource {}

/** The project object represents an After Effects project. Attributes provide access to specific objects within the project, such as imported files or footage and compositions, and also to project settings such as the timecode base. Methods can import footage, create solids, compositions and folders, and save changes. */
declare class Project {
  /** The file for the currently open project. */
  readonly file: File | null;

  /** The folder containing all the contents of the project; the equivalent of the Project panel */
  readonly rootFolder: FolderItem;

  /** All items in the project. */
  readonly items: ItemCollection;

  /** The currently active item. */
  readonly activeItem: Item | null;

  /** The color depth of the current project. */
  bitsPerChannel: number;

  /** When true, thumbnail views use the transparency checkerboard pattern. */
  transparencyGridThumbnails: boolean;

  /** The total number of items contained in the project. */
  readonly numItems: number;

  /** All items selected in the Project panel. */
  readonly selection: Item[];

  /** The project’s render queue. */
  readonly renderQueue: RenderQueue;

  /** The time display style, corresponding to the Time Display Style section in the Project Settings dialog box. */
  timeDisplayType: TimeDisplayType;

  /** CC 2017(14.0)- The active tool in the Tools panel. */
  toolType: ToolType;

  /** The Footage Start Time setting in the Project Settings dialog box, which is enabled when Timecode is selected as the time display style. */
  footageTimecodeDisplayStartType: FootageTimecodeDisplayStartType;

  /** The Use Feet + Frames setting in the Project Settings dialog box. */
  framesUseFeetFrames: boolean;

  /** The Use Feet + Frames menu setting in the Project Settings dialog box. */
  feetFramesFilmType: FeetFramesFilmType;

  /** CC 2015.3(13.8)- */
  gpuAccelType: GpuAccelType;

  /** The Frame Count menu setting in the Project Settings dialog box. */
  framesCountType: FramesCountType;

  /** The frame at which to start numbering when displaying the project. */
  displayStartFrame: number;

  /** When true, linear blending is used for the project. */
  linearBlending: boolean;

  /** The project’s XMP metadata. */
  xmpPacket: string;

  /** Retrieves an item from the project. */
  item(index: number): Item;

  /** Consolidates all footage in the project. */
  consolidateFootage(): number;

  /** Removes unused footage from the project. */
  removeUnusedFootage(): number;

  /** Reduces the project to a specified set of items. */
  reduceProject(array_of_items: Item[]): number;

  /** Closes the project with normal save options. */
  close(closeOptions: CloseOptions): boolean;

  /** Saves the project. */
  save(file?: File): void;

  /** Displays a Save dialog box. */
  saveWithDialog(): boolean;

  /** Imports a placeholder into the project. */
  importPlaceholder(
    name: string,
    width: number,
    height: number,
    frameRate: number,
    duration: number
  ): PlaceholderItem;

  /** Imports a file into the project. */
  importFile(importOptions: ImportOptions): Item;

  /** Displays an Import File dialog box. */
  importFileWithDialog(): Item[] | null;

  /** Shows or hides the Project panel. */
  showWindow(doShow: boolean): void;

  /** Automatically replaces text in all expressions. */
  autoFixExpressions(oldText: string, newText: string): void;

  /** Creates a new team project. */
  newTeamProject(teamProjectName: string, description: string): boolean;

  /** Opens a team project. */
  openTeamProject(teamProjectName: string): boolean;

  /** Shares the currently open team project. */
  shareTeamProject(comment: string): boolean;

  /** Syncs the currently open team project. */
  syncTeamProject(): boolean;

  /** Closes a currently open team project. */
  closeTeamProject(): boolean;

  /** Converts a team project to an After Effects project on a local disk. */
  convertTeamProjectToProject(project_file: File): boolean;

  /** Returns an array containing the name strings for all team projects available for the current user. Archived Team Projects are not included. */
  listTeamProjects(): string[];

  /** Checks whether specified team project is currently open. */
  isTeamProjectOpen(teamProjectName: string): boolean;

  /** Checks whether any team project is currently open. */
  isAnyTeamProjectOpen(): boolean;

  /** Checks whether or not team projects is enabled for After Effects. (This will almost always return true.) */
  isTeamProjectEnabled(): boolean;

  /** Checks whether or not the client (After Effects) is currently logged into the team project server. */
  isLoggedInToTeamProject(): boolean;

  /** Checks whether or not the Sync command is enabled. */
  isSyncCommandEnabled(): boolean;

  /** Checks whether or not the Share command is enabled. */
  isShareCommandEnabled(): boolean;

  /** Checks whether or not the Resolve command is enabled. */
  isResolveCommandEnabled(): boolean;

  /** Resolves a conflict between the open team project and the version on the team projects server, using the specified resolution method. */
  resolveConflict(ResolveType: ResolveType): boolean;
}

declare type PropertyValue =
  | void
  | boolean
  | number
  | [number, number]
  | [number, number, number]
  | [number, number, number, number]
  | MarkerValue
  | Shape
  | TextDocument;

/** The Property object contains value, keyframe, and expression information about a particular AE property of a layer. */
declare class Property extends PropertyBase {
  /** Type of value stored in this property. */
  readonly propertyValueType: PropertyValueType;

  /** Current value of the property. */
  readonly value: PropertyValue;

  /** When true, there is a minimum permitted value. */
  readonly hasMin: boolean;

  /** When true, there is a maximum permitted value. */
  readonly hasMax: boolean;

  /** The minimum permitted value. */
  readonly minValue: number;

  /** The maximum permitted value. */
  readonly maxValue: number;

  /** When true, the property defines a spatial value. */
  readonly isSpatial: boolean;

  /** When true, the property can be keyframed. */
  readonly canVaryOverTime: boolean;

  /** When true, the property has keyframes or an expression enabled that can vary its values. */
  readonly isTimeVarying: boolean;

  /** The number of keyframes on this property. */
  readonly numKeys: number;

  /** A text description of the units in which the value is expressed. */
  readonly unitsText: string;

  /** The expression string for this property. */
  expression: string;

  /** When true, the expression can be set by a script. */
  readonly canSetExpression: boolean;

  /** When true, the expression is used to generate values for the property. */
  expressionEnabled: boolean;

  /** The error, if any, that occurred when the last expression was evaluated. */
  readonly expressionError: string;

  /** All selected keyframes of the property. */
  readonly selectedKeys: number[];

  /** The position index of this property. */
  readonly propertyIndex: number;

  /** When true, the property’s dimensions are represented as separate properties. */
  dimensionsSeparated: boolean;

  /** When true, the property represents one of the separated dimensions for a multidimensional property. */
  readonly isSeparationFollower: boolean;

  /** When true, the property is multidimensional and can be separated. */
  readonly isSeparationLeader: boolean;

  /** For a separated follower, the dimension it represents in the multidimensional leader. */
  readonly separationDimension: number;

  /** The original multidimensional property for this separated follower. */
  readonly separationLeader: Property;

  /** Gets the value of the property evaluated at given time. */
  valueAtTime(time: number, preExpression: boolean): PropertyValue;

  /** Sets the static value of the property. */
  setValue(newValue: PropertyValue): void;

  /** Creates a keyframe for the property. */
  setValueAtTime(time: number, newValue: PropertyValue): void;

  /** Creates a set of keyframes for the property. */
  setValuesAtTimes(times: number[], newValues: PropertyValue[]): void;

  /** Finds a keyframe and sets the value of the property at that keyframe. */
  setValueAtKey(keyIndex: number, newValue: PropertyValue): void;

  /** Gets the keyframe nearest to a specified time. */
  nearestKeyIndex(time: number): number;

  /** Gets the time at which a condition occurs. */
  keyTime(keyIndex: number): number;
  keyTime(markerComment: string): number;

  /** Gets the value of a keyframe at the time at which a condition occurs. */
  keyValue(keyIndex: number): PropertyValue;
  keyValue(markerComment: string): MarkerValue;

  /** Adds a new keyframe to the property at a given time. */
  addKey(time: number): number;

  /** Removes a keyframe from the property. */
  removeKey(keyIndex: number): void;

  /** When true, this property can be interpolated. */
  isInterpolationTypeValid(type: KeyframeInterpolationType): boolean;

  /** Sets the interpolation type for a key. */
  setInterpolationTypeAtKey(
    keyIndex: number,
    inType: KeyframeInterpolationType,
    outType?: KeyframeInterpolationType
  ): void;

  /** Gets the 'in' interpolation type for a key. */
  keyInInterpolationType(keyIndex: number): KeyframeInterpolationType;

  /** Gets the 'out' interpolation type for a key. */
  keyOutInterpolationType(keyIndex: number): KeyframeInterpolationType;

  /** Sets the “in” and “out” tangent vectors for a key. */
  setSpatialTangentsAtKey(
    keyIndex: number,
    inTangent: [number, number],
    outTangent: typeof inTangent
  ): void;
  setSpatialTangentsAtKey(
    keyIndex: number,
    inTangent: [number, number, number],
    outTangent: typeof inTangent
  ): void;

  /** Gets the “in” spatial tangent for a key. */
  keyInSpatialTangent(
    keyIndex: number
  ): [number, number] | [number, number, number];

  /** Gets the “out” spatial tangent for a key. */
  keyOutSpatialTangent(
    keyIndex: number
  ): [number, number] | [number, number, number];

  /** Sets the “in” and “out” temporal ease for a key. */
  setTemporalEaseAtKey(
    keyIndex: number,
    inTemporalEase: [KeyframeEase],
    outTemporalEase?: typeof inTemporalEase
  ): void;
  setTemporalEaseAtKey(
    keyIndex: number,
    inTemporalEase: [KeyframeEase, KeyframeEase],
    outTemporalEase?: typeof inTemporalEase
  ): void;
  setTemporalEaseAtKey(
    keyIndex: number,
    inTemporalEase: [KeyframeEase, KeyframeEase, KeyframeEase],
    outTemporalEase?: typeof inTemporalEase
  ): void;

  /** Gets the “in” temporal ease for a key. */
  keyInTemporalEase(
    keyIndex: number
  ):
    | [KeyframeEase]
    | [KeyframeEase, KeyframeEase]
    | [KeyframeEase, KeyframeEase, KeyframeEase];

  /** Gets the “out” temporal ease for a key. */
  keyOutTemporalEase(
    keyIndex: number
  ):
    | [KeyframeEase]
    | [KeyframeEase, KeyframeEase]
    | [KeyframeEase, KeyframeEase, KeyframeEase];

  /** Sets whether a keyframe has temporal continuity. */
  setTemporalContinuousAtKey(keyIndex: number, newVal: boolean): void;

  /** Reports whether a keyframe has temporal continuity. */
  keyTemporalContinuous(keyIndex: number): boolean;

  /** Sets whether a keyframe has temporal auto-Bezier. */
  setTemporalAutoBezierAtKey(keyIndex: number, newVal: boolean): void;

  /** Reports whether a keyframe has temporal auto-Bezier. */
  keyTemporalAutoBezier(keyIndex: number): boolean;

  /** Sets whether a keyframe has spatial continuity. */
  setSpatialContinuousAtKey(keyIndex: number, newVal: boolean): void;

  /** Reports whether a keyframe has spatial continuity. */
  keySpatialContinuous(keyIndex: number): boolean;

  /** Sets whether a keyframe has spatial auto-Bezier. */
  setSpatialAutoBezierAtKey(keyIndex: number, newVal: boolean): void;

  /** Reports whether a keyframe has spatial auto-Bezier. */
  keySpatialAutoBezier(keyIndex: number): boolean;

  /** Sets whether a keyframe is roving. */
  setRovingAtKey(keyIndex: number, newVal: boolean): void;

  /** Reports whether a keyframe is roving. */
  keyRoving(keyIndex: number): boolean;

  /** Sets whether a keyframe is selected. */
  setSelectedAtKey(keyIndex: number, onOff: boolean): void;

  /** Reports whether a keyframe is selected. */
  keySelected(keyIndex: number): boolean;

  /** For a separated, multidimensional property, retrieves a specific follower property. */
  getSeparationFollower(dim: number): Property;
}

/** Properties are accessed by name through layers, using various kinds of expression syntax, as controlled by application preferences. */
declare interface PropertyBase {
  (index: number): PropertyBase;
  (name: string): PropertyBase;
}

declare class PropertyBase {
  /** Name of the property. */
  name: string;

  /** A special name for the property used to build unique naming paths. */
  readonly matchName: string;

  /** Index of this property within its parent group. */
  readonly propertyIndex: number;

  /** The number of levels of parent groups between this property and the containing layer. */
  readonly propertyDepth: number;

  /** The property type. */
  readonly propertyType: PropertyType;

  /** The immediate parent group of this property. */
  readonly parentProperty: PropertyGroup;

  /** When true, the property has been changed since its creation. */
  readonly isModified: boolean;

  /** When true, the user interface displays an eyeball icon for this property. */
  readonly canSetEnabled: boolean;

  /** When true, this property is enabled. */
  enabled: boolean;

  /** When true, this property is active. */
  readonly active: boolean;

  /** When true, this property is not displayed in the user interface. */
  readonly elided: boolean;

  /** When true, this property is an effect. */
  readonly isEffect: boolean;

  /** When true, this property is a mask. */
  readonly isMask: boolean;

  /** When true, this property is selected. */
  selected: boolean;

  /** Gets the parent group for this property. */
  propertyGroup(countUp?: number): PropertyGroup;

  /** Removes this from the project. */
  remove(): void;

  /** Moves this property to a new position in its parent group. */
  moveTo(newIndex: number): void;

  /** Duplicates this property object. */
  duplicate(): PropertyBase;

  /** Gets a member property or group. Strictly, this should be PropertyGroup method. */
  property(index: number): PropertyBase;
  property(name: string): PropertyBase;
}

/** The PropertyGroup object represents a group of properties. It can contain Property objects and other PropertyGroup objects. Property groups can be nested to provide a parent-child hierarchy, with a Layer object at the top (root) down to a single Property object, such as the mask feather of the third mask. To traverse the group hierarchy, use PropertyBase methods and attributes. */
declare class PropertyGroup extends PropertyBase {
  /** The number of indexed properties in the group. */
  readonly numProperties: number;

  /** Gets a member property or group. */
  // property(index: number): PropertyBase;
  // property(name: string): PropertyBase;

  /** Reports whether a property can be added to the group. */
  canAddProperty(name: string): boolean;

  /** Adds a property to the group. */
  addProperty(name: string): PropertyBase;
}

/** The RenderQueue object represents the render automation process, the data and functionality that is available through the Render Queue panel of a particular After Effects project. Attributes provide access to items in the render queue and their render status. Methods can start, pause, and stop the rendering process. */
declare class RenderQueue {
  /** When true, a render is in progress. */
  readonly rendering: boolean;

  /** The total number of items in the render queue. */
  readonly numItems: number;

  /** CC 2017(14.0)- */
  readonly canQueueInAME: boolean;

  /** The collection of items in the render queue. */
  readonly items: RQItemCollection;

  /** Show or hides the Render Queue panel. */
  showWindow(doShow: boolean): void;

  /** Starts the rendering process; does not return until render is complete. */
  render(): void;

  /** Pauses or restarts the rendering process. */
  pauseRendering(pause: boolean): void;

  /** Stops the rendering process. */
  stopRendering(): void;

  /** Gets a render-queue item from the collection. */
  item(index: number): RenderQueueItem;

  /** CC 2017(14.0)- */
  queueInAME(render_immediately_in_AME: boolean): void;
}

/** The RenderQueueItem object represents an individual item in the render queue. It provides access to the specific settings for an item to be rendered. Create the object by adding a composition to the Render Queue with the RQItemCollection object; */
declare class RenderQueueItem {
  /** The total number of Output Modules assigned to the item. */
  readonly numOutputModules: number;

  /** When true, this item is rendered when the queue is started. */
  render: boolean;

  /** The time when rendering began for the item. */
  readonly startTime: Date | null;

  /** The time elapsed in the current rendering of this item. */
  readonly elapsedSeconds: number | null;

  /** The start time in the composition to be rendered. */
  timeSpanStart: number;

  /** The duration of the composition to be rendered. */
  timeSpanDuration: number;

  /** The number of frames to skip when rendering this item. */
  skipFrames: number;

  /** The composition to be rendered by this item. */
  readonly comp: CompItem;

  /** The collection of Output Modules for this item. */
  readonly outputModules: OMCollection;

  /** A set of Render Settings templates. */
  readonly templates: string[];

  /** The current rendering status of the item. */
  readonly status: RQItemStatus;

  /** A callback function that is called during the rendering process when the status of the item changes. */
  onStatusChanged: string | null;

  /** A log type for this item. */
  logType: LogType;

  /** Gets an Output Module for the item. */
  outputModule(index: number): OutputModule;

  /** Removes the item from the render queue. */
  remove(): void;

  /** Saves a new Render Settings template. */
  saveAsTemplate(name: string): void;

  /** Applies a Render Settings template. */
  applyTemplate(templateName: string): void;

  /** Duplicates this item. */
  duplicate(): RenderQueueItem;

  getSetting(key: string): string | number;

  getSettings(format: GetSettingsFormat): object;

  setSetting(key: string, value: string | number): void;

  setSettings(settings: object): void;
}

/** The RQItemCollection contains all of the render-queue items in a project, as shown in the Render Queue panel of the project. The collection provides access to the RenderQueueItem objects, and allows you to create them from compositions. The first RenderQueueItem object in the collection is at index position 1. */
declare class RQItemCollection extends Collection {
  /** Retrieves an RenderQueueItem in the collection by its index number. The first object is at index 1. */
  [index: number]: RenderQueueItem;

  /** Adds a composition to the Render Queue. */
  add(comp: CompItem): RenderQueueItem;
}

/** The Settings object provides an easy way to manage settings for scripts. The settings are saved in the After Effects preferences file and are persistent between application sessions. Settings are identified by section and key within the file, and each key name is associated with a value. In the preferences file, section names are enclosed in brackets and quotation marks, and key names are listing in quotation marks below the section name. All values are strings. */
declare class Settings {
  /** Saves a default value for a setting. */
  saveSetting(
    sectionName: string,
    keyName: string,
    value: string,
    type?: PREFType
  ): void;

  /** Retrieves a setting value. */
  getSetting(sectionName: string, keyName: string, type?: PREFType): string;

  /** Reports whether a specified setting is assigned. */
  haveSetting(sectionName: string, keyName: string, type?: PREFType): boolean;
}

/** The Shape object encapsulates information describing a shape in a shape layer, or the outline shape of a Mask. */
declare class Shape {
  /** When true, the shape is a closed curve. */
  closed: boolean;

  /** The anchor points of the shape. */
  vertices: [number, number][];

  /** The tangent vectors coming into the shape vertices. */
  inTangents: [number, number][];

  /** The tangent vectors coming out of the shape vertices. */
  outTangents: [number, number][];

  /** The mask path segment (sections of a mask path between vertices) containing each feather point. */
  featherSegLocs: number[];

  /** The relative position of each feather point on its mask path segment. */
  featherRelSegLocs: number[];

  /** The feather amount (radius) for each feather point. */
  featherRadii: number[];

  /** The feather radius interpolation type for each feather point. */
  featherInterps: number[];

  /** The feather tension at each feather point. */
  featherTensions: number[];

  /** The direction (inner or outer) of each feather point. */
  featherTypes: number[];

  /** The relative angle between the two normals on either side of a curved outer feather boundary at a corner on a mask path. */
  featherRelCornerAngles: number[];
}

/** The ShapeLayer object represents a shape layer within a composition. Create it using the LayerCollection object’s addShape() method. */
declare class ShapeLayer extends AVLayer {}

/** The SolidSource object represents a solid-color footage source. */
declare class SolidSource extends FootageSource {
  /** The color of the solid. */
  color: [number, number, number];
}

/** The file specification, an ExtendScript File object. */
declare class Swatch {
  /** The ASE version number. */
  majorVersion: number;

  /** The ASE version number. */
  minorVersion: number;

  /** An array of SwatchValue. */
  values: SwatchValue[];
}

/** The file specification, an ExtendScript File object. */
declare class SwatchValue {
  /** One of "RGB", "CMYK", "LAB", "Gray" */
  type: "RGB" | "CMYK" | "LAB" | "Gray";

  /** When type = "RGB", the color values in the range [0.0..1.0]. 0, 0, 0 is Black. */
  r: number;
  g: number;
  b: number;

  /** When type = "CMYK", the color values in the range [0.0..1.0]. 0, 0, 0, 0 is White. */
  c: number;
  m: number;
  y: number;
  k: number;

  /** When type = "LAB", the color values. L is in the range [0.0..1.0]. a and b are in the range [-128.0..+128.0] 0, 0, 0 is Black. */
  L: number;
  a: number;
  // b:number;

  /** When type = "Gray", the value range is [0.0..1.0]. 0.0 is Black. */
  gray: number;
  value: number;
}

/** The System object provides access to attributes found on the user’s system, such as the user name and the name and version of the operating system. It is available through the system global variable. */
declare class System {
  /** The current user name. */
  readonly userName: string;

  /** The name of the host computer. */
  readonly machineName: string;

  /** The name of the operating system. */
  readonly osName: string;

  /** The version of the operating system. */
  readonly osVersion: string;

  /** Execute’s a command on the system’s command line. */
  callSystem(cmdLineToExecute: string): string;
}

/** The TextDocument object stores a value for a TextLayer's Source Text property. Create it with the constructor, passing the string to be encapsulated. */
declare class TextDocument {
  constructor(docText: string);

  /** The text layer’s Source Text value. */
  text: string;

  /** The text layer’s font specified by its PostScript name. */
  font: string;

  /** string with path of font file, providing its location on disk (not guaranteed to be returned for all font types; return value may be empty string for some kinds of fonts) */
  readonly fontLocation: string;

  /** string with style information — e.g., “bold”, “italic” */
  readonly fontStyle: string;

  /** a string with the name of the font family */
  readonly fontFamily: string;

  /** The text layer’s font size in pixels. */
  fontSize: number;

  /** When true, the text layer shows a fill. */
  applyFill: boolean;

  /** When true, the text layer shows a stroke. */
  applyStroke: boolean;

  /** The text layer’s fill color. */
  fillColor: [number, number, number];

  /** The text layer’s stroke color. */
  strokeColor: [number, number, number];

  /** Indicates the rendering order for the fill and stroke of a text layer. */
  strokeOverFill: boolean;

  /** The text layer’s stroke thickness. */
  strokeWidth: number;

  /** The paragraph justification for the text layer. */
  justification: ParagraphJustification;

  /** The text layer’s spacing between characters. */
  tracking: number;

  /** When true, the text layer is point (unbounded) text. */
  readonly pointText: boolean;

  /** When true, the text layer is paragraph (bounded) text. */
  readonly boxText: boolean;

  /** For box text, the pixel dimensions for the text bounds. */
  boxTextSize: [number, number];

  /** CC 2014.2(13.2)- */
  readonly fauxBold: boolean;

  /** CC 2014.2(13.2)- */
  readonly fauxItalic: boolean;

  /** CC 2014.2(13.2)- */
  readonly allCaps: boolean;

  /** CC 2014.2(13.2)- */
  readonly smallCaps: boolean;

  /** CC 2014.2(13.2)- */
  readonly superscript: boolean;

  /** CC 2014.2(13.2)- */
  readonly subscript: boolean;

  /** CC 2014.2(13.2)- */
  readonly verticalScale: number;

  /** CC 2014.2(13.2)- */
  readonly horizontalScale: number;

  /** CC 2014.2(13.2)- */
  readonly baselineShift: number;

  /** CC 2014.2(13.2)- */
  readonly tsume: number;

  /** CC 2014.2(13.2)- */
  readonly boxTextPos: [number, number];

  /** CC 2015(13.6)- */
  readonly baselineLocs: number[];

  /** Restores the default character settings in the Character panel. */
  resetCharStyle(): void;

  /** Restores the default paragraph settings in the Paragraph panel. */
  resetParagraphStyle(): void;
}

/** The TextLayer object represents a text layer within a composition. Create it using the LayerCollection object’s addText method. */
declare class TextLayer extends AVLayer {
  readonly source: null;

  readonly text: _TextProperties;
}

/** The Viewer object represents a Composition, Layer, or Footage panel. */
declare class Viewer {
  /** The type of content in the viewer. */
  readonly type: ViewerType;

  /** When true, the viewer is focused. */
  readonly active: boolean;

  activeViewIndex: number;

  readonly views: View[];

  /** When true, the viewer is at its maximized size. */
  maximized: boolean;

  /** Moves the viewer to front and places focus on it. */
  setActive(): boolean;
}

declare class View {
  readonly active: boolean;
  readonly options: ViewOptions;

  setActive(): void;
}

declare class ViewOptions {
  channels: ChannelType;
  checkerboards: boolean;
  exposure: number;
  fastPreview: FastPreviewType;
  zoom: number;
}

/**
 * Properties for Shortcuts
 */
declare class _TransformGroup extends PropertyGroup {
  readonly anchorPoint: Property;
  readonly position: Property;
  readonly xPosition: Property;
  readonly yPosition: Property;
  readonly zPosition: Property;
  readonly scale: Property;
  readonly orientation: Property;
  readonly rotation: Property;
  readonly xRotation: Property;
  readonly yRotation: Property;
  readonly zRotation: Property;
  readonly opacity: Property;
  readonly pointOfInterest: Property;
}

declare class _LightOptionsGroup extends PropertyGroup {
  readonly intensity: Property;
  readonly color: Property;
  readonly coneAngle: Property;
  readonly coneFeather: Property;
  readonly falloff: Property;
  readonly radius: Property;
  readonly falloffDistance: Property;
  readonly castsShadows: Property;
  readonly shadowDarkness: Property;
  readonly shadowDiffusion: Property;
}

declare class _CameraOptionsGroup extends PropertyGroup {
  readonly zoom: Property;
  readonly depthOfField: Property;
  readonly focusDistance: Property;
  readonly aperture: Property;
  readonly blurLevel: Property;
  readonly irisShape: Property;
  readonly irisRotation: Property;
  readonly irisRoundness: Property;
  readonly irisAspectRatio: Property;
  readonly irisDiffractionFringe: Property;
  readonly highlightGain: Property;
  readonly highlightThreshold: Property;
  readonly highlightSaturation: Property;
}

declare class _LayerStyles extends PropertyGroup {
  readonly blendingOption: _BlendOptionsGroup;
  readonly dropShadow: _DropShadow;
  readonly innerShadow: _InnerShadow;
  readonly outerGlow: _OuterGlow;
  readonly innerGlow: _InnerGlow;
  readonly bevelAndEmboss: _BevelAndEmboss;
  readonly satin: _Satin;
  readonly colorOverlay: _ColorOverlay;
  readonly gradientOverlay: _GradientOverlay;
  readonly stroke: _Stroke;
}

declare class _BlendOptionsGroup extends PropertyGroup {
  readonly globalLightAngle: Property;
  readonly globalLightAltitude: Property;
  readonly advancedBlending: _AdvBlendGroup;
}

declare class _AdvBlendGroup extends PropertyGroup {
  readonly fillOpacity: Property;
  readonly red: Property;
  readonly green: Property;
  readonly blue: Property;
  readonly blendInteriorStylesAsGroup: Property;
  readonly useBlendRangesFromSource: Property;
}

declare class _DropShadow extends PropertyGroup {
  readonly blendMode: Property;
  readonly color: Property;
  readonly opacity: Property;
  readonly useGlobalLight: Property;
  readonly angle: Property;
  readonly distance: Property;
  readonly spread: Property;
  readonly size: Property;
  readonly noise: Property;
  readonly layerKnocksOutDropShadow: Property;
}

declare class _InnerShadow extends PropertyGroup {
  readonly blendMode: Property;
  readonly color: Property;
  readonly opacity: Property;
  readonly useGlobalLight: Property;
  readonly angle: Property;
  readonly distance: Property;
  readonly choke: Property;
  readonly size: Property;
  readonly noise: Property;
}

declare class _OuterGlow extends PropertyGroup {
  readonly blendMode: Property;
  readonly opacity: Property;
  readonly noise: Property;
  readonly colorType: Property;
  readonly color: Property;
  readonly colors: Property;
  readonly gradientSmoothness: Property;
  readonly technique: Property;
  readonly spread: Property;
  readonly size: Property;
  readonly range: Property;
  readonly jitter: Property;
}

declare class _InnerGlow extends PropertyGroup {
  readonly blendMode: Property;
  readonly opacity: Property;
  readonly noise: Property;
  readonly colorType: Property;
  readonly color: Property;
  readonly colors: Property;
  readonly gradientSmoothness: Property;
  readonly technique: Property;
  readonly source: Property;
  readonly choke: Property;
  readonly size: Property;
  readonly range: Property;
  readonly jitter: Property;
}

declare class _BevelAndEmboss extends PropertyGroup {
  readonly style: Property;
  readonly technique: Property;
  readonly depth: Property;
  readonly direction: Property;
  readonly size: Property;
  readonly soften: Property;
  readonly useGlobalLight: Property;
  readonly angle: Property;
  readonly altitude: Property;
  readonly highlightMode: Property;
  readonly highlightColor: Property;
  readonly highlightOpacity: Property;
  readonly shadowMode: Property;
  readonly shadowColor: Property;
  readonly shadowOpacity: Property;
}

declare class _Satin extends PropertyGroup {
  readonly blendMode: Property;
  readonly color: Property;
  readonly opacity: Property;
  readonly angle: Property;
  readonly distance: Property;
  readonly size: Property;
  readonly invert: Property;
}

declare class _ColorOverlay extends PropertyGroup {
  readonly blendMode: Property;
  readonly color: Property;
  readonly opacity: Property;
}

declare class _GradientOverlay extends PropertyGroup {
  readonly blendMode: Property;
  readonly opacity: Property;
  readonly colors: Property;
  readonly gradientSmoothness: Property;
  readonly angle: Property;
  readonly style: Property;
  readonly reverse: Property;
  readonly alignWithLayer: Property;
  readonly scale: Property;
  readonly offset: Property;
}

declare class _Stroke extends PropertyGroup {
  readonly color: Property;
  readonly blendMode: Property;
  readonly size: Property;
  readonly opacity: Property;
  readonly position: Property;
}

declare class _GeometryOptionsGroup extends PropertyGroup {
  readonly curvature: Property;
  readonly segments: Property;

  readonly bevelStyle: Property;
  readonly bevelDepth: Property;
  readonly holeBevelDepth: Property;
  readonly extrusionDepth: Property;
}

declare class _MaterialOptionsGroup extends PropertyGroup {
  readonly castsShadows: Property;
  readonly lightTransmission: Property;
  readonly acceptsShadows: Property;
  readonly acceptsLights: Property;
  readonly appearsInReflections: Property;
  readonly ambient: Property;
  readonly diffuse: Property;
  readonly specularIntensity: Property;
  readonly specularShininess: Property;
  readonly metal: Property;
  readonly reflectionIntensity: Property;
  readonly reflectionSharpness: Property;
  readonly reflectionRolloff: Property;
  readonly transparency: Property;
  readonly transparencyRolloff: Property;
  readonly indexOfRefraction: Property;
}

declare class _AudioGroup extends PropertyGroup {
  readonly audioLevels: Property;
}

declare class _TextProperties extends PropertyGroup {
  readonly sourceText: Property;
  readonly pathOption: _TextPathOptions;
  readonly moreOption: _TextMoreOptions;
}

declare class _TextPathOptions extends PropertyGroup {
  readonly path: Property;
}

declare class _TextMoreOptions extends PropertyGroup {
  readonly anchorPointGrouping: Property;
  readonly groupingAlignment: Property;
  readonly fillANdStroke: Property;
  readonly interCharacterBlending: Property;
}

interface ExternalObjectConstructor {
  readonly prototype: ExternalObject;

  /**
   * Creates a new ExternalObject object.
   */
  new (lib: string): ExternalObject;
  (lib: string): ExternalObject;
}
declare const ExternalObject: ExternalObjectConstructor;

interface ExternalObject {
  /**
   * Set to true to write status information to standard output (the
   * JavaScript Console in the ExtendScript Toolkit). Set to false to turn
   * logging off. Default is false.
   */
  log: boolean;

  /**
   * A set of alternate paths in which to search for the shared library files, a
   * single string with multiple path specifications delimited by semicolons
   * (;). Paths can be absolute or relative to the Folder.startup location.
   */
  searchFolders: string;

  /**
   * The version of the library, as returned by ESGetVersion()
   */
  version: number;

  /**
   * Reports whether a compiled C/C++ library can be found, but does not load it. If logging is on, the
   * paths searched are reported to the JavaScript Console in the ExtendScript Toolkit.
   * Returns true if the library is found, false otherwise.
   * @param spec The file specification for the compiled library, with or without path information.
   */
  search(spec: string): boolean;

  /**
   * Explicitly shuts down the ExternalObject dynamic library wrapped by this instance.
   * It can be helpful to force a shutdown of the external library if termination of external libraries during
   * the shutdown of the hosting application does not occur in the correct order.
   */
  terminate(): undefined;
}

interface CSXSEventConstructor {
  readonly prototype: CSXSEvent;

  /**
   * Creates a new CSXSEvent object.
   */
  new (type?: string, scope?: string, data?: string): CSXSEvent;
  (type?: string, scope?: string, data?: string): CSXSEvent;
}
declare const CSXSEvent: CSXSEventConstructor;

interface CSXSEvent {
  /**
   * Retrieves the unique identifier of the application from which this event was dispatched.
   */
  readonly appId: string;

  /**
   * Retrieves or sets the payload of this event.
   */
  data: string;

  /**
   * Retrieves the unique identifier of the extension from which this event was dispatched.
   */
  readonly extensionId: string;

  /**
   * Retrieves the scope of this event.
   */
  scope: string;

  /**
   * Retrieves the type of this event.
   */
  type: string;

  /**
   * Dispatch the event
   */
  dispatch(): void;
}
`;

let IDSNshim = `/**
 * The $ object provides a number of debugging facilities and informational methods.
 */
interface $ {
  /**
   * The ExtendScript build information.
   */
  readonly build: string

  /**
   * The ExtendScript build date.
   */
  readonly buildDate: Date

  /**
   * The character used as the decimal point character in formatted numeric output.
   */
  decimalPoint: string

  /**
   * The name of the current ExtendScript engine, if set.
   */
  readonly engineName: string

  /**
   * The most recent run-time error information.
   * Assigning error text to this property generates a run-time error; however, the preferred way to generate a run-time error is to throw an Error object.
   */
  error: Error

  /**
   * The file name of the current script.
   */
  readonly fileName: string

  /**
   * Gets or sets low-level debug output flags.
   * A logical AND of bit flag values:
   * 0x0002 (2): Displays each line with its line number as it is executed.
   * 0x0040 (64): Enables excessive garbage collection. Usually, garbage collection starts when the number of objects has increased by a certain amount since the last garbage collection. This flag causes ExtendScript to garbage collect after almost every statement. This impairs performance severely, but is useful when you suspect that an object gets released too soon.
   * 0x0080 (128): Displays all calls with their arguments and the return value.
   * 0x0100 (256): Enables extended error handling (see strict).
   * 0x0200 (512): Enables the localization feature of the toString method. Equivalent to the localize property.
   */
  flags: number

  /**
   * A reference to the global object, which contains the JavaScript global namespace.
   */
  readonly global: any

  /**
   * A high-resolution timer, measuring the time in microseconds. The timer starts when ExtendScript is
   * initialized during the application startup sequence. Every read access resets the timer to Zero.
   */
  readonly hiresTimer: number

  /**
   * The path for include files for the current script.
   */
  readonly includePath: string

  /**
   * The current debugging level, which enables or disables the JavaScript debugger.
   * One of 0 (no debugging), 1 (break on runtime errors), or 2 (full debug mode).
   */
  level: number

  /**
   * The current line number of the currently executing script.
   */
  readonly line: number

  /**
   * Gets or sets the current locale.
   * The string contains five characters in the form LL_RR, where LL is an ISO 639 language specifier, and RR is an ISO 3166 region specifier.Initially, this is the value that the application or the platform returns for the current user. You can set it to temporarily change the locale for testing. To return to the application or platform setting, set to undefined, null, or the empty string.
   */
  locale: string

  /**
   * Set to true to enable the extended localization features of the built-in toString() method.
   */
  localize: boolean

  /**
   * The ExtendScript memory cache size, in bytes.
   */
  memCache: number

  /**
   * The current operating system version information.
   */
  readonly os: string

  /**
   * An array of objects containing information about the display screens attached to your computer.
   * Each object has the properties left, top, right, bottom, which contain the four corners of each screen in global coordinates.A property primary is true if that object describes the primary display.
   */
  readonly screens: object[]

  /**
   * The current stack trace.
   */
  readonly stack: string

  /**
   * Sets or clears strict mode for object modification.
   * When true, any attempt to write to a read-only property causes a runtime error. Some objects do not permit the creation of new properties when true.
   */
  strict: any

  /**
   * The version number of the ExtendScript engine.
   * Formatted as a three-part number and description; for example: "3.92.95 (debug)".
   */
  readonly version: string

  /**
   * Shows an About box for the ExtendScript component, and returns the text for the box.
   */
  about(): string

  /**
   * Breaks execution at the current position.
   * @param condition A string containing a JavaScript statement to be used as a condition. If the statement evaluates to true or nonzero when this point is reached, execution stops.
   */
  bp(condition?: any): void

  /**
   * Invokes the platform-specific color selection dialog, and returns the selected color.
   * @param color The color to be preselected in the dialog, as 0xRRGGBB, or -1 for the platform default.
   */
  colorPicker(color: number): number

  /**
   * Loads and evaluates a file.
   * @param file The file to load.
   * @param timeout An optional timeout in milliseconds.
   */
  evalFile(file: File, timeout?: number): any

  /**
   * Initiates garbage collection in the ExtendScript engine.
   */
  gc(): void

  /**
   * Retrieves the value of an environment variable.
   * @param name The name of the variable.
   */
  getenv(name: string): string

  /**
   * Sets the value of an environment variable.
   * @param name The name of the variable.
   * @param value The value of the variable.
   */
  setenv(name: string, value: string): void

  /**
   * Suspends the calling thread for a number of milliseconds.
   * During a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated. This can happen if there is a break request, or if the script timeout has expired.
   * @param msecs Number of milliseconds to sleep.
   */
  sleep(msecs: number): void

  /**
   * Converts this object to a string.
   */
  toString(): string

  /**
   * Prints text to the Console.
   * @param text The text to print. All arguments are concatenated.
   */
  write(text: any): void

  /**
   * Prints text to the Console, and adds a newline character.
   * @param text The text to print. All arguments are concatenated.
   */
  writeln(text: any): void
}
declare const $: $

/**
 * The global BridgeTalk object.
 */
declare var BridgeTalk: any

/**
 * The Infinity global property is a predefined variable with the value for infinity.
 */
declare var Infinity: number

/**
 * The NaN global property is a predefined variable with the value NaN (Not-a-Number), as specified by the IEEE-754 standard.
 */
declare var NaN: number

/**
 * The application object
 */
declare var app: Application
declare interface Application {}

/**
 * Displays an alert box
 * @param message The text to display
 * @param title The title of the alert; ignored on the Macintosh
 * @param errorIcon Display an Error icon; ignored on the Macintosh
 */
declare function alert(message: string, title?: string, errorIcon?: boolean): void

/**
 * Displays an alert box with Yes and No buttons; returns true for Yes
 * @param message The text to display
 * @param noAsDefault Set to true to set the No button as the default button
 * @param title The title of the alert; ignored on the Macintosh
 */
declare function confirm(message: string, noAsDefault?: boolean, title?: string): boolean

/**
 * Decodes a string created with encodeURI().
 * @param uri The text to decode.
 */
declare function decodeURI(uri: string): string

/**
 * Decodes a string created with encodeURIComponent().
 * @param uri The text to decode.
 */
declare function decodeURIComponent(uri: string): string

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'();/?:@&=+$,#. The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURI(text: string): string

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'(). The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURIComponent(text: string): string

/**
 * Creates a URL-encoded string from aString.
 * In the new string, characters of aString that require URL encoding are replaced with the format %xx, where xx is the hexadecimal value of the character code in the Unicode character set.This format is used to transmit information appended to a URL during, for example, execution of the GET method.Use the unescape() global function to translate the string back into its original format. Returns a string which is aString URL-encoded.
 * @param aString The string to be encoded.
 */
declare function escape(aString: string): string

/**
 * Evaluates its argument as a JavaScript script, and returns the result of evaluation.
 * You can pass the result of an object's toSource() method to reconstruct that object.
 * @param stringExpression The string to evaluate.
 */
declare function eval(stringExpression: string): any

/**
 * Evaluates an expression and reports whether the result is a finite number.
 * Returns true if the expression is a finite number, false otherwise. False if the value is infinity or negative infinity.
 * @param expression Any valid JavaScript expression.
 */
declare function isFinite(expression: number): boolean

/**
 * Evaluates an expression and reports whether the result is "Not-a-Number" (NaN).
 * Returns true if the result of evaluation is not a number (NaN), false if the value is a number.
 * @param expression Any valid JavaScript expression.
 */
declare function isNaN(expression: number): boolean

/**
 * Returns true if the supplied string is a valid XML name.
 * @param name The XML name to test.
 */
declare function isXMLName(name: string): boolean

/**
 * Localizes a ZString-encoded string and merges additional arguments into the string.
 * @param what The string to localize. A ZString-encoded string that can contain placeholder for additional arguments in the form %1 to %n.
 * @param arguments Optional argument(s) to be merged into the string. There may be more than one argument.
 */
declare function localize(what: string, ...arguments: any[]): string

/**
 * Extracts a floating-point number from a string.
 * Parses a string to find the first set of characters that can be converted to a floating point number, and returns that number, or NaN if it does not encounter characters that it can converted to a number.The function supports exponential notation.
 * @param text The string from which to extract a floating point number.
 */
declare function parseFloat(text: string): number

/**
 * Extracts an integer from a string.
 * Parses a string to find the first set of characters, in a specified base, that can be converted to an integer, and returns that integer, or NaN if it does not encounter characters that it can convert to a number.
 * @param text The string from which to extract an integer.
 * @param base The base of the string to parse (from base 2 to base 36). If not supplied, base is determined by the format of string.
 */
declare function parseInt(text: string, base?: number): number

/**
 * Displays a dialog allowing the user to enter text
 * Returns null if the user cancelled the dialog, the text otherwise
 * @param prompt The text to display
 * @param default_ The default text to preset the edit field with
 * @param title The title of the dialog;
 */
declare function prompt(prompt: string, default_?: string, title?: string): string

/**
 * Defines the default XML namespace.
 * This is a replacement function for the standard JavaScript statement set default xml namespace.
 * @param namespace The namespace to use. Omit this parameter to return to the empty namespace. This is either a Namespace object or a string.
 */
declare function setDefaultXMLNamespace(namespace: Namespace): void

/**
 * Translates URL-encoded string into a regular string, and returns that string.
 * Use the escape() global function to URL-encode strings.
 * @param stringExpression The URL-encoded string to convert.
 */
declare function unescape(stringExpression: string): string

/**
 * Creates a source code representation of the supplied argument, and returns it as a string.
 * @param what The object to uneval.
 */
declare function uneval(what: any): string


/**
 * An assignment.
 */
declare class Assignment {
	/**
	 * A collection of assigned stories.
	 */
	assignedStories: AssignedStories

	/**
	 * The status of the assignment file.
	 */
	assignmentFileStatus: AssignmentStatus

	/**
	 * The path to the document that the hyperlink destination points to.
	 */
	documentPath: File

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The content to export in the assignment.
	 */
	exportOptions: AssignmentExportOptions

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File

	/**
	 * The color of the assignment's frames.
	 */
	frameColor: [number, number, number] | UIColors | NothingEnum

	/**
	 * The unique ID of the Assignment.
	 */
	id: number

	/**
	 * If true, includes linked files when packaging the assignment.
	 */
	includeLinksWhenPackage: boolean

	/**
	 * The index of the Assignment within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Assignment.
	 */
	name: string

	/**
	 * If true, the assignment package is up to date.
	 */
	packageUpToDate: boolean

	/**
	 * If true, the assignment is packaged.
	 */
	packaged: boolean

	/**
	 * The parent of the Assignment (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The user name to assign to tracked changes and notes.
	 */
	userName: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Cancels the package for an assignment.
	 */
	cancelPackage(): void

	/**
	 * Creates an assignment package.
	 * @param filePath The full path name of the assignment package file.
	 * @param submit If true, submits assigned stories before packaging the assignment.
	 * @param withProperties Initial values for properties of the new Assignment
	 */
	createPackage(filePath: File, submit?: boolean, withProperties?: object): File

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Assignment[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the assignment and its file.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Assignment.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Updates the assignment file.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	update(versionComments: string, forceSave?: boolean): void

}

/**
 * A collection of assignments.
 */
declare class Assignments {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Assignment with the specified index.
	 * @param index The index.
	 */
	[index: number]: Assignment

	/**
	 * Creates a new assignment.
	 * @param filePath The full path name of the new assignment.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 * @param withProperties Initial values for properties of the new Assignment
	 */
	add(filePath: File, versionComments: string, forceSave?: boolean, withProperties?: object): Assignment

	/**
	 * Returns any Assignment in the collection.
	 */
	anyItem(): Assignment

	/**
	 * Displays the number of elements in the Assignment.
	 */
	count(): number

	/**
	 * Returns every Assignment in the collection.
	 */
	everyItem(): Assignment[]

	/**
	 * Returns the first Assignment in the collection.
	 */
	firstItem(): Assignment

	/**
	 * Returns the Assignment with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Assignment

	/**
	 * Returns the Assignment with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Assignment

	/**
	 * Returns the Assignment with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Assignment

	/**
	 * Returns the Assignments within the specified range.
	 * @param from The Assignment, index, or name at the beginning of the range.
	 * @param to The Assignment, index, or name at the end of the range.
	 */
	itemByRange(from: Assignment | number | string, to: Assignment | number | string): Assignment[]

	/**
	 * Returns the last Assignment in the collection.
	 */
	lastItem(): Assignment

	/**
	 * Returns the middle Assignment in the collection.
	 */
	middleItem(): Assignment

	/**
	 * Returns the Assignment whose index follows the specified Assignment in the collection.
	 * @param obj The Assignment whose index comes before the desired Assignment.
	 */
	nextItem(obj: Assignment): Assignment

	/**
	 * Returns the Assignment with the index previous to the specified index.
	 * @param obj The index of the Assignment that follows the desired Assignment.
	 */
	previousItem(obj: Assignment): Assignment

	/**
	 * Generates a string which, if executed, will return the Assignment.
	 */
	toSource(): string

}

/**
 * An assigned story.
 */
declare class AssignedStory {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File

	/**
	 * The unique ID of the AssignedStory.
	 */
	id: number

	/**
	 * The index of the AssignedStory within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the AssignedStory.
	 */
	name: string

	/**
	 * The parent of the AssignedStory (a Assignment).
	 */
	parent: Assignment

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A reference to the assigned story.
	 */
	storyReference: Story | PageItem | Oval | Rectangle | Polygon

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): AssignedStory[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the assigned story to the specified location.
	 * @param to The location of the assigned story relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to?: LocationOptions, reference?: Assignment | AssignedStory): AssignedStory

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the AssignedStory.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of assigned stories.
 */
declare class AssignedStories {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the AssignedStory with the specified index.
	 * @param index The index.
	 */
	[index: number]: AssignedStory

	/**
	 * Returns any AssignedStory in the collection.
	 */
	anyItem(): AssignedStory

	/**
	 * Displays the number of elements in the AssignedStory.
	 */
	count(): number

	/**
	 * Returns every AssignedStory in the collection.
	 */
	everyItem(): AssignedStory[]

	/**
	 * Returns the first AssignedStory in the collection.
	 */
	firstItem(): AssignedStory

	/**
	 * Returns the AssignedStory with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AssignedStory

	/**
	 * Returns the AssignedStory with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): AssignedStory

	/**
	 * Returns the AssignedStory with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): AssignedStory

	/**
	 * Returns the AssignedStories within the specified range.
	 * @param from The AssignedStory, index, or name at the beginning of the range.
	 * @param to The AssignedStory, index, or name at the end of the range.
	 */
	itemByRange(from: AssignedStory | number | string, to: AssignedStory | number | string): AssignedStory[]

	/**
	 * Returns the last AssignedStory in the collection.
	 */
	lastItem(): AssignedStory

	/**
	 * Returns the middle AssignedStory in the collection.
	 */
	middleItem(): AssignedStory

	/**
	 * Returns the AssignedStory whose index follows the specified AssignedStory in the collection.
	 * @param obj The AssignedStory whose index comes before the desired AssignedStory.
	 */
	nextItem(obj: AssignedStory): AssignedStory

	/**
	 * Returns the AssignedStory with the index previous to the specified index.
	 * @param obj The index of the AssignedStory that follows the desired AssignedStory.
	 */
	previousItem(obj: AssignedStory): AssignedStory

	/**
	 * Generates a string which, if executed, will return the AssignedStory.
	 */
	toSource(): string

}

/**
 * A print event
 */
declare class PrintEvent extends Event {
	/**
	 * Dispatched after a PrintEvent is printed. This event bubbles. This event is not cancelable.
	 */
	AFTER_PRINT: string

	/**
	 * Dispatched before a PrintEvent is printed. This event bubbles. This event is cancelable.
	 */
	BEFORE_PRINT: string

	/**
	 * UI options for print document
	 */
	documentPrintUiOption: DocumentPrintUiOptions[]

}

/**
 * Represents the place gun.
 */
declare class PlaceGun extends Preference {
	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * Imported InDesign pages.
	 */
	importedPages: ImportedPages

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * Whether the place gun is currently loaded with content for placing.
	 */
	loaded: boolean

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * A collection of IDML snippets.
	 */
	snippets: Snippets

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Delete the contents of the place gun.
	 */
	abortPlaceGun(): void

	/**
	 * Load the place gun with one or more files.
	 * @param fileName One or more files to place.
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	loadPlaceGun(fileName: File | File[], showingOptions?: boolean, withProperties?: object): void

	/**
	 * Rotate the contents of the place gun.
	 * @param direction Which direction to rotate the contents
	 */
	rotate(direction?: RotationDirection): void

}

/**
 * An event listener.
 */
declare class EventListener {
	/**
	 * The name of the event.
	 */
	eventType: string

	/**
	 * The handler to invoke when the event occurs.
	 */
	handler: File | Function

	/**
	 * The unique ID of the EventListener.
	 */
	id: number

	/**
	 * The index of the EventListener within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the EventListener; this is an alias to the EventListener's label property.
	 */
	name: string

	/**
	 * The parent of the EventListener (a Object, UIDBasedObject, CellStyleGroup, CellStyle, TableStyleGroup, Article, ConditionSet, HiddenText, Condition, MotionPreset, AssignedStory, Assignment, ObjectStyleGroup, ObjectStyle, NumberingList, Snippet, Dialog, ColorGroup, Swatch, Color, Tint, Gradient, MixedInkGroup, MixedInk, Behavior, SubmitFormBehavior, PrintFormBehavior, ClearFormBehavior, GotoPageBehavior, GotoAnchorBehavior, SoundBehavior, ViewZoomBehavior, GotoStateBehavior, GotoPreviousStateBehavior, GotoNextStateBehavior, OpenFileBehavior, AnimationBehavior, ShowHideFieldsBehavior, MovieBehavior, GotoURLBehavior, GotoPreviousViewBehavior, GotoNextViewBehavior, GotoPreviousPageBehavior, GotoNextPageBehavior, GotoLastPageBehavior, GotoFirstPageBehavior, PreflightProfileRule, PreflightRuleInstance, PreflightProfile, CrossReferenceFormat, HyperlinkURLDestination, HyperlinkExternalPageDestination, HyperlinkPageDestination, HyperlinkTextDestination, ParagraphDestination, HyperlinkTextSource, CrossReferenceSource, HyperlinkPageItemSource, Bookmark, Hyperlink, IndexSection, PageReference, CrossReference, Index, TOCStyle, FlattenerPreset, BookContent, MenuAction, ScriptMenuAction, NamedGrid, CompositeFontEntry, CompositeFont, CharacterStyleGroup, ParagraphStyleGroup, TextVariableInstance, Footnote, XMLRuleProcessor, XMLTag, Note, TableStyle, TextPath, Asset, Link, Section, MojikumiTable, KinsokuTable, Guide, LanguageWithVendors, Language, PageItem, HtmlItem, FormField, SignatureField, TextBox, RadioButton, ListBox, ComboBox, CheckBox, MultiStateObject, Button, MediaItem, Sound, Movie, EPSText, SplineItem, Polygon, GraphicLine, Rectangle, Oval, Graphic, ImportedPage, PICT, WMF, PDF, EPS, Image, Group, TextFrame, EndnoteTextFrame, EndnoteRange, Endnote, Reply, PDFComment, MasterSpread, TrapPreset, Ink, DocumentPreset, Page, Spread, Layer, CharacterStyle, ParagraphStyle, Story, XmlStory, IDBasedObject, ArticleChild, ArticleMember, DialogRow, DialogColumn, Widget, BorderPanel, MeasurementEditbox, MeasurementCombobox, RealCombobox, AngleEditbox, PercentEditbox, RealEditbox, PercentCombobox, AngleCombobox, EnablingGroup, IntegerCombobox, IntegerEditbox, RadiobuttonControl, RadiobuttonGroup, CheckboxControl, Dropdown, StaticText, TextEditbox, ColorGroupSwatch, BackgroundTask, State, RuleDataObject, XMLItem, DTD, XMLInstruction, XMLComment, XMLElement, Table, Cell, IdleTask, StrokeStyle, StripedStrokeStyle, DottedStrokeStyle, DashedStrokeStyle, GraphicLayer, NonIDBasedObject, TableStyleMapping, CharStyleMapping, CellStyleMapping, ParaStyleMapping, TimingTarget, TimingGroup, TimingList, OpacityGradientStop, ObjectStyleExportTagMap, DataMergeQrcodePlaceholder, DataMergeField, DataMergeImagePlaceholder, DataMergeTextPlaceholder, Panel, LibraryPanel, PagesPanel, Window, StoryWindow, LayoutWindow, NavigationPoint, PreflightProcess, PreflightRule, BuildingBlock, DisplaySetting, IndexingSortOption, Topic, TOCStyleEntry, MenuElement, MenuSeparator, MenuItem, Submenu, Menu, StyleExportTagMap, TextVariable, XMLRuleMatchData, ValidationError, XMLExportMap, XMLImportMap, XMLAttribute, PrinterPreset, Row, Column, Change, HttpLinkConnectionManagerObject, RootObject, Document, Application, Book, Library, Preference, ContentPlacerObject, LinkedPageItemOption, LinkedStoryOption, PublishExportPreference, HTMLFXLExportPreference, EPubExportPreviewAppPreference, EPubFixedLayoutExportPreference, HTMLExportPreference, EPubExportPreference, ConditionalTextPreference, TimingSetting, AnimationSetting, XFLExportPreference, SWFExportPreference, TransformAttributeOption, AlignDistributePreference, TypeContextualUiPreference, GrabberPreference, ObjectStyleContentEffectsCategorySettings, ObjectStyleFillEffectsCategorySettings, ObjectStyleStrokeEffectsCategorySettings, ObjectStyleObjectEffectsCategorySettings, ChapterNumberPreference, NumberingRestartPolicy, Bullet, DataMerge, DataMergeOption, DataMergePreference, JPEGExportPreference, TrackChangesPreference, NotePreference, TransformPreference, ClipboardPreference, GeneralPreference, WatermarkPreference, ButtonPreference, PNGExportPreference, PreflightBookOption, PreflightOption, XMLViewPreference, GpuPerformancePreference, DisplayPerformancePreference, IndexOptions, LinkMetadata, MetadataPreference, ExcelImportPreference, TaggedTextImportPreference, TaggedTextExportPreference, WordRTFImportPreference, TextExportPreference, TextImportPreference, FindChangeContentTransparencySetting, FindChangeFillTransparencySetting, FindChangeStrokeTransparencySetting, FindChangeTransparencySetting, GradientFeatherSetting, FindChangeGradientFeatherSetting, DirectionalFeatherSetting, FindChangeDirectionalFeatherSetting, ContentTransparencySetting, SatinSetting, FindChangeSatinSetting, BevelAndEmbossSetting, FindChangeBevelAndEmbossSetting, InnerGlowSetting, FindChangeInnerGlowSetting, OuterGlowSetting, FindChangeOuterGlowSetting, InnerShadowSetting, FindChangeInnerShadowSetting, FeatherSetting, FindChangeFeatherSetting, DropShadowSetting, FindChangeDropShadowSetting, BlendingSetting, FindChangeBlendingSetting, FillTransparencySetting, StrokeTransparencySetting, TransparencySetting, TransparencyPreference, FlattenerPreference, GalleyPreference, GridPrintingPreference, CjkGridPreference, StoryGridDataInformation, LayoutGridDataInformation, GridDataInformation, CaptionMetadataVariablePreference, CustomTextVariablePreference, MatchParagraphStylePreference, MatchCharacterStylePreference, FileNameVariablePreference, DateVariablePreference, ChapterNumberVariablePreference, PageNumberVariablePreference, FootnoteOption, BaselineFrameGridOption, AnchoredObjectSetting, AnchoredObjectDefault, ExportForWebPreference, XMLPreference, XMLExportPreference, XMLImportPreference, InCopyExportOption, LinkingPreference, ChangeTransliteratePreference, ChangeObjectPreference, ChangeGlyphPreference, ChangeGrepPreference, ChangeTextPreference, FindTransliteratePreference, FindObjectPreference, FindGlyphPreference, FindGrepPreference, FindTextPreference, FindChangeTransliterateOption, FindChangeObjectOption, FindChangeGlyphOption, FindChangeGrepOption, FindChangeTextOption, ColorSetting, ScriptArg, ScriptPreference, PlaceGun, AdjustLayoutPreference, StrokeFillProxySetting, ImportedPageAttribute, EPSImportPreference, SmartGuidePreference, AutoCorrectPreference, SpellPreference, PolygonPreference, DictionaryPreference, FontLockingPreference, MojikumiUiPreference, ContourOption, TextWrapPreference, TextEditingPreference, FrameFittingOption, ObjectExportOption, PageItemDefault, EndnoteOption, TaggedPDFPreference, InteractivePDFExportPreference, PDFAttribute, PDFPlacePreference, PDFExportPreference, IMEPreference, GraphicLayerOption, ClippingPathSettings, ImageIOPreference, ImagePreference, ToolBox, EPSExportPreference, PrintBookletPrintPreference, PrintBookletOption, PrintPreference, ViewPreference, PasteboardPreference, MarginPreference, GuidePreference, GridPreference, DocumentPreference, TextDefault, TextPreference, TextFramePreference, StoryPreference, PathPoint, Path, GradientStop, AutoCorrectTable, UserDictionary, HyphenationException, Font, TransformationMatrix, PDFExportPreset, NestedStyle, TabStop, Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, NestedGrepStyle or NestedLineStyle).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): EventListener[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the EventListener.
	 */
	remove(): void

	/**
	 * Generates a string which, if executed, will return the EventListener.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of event listeners.
 */
declare class EventListeners {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the EventListener with the specified index.
	 * @param index The index.
	 */
	[index: number]: EventListener

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 * @param withProperties Initial values for properties of the new EventListener
	 */
	add(eventType: string, handler: File | Function, captures?: boolean, withProperties?: object): EventListener

	/**
	 * Returns any EventListener in the collection.
	 */
	anyItem(): EventListener

	/**
	 * Displays the number of elements in the EventListener.
	 */
	count(): number

	/**
	 * Returns every EventListener in the collection.
	 */
	everyItem(): EventListener[]

	/**
	 * Returns the first EventListener in the collection.
	 */
	firstItem(): EventListener

	/**
	 * Returns the EventListener with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EventListener

	/**
	 * Returns the EventListener with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EventListener

	/**
	 * Returns the EventListener with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EventListener

	/**
	 * Returns the EventListeners within the specified range.
	 * @param from The EventListener, index, or name at the beginning of the range.
	 * @param to The EventListener, index, or name at the end of the range.
	 */
	itemByRange(from: EventListener | number | string, to: EventListener | number | string): EventListener[]

	/**
	 * Returns the last EventListener in the collection.
	 */
	lastItem(): EventListener

	/**
	 * Returns the middle EventListener in the collection.
	 */
	middleItem(): EventListener

	/**
	 * Returns the EventListener whose index follows the specified EventListener in the collection.
	 * @param obj The EventListener whose index comes before the desired EventListener.
	 */
	nextItem(obj: EventListener): EventListener

	/**
	 * Returns the EventListener with the index previous to the specified index.
	 * @param obj The index of the EventListener that follows the desired EventListener.
	 */
	previousItem(obj: EventListener): EventListener

	/**
	 * Generates a string which, if executed, will return the EventListener.
	 */
	toSource(): string

}

/**
 * An event.
 */
declare class Event {
	/**
	 * Dispatched after the Event becomes active. This event bubbles. This event is not cancelable.
	 */
	AFTER_ACTIVATE: string

	/**
	 * Dispatched when a Event is closing. Since the close has been committed, it can no longer be canceled. This event bubbles. This event is not cancelable.
	 */
	AFTER_CLOSE: string

	/**
	 * Dispatched after the active context changes. This event bubbles. This event is not cancelable.
	 */
	AFTER_CONTEXT_CHANGED: string

	/**
	 * Dispatched after a Event is deleted. This event bubbles. This event is not cancelable.
	 */
	AFTER_DELETE: string

	/**
	 * Dispatched after a Event is embedded. This event bubbles. This event is not cancelable.
	 */
	AFTER_EMBED: string

	/**
	 * Dispatched after the Event is invoked. This event does not bubble. This event is not cancelable.
	 */
	AFTER_INVOKE: string

	/**
	 * Dispatched after one or more links in the Event have been added, deleted, or modified. This event bubbles. This event is not cancelable.
	 */
	AFTER_LINKS_CHANGED: string

	/**
	 * Dispatched after a Event is relocated from one object to another. This event bubbles. This event is not cancelable.
	 */
	AFTER_MOVE: string

	/**
	 * Dispatched after a Event is created. This event bubbles. This event is not cancelable.
	 */
	AFTER_NEW: string

	/**
	 * Dispatched after a Event is opened. This event bubbles. This event is not cancelable.
	 */
	AFTER_OPEN: string

	/**
	 * Dispatched after a Event is placed. This event bubbles. This event is not cancelable.
	 */
	AFTER_PLACE: string

	/**
	 * Dispatched when the Event is quitting. Since the quit has been committed, it can not be canceled. This event bubbles. This event is not cancelable.
	 */
	AFTER_QUIT: string

	/**
	 * Dispatched after an attribute on the active selection changes. This event bubbles. This event is not cancelable.
	 */
	AFTER_SELECTION_ATTRIBUTE_CHANGED: string

	/**
	 * Dispatched after the active selection changes. This event bubbles. This event is not cancelable.
	 */
	AFTER_SELECTION_CHANGED: string

	/**
	 * Dispatched after a Event is unembedded. This event bubbles. This event is not cancelable.
	 */
	AFTER_UNEMBED: string

	/**
	 * Dispatched after a Event is updated. This event bubbles. This event is not cancelable.
	 */
	AFTER_UPDATE: string

	/**
	 * Dispatched before a Event is closed. This event bubbles. This event is cancelable.
	 */
	BEFORE_CLOSE: string

	/**
	 * Dispatched before the Event becomes inactive. This event bubbles. This event is not cancelable.
	 */
	BEFORE_DEACTIVATE: string

	/**
	 * Dispatched before a Event is deleted. This event bubbles. This event is cancelable.
	 */
	BEFORE_DELETE: string

	/**
	 * Dispatched before the Event is displayed. This event does not bubble. This event is not cancelable.
	 */
	BEFORE_DISPLAY: string

	/**
	 * Dispatched before a Event is embedded. This event bubbles. This event is cancelable.
	 */
	BEFORE_EMBED: string

	/**
	 * Dispatched before the Event is invoked. This event does not bubble. This event is cancelable.
	 */
	BEFORE_INVOKE: string

	/**
	 * Dispatched before a Event is relocated from one object to another. This event bubbles. This event is cancelable.
	 */
	BEFORE_MOVE: string

	/**
	 * Dispatched before a Event is placed. This event bubbles. This event is cancelable.
	 */
	BEFORE_PLACE: string

	/**
	 * Dispatched before the Event is quit. Allows the quit to be canceled. This event bubbles. This event is cancelable.
	 */
	BEFORE_QUIT: string

	/**
	 * Dispatched before a Event is unembedded. This event bubbles. This event is cancelable.
	 */
	BEFORE_UNEMBED: string

	/**
	 * Dispatched before a Event is updated. This event bubbles. This event is cancelable.
	 */
	BEFORE_UPDATE: string

	/**
	 * Dispatched when the Event is invoked. This event does not bubble. This event is not cancelable.
	 */
	ON_INVOKE: string

	/**
	 * If true, the event supports the bubbling phase of propagation.
	 */
	bubbles: boolean

	/**
	 * If true, the default behavior of the event on its target can be canceled.
	 */
	cancelable: boolean

	/**
	 * The current propagation target of the event.
	 */
	currentTarget: object

	/**
	 * If true, the default behavior of the event on its target has been canceled.
	 */
	defaultPrevented: boolean

	/**
	 * The current propagation phase of the event.
	 */
	eventPhase: EventPhases

	/**
	 * The name of the event.
	 */
	eventType: string

	/**
	 * The unique ID of the Event.
	 */
	id: number

	/**
	 * The index of the Event within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the Event (a Object, UIDBasedObject, CellStyleGroup, CellStyle, TableStyleGroup, Article, ConditionSet, HiddenText, Condition, MotionPreset, AssignedStory, Assignment, ObjectStyleGroup, ObjectStyle, NumberingList, Snippet, Dialog, ColorGroup, Swatch, Color, Tint, Gradient, MixedInkGroup, MixedInk, Behavior, SubmitFormBehavior, PrintFormBehavior, ClearFormBehavior, GotoPageBehavior, GotoAnchorBehavior, SoundBehavior, ViewZoomBehavior, GotoStateBehavior, GotoPreviousStateBehavior, GotoNextStateBehavior, OpenFileBehavior, AnimationBehavior, ShowHideFieldsBehavior, MovieBehavior, GotoURLBehavior, GotoPreviousViewBehavior, GotoNextViewBehavior, GotoPreviousPageBehavior, GotoNextPageBehavior, GotoLastPageBehavior, GotoFirstPageBehavior, PreflightProfileRule, PreflightRuleInstance, PreflightProfile, CrossReferenceFormat, HyperlinkURLDestination, HyperlinkExternalPageDestination, HyperlinkPageDestination, HyperlinkTextDestination, ParagraphDestination, HyperlinkTextSource, CrossReferenceSource, HyperlinkPageItemSource, Bookmark, Hyperlink, IndexSection, PageReference, CrossReference, Index, TOCStyle, FlattenerPreset, BookContent, MenuAction, ScriptMenuAction, NamedGrid, CompositeFontEntry, CompositeFont, CharacterStyleGroup, ParagraphStyleGroup, TextVariableInstance, Footnote, XMLRuleProcessor, XMLTag, Note, TableStyle, TextPath, Asset, Link, Section, MojikumiTable, KinsokuTable, Guide, LanguageWithVendors, Language, PageItem, HtmlItem, FormField, SignatureField, TextBox, RadioButton, ListBox, ComboBox, CheckBox, MultiStateObject, Button, MediaItem, Sound, Movie, EPSText, SplineItem, Polygon, GraphicLine, Rectangle, Oval, Graphic, ImportedPage, PICT, WMF, PDF, EPS, Image, Group, TextFrame, EndnoteTextFrame, EndnoteRange, Endnote, Reply, PDFComment, MasterSpread, TrapPreset, Ink, DocumentPreset, Page, Spread, Layer, CharacterStyle, ParagraphStyle, Story, XmlStory, IDBasedObject, ArticleChild, ArticleMember, DialogRow, DialogColumn, Widget, BorderPanel, MeasurementEditbox, MeasurementCombobox, RealCombobox, AngleEditbox, PercentEditbox, RealEditbox, PercentCombobox, AngleCombobox, EnablingGroup, IntegerCombobox, IntegerEditbox, RadiobuttonControl, RadiobuttonGroup, CheckboxControl, Dropdown, StaticText, TextEditbox, ColorGroupSwatch, BackgroundTask, State, RuleDataObject, XMLItem, DTD, XMLInstruction, XMLComment, XMLElement, Table, Cell, IdleTask, StrokeStyle, StripedStrokeStyle, DottedStrokeStyle, DashedStrokeStyle, GraphicLayer, NonIDBasedObject, TableStyleMapping, CharStyleMapping, CellStyleMapping, ParaStyleMapping, TimingTarget, TimingGroup, TimingList, OpacityGradientStop, ObjectStyleExportTagMap, DataMergeQrcodePlaceholder, DataMergeField, DataMergeImagePlaceholder, DataMergeTextPlaceholder, Panel, LibraryPanel, PagesPanel, Window, StoryWindow, LayoutWindow, NavigationPoint, PreflightProcess, PreflightRule, BuildingBlock, DisplaySetting, IndexingSortOption, Topic, TOCStyleEntry, MenuElement, MenuSeparator, MenuItem, Submenu, Menu, StyleExportTagMap, TextVariable, XMLRuleMatchData, ValidationError, XMLExportMap, XMLImportMap, XMLAttribute, PrinterPreset, Row, Column, Change, HttpLinkConnectionManagerObject, RootObject, Document, Application, Book, Library, Preference, ContentPlacerObject, LinkedPageItemOption, LinkedStoryOption, PublishExportPreference, HTMLFXLExportPreference, EPubExportPreviewAppPreference, EPubFixedLayoutExportPreference, HTMLExportPreference, EPubExportPreference, ConditionalTextPreference, TimingSetting, AnimationSetting, XFLExportPreference, SWFExportPreference, TransformAttributeOption, AlignDistributePreference, TypeContextualUiPreference, GrabberPreference, ObjectStyleContentEffectsCategorySettings, ObjectStyleFillEffectsCategorySettings, ObjectStyleStrokeEffectsCategorySettings, ObjectStyleObjectEffectsCategorySettings, ChapterNumberPreference, NumberingRestartPolicy, Bullet, DataMerge, DataMergeOption, DataMergePreference, JPEGExportPreference, TrackChangesPreference, NotePreference, TransformPreference, ClipboardPreference, GeneralPreference, WatermarkPreference, ButtonPreference, PNGExportPreference, PreflightBookOption, PreflightOption, XMLViewPreference, GpuPerformancePreference, DisplayPerformancePreference, IndexOptions, LinkMetadata, MetadataPreference, ExcelImportPreference, TaggedTextImportPreference, TaggedTextExportPreference, WordRTFImportPreference, TextExportPreference, TextImportPreference, FindChangeContentTransparencySetting, FindChangeFillTransparencySetting, FindChangeStrokeTransparencySetting, FindChangeTransparencySetting, GradientFeatherSetting, FindChangeGradientFeatherSetting, DirectionalFeatherSetting, FindChangeDirectionalFeatherSetting, ContentTransparencySetting, SatinSetting, FindChangeSatinSetting, BevelAndEmbossSetting, FindChangeBevelAndEmbossSetting, InnerGlowSetting, FindChangeInnerGlowSetting, OuterGlowSetting, FindChangeOuterGlowSetting, InnerShadowSetting, FindChangeInnerShadowSetting, FeatherSetting, FindChangeFeatherSetting, DropShadowSetting, FindChangeDropShadowSetting, BlendingSetting, FindChangeBlendingSetting, FillTransparencySetting, StrokeTransparencySetting, TransparencySetting, TransparencyPreference, FlattenerPreference, GalleyPreference, GridPrintingPreference, CjkGridPreference, StoryGridDataInformation, LayoutGridDataInformation, GridDataInformation, CaptionMetadataVariablePreference, CustomTextVariablePreference, MatchParagraphStylePreference, MatchCharacterStylePreference, FileNameVariablePreference, DateVariablePreference, ChapterNumberVariablePreference, PageNumberVariablePreference, FootnoteOption, BaselineFrameGridOption, AnchoredObjectSetting, AnchoredObjectDefault, ExportForWebPreference, XMLPreference, XMLExportPreference, XMLImportPreference, InCopyExportOption, LinkingPreference, ChangeTransliteratePreference, ChangeObjectPreference, ChangeGlyphPreference, ChangeGrepPreference, ChangeTextPreference, FindTransliteratePreference, FindObjectPreference, FindGlyphPreference, FindGrepPreference, FindTextPreference, FindChangeTransliterateOption, FindChangeObjectOption, FindChangeGlyphOption, FindChangeGrepOption, FindChangeTextOption, ColorSetting, ScriptArg, ScriptPreference, PlaceGun, AdjustLayoutPreference, StrokeFillProxySetting, ImportedPageAttribute, EPSImportPreference, SmartGuidePreference, AutoCorrectPreference, SpellPreference, PolygonPreference, DictionaryPreference, FontLockingPreference, MojikumiUiPreference, ContourOption, TextWrapPreference, TextEditingPreference, FrameFittingOption, ObjectExportOption, PageItemDefault, EndnoteOption, TaggedPDFPreference, InteractivePDFExportPreference, PDFAttribute, PDFPlacePreference, PDFExportPreference, IMEPreference, GraphicLayerOption, ClippingPathSettings, ImageIOPreference, ImagePreference, ToolBox, EPSExportPreference, PrintBookletPrintPreference, PrintBookletOption, PrintPreference, ViewPreference, PasteboardPreference, MarginPreference, GuidePreference, GridPreference, DocumentPreference, TextDefault, TextPreference, TextFramePreference, StoryPreference, PathPoint, Path, GradientStop, AutoCorrectTable, UserDictionary, HyphenationException, Font, TransformationMatrix, PDFExportPreset, NestedStyle, TabStop, Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, NestedGrepStyle or NestedLineStyle).
	 */
	parent: any

	/**
	 * If true, propagation of the event beyond the current target has been stopped.
	 */
	propagationStopped: boolean

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The target of the event.
	 */
	target: object

	/**
	 * The time the event was initialized.
	 */
	timeStamp: Date

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Event[]

	/**
	 * Cancels the default behavior of the event on its target.
	 */
	preventDefault(): void

	/**
	 * Stops propagation of the event beyond the current target.
	 */
	stopPropagation(): void

	/**
	 * Generates a string which, if executed, will return the Event.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of events.
 */
declare class Events {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Event with the specified index.
	 * @param index The index.
	 */
	[index: number]: Event

	/**
	 * Returns any Event in the collection.
	 */
	anyItem(): Event

	/**
	 * Displays the number of elements in the Event.
	 */
	count(): number

	/**
	 * Returns every Event in the collection.
	 */
	everyItem(): Event[]

	/**
	 * Returns the first Event in the collection.
	 */
	firstItem(): Event

	/**
	 * Returns the Event with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Event

	/**
	 * Returns the Event with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Event

	/**
	 * Returns the Events within the specified range.
	 * @param from The Event, index, or name at the beginning of the range.
	 * @param to The Event, index, or name at the end of the range.
	 */
	itemByRange(from: Event | number | string, to: Event | number | string): Event[]

	/**
	 * Returns the last Event in the collection.
	 */
	lastItem(): Event

	/**
	 * Returns the middle Event in the collection.
	 */
	middleItem(): Event

	/**
	 * Returns the Event whose index follows the specified Event in the collection.
	 * @param obj The Event whose index comes before the desired Event.
	 */
	nextItem(obj: Event): Event

	/**
	 * Returns the Event with the index previous to the specified index.
	 * @param obj The index of the Event that follows the desired Event.
	 */
	previousItem(obj: Event): Event

	/**
	 * Generates a string which, if executed, will return the Event.
	 */
	toSource(): string

}

/**
 * An idle event.
 */
declare class IdleEvent extends Event {
	/**
	 * Dispatched at idle time for this IdleEvent. This event does not bubble. This event is not cancelable.
	 */
	ON_IDLE: string

	/**
	 * Amount of time allocated to this task at the time the event was dispatched.
	 */
	timeAllocated: number

}

/**
 * A mutation event is dispatched for attribute changes.
 */
declare class MutationEvent extends Event {
	/**
	 * Dispatched when the value of a property changes on this MutationEvent. This event bubbles. This event is not cancelable.
	 */
	AFTER_ATTRIBUTE_CHANGED: string

	/**
	 * The name of the property that changed.
	 */
	attributeName: string

	/**
	 * The current value of the property that changed.
	 */
	attributeValue: any

}

/**
 * An attachable idle task.
 */
declare class IdleTask {
	/**
	 * Dispatched at idle time for this IdleTask. This event does not bubble. This event is not cancelable.
	 */
	ON_IDLE: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the IdleTask.
	 */
	id: number

	/**
	 * The index of the IdleTask within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the IdleTask.
	 */
	name: string

	/**
	 * The parent of the IdleTask (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Amount of time to sleep (in milliseconds) before calling this task again. Setting this to zero will cause task to be deleted.
	 */
	sleep: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): IdleTask[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the IdleTask.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the IdleTask.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * All attachable idle tasks.
 */
declare class IdleTasks {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the IdleTask with the specified index.
	 * @param index The index.
	 */
	[index: number]: IdleTask

	/**
	 * Creates a new IdleTask.
	 * @param withProperties Initial values for properties of the new IdleTask
	 */
	add(withProperties: object): IdleTask

	/**
	 * Returns any IdleTask in the collection.
	 */
	anyItem(): IdleTask

	/**
	 * Displays the number of elements in the IdleTask.
	 */
	count(): number

	/**
	 * Returns every IdleTask in the collection.
	 */
	everyItem(): IdleTask[]

	/**
	 * Returns the first IdleTask in the collection.
	 */
	firstItem(): IdleTask

	/**
	 * Returns the IdleTask with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IdleTask

	/**
	 * Returns the IdleTask with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): IdleTask

	/**
	 * Returns the IdleTask with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): IdleTask

	/**
	 * Returns the IdleTasks within the specified range.
	 * @param from The IdleTask, index, or name at the beginning of the range.
	 * @param to The IdleTask, index, or name at the end of the range.
	 */
	itemByRange(from: IdleTask | number | string, to: IdleTask | number | string): IdleTask[]

	/**
	 * Returns the last IdleTask in the collection.
	 */
	lastItem(): IdleTask

	/**
	 * Returns the middle IdleTask in the collection.
	 */
	middleItem(): IdleTask

	/**
	 * Returns the IdleTask whose index follows the specified IdleTask in the collection.
	 * @param obj The IdleTask whose index comes before the desired IdleTask.
	 */
	nextItem(obj: IdleTask): IdleTask

	/**
	 * Returns the IdleTask with the index previous to the specified index.
	 * @param obj The index of the IdleTask that follows the desired IdleTask.
	 */
	previousItem(obj: IdleTask): IdleTask

	/**
	 * Generates a string which, if executed, will return the IdleTask.
	 */
	toSource(): string

}

/**
 * Arguments to pass to a script.
 */
declare class ScriptArg extends Preference {
	/**
	 * Clears all script arguments.
	 */
	clear(): void

	/**
	 * Gets the value of a script argument.
	 * @param name The name of the script argument.
	 */
	get(name: string): string

	/**
	 * Gets the value of a script argument.
	 * @param name The name of the script argument.
	 */
	getValue(name: string): string

	/**
	 * Verifies whether the script argument is defined.
	 * @param name The name of the script argument.
	 */
	isDefined(name: string): boolean

	/**
	 * Restores all script arguments.
	 */
	restore(): void

	/**
	 * Saves the script arguments.
	 */
	save(): void

	/**
	 * Sets the value of a script argument.
	 * @param name The name of the script argument.
	 * @param value The value.
	 */
	set(name: string, value: string): void

	/**
	 * Sets the value of a script argument.
	 * @param name The name of the script argument.
	 * @param value The value.
	 */
	setValue(name: string, value: string): void

}

/**
 * The application.
 */
declare class Application {
	/**
	 * Dispatched after the Application becomes active. This event bubbles. This event is not cancelable.
	 */
	AFTER_ACTIVATE: string

	/**
	 * Dispatched after a Document is closed. This event bubbles. This event is not cancelable.
	 */
	AFTER_CLOSE: string

	/**
	 * Dispatched after the active context changes. This event bubbles. This event is not cancelable.
	 */
	AFTER_CONTEXT_CHANGED: string

	/**
	 * Dispatched when the Application is quitting. Since the quit has been committed, it can not be canceled. This event bubbles. This event is not cancelable.
	 */
	AFTER_QUIT: string

	/**
	 * Dispatched after an attribute on the active selection changes. This event bubbles. This event is not cancelable.
	 */
	AFTER_SELECTION_ATTRIBUTE_CHANGED: string

	/**
	 * Dispatched after the active selection changes. This event bubbles. This event is not cancelable.
	 */
	AFTER_SELECTION_CHANGED: string

	/**
	 * Dispatched before the Application becomes inactive. This event bubbles. This event is not cancelable.
	 */
	BEFORE_DEACTIVATE: string

	/**
	 * Dispatched before a Document is created. This event bubbles. This event is cancelable.
	 */
	BEFORE_NEW: string

	/**
	 * Dispatched before a Document is opened. This event bubbles. This event is cancelable.
	 */
	BEFORE_OPEN: string

	/**
	 * Dispatched before the Application is quit. Allows the quit to be canceled. This event bubbles. This event is cancelable.
	 */
	BEFORE_QUIT: string

	/**
	 * The active book.
	 */
	activeBook: Book

	/**
	 * The front-most document.
	 */
	activeDocument: Document

	/**
	 * The current script running from the Scripts panel.
	 */
	activeScript: File

	/**
	 * The undo mode for the current script execution.
	 */
	activeScriptUndoMode: UndoModes

	/**
	 * The front-most window.
	 */
	activeWindow: Window | LayoutWindow | StoryWindow

	/**
	 * Preferences for alignment and distribution.
	 */
	alignDistributePreferences: AlignDistributePreference

	/**
	 * All Cell styles
	 */
	allCellStyles: CellStyle[]

	/**
	 * Lists all character styles (regardless of their group).
	 */
	allCharacterStyles: CharacterStyle[]

	/**
	 * All object styles contained by the Application.
	 */
	allObjectStyles: ObjectStyle[]

	/**
	 * Lists all paragraph styles (regardless of their group).
	 */
	allParagraphStyles: ParagraphStyle[]

	/**
	 * The list of all object types (strings) a preflight rule can operate on.
	 */
	allPreflightObjectTypes: string[]

	/**
	 * The list of all categories that have been declared by rules.
	 */
	allPreflightRuleCategories: string[]

	/**
	 * The list of all known (declared) rule IDs.
	 */
	allPreflightRuleIDs: string[]

	/**
	 * All Table styles
	 */
	allTableStyles: TableStyle[]

	/**
	 * Anchored object default settings.
	 */
	anchoredObjectDefaults: AnchoredObjectDefault

	/**
	 * Anchored object settings.
	 */
	anchoredObjectSettings: AnchoredObjectSetting

	/**
	 * Auto-correct preferences.
	 */
	autoCorrectPreferences: AutoCorrectPreference

	/**
	 * A collection of auto-correct tables.
	 */
	autoCorrectTables: AutoCorrectTables

	/**
	 * A collection of background task objects.
	 */
	backgroundTasks: BackgroundTasks

	/**
	 * Baseline frame grid option settings.
	 */
	baselineFrameGridOptions: BaselineFrameGridOption

	/**
	 * A collection of books.
	 */
	books: Books

	/**
	 * Button preference settings.
	 */
	buttonPreferences: ButtonPreference

	/**
	 * A collection of cell style groups.
	 */
	cellStyleGroups: CellStyleGroups

	/**
	 * A collection of cell style mappings.
	 */
	cellStyleMappings: CellStyleMappings

	/**
	 * A collection of cell styles.
	 */
	cellStyles: CellStyles

	/**
	 * Change glyph preferences.
	 */
	changeGlyphPreferences: ChangeGlyphPreference | NothingEnum

	/**
	 * Change grep preferences.
	 */
	changeGrepPreferences: ChangeGrepPreference | NothingEnum

	/**
	 * Change object preferences.
	 */
	changeObjectPreferences: ChangeObjectPreference | NothingEnum

	/**
	 * Change text preferences.
	 */
	changeTextPreferences: ChangeTextPreference | NothingEnum

	/**
	 * Change transliterate preferences.
	 */
	changeTransliteratePreferences: ChangeTransliteratePreference | NothingEnum

	/**
	 * A collection of char style mappings.
	 */
	charStyleMappings: CharStyleMappings

	/**
	 * A collection of character style groups.
	 */
	characterStyleGroups: CharacterStyleGroups

	/**
	 * A collection of character styles.
	 */
	characterStyles: CharacterStyles

	/**
	 * CJK grid preference settings.
	 */
	cjkGridPreferences: CjkGridPreference

	/**
	 * Clear overrides first before applying object style
	 */
	clearOverridesWhenApplyingStyle: boolean

	/**
	 * Clipboard preference properties that define the way that the application interacts with the system clipboard.
	 */
	clipboardPreferences: ClipboardPreference

	/**
	 * A collection of color groups.
	 */
	colorGroups: ColorGroups

	/**
	 * Color setting properties that define color management defaults.
	 */
	colorSettings: ColorSetting

	/**
	 * A collection of colors.
	 */
	colors: Colors

	/**
	 * A collection of composite fonts.
	 */
	compositeFonts: CompositeFonts

	/**
	 * A collection of condition sets for conditional text.
	 */
	conditionSets: ConditionSets

	/**
	 * Conditional text preferences.
	 */
	conditionalTextPreferences: ConditionalTextPreference

	/**
	 * A collection of conditions for conditional text.
	 */
	conditions: Conditions

	/**
	 * The Content Placer. Used to get a reference to the content placer object.
	 */
	contentPlacer: ContentPlacerObject

	/**
	 * A collection of dashed stroke styles.
	 */
	dashedStrokeStyles: DashedStrokeStyles

	/**
	 * The data merge option properties that define the data merge.
	 */
	dataMergeOptions: DataMergeOption

	/**
	 * A collection of dialogs.
	 */
	dialogs: Dialogs

	/**
	 * User dictionary preference settings.
	 */
	dictionaryPreferences: DictionaryPreference

	/**
	 * Display performance settings.
	 */
	displayPerformancePreferences: DisplayPerformancePreference

	/**
	 * Display setting properties.
	 */
	displaySettings: DisplaySettings

	/**
	 * Document preference settings.
	 */
	documentPreferences: DocumentPreference

	/**
	 * A collection of document presets.
	 */
	documentPresets: DocumentPresets

	/**
	 * A collection of documents.
	 */
	documents: Documents

	/**
	 * A collection of dotted stroke styles.
	 */
	dottedStrokeStyles: DottedStrokeStyles

	/**
	 * Endnote option settings.
	 */
	endnoteOptions: EndnoteOption

	/**
	 * EPS export preferences.
	 */
	epsExportPreferences: EPSExportPreference

	/**
	 * EPS import preferences.
	 */
	epsImportPreferences: EPSImportPreference

	/**
	 * EPub export preview app preference settings.
	 */
	epubViewingAppsPreferences: EPubExportPreviewAppPreference

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * Excel import preferences.
	 */
	excelImportPreferences: ExcelImportPreference

	/**
	 * The default export for web preferences.
	 */
	exportForWebPreferences: ExportForWebPreference

	/**
	 * The feature set.
	 */
	featureSet: FeatureSetOptions

	/**
	 * The full path to the file.
	 */
	filePath: File

	/**
	 * Find/change glyph options.
	 */
	findChangeGlyphOptions: FindChangeGlyphOption | NothingEnum

	/**
	 * Find/change grep options.
	 */
	findChangeGrepOptions: FindChangeGrepOption | NothingEnum

	/**
	 * Find/change object options.
	 */
	findChangeObjectOptions: FindChangeObjectOption | NothingEnum

	/**
	 * Find/change text options.
	 */
	findChangeTextOptions: FindChangeTextOption | NothingEnum

	/**
	 * Find/change transliterate options.
	 */
	findChangeTransliterateOptions: FindChangeTransliterateOption | NothingEnum

	/**
	 * Find glyph preferences.
	 */
	findGlyphPreferences: FindGlyphPreference | NothingEnum

	/**
	 * Find grep preferences.
	 */
	findGrepPreferences: FindGrepPreference | NothingEnum

	/**
	 * Find object preferences.
	 */
	findObjectPreferences: FindObjectPreference | NothingEnum

	/**
	 * Find text preferences.
	 */
	findTextPreferences: FindTextPreference | NothingEnum

	/**
	 * Find transliterate preferences.
	 */
	findTransliteratePreferences: FindTransliteratePreference | NothingEnum

	/**
	 * A collection of transparency flattener presets.
	 */
	flattenerPresets: FlattenerPresets

	/**
	 * Font locking preference settings.
	 */
	fontLockingPreferences: FontLockingPreference

	/**
	 * A collection of fonts.
	 */
	fonts: Fonts

	/**
	 * Footnote option settings.
	 */
	footnoteOptions: FootnoteOption

	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	frameFittingOptions: FrameFittingOption

	/**
	 * The full path to the Application, including the name of the Application.
	 */
	fullName: File

	/**
	 * Galley preference settings.
	 */
	galleyPreferences: GalleyPreference

	/**
	 * General preference settings.
	 */
	generalPreferences: GeneralPreference

	/**
	 * GPU performance preferences.
	 */
	gpuPerformancePreferences: GpuPerformancePreference

	/**
	 * Grabber preference properties that define display performance quality during scrolling.
	 */
	grabberPreferences: GrabberPreference

	/**
	 * A collection of gradients.
	 */
	gradients: Gradients

	/**
	 * Grid preference settings.
	 */
	gridPreferences: GridPreference

	/**
	 * Grid printing preference and export settings.
	 */
	gridPrintingPreferences: GridPrintingPreference

	/**
	 * Guide preference settings.
	 */
	guidePreferences: GuidePreference

	/**
	 * Experimental: Connection manager property
	 */
	httpLinkConnectionManager: HttpLinkConnectionManagerObject

	/**
	 * All attachable idle tasks.
	 */
	idleTasks: IdleTasks

	/**
	 * The image I/O preference properties that define preferences for importing images.
	 */
	imageIOPreferences: ImageIOPreference

	/**
	 * Image preferences.
	 */
	imagePreferences: ImagePreference

	/**
	 * IME preference settings.
	 */
	imePreferences: IMEPreference

	/**
	 * Placed InDesign page attributes.
	 */
	importedPageAttributes: ImportedPageAttribute

	/**
	 * Export options for InCopy INCX document format.
	 */
	incopyExportOptions: InCopyExportOption

	/**
	 * The index options properties that define how an index is formatted.
	 */
	indexGenerationOptions: IndexOptions

	/**
	 * A collection of indexing sort options.
	 */
	indexingSortOptions: IndexingSortOptions

	/**
	 * A collection of inks.
	 */
	inks: Inks

	/**
	 * Interactive PDF export preferences.
	 */
	interactivePDFExportPreferences: InteractivePDFExportPreference

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * JPEG export preferences.
	 */
	jpegExportPreferences: JPEGExportPreference

	/**
	 * A collection of kinsoku tables.
	 */
	kinsokuTables: KinsokuTables

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of languages with vendors.
	 */
	languagesWithVendors: LanguagesWithVendors

	/**
	 * Default properties specific to layout grids.
	 */
	layoutGridData: LayoutGridDataInformation

	/**
	 * A collection of layout windows.
	 */
	layoutWindows: LayoutWindows

	/**
	 * A collection of object libraries.
	 */
	libraries: Libraries

	/**
	 * Linked Page Item options
	 */
	linkedPageItemOptions: LinkedPageItemOption

	/**
	 * Linked story options
	 */
	linkedStoryOptions: LinkedStoryOption

	/**
	 * The links preference properties that define preferences for links.
	 */
	linkingPreferences: LinkingPreference

	/**
	 * Delay before mouse operations trigger live screen drawing of page items.
	 */
	liveScreenDrawing: LiveDrawingOptions

	/**
	 * The locale of the application.
	 */
	locale: Locale

	/**
	 * Margin preference settings.
	 */
	marginPreferences: MarginPreference

	/**
	 * A collection of menu actions.
	 */
	menuActions: MenuActions

	/**
	 * A collection of menus.
	 */
	menus: Menus

	/**
	 * A collection of mixed ink groups.
	 */
	mixedInkGroups: MixedInkGroups

	/**
	 * A collection of mixed inks.
	 */
	mixedInks: MixedInks

	/**
	 * If true, a modal dialog or alert is active.
	 */
	modalState: boolean

	/**
	 * A collection of mojikumi tables.
	 */
	mojikumiTables: MojikumiTables

	/**
	 * Mojikumi user interface preference settings.
	 */
	mojikumiUIPreferences: MojikumiUiPreference

	/**
	 * A collection of Motion presets.
	 */
	motionPresets: MotionPresets

	/**
	 * The name of the Application.
	 */
	name: string

	/**
	 * A collection of named grids.
	 */
	namedGrids: NamedGrids

	/**
	 * Note preference settings.
	 */
	notePreferences: NotePreference

	/**
	 * A collection of numbered lists.
	 */
	numberingLists: NumberingLists

	/**
	 * A collection of object style groups.
	 */
	objectStyleGroups: ObjectStyleGroups

	/**
	 * A collection of object styles.
	 */
	objectStyles: ObjectStyles

	/**
	 * The default page item formatting for the Application.
	 */
	pageItemDefaults: PageItemDefault

	/**
	 * A collection of panels.
	 */
	panels: Panels

	/**
	 * A collection of para style mappings.
	 */
	paraStyleMappings: ParaStyleMappings

	/**
	 * A collection of paragraph style groups.
	 */
	paragraphStyleGroups: ParagraphStyleGroups

	/**
	 * A collection of paragraph styles.
	 */
	paragraphStyles: ParagraphStyles

	/**
	 * The parent of the Application (a Application).
	 */
	parent: Application

	/**
	 * Pasteboard preference settings.
	 */
	pasteboardPreferences: PasteboardPreference

	/**
	 * A collection of PDF export preferences.
	 */
	pdfExportPreferences: PDFExportPreference

	/**
	 * A collection of PDF export presets.
	 */
	pdfExportPresets: PDFExportPresets

	/**
	 * The PDF place preference properties that define how PDF files are placed in the current document.
	 */
	pdfPlacePreferences: PDFPlacePreference

	/**
	 * The available performance metrics.
	 */
	performanceMetrics: number[]

	/**
	 * Lists the extensions of file types that can be placed.
	 */
	placeableFileExtensions: string[]

	/**
	 * Lists the types of files that can be placed.
	 */
	placeableFileTypes: string[]

	/**
	 * PNG export preferences.
	 */
	pngExportPreferences: PNGExportPreference

	/**
	 * Polygon preference properties to use to define default settings for creating a polygon.
	 */
	polygonPreferences: PolygonPreference

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Preflight book option settings.
	 */
	preflightBookOptions: PreflightBookOption

	/**
	 * Preflight option settings.
	 */
	preflightOptions: PreflightOption

	/**
	 * A collection of preflight processes.
	 */
	preflightProcesses: PreflightProcesses

	/**
	 * A collection of preflight profiles.
	 */
	preflightProfiles: PreflightProfiles

	/**
	 * A collection of preflight rules.
	 */
	preflightRules: PreflightRules

	/**
	 * A collection of printer presets.
	 */
	printerPresets: PrinterPresets

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The names of the items in the redo stack.
	 */
	redoHistory: string[]

	/**
	 * The name of the action on the top of the redo stack.
	 */
	redoName: string

	/**
	 * Arguments to pass to a script.
	 */
	scriptArgs: ScriptArg

	/**
	 * A collection of script menu actions.
	 */
	scriptMenuActions: ScriptMenuActions

	/**
	 * Script preferences.
	 */
	scriptPreferences: ScriptPreference

	/**
	 * The selected object(s).
	 */
	selection: object[] | object | NothingEnum

	/**
	 * The key object of the selection.
	 */
	selectionKeyObject: PageItem | NothingEnum

	/**
	 * The user's serial number.
	 */
	serialNumber: string

	/**
	 * Smart Guide preference properties.
	 */
	smartGuidePreferences: SmartGuidePreference

	/**
	 * Spell-check preferences.
	 */
	spellPreferences: SpellPreference

	/**
	 * Default properties specific to frame grids.
	 */
	storyGridData: StoryGridDataInformation

	/**
	 * Story preference settings.
	 */
	storyPreferences: StoryPreference

	/**
	 * A collection of story windows.
	 */
	storyWindows: StoryWindows

	/**
	 * A collection of striped stroke styles.
	 */
	stripedStrokeStyles: StripedStrokeStyles

	/**
	 * Stroke/fill proxy settings.
	 */
	strokeFillProxySettings: StrokeFillProxySetting

	/**
	 * A collection of stroke styles.
	 */
	strokeStyles: StrokeStyles

	/**
	 * A collection of swatches.
	 */
	swatches: Swatches

	/**
	 * SWF export preferences.
	 */
	swfExportPreferences: SWFExportPreference

	/**
	 * A collection of table style groups.
	 */
	tableStyleGroups: TableStyleGroups

	/**
	 * A collection of table style mappings.
	 */
	tableStyleMappings: TableStyleMappings

	/**
	 * A collection of table styles.
	 */
	tableStyles: TableStyles

	/**
	 * Tagged PDF preferences.
	 */
	taggedPDFPreferences: TaggedPDFPreference

	/**
	 * Tagged text export preferences.
	 */
	taggedTextExportPreferences: TaggedTextExportPreference

	/**
	 * Tagged text import preferences.
	 */
	taggedTextImportPreferences: TaggedTextImportPreference

	/**
	 * Text default settings.
	 */
	textDefaults: TextDefault

	/**
	 * Text editing preference settings.
	 */
	textEditingPreferences: TextEditingPreference

	/**
	 * Text export preferences.
	 */
	textExportPreferences: TextExportPreference

	/**
	 * Text frame preference settings.
	 */
	textFramePreferences: TextFramePreference

	/**
	 * Text import preferences.
	 */
	textImportPreferences: TextImportPreference

	/**
	 * Text preference settings.
	 */
	textPreferences: TextPreference

	/**
	 * A collection of text variables.
	 */
	textVariables: TextVariables

	/**
	 * The text wrap preference properties that define the default formatting for wrapping text around objects.
	 */
	textWrapPreferences: TextWrapPreference

	/**
	 * A collection of tints.
	 */
	tints: Tints

	/**
	 * The current tool box states
	 */
	toolBoxTools: ToolBox

	/**
	 * Track changes preference settings.
	 */
	trackChangesPreferences: TrackChangesPreference

	/**
	 * Transform preference properties that define default behaviors when transforming objects. Note: Transforming includes rotation, scaling, flipping, and shearing.
	 */
	transformPreferences: TransformPreference

	/**
	 * A collection of transformation matrices.
	 */
	transformationMatrices: TransformationMatrices

	/**
	 * Transparency preference settings.
	 */
	transparencyPreferences: TransparencyPreference

	/**
	 * A collection of trap presets.
	 */
	trapPresets: TrapPresets

	/**
	 * Preferences for showing contextual ui for alternates.
	 */
	typeContextualUiPrefs: TypeContextualUiPreference

	/**
	 * The names of the items in the undo stack.
	 */
	undoHistory: string[]

	/**
	 * The name of the action on the top of the undo stack.
	 */
	undoName: string

	/**
	 * The swatches that are not being used.
	 */
	unusedSwatches: Swatch[]

	/**
	 * The current user's adobe id
	 */
	userAdobeId: string

	/**
	 * The color assigned to the tracked changes and notes created by the user, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as an InCopy UI color.
	 */
	userColor: [number, number, number] | InCopyUIColors

	/**
	 * A collection of user dictionaries.
	 */
	userDictionaries: UserDictionaries

	/**
	 * The current user's GUID
	 */
	userGuid: string

	/**
	 * The user associated with the tracked changes and notes.
	 */
	userName: string

	/**
	 * The application version.
	 */
	version: string

	/**
	 * View preference settings.
	 */
	viewPreferences: ViewPreference

	/**
	 * If true, the Application is visible.
	 */
	visible: boolean

	/**
	 * Watermark preferences
	 */
	watermarkPreferences: WatermarkPreference

	/**
	 * A collection of windows.
	 */
	windows: Windows

	/**
	 * Word and RTF import preferences.
	 */
	wordRTFImportPreferences: WordRTFImportPreference

	/**
	 * XFL export preferences.
	 */
	xflExportPreferences: XFLExportPreference

	/**
	 * A collection of XML export maps.
	 */
	xmlExportMaps: XMLExportMaps

	/**
	 * XML export preference settings.
	 */
	xmlExportPreferences: XMLExportPreference

	/**
	 * A collection of XML import maps.
	 */
	xmlImportMaps: XMLImportMaps

	/**
	 * XML import preference settings.
	 */
	xmlImportPreferences: XMLImportPreference

	/**
	 * The XML preference settings.
	 */
	xmlPreferences: XMLPreference

	/**
	 * A collection of XML rule processors.
	 */
	xmlRuleProcessors: XMLRuleProcessors

	/**
	 * A collection of XML tags.
	 */
	xmlTags: XMLTags

	/**
	 * XML view preference settings.
	 */
	xmlViewPreferences: XMLViewPreference

	/**
	 * Makes the application the front-most or active window.
	 */
	activate(): void

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Applies the specified menu customization set. An empty string will reset all menus and colorization (Show Full Menus). No string will apply the default menu set.
	 * @param name The menu customization set.
	 */
	applyMenuCustomization(name: string): void

	/**
	 * Applies the specified shortcut set file. No string will apply the default shortcut set.
	 * @param name The shortcut set.
	 */
	applyShortcutSet(name: string): void

	/**
	 * Applies the specified workspace.
	 * @param name The workspace.
	 */
	applyWorkspace(name: string): void

	/**
	 * Cancels all the background tasks.
	 */
	cancelAllTasks(): void

	/**
	 * Cascades all document windows.
	 */
	cascadeWindows(): void

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds objects that match the find what value and replace the objects with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeObject(reverseOrder: boolean): PageItem[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void

	/**
	 * Transforms color values
	 * @param colorValue source color value
	 * @param sourceColorSpace source color space
	 * @param destinationColorSpace destination color space
	 */
	colorTransform(colorValue: number[], sourceColorSpace: ColorSpace, destinationColorSpace: ColorSpace): number[]

	/**
	 * Copies the selection in the active document window to the clipboard.
	 */
	copy(): void

	/**
	 * Create a mini-folio out of asset and overlay descriptions.

Schema for the mini folio description:
|| Key || Type || Required? || Description ||
| contentstackid | string | yes | The explicit ID to be used for this stack |
| tocImage | file | no | The TOC image for the mini-folio |
| narrowdimension | int | no | Targetted export size, measured along narrow dimension |
| widedimension | int | no | Targetted export size, measured along wide dimension |
| smoothscrolling | @enum(SmoothScrollingOptions) | no | The smooth scrolling behavior for this stack (default is noSmoothScroll) |
| locationforgeneratedassets | file | no | If included, this is an existing directory where the generated assets should be created. |
| overlays | array | no | see the SDK Overlay Builder APIs |
| assets | array | yes | The assets for the mini - folio, described below. |
| assetDependencies | array | no | Files that are needed by the asset, that will be included in the package but not the manifest. |
| metadata | array | no | The metadata for the mini-folio described below. |
| showprogressbar | boolean | no | Either true or false to indicate whether we should show a progress bar (default is false) |
| targetviewerversion | string | no | If provided (in the form "major.minor.revision") a folio compatible with the viewer version is produced. If omitted, the latest folio format is produced. | CS5 |

The following are fields in the array for "assets":
|| Key || Type || Required? || Description ||
| file | file | yes | The asset file |
| type | string | yes | The asset file type, either "web" for HTML or "image" for a raster |
| width | int | yes | The asset width |
| height | int | yes | The asset height |
| orientation | string | yes | The asset orientation, either "portrait" or "landscape" |
| thumbnail | file | no | A thumbnail of the asset to be used in browse mode |
| scrubber | file | no | A thumbnail of the asset to be used in scrubber mode |

The following are fields in the array for "assetDependencies":
|| Key || Type || Required? || Description ||
| file | file | no | The dependent file |
| relativePath | string | no | The relative path to the file, for use in the package |

The following are fields in the array for "metadata":
|| Key || Type || Required? || Description ||
| any string | string or boolean | no | any key/value where the key is a string, and the value is either a string or a boolean, such as those described in "export folio meta data" |
	 * @param miniFolioDescription A dictionary describing the custom mini folio to create. Can accept: Ordered array containing key:String, value:Boolean, Long Integer, Long Long Integer, String, File or Array of Any Types.
	 * @param destination The location to write the file.
	 */
	createCustomMiniFolio(miniFolioDescription: any[], destination: File): void

	/**
	 * Creates a temporary copy of the file
	 * @param from The file to be copied
	 */
	createTemporaryCopy(from: File): string

	/**
	 * Cuts the selection in the active document window and stores it in the clipboard.
	 */
	cut(): void

	/**
	 * Deletes the specified find/change query.
	 * @param queryName The query to delete.
	 * @param searchMode The search mode.
	 */
	deleteFindChangeQuery(queryName: string, searchMode: SearchModes): void

	/**
	 * Deletes unused XML markup tags.
	 */
	deleteUnusedTags(): void

	/**
	 * Executes the script in the specified language as a single transaction.
	 * @param script The script to execute.
	 * @param language The language of the script to execute. If not specified, uses the language used to call this method.
	 * @param withArguments An array of arguments passed to the script.
	 * @param undoMode How to undo this script.
	 * @param undoName The name of the undo step for entire script undo mode.
	 */
	doScript(script: File | string | Function, language?: ScriptLanguage, withArguments?: any[], undoMode?: UndoModes, undoName?: string): any

	/**
	 * Dumps memory allocations from all marks in the specified range.
	 * @param from The first mark in the range.
	 * @param to The last mark in the range.
	 */
	dumpBetweenMemoryMarks(from: number[], to: number[]): void

	/**
	 * Dumps memory allocations from the specified mark.
	 * @param from The mark from which to dump memory.
	 */
	dumpFromMemoryMark(from: number[]): void

	/**
	 * Export the specified documents to an article folio.

Note: This method behaves identically to @method(exportMiniFolio), but differs in its return value. @method(exportMiniFolio) returns an array of warning strings whereas this method returns an XML structure.
	 * @param destination The location to write the file.
	 * @param portraitDocument The InDesign document for the stack's portrait orientation.
	 * @param landscapeDocument The InDesign document for the stack's landscape orientation.
	 * @param folioMetadata Optional meta data for the mini folio. Can accept: Ordered array containing key:String, value:String.
	 * @param miniFolioParams Options for exporting a mini folio. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportArticleFolio(destination: File, portraitDocument: Document, landscapeDocument: Document, folioMetadata: any[], miniFolioParams: any[]): string

	/**
	 * Export the specified document to a DPS article.
Note: This method behaves similarly to @method(exportMiniFolio), but differs in its parameters.
	 * @param destination The location to write the file.
	 * @param document The source InDesign document.
	 * @param dpsArticleParams Options for exporting a DPS article. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportDpsArticle(destination: File, document: Document, dpsArticleParams: any[]): string[]

	/**
	 * Export the selected documents to a directory.
	 * @param destination The directory to write the folio.
	 * @param miniFolioList The mini folio(es) to add to the folio.
	 * @param folioMetadata Meta data for the folio. Can accept: Ordered array containing key:String, value:String.
	 * @param exportFolioParams Additional options for export folios. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportFolioToDirectory(destination: File, miniFolioList: File | File[], folioMetadata: any[], exportFolioParams: any[]): void

	/**
	 * Export the selected documents to a compressed folio file that contains non-compressed mini folios.
	 * @param destination The location to write the package.
	 * @param miniFolioList The mini folio(es) to add to the folio.
	 * @param folioMetadata Meta data for the folio. Can accept: Ordered array containing key:String, value:String.
	 * @param exportFolioParams Additional options for export folios. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportFolioToDirectoryPackage(destination: File, miniFolioList: File | File[], folioMetadata: any[], exportFolioParams: any[]): void

	/**
	 * Export the selected documents to a compressed folio file that contains compressed mini folios.
	 * @param destination The location to write the package.
	 * @param miniFolioList The mini folio(es) to add to the folio.
	 * @param folioMetadata Meta data for the folio. Can accept: Ordered array containing key:String, value:String.
	 * @param exportFolioParams Additional options for export folios. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportFolioToPackage(destination: File, miniFolioList: File | File[], folioMetadata: any[], exportFolioParams: any[]): void

	/**
	 * Export the specified documents to a mini-folio.
	 * @param destination The location to write the file.
	 * @param portraitDocument The InDesign document for the stack's portrait orientation.
	 * @param landscapeDocument The InDesign document for the stack's landscape orientation.
	 * @param folioMetadata Optional meta data for the mini folio. Can accept: Ordered array containing key:String, value:String.
	 * @param miniFolioParams Options for exporting a mini folio. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	exportMiniFolio(destination: File, portraitDocument: Document, landscapeDocument: Document, folioMetadata: any[], miniFolioParams: any[]): string[]

	/**
	 * Export the presets to a file.
	 * @param format The preset format.
	 * @param to The file to export to.
	 * @param versionComments The comments for this version.
	 * @param forceSave Forcibly save a version.
	 */
	exportPresets(format: ExportPresetFormat, to: File, versionComments: string, forceSave?: boolean): void

	/**
	 * Exports selection as assets required for cloud library.
	 * @param to The path to the export file.
	 */
	exportSelectionForCloudLibrary(to: File): boolean

	/**
	 * Exports stroke styles or presets.
	 * @param to The file to save to
	 * @param strokeStyleList The list of stroke styles to save
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	exportStrokeStyles(to: File, strokeStyleList: StrokeStyle[], versionComments: string, forceSave?: boolean): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Returns the locale-independent string(s) from the internal string localization database that correspond to the specified string (in the current locale).
	 * @param for_ The string to search for.
	 */
	findKeyStrings(for_: string): string[]

	/**
	 * Finds objects that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findObject(reverseOrder: boolean): PageItem[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Generate schema for IDML.
	 * @param to The folder path of the schema.
	 * @param packageFormat If true, generate schema for package format (multiple files). Default value is false.
	 */
	generateIDMLSchema(to: File, packageFormat: boolean): void

	/**
	 * Get all overlays.
	 * @param portraitDocumentForCheckingOverlays The portrait document for checking overlays.
	 * @param landscapeDocumentForCheckingOverlays The landscape document for checking overlays.
	 * @param miniFolioParams Options for exporting a mini folio. Can accept: Ordered array containing dataField:String, dataValue:Any Type.
	 */
	getAllOverlays(portraitDocumentForCheckingOverlays: Document, landscapeDocumentForCheckingOverlays: Document, miniFolioParams: any[]): any[]

	/**
	 * Get a JSON string for the CCX Welcome dialog.
	 * @param jsondata mode description
	 */
	getCCXUserJSONData(jsondata: string): string

	/**
	 * Get the current digital publishing article version number for the given parameter.
	 * @param digpubArticleVersion Version string(s) to retrieve.
	 */
	getDigpubArticleVersion(digpubArticleVersion: DigpubArticleVersion): string[]

	/**
	 * Get the current digital publishing version number for the given parameter.
	 * @param digpubVersion Version string(s) to retrieve.
	 */
	getDigpubVersion(digpubVersion: DigpubVersion): string[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Application[]

	/**
	 * Get the resolution strategy for style conflict, false if the user cancels
	 * @param charOrParaStyle Style type to look at.
	 */
	getStyleConflictResolutionStrategy(charOrParaStyle: StyleType): any

	/**
	 * Get the list of article viewer versions the digital publishing plugin supports.
	 */
	getSupportedArticleViewerVersions(): string[]

	/**
	 * Get the list of viewer versions the digital publishing plugin supports.
	 */
	getSupportedViewerVersions(): string[]

	/**
	 * Gets the count which will be used in the name of the next untitled document.
	 */
	getUntitledCount(): number

	/**
	 * Gets the decision from the user to add the content of text frame or the complete story in case of threaded text frame.
	 */
	getUserChoiceForCloudTextAddition(): any

	/**
	 * Imports a process color swatch from a preloaded Adobe color book.
	 * @param name The process color to load.
	 */
	importAdobeSwatchbookProcessColor(name: string): Color

	/**
	 * Imports a spot color swatch from an Adobe color book.
	 * @param name The spot color to load.
	 */
	importAdobeSwatchbookSpotColor(name: string): Color

	/**
	 * Imports presets from the specified file.
	 * @param format The type of preset to import.
	 * @param from The file to import presets from.
	 */
	importFile(format: ExportPresetFormat, from: File): void

	/**
	 * Imports the specified styles.
	 * @param format The types of styles to import.
	 * @param from The file containing the styles you want to import.
	 * @param globalStrategy The resolution strategy to employ for imported styles that have the same names as existing styles.
	 */
	importStyles(format: ImportFormat, from: File, globalStrategy?: GlobalClashResolutionStrategy): void

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Invokes InDesign's Color Picker.
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 */
	invokeColorPicker(space: ColorSpace, colorValue: number[]): string

	/**
	 * Whether the app is in touch mode or not.
	 */
	isAppInTouchMode(): boolean

	/**
	 * Whether user has opted-in to share usage data.
	 */
	isUserSharingAppUsageData(): boolean

	/**
	 * Load conditions from the specified file.
	 * @param from The path to the file that contains the conditions.
	 * @param loadConditionSets If true, load the condition sets as well.
	 */
	loadConditions(from: File, loadConditionSets: boolean): void

	/**
	 * Loads the specified find/change query.
	 * @param queryName The query to load.
	 * @param searchMode The search mode.
	 */
	loadFindChangeQuery(queryName: string, searchMode: SearchModes): void

	/**
	 * Load motion preset from the specified file.
	 * @param from The Flash motion preset file.
	 */
	loadMotionPreset(from: File): MotionPreset

	/**
	 * Load preflight profile from the specified file.
	 * @param from The InDesign preflight profile file or InDesign document.
	 */
	loadPreflightProfile(from: File): PreflightProfile

	/**
	 * Load swatches from the specified file.
	 * @param from The swatch file or InDesign document.
	 */
	loadSwatches(from: File): void

	/**
	 * Loads a set of XML markup tags from the specified file.
	 * @param from The path to the file that contains the tags.
	 */
	loadXMLTags(from: File): void

	/**
	 * Gets the memory statistics from the server.
	 */
	memoryStatistics(): any[]

	/**
	 * Mount a Version Cue project.
	 * @param serverURL The URL of the Version Cue server containing the project
	 * @param projectName The name of the Version Cue project to mount
	 */
	mountProject(serverURL: string, projectName: string): void

	/**
	 * Opens the specified document, book, or library.
	 * @param from The file path(s) to the document, book, or library.
	 * @param showingWindow If true, opens the document in a window. If false, the document is opened but is not displayed in a window.
	 * @param openOption How to open the document.
	 */
	open(from: File | File[], showingWindow?: boolean, openOption?: OpenOptions): any

	/**
	 * Opens the cloud library asset for editing.
	 * @param jsondata JSON encoded information about the asset to be edited.
	 */
	openCloudAssetForEdit(jsondata: string): boolean

	/**
	 * Open the panel associated with the action.
	 * @param id The ID.
	 */
	openPanel(id: number): void

	/**
	 * Package a folder into a UCF file.
	 * @param sourceFolder The folder to be packaged into an IDML file. Does not validate structure of the folder pursuant to the IDML spec. Caller is responsible for making sure the files in the folder are correctly organized.
	 * @param ucfFile The destination UCF file. Will be overwritten if it already exists.
	 * @param mimeMediaType The MIME media type, default value identifies package as IDML.
	 */
	packageUCF(sourceFolder: File, ucfFile: File, mimeMediaType?: string): void

	/**
	 * Pastes data from the clipboard into the active document window.
	 */
	paste(): void

	/**
	 * Pastes data from the clipboard into the active document window at the same position that the data held in its original document.
	 */
	pasteInPlace(): void

	/**
	 * Pastes data from the clipboard into the selected object in the active document window.
	 */
	pasteInto(): void

	/**
	 * Pastes data (minus formatting) from the clipboard into the active document window.
	 */
	pasteWithoutFormatting(): void

	/**
	 * Gets the current value of the specified performance metric.
	 * @param for_ The status to get from InDesign.
	 */
	performanceMetric(for_: number | PerformanceMetricOptions): any

	/**
	 * Gets the long name of the specified performance metric.
	 * @param for_ The status to get from InDesign.
	 */
	performanceMetricLongName(for_: number | PerformanceMetricOptions): string

	/**
	 * Gets the short name of the specified performance metric.
	 * @param for_ The status to get from InDesign.
	 */
	performanceMetricShortName(for_: number | PerformanceMetricOptions): string

	/**
	 * Place one or more files following the behavior of the place menu item. This may load the place gun or replace the selected object, depending on current preferences.
	 * @param fileName One or more files to place.
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File | File[], showingOptions?: boolean, withProperties?: object): void

	/**
	 * Prints the specified file(s).
	 * @param from One or more file paths.
	 * @param printDialog Whether to invoke the print dialog
	 * @param using Printer preset to use.
	 * @param withGrids Whether to print grids
	 */
	print(from: File | File[], printDialog: boolean, using: PrinterPresetTypes | PrinterPreset, withGrids?: boolean): void

	/**
	 * Quits the application.
	 * @param saving The option to use for saving changes to open documents before quitting.
	 */
	quit(saving?: SaveOptions): void

	/**
	 * Redoes the last action.
	 */
	redo(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Remove the file from most recently used files
	 * @param to The file to be removed
	 */
	removeFileFromRecentFiles(to: File): boolean

	/**
	 * Saves the specified find/change query.
	 * @param queryName The query to save.
	 * @param searchMode The search mode.
	 */
	saveFindChangeQuery(queryName: string, searchMode: SearchModes): void

	/**
	 * Saves the specified swatch(es) to a swatchbook file.
	 * @param to The swatchbook file to save to.
	 * @param swatchList The swatch(es) to save.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	saveSwatches(to: File, swatchList: Swatch[], versionComments: string, forceSave?: boolean): void

	/**
	 * Saves a set of tags to an external file.
	 * @param to The full path to the file in which to save the tags.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	saveXMLTags(to: File, versionComments: string, forceSave?: boolean): void

	/**
	 * Selects the specified object(s).
	 * @param selectableItems The objects to select.
	 * @param existingSelection The selection status of the Application in relation to previously selected objects.
	 */
	select(selectableItems: object | object[] | NothingEnum | SelectAll, existingSelection?: SelectionOptions): void

	/**
	 * Sets the application's preferences.
	 * @param applicationPreferences The IDML defaults file or enumeration.
	 */
	setApplicationPreferences(applicationPreferences: File | LanguageAndRegion): void

	/**
	 * Set cloud libraries info.
	 * @param librariesCollectionInfo JSON encoded information about cloud libraries collection
	 */
	setCloudLibraryCollection(librariesCollectionInfo: string): void

	/**
	 * Sets the export options for generation of a cloud asset.
	 * @param maxwidth The maximum width of the thumbnail generated in pixels.
	 * @param maxheight The maximum height of the thumbnail generated in pixels.
	 */
	setCloudLibraryOptions(maxwidth: number, maxheight: number): void

	/**
	 * Sets the count which will be used in the name of the next untitled document.
	 * @param untitledCount The count to be used in the name of the next untitled document. Only positive values are expected
	 */
	setUntitledCount(untitledCount: number): void

	/**
	 * Tile all document windows
	 */
	tileWindows(): void

	/**
	 * Generates a string which, if executed, will return the Application.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Toggles the visibility of the entire panel system.
	 */
	togglePanelSystemVisibility(): void

	/**
	 * Translates a key string into localized form based on current application locale.
	 * @param for_ The key string to translate
	 */
	translateKeyString(for_: string): string

	/**
	 * Undoes the last action.
	 */
	undo(): void

	/**
	 * Unpackage a UCF file into a folder structure.
	 * @param ucfFile The UCF file to be unpackaged.
	 * @param destinationFolder The folder where you would like the UCF file unpackaged to. Will be created if it does not exist.
	 */
	unpackageUCF(ucfFile: File, destinationFolder: File): void

	/**
	 * Forces a check for new fonts in the various Fonts folders.
	 */
	updateFonts(): void

	/**
	 * Waits for all the background tasks to finish.
	 */
	waitForAllTasks(): TaskState[]

}

/**
 * background task
 */
declare class BackgroundTask {
	/**
	 * The alerts encountered while running this task object. Can return: Array of Array of 2 TaskAlertType enumerators or Strings.
	 */
	alerts: any[]

	/**
	 * The document name on which this task operates.
	 */
	documentName: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the BackgroundTask.
	 */
	id: number

	/**
	 * The index of the BackgroundTask within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the BackgroundTask.
	 */
	name: string

	/**
	 * The parent of the BackgroundTask (a Application).
	 */
	parent: Application

	/**
	 * Progress information for this task.
	 */
	percentDone: number

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The current status of this task object.
	 */
	status: TaskState

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Cancels the specified background task.
	 */
	cancelTask(): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): BackgroundTask[]

	/**
	 * Queries for a particular property in the task metadata.
	 * @param name The task property being queried
	 */
	queryProperty(name: string): any

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the BackgroundTask.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Waits for the task to finish.
	 */
	waitForTask(): TaskState

}

/**
 * A collection of background task objects.
 */
declare class BackgroundTasks {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the BackgroundTask with the specified index.
	 * @param index The index.
	 */
	[index: number]: BackgroundTask

	/**
	 * Returns any BackgroundTask in the collection.
	 */
	anyItem(): BackgroundTask

	/**
	 * Displays the number of elements in the BackgroundTask.
	 */
	count(): number

	/**
	 * Returns every BackgroundTask in the collection.
	 */
	everyItem(): BackgroundTask[]

	/**
	 * Returns the first BackgroundTask in the collection.
	 */
	firstItem(): BackgroundTask

	/**
	 * Returns the BackgroundTask with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): BackgroundTask

	/**
	 * Returns the BackgroundTask with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): BackgroundTask

	/**
	 * Returns the BackgroundTask with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): BackgroundTask

	/**
	 * Returns the BackgroundTasks within the specified range.
	 * @param from The BackgroundTask, index, or name at the beginning of the range.
	 * @param to The BackgroundTask, index, or name at the end of the range.
	 */
	itemByRange(from: BackgroundTask | number | string, to: BackgroundTask | number | string): BackgroundTask[]

	/**
	 * Returns the last BackgroundTask in the collection.
	 */
	lastItem(): BackgroundTask

	/**
	 * Returns the middle BackgroundTask in the collection.
	 */
	middleItem(): BackgroundTask

	/**
	 * Returns the BackgroundTask whose index follows the specified BackgroundTask in the collection.
	 * @param obj The BackgroundTask whose index comes before the desired BackgroundTask.
	 */
	nextItem(obj: BackgroundTask): BackgroundTask

	/**
	 * Returns the BackgroundTask with the index previous to the specified index.
	 * @param obj The index of the BackgroundTask that follows the desired BackgroundTask.
	 */
	previousItem(obj: BackgroundTask): BackgroundTask

	/**
	 * Generates a string which, if executed, will return the BackgroundTask.
	 */
	toSource(): string

}

/**
 * A document.
 */
declare class Document {
	/**
	 * Dispatched after the Document becomes active. This event bubbles. This event is not cancelable.
	 */
	AFTER_ACTIVATE: string

	/**
	 * Dispatched after a Document is exported. This event bubbles. This event is not cancelable.
	 */
	AFTER_EXPORT: string

	/**
	 * Dispatched after importing a file into a Document. This event bubbles. This event is not cancelable.
	 */
	AFTER_IMPORT: string

	/**
	 * Dispatched after one or more links in the Document have been added, deleted, or modified. This event bubbles. This event is not cancelable.
	 */
	AFTER_LINKS_CHANGED: string

	/**
	 * Dispatched after a Document is created. This event bubbles. This event is not cancelable.
	 */
	AFTER_NEW: string

	/**
	 * Dispatched after a Document is opened. This event bubbles. This event is not cancelable.
	 */
	AFTER_OPEN: string

	/**
	 * Dispatched after a Document is printed. This event bubbles. This event is not cancelable.
	 */
	AFTER_PRINT: string

	/**
	 * Dispatched after a Document is reverted. This event bubbles. This event is not cancelable.
	 */
	AFTER_REVERT: string

	/**
	 * Dispatched after a Document is saved. This event bubbles. This event is not cancelable.
	 */
	AFTER_SAVE: string

	/**
	 * Dispatched after a Document is saved under a new name. This event bubbles. This event is not cancelable.
	 */
	AFTER_SAVE_AS: string

	/**
	 * Dispatched after a copy of a Document is saved. This event bubbles. This event is not cancelable.
	 */
	AFTER_SAVE_A_COPY: string

	/**
	 * Dispatched before a Document is closed. This event bubbles. This event is not cancelable.
	 */
	BEFORE_CLOSE: string

	/**
	 * Dispatched before the Document becomes inactive. This event bubbles. This event is not cancelable.
	 */
	BEFORE_DEACTIVATE: string

	/**
	 * Dispatched before a Document is exported. This event bubbles. This event is cancelable.
	 */
	BEFORE_EXPORT: string

	/**
	 * Dispatched before importing a file into a Document. This event bubbles. This event is cancelable.
	 */
	BEFORE_IMPORT: string

	/**
	 * Dispatched before a Document is printed. This event bubbles. This event is cancelable.
	 */
	BEFORE_PRINT: string

	/**
	 * Dispatched before a Document is reverted. This event bubbles. This event is cancelable.
	 */
	BEFORE_REVERT: string

	/**
	 * Dispatched before a Document is saved. This event bubbles. This event is cancelable.
	 */
	BEFORE_SAVE: string

	/**
	 * Dispatched before a Document is saved under a new name. This event bubbles. This event is cancelable.
	 */
	BEFORE_SAVE_AS: string

	/**
	 * Dispatched before a copy of a Document is saved. This event bubbles. This event is cancelable.
	 */
	BEFORE_SAVE_A_COPY: string

	/**
	 * Dispatched after a Document export is canceled or fails. This event bubbles. This event is not cancelable.
	 */
	FAILED_EXPORT: string

	/**
	 * If true, uses LAB alternates for spot colors when available.
	 */
	accurateLABSpots: boolean

	/**
	 * The active layer.
	 */
	activeLayer: Layer | string

	/**
	 * The active preflight process for this document.
	 */
	activeProcess: PreflightProcess

	/**
	 * Adjust layout preference settings.
	 */
	adjustLayoutPreferences: AdjustLayoutPreference

	/**
	 * The rendering intent for colors that result from transparency interactions on the page after blending.
	 */
	afterBlendingIntent: RenderingIntent

	/**
	 * All Cell styles
	 */
	allCellStyles: CellStyle[]

	/**
	 * Lists all character styles (regardless of their group).
	 */
	allCharacterStyles: CharacterStyle[]

	/**
	 * Lists all graphics contained by the Document.
	 */
	allGraphics: Graphic[]

	/**
	 * All object styles contained by the Document.
	 */
	allObjectStyles: ObjectStyle[]

	/**
	 * Lists all page items contained by the Document.
	 */
	allPageItems: PageItem[]

	/**
	 * Lists all paragraph styles (regardless of their group).
	 */
	allParagraphStyles: ParagraphStyle[]

	/**
	 * All Table styles
	 */
	allTableStyles: TableStyle[]

	/**
	 * Anchored object default settings.
	 */
	anchoredObjectDefaults: AnchoredObjectDefault

	/**
	 * Anchored object settings.
	 */
	anchoredObjectSettings: AnchoredObjectSetting

	/**
	 * A collection of articles.
	 */
	articles: Articles

	/**
	 * A collection of assignments.
	 */
	assignments: Assignments

	/**
	 * The XML element associated with the Document.
	 */
	associatedXMLElement: XMLItem

	/**
	 * Baseline frame grid option settings.
	 */
	baselineFrameGridOptions: BaselineFrameGridOption

	/**
	 * A collection of bookmarks.
	 */
	bookmarks: Bookmarks

	/**
	 * Button preference settings.
	 */
	buttonPreferences: ButtonPreference

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of cell style groups.
	 */
	cellStyleGroups: CellStyleGroups

	/**
	 * A collection of cell style mappings.
	 */
	cellStyleMappings: CellStyleMappings

	/**
	 * A collection of cell styles.
	 */
	cellStyles: CellStyles

	/**
	 * Chapter numbering preferences.
	 */
	chapterNumberPreferences: ChapterNumberPreference

	/**
	 * A collection of char style mappings.
	 */
	charStyleMappings: CharStyleMappings

	/**
	 * A collection of character style groups.
	 */
	characterStyleGroups: CharacterStyleGroups

	/**
	 * A collection of character styles.
	 */
	characterStyles: CharacterStyles

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * CJK grid preference settings.
	 */
	cjkGridPreferences: CjkGridPreference

	/**
	 * The policy for handling colors in a CMYK color model, including reading and embedding color profiles, mismatches between embedded color profiles and the working space, and moving colors from one document to another.
	 */
	cmykPolicy: ColorSettingsPolicy

	/**
	 * The current CMYK profile.
	 */
	cmykProfile: string

	/**
	 * A list of valid CMYK profiles.
	 */
	cmykProfileList: string[]

	/**
	 * A collection of color groups.
	 */
	colorGroups: ColorGroups

	/**
	 * A collection of colors.
	 */
	colors: Colors

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * A collection of composite fonts.
	 */
	compositeFonts: CompositeFonts

	/**
	 * A collection of condition sets for conditional text.
	 */
	conditionSets: ConditionSets

	/**
	 * Conditional text preferences.
	 */
	conditionalTextPreferences: ConditionalTextPreference

	/**
	 * A collection of conditions for conditional text.
	 */
	conditions: Conditions

	/**
	 * If true, the Document was converted.
	 */
	converted: boolean

	/**
	 * A collection of cross reference formats.
	 */
	crossReferenceFormats: CrossReferenceFormats

	/**
	 * A collection of cross reference text sources.
	 */
	crossReferenceSources: CrossReferenceSources

	/**
	 * A collection of dashed stroke styles.
	 */
	dashedStrokeStyles: DashedStrokeStyles

	/**
	 * A collection of data merge image placeholders.
	 */
	dataMergeImagePlaceholders: DataMergeImagePlaceholders

	/**
	 * The data merge option properties that define the data merge.
	 */
	dataMergeOptions: DataMergeOption

	/**
	 * Data merge properties that define data merge fields and preferences.
	 */
	dataMergeProperties: DataMerge

	/**
	 * A collection of data merge QR code placeholders.
	 */
	dataMergeQrcodePlaceholders: DataMergeQrcodePlaceholders

	/**
	 * A collection of data merge text placeholders.
	 */
	dataMergeTextPlaceholders: DataMergeTextPlaceholders

	/**
	 * The rendering intent for bitmap images.
	 */
	defaultImageIntent: RenderingIntent

	/**
	 * User dictionary preference settings.
	 */
	dictionaryPreferences: DictionaryPreference

	/**
	 * Document preference settings.
	 */
	documentPreferences: DocumentPreference

	/**
	 * A collection of dotted stroke styles.
	 */
	dottedStrokeStyles: DottedStrokeStyles

	/**
	 * A collection of DTDs.
	 */
	dtds: DTDs

	/**
	 * The Version Cue editing state of the file.
	 */
	editingState: EditingState

	/**
	 * Endnote option settings.
	 */
	endnoteOptions: EndnoteOption

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * EPub export preference settings.
	 */
	epubExportPreferences: EPubExportPreference

	/**
	 * EPub fixed layout export preference settings.
	 */
	epubFixedLayoutExportPreferences: EPubFixedLayoutExportPreference

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The default export for web preferences.
	 */
	exportForWebPreferences: ExportForWebPreference

	/**
	 * The full path to the file.
	 */
	filePath: File

	/**
	 * A collection of fonts.
	 */
	fonts: Fonts

	/**
	 * Footnote option settings.
	 */
	footnoteOptions: FootnoteOption

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	frameFittingOptions: FrameFittingOption

	/**
	 * The full path to the Document, including the name of the Document.
	 */
	fullName: File

	/**
	 * Galley preference settings.
	 */
	galleyPreferences: GalleyPreference

	/**
	 * A collection of gradients.
	 */
	gradients: Gradients

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * Grid preference settings.
	 */
	gridPreferences: GridPreference

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * Guide preference settings.
	 */
	guidePreferences: GuidePreference

	/**
	 * A collection of guides.
	 */
	guides: Guides

	/**
	 * HTML export preference settings.
	 */
	htmlExportPreferences: HTMLExportPreference

	/**
	 * HTML FXL export preference settings.
	 */
	htmlFXLExportPreferences: HTMLFXLExportPreference

	/**
	 * A collection of hyperlink external page destinations.
	 */
	hyperlinkExternalPageDestinations: HyperlinkExternalPageDestinations

	/**
	 * A collection of hyperlink page destinations.
	 */
	hyperlinkPageDestinations: HyperlinkPageDestinations

	/**
	 * A collection of hyperlink page item sources.
	 */
	hyperlinkPageItemSources: HyperlinkPageItemSources

	/**
	 * A collection of hyperlink text destinations.
	 */
	hyperlinkTextDestinations: HyperlinkTextDestinations

	/**
	 * A collection of hyperlink text sources.
	 */
	hyperlinkTextSources: HyperlinkTextSources

	/**
	 * A collection of hyperlink URL destinations.
	 */
	hyperlinkURLDestinations: HyperlinkURLDestinations

	/**
	 * A collection of hyperlinks.
	 */
	hyperlinks: Hyperlinks

	/**
	 * A collection of hyphenation exceptions lists.
	 */
	hyphenationExceptions: HyphenationExceptions

	/**
	 * The unique ID of the Document.
	 */
	id: number

	/**
	 * The index of the Document within its containing object.
	 */
	index: number

	/**
	 * The index options properties that define how an index is formatted.
	 */
	indexGenerationOptions: IndexOptions

	/**
	 * A collection of indexes.
	 */
	indexes: Indexes

	/**
	 * A collection of indexing sort options.
	 */
	indexingSortOptions: IndexingSortOptions

	/**
	 * A collection of inks.
	 */
	inks: Inks

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A collection of kinsoku tables.
	 */
	kinsokuTables: KinsokuTables

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of languages.
	 */
	languages: Languages

	/**
	 * A collection of layers.
	 */
	layers: Layers

	/**
	 * Default properties specific to layout grids.
	 */
	layoutGridData: LayoutGridDataInformation

	/**
	 * A collection of layout windows.
	 */
	layoutWindows: LayoutWindows

	/**
	 * Linked Page Item options
	 */
	linkedPageItemOptions: LinkedPageItemOption

	/**
	 * Linked story options
	 */
	linkedStoryOptions: LinkedStoryOption

	/**
	 * A collection of links.
	 */
	links: Links

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * Margin preference settings.
	 */
	marginPreferences: MarginPreference

	/**
	 * A collection of master spreads.
	 */
	masterSpreads: MasterSpreads

	/**
	 * Metadata preference settings.
	 */
	metadataPreferences: MetadataPreference

	/**
	 * A collection of mixed ink groups.
	 */
	mixedInkGroups: MixedInkGroups

	/**
	 * A collection of mixed inks.
	 */
	mixedInks: MixedInks

	/**
	 * If true, the Document has been modified since it was last saved.
	 */
	modified: boolean

	/**
	 * A collection of mojikumi tables.
	 */
	mojikumiTables: MojikumiTables

	/**
	 * Mojikumi user interface preference settings.
	 */
	mojikumiUIPreferences: MojikumiUiPreference

	/**
	 * A collection of Motion presets.
	 */
	motionPresets: MotionPresets

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The name of the Document.
	 */
	name: string

	/**
	 * A collection of named grids.
	 */
	namedGrids: NamedGrids

	/**
	 * A collection of numbered lists.
	 */
	numberingLists: NumberingLists

	/**
	 * A collection of object style groups.
	 */
	objectStyleGroups: ObjectStyleGroups

	/**
	 * A collection of object styles.
	 */
	objectStyles: ObjectStyles

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The default page item formatting for the Document.
	 */
	pageItemDefaults: PageItemDefault

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of pages.
	 */
	pages: Pages

	/**
	 * A collection of para style mappings.
	 */
	paraStyleMappings: ParaStyleMappings

	/**
	 * A collection of paragraph destinations.
	 */
	paragraphDestinations: ParagraphDestinations

	/**
	 * A collection of paragraph style groups.
	 */
	paragraphStyleGroups: ParagraphStyleGroups

	/**
	 * A collection of paragraph styles.
	 */
	paragraphStyles: ParagraphStyles

	/**
	 * The parent of the Document (a Application).
	 */
	parent: Application

	/**
	 * Pasteboard preference settings.
	 */
	pasteboardPreferences: PasteboardPreference

	/**
	 * A collection of PDF comment objects
	 */
	pdfComments: PDFComments

	/**
	 * The place gun.
	 */
	placeGuns: PlaceGun

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Preflight option settings.
	 */
	preflightOptions: PreflightOption

	/**
	 * A collection of preflight profiles.
	 */
	preflightProfiles: PreflightProfiles

	/**
	 * Booklet printing options.
	 */
	printBookletOptions: PrintBookletOption

	/**
	 * Print booklet preferences.
	 */
	printBookletPrintPreferences: PrintBookletPrintPreference

	/**
	 * Print preference settings.
	 */
	printPreferences: PrintPreference

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Publish export preference settings.
	 */
	publishExportPreferences: PublishExportPreference

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * If true, the Document is read-only.
	 */
	readOnly: boolean

	/**
	 * If true, the Document was recovered.
	 */
	recovered: boolean

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * The names of the items in the redo stack.
	 */
	redoHistory: string[]

	/**
	 * The name of the action on the top of the redo stack.
	 */
	redoName: string

	/**
	 * The policy for handling colors in an RGB color model, including reading and embedding color profiles, handling mismatches between embedded color profiles and the working space, and moving colors from one document to another.
	 */
	rgbPolicy: ColorSettingsPolicy

	/**
	 * The current RGB profile.
	 */
	rgbProfile: string

	/**
	 * A list of valid RGB profiles.
	 */
	rgbProfileList: string[]

	/**
	 * If true, the Document has been saved since it was created.
	 */
	saved: boolean

	/**
	 * A collection of sections.
	 */
	sections: Sections

	/**
	 * The selected page item(s).
	 */
	selectedPageItems: object[] | object | NothingEnum

	/**
	 * The selected object(s).
	 */
	selection: object[] | object | NothingEnum

	/**
	 * The key object of the selection.
	 */
	selectionKeyObject: PageItem | NothingEnum

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The rendering intent for all vector art (areas of solid color) in native objects.
	 */
	solidColorIntent: RenderingIntent

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of spreads.
	 */
	spreads: Spreads

	/**
	 * A collection of stories.
	 */
	stories: Stories

	/**
	 * Default properties specific to frame grids.
	 */
	storyGridData: StoryGridDataInformation

	/**
	 * Story preference settings.
	 */
	storyPreferences: StoryPreference

	/**
	 * A collection of story windows.
	 */
	storyWindows: StoryWindows

	/**
	 * A collection of striped stroke styles.
	 */
	stripedStrokeStyles: StripedStrokeStyles

	/**
	 * A collection of stroke styles.
	 */
	strokeStyles: StrokeStyles

	/**
	 * A collection of swatches.
	 */
	swatches: Swatches

	/**
	 * A collection of table style groups.
	 */
	tableStyleGroups: TableStyleGroups

	/**
	 * A collection of table style mappings.
	 */
	tableStyleMappings: TableStyleMappings

	/**
	 * A collection of table styles.
	 */
	tableStyles: TableStyles

	/**
	 * Tagged PDF preferences.
	 */
	taggedPDFPreferences: TaggedPDFPreference

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * Text default settings.
	 */
	textDefaults: TextDefault

	/**
	 * Text frame preference settings.
	 */
	textFramePreferences: TextFramePreference

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * Text preference settings.
	 */
	textPreferences: TextPreference

	/**
	 * A collection of text variables.
	 */
	textVariables: TextVariables

	/**
	 * The text wrap preference properties that define the default formatting for wrapping text around objects.
	 */
	textWrapPreferences: TextWrapPreference

	/**
	 * A collection of tints.
	 */
	tints: Tints

	/**
	 * A collection of TOC styles.
	 */
	tocStyles: TOCStyles

	/**
	 * Transparency preference settings.
	 */
	transparencyPreferences: TransparencyPreference

	/**
	 * A collection of trap presets.
	 */
	trapPresets: TrapPresets

	/**
	 * The names of the items in the undo stack.
	 */
	undoHistory: string[]

	/**
	 * The name of the action on the top of the undo stack.
	 */
	undoName: string

	/**
	 * The swatches that are not being used.
	 */
	unusedSwatches: Swatch[]

	/**
	 * A collection of XML validation errors.
	 */
	validationErrors: ValidationErrors

	/**
	 * The Version Cue version state of the file.
	 */
	versionState: VersionState

	/**
	 * View preference settings.
	 */
	viewPreferences: ViewPreference

	/**
	 * If true, the Document is visible.
	 */
	visible: boolean

	/**
	 * Watermark preferences
	 */
	watermarkPreferences: WatermarkPreference

	/**
	 * A collection of windows.
	 */
	windows: Windows

	/**
	 * A collection of XML comments.
	 */
	xmlComments: XMLComments

	/**
	 * A collection of XML elements.
	 */
	xmlElements: XMLElements

	/**
	 * A collection of XML export maps.
	 */
	xmlExportMaps: XMLExportMaps

	/**
	 * XML export preference settings.
	 */
	xmlExportPreferences: XMLExportPreference

	/**
	 * A collection of XML import maps.
	 */
	xmlImportMaps: XMLImportMaps

	/**
	 * XML import preference settings.
	 */
	xmlImportPreferences: XMLImportPreference

	/**
	 * A collection of XML instructions.
	 */
	xmlInstructions: XMLInstructions

	/**
	 * A collection of XML items.
	 */
	xmlItems: XMLItems

	/**
	 * The XML preference settings.
	 */
	xmlPreferences: XMLPreference

	/**
	 * A collection of xml stories.
	 */
	xmlStories: XmlStories

	/**
	 * A collection of XML tags.
	 */
	xmlTags: XMLTags

	/**
	 * XML view preference settings.
	 */
	xmlViewPreferences: XMLViewPreference

	/**
	 * The ruler origin, specified as page coordinates in the format [x, y].
	 */
	zeroPoint: (number | string)[]

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Adjust the existing layout according to new page size, bleed and margin values. The first parameter is a plain object with key value pairs for properties affected. Permissible keys are width, height, bleedInside, bleedTop, bleedOutside, bleedBottom, leftMargin, topMargin, rightMargin, bottomMargin. The values can be specified as decimal numbers in units of Pt or as a string having a measurement value such as '1 in'. Not all properties need to be specified, only the values that need updation. Notice that when dealing with individual pages rather than the whole document, bleed changes has no effect. E.g. - app.activeDocument.adjustLayout({width:'600px', leftMargin: '1in'}), app.activeDocument.adjustLayout({rightMargin:'1in'}, app.activeDocument.spreads[0].pages), app.activeDocument.spreads[0].pages[0].adjustLayout({width:'400px', leftMargin: '10px'})
	 * @param adoptTo Change values - see functin definition for details
	 * @param affectedPages The collection of Page objects to affect . Has no effect if function is called from Page (Optional)
	 */
	adjustLayout(adoptTo: object, affectedPages: Page[]): void

	/**
	 * Align page items.
	 * @param alignDistributeItems The page items to align or distribute.
	 * @param alignOption The type of alignment to apply.
	 * @param alignDistributeBounds The bounds within which to align or distribute the page items.
	 * @param reference The reference or key object to align to distribute relative to. Required when 'align distribute bounds' specifies 'key object'.
	 */
	align(alignDistributeItems: PageItem[], alignOption: AlignOptions, alignDistributeBounds: AlignDistributeBounds, reference: PageItem): void

	/**
	 * Asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param withGrids If true, exports the grids.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, withGrids?: boolean, versionComments?: string, forceSave?: boolean): BackgroundTask

	/**
	 * Change comoser to optyca
	 */
	changeComposer(): void

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds objects that match the find what value and replace the objects with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeObject(reverseOrder: boolean): PageItem[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Check in to Version Cue.
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	checkIn(versionComments: string, forceSave?: boolean): void

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void

	/**
	 * Close the Document
	 * @param saving Whether to save changes before closing the Document
	 * @param savingIn The file in which to save the Document
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	close(saving?: SaveOptions, savingIn?: File, versionComments?: string, forceSave?: boolean): void

	/**
	 * Transforms color values
	 * @param colorValue source color value
	 * @param sourceColorSpace source color space
	 * @param destinationColorSpace destination color space
	 */
	colorTransform(colorValue: number[], sourceColorSpace: ColorSpace, destinationColorSpace: ColorSpace): number[]

	/**
	 * Creates an alternate layout for a given list of spreads.
	 * @param spreadItems The spreads to create an alternate layout for.
	 * @param name The name of the alternate layout. Note: This is used for the named layout for the new section for the duplicated spreads.
	 * @param width The width of the pages created.
	 * @param height The height of the pages created.
	 * @param createTextStyles Whether to create new text styles.
	 * @param linkTextStories Whether to create linked text for duplicated text stories.
	 * @param layoutRule What layout rule to set on the pages.
	 */
	createAlternateLayout(spreadItems: Spread[], name: string, width: number | string, height: number | string, createTextStyles: boolean, linkTextStories: boolean, layoutRule: LayoutRuleOptions): void

	/**
	 * Create Email QR Code on the page item or document
	 * @param emailAddress QR code Email Address
	 * @param subject QR code Email Subject
	 * @param body QR code Email Body Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param urlLink QR code Hyperlink URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create a missing font object.
	 * @param fontFamily The name of the font family
	 * @param fontStyleName The name of the font style.
	 * @param postscriptName The PostScript name of the font.
	 */
	createMissingFontObject(fontFamily: string, fontStyleName: string, postscriptName: string): Font

	/**
	 * Create Plain Text QR Code on the page item
	 * @param plainText QR code Plain Text
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Creates a table of contents.
	 * @param using The TOC style to use to define the content, title, and format of the table of contents.
	 * @param replacing If true, replaces the existing TOC.
	 * @param fromBook The book whose documents to include in the TOC.
	 * @param placePoint The point at which to place the TOC story, specified as page coordinates in the format [x, y].
	 * @param includeOverset If true, includes overset text TOC entries in the TOC.
	 * @param destinationLayer The layer on which to place the TOC.
	 */
	createTOC(using: TOCStyle, replacing?: boolean, fromBook?: Book, placePoint?: (number | string)[], includeOverset?: boolean, destinationLayer?: Layer): Story[]

	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param cellNumber QR code Text Phone Number
	 * @param textMessage QR code Text Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create Business Card QR Code on the page item or load on document's placegun
	 * @param firstName QR code Business Card First Name
	 * @param lastName QR code Business Card Last Name
	 * @param jobTitle QR code Business Card Title
	 * @param cellPhone QR code Business Card Cell Phone Number
	 * @param phone QR code Business Card Phone Number
	 * @param email QR code Business Card Email Address
	 * @param organisation QR code Business Card Organisation
	 * @param streetAddress QR code Business Card Street Address
	 * @param city QR code Business Card City
	 * @param adrState QR code Business Card State
	 * @param country QR code Business Card Country
	 * @param postalCode QR code Business Card Postal Code
	 * @param website QR code Business Card URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Document. Above parameters can also be passed as properties
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Deletes an alternate layout.
	 * @param name The name of the alternate layout to delete.
	 */
	deleteAlternateLayout(name: string): void

	/**
	 * Deletes unused XML markup tags.
	 */
	deleteUnusedTags(): void

	/**
	 * Distribute page items.
	 * @param alignDistributeItems The page items to align or distribute
	 * @param distributeOption The type of distribution to apply.
	 * @param alignDistributeBounds The bounds within which to align or distribute the page items.
	 * @param useDistributeMeasurement If true, distribute space between page items. When this property is true, the bounds setting is ignored.
	 * @param absoluteDistributeMeasurement The distance to use when distributing page items. Required when 'align distribute bounds' specifies 'key object'.
	 * @param reference The reference or key object to align to distribute relative to. Required when 'align distribute bounds' specifies 'key object'.
	 */
	distribute(alignDistributeItems: PageItem[], distributeOption: DistributeOptions, alignDistributeBounds: AlignDistributeBounds, useDistributeMeasurement: boolean, absoluteDistributeMeasurement: number | string, reference: PageItem): void

	/**
	 * Embed this profile to the document.
	 * @param using The preflight profile to embed.
	 */
	embed(using: string | PreflightProfile): PreflightProfile

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param withGrids If true, exports the grids.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, withGrids?: boolean, versionComments?: string, forceSave?: boolean): void

	/**
	 * Exports as assets required for cloud library.
	 * @param jsondata JSON encoded information about the export.
	 */
	exportForCloudLibrary(jsondata: string): boolean

	/**
	 * Exports selected page items to snippet on the destination file path.
	 * @param to The path to the export file.
	 */
	exportPageItemsSelectionToSnippet(to: File): void

	/**
	 * Exports input page item ids to snippet on the destination file path.
	 * @param to The path to the export file.
	 * @param pageItemIds The array of the page item ids.
	 */
	exportPageItemsToSnippet(to: File, pageItemIds: number[]): void

	/**
	 * Exports stroke styles or presets.
	 * @param to The file to save to
	 * @param strokeStyleList The list of stroke styles to save
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	exportStrokeStyles(to: File, strokeStyleList: StrokeStyle[], versionComments: string, forceSave?: boolean): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds objects that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findObject(reverseOrder: boolean): PageItem[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * This will return an array of structs containing information about the alternate layouts.
	 * @param resolveMaster Resolves layout policy if setting is "use master" - default is true.
	 */
	getAlternateLayoutsForFolio(resolveMaster: boolean): any[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Document[]

	/**
	 * Selected text direction
	 */
	getSelectedTextDirection(): TextDirection

	/**
	 * Get the resolution strategy for style conflict, false if the user cancels
	 * @param charOrParaStyle Style type to look at.
	 */
	getStyleConflictResolutionStrategy(charOrParaStyle: StyleType): any

	/**
	 * Imports a process color swatch from a preloaded Adobe color book.
	 * @param name The process color to load.
	 */
	importAdobeSwatchbookProcessColor(name: string): Color

	/**
	 * Imports a spot color swatch from an Adobe color book.
	 * @param name The spot color to load.
	 */
	importAdobeSwatchbookSpotColor(name: string): Color

	/**
	 * Imports a DTD to use for validation.
	 * @param from The path to the DTD file.
	 */
	importDtd(from: File): void

	/**
	 * Imports the cross reference formats from specified file.
	 * @param from The file whose formats to import.
	 */
	importFormats(from: File): void

	/**
	 * Import Commemnts from PDF
	 * @param from The PDF File from which you want to import comments.
	 * @param withProperties Initial values for properties of the new Document
	 */
	importPdfComments(from: File, withProperties: object): void

	/**
	 * Imports the specified styles.
	 * @param format The types of styles to import.
	 * @param from The file containing the styles you want to import.
	 * @param globalStrategy The resolution strategy to employ for imported styles that have the same names as existing styles.
	 */
	importStyles(format: ImportFormat, from: File, globalStrategy?: GlobalClashResolutionStrategy): void

	/**
	 * Imports the specified XML file into an InDesign document.
	 * @param from The XML file.
	 */
	importXML(from: File): void

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Load conditions from the specified file.
	 * @param from The path to the file that contains the conditions.
	 * @param loadConditionSets If true, load the condition sets as well.
	 */
	loadConditions(from: File, loadConditionSets: boolean): void

	/**
	 * Load masterpages from an InDesign file.
	 * @param from The InDesign file to load the masters from.
	 * @param globalStrategyForMasterPage the global clash resolution strategy for load master page
	 */
	loadMasters(from: File, globalStrategyForMasterPage?: GlobalClashResolutionStrategyForMasterPage): void

	/**
	 * Load swatches from the specified file.
	 * @param from The swatch file or InDesign document.
	 */
	loadSwatches(from: File): void

	/**
	 * Loads a set of XML markup tags from the specified file.
	 * @param from The path to the file that contains the tags.
	 */
	loadXMLTags(from: File): void

	/**
	 * Auto tag the document based on the style to tag mappings
	 */
	mapStylesToXMLTags(): void

	/**
	 * Auto style the document based on the tag to style mappings
	 */
	mapXMLTagsToStyles(): void

	/**
	 * Packages the document.
	 * @param to The folder, alias, or path in which to place the packaged files.
	 * @param copyingFonts If true, copies fonts used in the document to the package folder.
	 * @param copyingLinkedGraphics If true, copies linked graphics files to the package folder.
	 * @param copyingProfiles If true, copies color profiles to the package folder.
	 * @param updatingGraphics If true, updates graphics links to the package folder.
	 * @param includingHiddenLayers If true, copies fonts and links from hidden layers to the package.
	 * @param ignorePreflightErrors If true, ignores preflight errors and proceeds with the packaging. If false, cancels the packaging when errors exist.
	 * @param creatingReport If true, creates a package report that includes printing instructions, print settings, lists of fonts, links and required inks, and other information.
	 * @param includeIdml If true, generates and includes IDML in the package folder.
	 * @param includePdf If true, generates and includes PDF in the package folder.
	 * @param pdfStyle If specified and PDF is to be included, use this style for PDF export if it is valid, otherwise use the last used PDF preset.
	 * @param useDocumentHyphenationExceptionsOnly If this option is selected, InDesign flags this document so that it does not reflow when someone else opens or edits it on a computer that has different hyphenation and dictionary settings.
	 * @param versionComments The comments for the version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	packageForPrint(to: File, copyingFonts: boolean, copyingLinkedGraphics: boolean, copyingProfiles: boolean, updatingGraphics: boolean, includingHiddenLayers: boolean, ignorePreflightErrors: boolean, creatingReport: boolean, includeIdml: boolean, includePdf: boolean, pdfStyle: string, useDocumentHyphenationExceptionsOnly: boolean, versionComments: string, forceSave?: boolean): boolean

	/**
	 * Place one or more files following the behavior of the place menu item. This may load the place gun or replace the selected object, depending on current preferences.
	 * @param fileName One or more files to place.
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File | File[], showingOptions?: boolean, withProperties?: object): void

	/**
	 * Deprecated: Use ContentPlacerObject load method. Original Description: Place following the behavior of the place and link story menu item. This will load the place gun.
	 * @param parentStory The story to place and link from.
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, showingOptions?: boolean): void

	/**
	 * place a cloud asset on the document
	 * @param jsondata JSON data containing metadata about the cloud asset
	 */
	placeCloudAsset(jsondata: string): void

	/**
	 * Prints the Document(s).
	 * @param printDialog Whether to invoke the print dialog
	 * @param using Printer preset to use.
	 * @param withGrids Whether to print grids
	 */
	print(printDialog: boolean, using: PrinterPresetTypes | PrinterPreset, withGrids?: boolean): void

	/**
	 * Print the Booklet using current document and Booklet and Print settings in the document
	 * @param printBookletDialog Whether to invoke the print booklet dialog
	 * @param using Printer preset to use.
	 */
	printBooklet(printBookletDialog?: boolean, using?: PrinterPresetTypes | PrinterPreset): void

	/**
	 * Recomposes the text in the Document.
	 */
	recompose(): void

	/**
	 * Redoes the last action.
	 */
	redo(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Resets all the buttons to their Normal state.
	 */
	resetAllButtons(): void

	/**
	 * Resets all the multi-state objects to their first state.
	 */
	resetAllMultiStateObjects(): void

	/**
	 * Reverts the document to its state at the last save operation.
	 */
	revert(): boolean

	/**
	 * Reverts to the version of the document in Version Cue.
	 * @param forceRevert Forcibly reverts to the project version.
	 */
	revertToProject(forceRevert?: boolean): void

	/**
	 * Save the document
	 * @param to Where to save the document. If the document is already saved, a copy is saved at this path, the original file is closed the new copy is opened
	 * @param stationery Whether to save the file as stationery
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	save(to: File, stationery?: boolean, versionComments?: string, forceSave?: boolean): Document

	/**
	 * Saves a copy of the document.
	 * @param to The file path for the copy. Note: Leaves the original document open and does not open the copy.
	 * @param stationery If true, saves the file as stationery (Mac OS) or as a template (Windows). Note: The file extension for stationery and templates is different than the extension for regular files.
	 */
	saveACopy(to: File, stationery?: boolean): void

	/**
	 * Saves the specified swatch(es) to a swatchbook file.
	 * @param to The swatchbook file to save to.
	 * @param swatchList The swatch(es) to save.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	saveSwatches(to: File, swatchList: Swatch[], versionComments: string, forceSave?: boolean): void

	/**
	 * Saves a set of tags to an external file.
	 * @param to The full path to the file in which to save the tags.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	saveXMLTags(to: File, versionComments: string, forceSave?: boolean): void

	/**
	 * Selects the specified object(s).
	 * @param selectableItems The objects to select.
	 * @param existingSelection The selection status of the Document in relation to previously selected objects.
	 */
	select(selectableItems: object | object[] | NothingEnum | SelectAll, existingSelection?: SelectionOptions): void

	/**
	 * Synchronizes the file with the Version Cue project.
	 * @param syncConflictResolution The conflict resolution method to use during synchronization.
	 * @param versionComments The comments that describe the version.
	 */
	synchronizeWithVersionCue(syncConflictResolution?: SyncConflictResolution, versionComments?: string): VersionCueSyncStatus

	/**
	 * Generates a string which, if executed, will return the Document.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Undoes the last action.
	 */
	undo(): void

	/**
	 * Updates cross references' text source content in the document.
	 */
	updateCrossReferences(): void

}

/**
 * A collection of documents.
 */
declare class Documents {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Document with the specified index.
	 * @param index The index.
	 */
	[index: number]: Document

	/**
	 * Creates a new document.
	 * @param showingWindow If true, displays the document.
	 * @param documentPreset The document preset to use.
	 * @param withProperties Initial values for properties of the new Document
	 */
	add(showingWindow?: boolean, documentPreset?: DocumentPreset, withProperties?: object): Document

	/**
	 * Returns any Document in the collection.
	 */
	anyItem(): Document

	/**
	 * Displays the number of elements in the Document.
	 */
	count(): number

	/**
	 * Returns every Document in the collection.
	 */
	everyItem(): Document[]

	/**
	 * Returns the first Document in the collection.
	 */
	firstItem(): Document

	/**
	 * Returns the Document with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Document

	/**
	 * Returns the Document with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Document

	/**
	 * Returns the Document with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Document

	/**
	 * Returns the Documents within the specified range.
	 * @param from The Document, index, or name at the beginning of the range.
	 * @param to The Document, index, or name at the end of the range.
	 */
	itemByRange(from: Document | number | string, to: Document | number | string): Document[]

	/**
	 * Returns the last Document in the collection.
	 */
	lastItem(): Document

	/**
	 * Returns the middle Document in the collection.
	 */
	middleItem(): Document

	/**
	 * Returns the Document whose index follows the specified Document in the collection.
	 * @param obj The Document whose index comes before the desired Document.
	 */
	nextItem(obj: Document): Document

	/**
	 * Returns the Document with the index previous to the specified index.
	 * @param obj The index of the Document that follows the desired Document.
	 */
	previousItem(obj: Document): Document

	/**
	 * Generates a string which, if executed, will return the Document.
	 */
	toSource(): string

}

/**
 * A window.
 */
declare class Window {
	/**
	 * Dispatched after the Window becomes active. This event bubbles. This event is not cancelable.
	 */
	AFTER_ACTIVATE: string

	/**
	 * Dispatched when the value of a property changes on this Window. This event bubbles. This event is not cancelable.
	 */
	AFTER_ATTRIBUTE_CHANGED: string

	/**
	 * Dispatched when a Window is closing. Since the close has been committed, it can no longer be canceled. This event bubbles. This event is not cancelable.
	 */
	AFTER_CLOSE: string

	/**
	 * Dispatched after a Window is opened. This event bubbles. This event is not cancelable.
	 */
	AFTER_OPEN: string

	/**
	 * Dispatched after an attribute on the active selection changes. This event bubbles. This event is not cancelable.
	 */
	AFTER_SELECTION_ATTRIBUTE_CHANGED: string

	/**
	 * Dispatched after the active selection changes. This event bubbles. This event is not cancelable.
	 */
	AFTER_SELECTION_CHANGED: string

	/**
	 * Dispatched before a Window is closed. This event bubbles. This event is cancelable.
	 */
	BEFORE_CLOSE: string

	/**
	 * Dispatched before the Window becomes inactive. This event bubbles. This event is not cancelable.
	 */
	BEFORE_DEACTIVATE: string

	/**
	 * The bounds of the window (specified in pixels) in the form [top, left, bottom, right].
	 */
	bounds: number[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the Window within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the Window.
	 */
	name: string

	/**
	 * The parent of the Window (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The selected object(s).
	 */
	selection: object[] | object | NothingEnum

	/**
	 * The key object of the selection.
	 */
	selectionKeyObject: PageItem | NothingEnum

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Brings the object to the front.
	 */
	bringToFront(): void

	/**
	 * Closes the Window.
	 */
	close(): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Window[]

	/**
	 * Maximizes the window.
	 */
	maximize(): void

	/**
	 * Minimizes the window.
	 */
	minimize(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Restores the window.
	 */
	restore(): void

	/**
	 * Selects the specified object(s).
	 * @param selectableItems The objects to select.
	 * @param existingSelection The selection status of the Window in relation to previously selected objects.
	 */
	select(selectableItems: object | object[] | NothingEnum | SelectAll, existingSelection?: SelectionOptions): void

	/**
	 * Generates a string which, if executed, will return the Window.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of windows.
 */
declare class Windows {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Window with the specified index.
	 * @param index The index.
	 */
	[index: number]: Window

	/**
	 * Creates a new Window.
	 * @param withProperties Initial values for properties of the new Window
	 */
	add(withProperties: object): Window

	/**
	 * Returns any Window in the collection.
	 */
	anyItem(): Window

	/**
	 * Displays the number of elements in the Window.
	 */
	count(): number

	/**
	 * Returns every Window in the collection.
	 */
	everyItem(): Window[]

	/**
	 * Returns the first Window in the collection.
	 */
	firstItem(): Window

	/**
	 * Returns the Window with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Window

	/**
	 * Returns the Window with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Window

	/**
	 * Returns the Windows within the specified range.
	 * @param from The Window, index, or name at the beginning of the range.
	 * @param to The Window, index, or name at the end of the range.
	 */
	itemByRange(from: Window | number | string, to: Window | number | string): Window[]

	/**
	 * Returns the last Window in the collection.
	 */
	lastItem(): Window

	/**
	 * Returns the middle Window in the collection.
	 */
	middleItem(): Window

	/**
	 * Returns the Window whose index follows the specified Window in the collection.
	 * @param obj The Window whose index comes before the desired Window.
	 */
	nextItem(obj: Window): Window

	/**
	 * Returns the Window with the index previous to the specified index.
	 * @param obj The index of the Window that follows the desired Window.
	 */
	previousItem(obj: Window): Window

	/**
	 * Generates a string which, if executed, will return the Window.
	 */
	toSource(): string

}

/**
 * A layout window.
 */
declare class LayoutWindow extends Window {
	/**
	 * The active layer.
	 */
	activeLayer: Layer | string

	/**
	 * The front-most page.
	 */
	activePage: Page

	/**
	 * The front-most spread.
	 */
	activeSpread: Spread | MasterSpread

	/**
	 * If true, display a simulation of overprinting.
	 */
	overprintPreview: boolean

	/**
	 * If true, leaves color values unchanged for CMYK objects without embedded profiles and native objects such as line art or type. Note: Converts images whose profiles differ from the profile of the simulated device. Valid only when proofing type is custom.
	 */
	preserveColorNumbers: boolean

	/**
	 * The profile used for proofing colors.
	 */
	proofingProfile: string

	/**
	 * The method of proofing colors.
	 */
	proofingType: ProofingType

	/**
	 * The screen mode for layout view.
	 */
	screenMode: ScreenModeOptions

	/**
	 * If true, simulates the dark gray produced by many printers in place of solid black, according to the proofing profile. Note: Valid only when proofing type is custom.
	 */
	simulateInkBlack: boolean

	/**
	 * If true, simulates the dingy white of real paper, according to the proofing profile. Note: Valid only when proofing type is custom.
	 */
	simulatePaperWhite: boolean

	/**
	 * The default anchor point around which to transform objects.
	 */
	transformReferencePoint: AnchorPoint | [number | string, number | string]

	/**
	 * The display performance preferences override for the view.
	 */
	viewDisplaySetting: ViewDisplaySettings

	/**
	 * The size (as a percentage) to which to enlarge or reduce the view of the document. (Range: 5 to 4000)
	 */
	zoomPercentage: number

	/**
	 * Magnifies or reduces the window to the specified display size.
	 * @param given The display size.
	 */
	zoom(given: ZoomOptions): void

}

/**
 * A collection of layout windows.
 */
declare class LayoutWindows {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the LayoutWindow with the specified index.
	 * @param index The index.
	 */
	[index: number]: LayoutWindow

	/**
	 * Returns any LayoutWindow in the collection.
	 */
	anyItem(): LayoutWindow

	/**
	 * Displays the number of elements in the LayoutWindow.
	 */
	count(): number

	/**
	 * Returns every LayoutWindow in the collection.
	 */
	everyItem(): LayoutWindow[]

	/**
	 * Returns the first LayoutWindow in the collection.
	 */
	firstItem(): LayoutWindow

	/**
	 * Returns the LayoutWindow with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): LayoutWindow

	/**
	 * Returns the LayoutWindow with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): LayoutWindow

	/**
	 * Returns the LayoutWindows within the specified range.
	 * @param from The LayoutWindow, index, or name at the beginning of the range.
	 * @param to The LayoutWindow, index, or name at the end of the range.
	 */
	itemByRange(from: LayoutWindow | number | string, to: LayoutWindow | number | string): LayoutWindow[]

	/**
	 * Returns the last LayoutWindow in the collection.
	 */
	lastItem(): LayoutWindow

	/**
	 * Returns the middle LayoutWindow in the collection.
	 */
	middleItem(): LayoutWindow

	/**
	 * Returns the LayoutWindow whose index follows the specified LayoutWindow in the collection.
	 * @param obj The LayoutWindow whose index comes before the desired LayoutWindow.
	 */
	nextItem(obj: LayoutWindow): LayoutWindow

	/**
	 * Returns the LayoutWindow with the index previous to the specified index.
	 * @param obj The index of the LayoutWindow that follows the desired LayoutWindow.
	 */
	previousItem(obj: LayoutWindow): LayoutWindow

	/**
	 * Generates a string which, if executed, will return the LayoutWindow.
	 */
	toSource(): string

}

/**
 * A story window.
 */
declare class StoryWindow extends Window {
}

/**
 * A collection of story windows.
 */
declare class StoryWindows {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the StoryWindow with the specified index.
	 * @param index The index.
	 */
	[index: number]: StoryWindow

	/**
	 * Returns any StoryWindow in the collection.
	 */
	anyItem(): StoryWindow

	/**
	 * Displays the number of elements in the StoryWindow.
	 */
	count(): number

	/**
	 * Returns every StoryWindow in the collection.
	 */
	everyItem(): StoryWindow[]

	/**
	 * Returns the first StoryWindow in the collection.
	 */
	firstItem(): StoryWindow

	/**
	 * Returns the StoryWindow with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StoryWindow

	/**
	 * Returns the StoryWindow with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): StoryWindow

	/**
	 * Returns the StoryWindows within the specified range.
	 * @param from The StoryWindow, index, or name at the beginning of the range.
	 * @param to The StoryWindow, index, or name at the end of the range.
	 */
	itemByRange(from: StoryWindow | number | string, to: StoryWindow | number | string): StoryWindow[]

	/**
	 * Returns the last StoryWindow in the collection.
	 */
	lastItem(): StoryWindow

	/**
	 * Returns the middle StoryWindow in the collection.
	 */
	middleItem(): StoryWindow

	/**
	 * Returns the StoryWindow whose index follows the specified StoryWindow in the collection.
	 * @param obj The StoryWindow whose index comes before the desired StoryWindow.
	 */
	nextItem(obj: StoryWindow): StoryWindow

	/**
	 * Returns the StoryWindow with the index previous to the specified index.
	 * @param obj The index of the StoryWindow that follows the desired StoryWindow.
	 */
	previousItem(obj: StoryWindow): StoryWindow

	/**
	 * Generates a string which, if executed, will return the StoryWindow.
	 */
	toSource(): string

}

/**
 * A document event.
 */
declare class DocumentEvent extends Event {
	/**
	 * Dispatched after a Document is reverted. This event bubbles. This event is not cancelable.
	 */
	AFTER_REVERT: string

	/**
	 * Dispatched after a Document is saved. This event bubbles. This event is not cancelable.
	 */
	AFTER_SAVE: string

	/**
	 * Dispatched after a Document is saved under a new name. This event bubbles. This event is not cancelable.
	 */
	AFTER_SAVE_AS: string

	/**
	 * Dispatched after a copy of a Document is saved. This event bubbles. This event is not cancelable.
	 */
	AFTER_SAVE_A_COPY: string

	/**
	 * Dispatched before a Document is created. This event bubbles. This event is cancelable.
	 */
	BEFORE_NEW: string

	/**
	 * Dispatched before a Document is opened. This event bubbles. This event is cancelable.
	 */
	BEFORE_OPEN: string

	/**
	 * Dispatched before a Document is reverted. This event bubbles. This event is cancelable.
	 */
	BEFORE_REVERT: string

	/**
	 * Dispatched before a Document is saved. This event bubbles. This event is cancelable.
	 */
	BEFORE_SAVE: string

	/**
	 * Dispatched before a Document is saved under a new name. This event bubbles. This event is cancelable.
	 */
	BEFORE_SAVE_AS: string

	/**
	 * Dispatched before a copy of a Document is saved. This event bubbles. This event is cancelable.
	 */
	BEFORE_SAVE_A_COPY: string

	/**
	 * The full path to the DocumentEvent, including the name of the DocumentEvent.
	 */
	fullName: File

	/**
	 * Controls the display of dialogs and alerts during script processing.
	 */
	userInteractionLevel: UserInteractionLevels

}

/**
 * An import or export event.
 */
declare class ImportExportEvent extends Event {
	/**
	 * Dispatched after a ImportExportEvent is exported. This event bubbles. This event is not cancelable.
	 */
	AFTER_EXPORT: string

	/**
	 * Dispatched after importing a file into a ImportExportEvent. This event bubbles. This event is not cancelable.
	 */
	AFTER_IMPORT: string

	/**
	 * Dispatched before a ImportExportEvent is exported. This event bubbles. This event is cancelable.
	 */
	BEFORE_EXPORT: string

	/**
	 * Dispatched before importing a file into a ImportExportEvent. This event bubbles. This event is cancelable.
	 */
	BEFORE_IMPORT: string

	/**
	 * Dispatched after a ImportExportEvent export is canceled or fails. This event bubbles. This event is not cancelable.
	 */
	FAILED_EXPORT: string

	/**
	 * The import/export file format.
	 */
	format: string

	/**
	 * The full path to the ImportExportEvent, including the name of the ImportExportEvent.
	 */
	fullName: File

	/**
	 * Controls the display of dialogs and alerts during script processing.
	 */
	userInteractionLevel: UserInteractionLevels

}

/**
 * Represents the content placer object.
 */
declare class ContentPlacerObject extends Preference {
	/**
	 * Whether the Content Placer is currently loaded with content for placing.
	 */
	loaded: boolean

	/**
	 * Load the Content Placer with one or more objects.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param showingOptions Whether to display the link options dialog
	 */
	load(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): void

}

/**
 * A book.
 */
declare class Book {
	/**
	 * If true, automatically converts the book content object during repagination and synchronization.
	 */
	automaticDocumentConversion: boolean

	/**
	 * If true, automatically updates page numbers when pages in book content files are added, deleted, or rearranged.
	 */
	automaticPagination: boolean

	/**
	 * A collection of book content objects.
	 */
	bookContents: BookContents

	/**
	 * EPub export preference settings.
	 */
	epubExportPreferences: EPubExportPreference

	/**
	 * EPub fixed layout export preference settings.
	 */
	epubFixedLayoutExportPreferences: EPubFixedLayoutExportPreference

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The full path to the file.
	 */
	filePath: File

	/**
	 * The full path to the Book, including the name of the Book.
	 */
	fullName: File

	/**
	 * The index of the Book within its containing object.
	 */
	index: number

	/**
	 * If true, inserts a blank page as necessary to fill in page number gaps caused by the odd or even specification set in the repagination option.
	 */
	insertBlankPage: boolean

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * If true, merges identically named layers when exporting to PDF.
	 */
	mergeIdenticalLayers: boolean

	/**
	 * If true, the Book has been modified since it was last saved.
	 */
	modified: boolean

	/**
	 * The name of the Book.
	 */
	name: string

	/**
	 * The parent of the Book (a Application).
	 */
	parent: Application

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Preflight book option settings.
	 */
	preflightBookOptions: PreflightBookOption

	/**
	 * Print preference settings.
	 */
	printPreferences: PrintPreference

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Page numbering options for book content objects within the book.
	 */
	repaginationOption: RepaginateOption

	/**
	 * If true, the Book has been saved since it was created.
	 */
	saved: boolean

	/**
	 * How to match styles with same name while synchronizing a book.
	 */
	smartMatchStyleGroups: SmartMatchOptions

	/**
	 * Current style source document.
	 */
	styleSourceDocument: Document | BookContent

	/**
	 * If true, synchronize bullets and numbering.
	 */
	synchronizeBulletNumberingList: boolean

	/**
	 * If true, synchronize cell styles.
	 */
	synchronizeCellStyle: boolean

	/**
	 * If true, synchronize character styles.
	 */
	synchronizeCharacterStyle: boolean

	/**
	 * If true, synchronize composite font.
	 */
	synchronizeCompositeFont: boolean

	/**
	 * If true, synchronize conditional text.
	 */
	synchronizeConditionalText: boolean

	/**
	 * If true, synchronize cross reference formats
	 */
	synchronizeCrossReferenceFormat: boolean

	/**
	 * If true, synchronize kinsoku style.
	 */
	synchronizeKinsokuStyle: boolean

	/**
	 * If true, synchronize master pages.
	 */
	synchronizeMasterPage: boolean

	/**
	 * If true, synchronize mojikumi style.
	 */
	synchronizeMojikumiStyle: boolean

	/**
	 * If true, synchronize named grid.
	 */
	synchronizeNamedGrid: boolean

	/**
	 * If true, synchronize object styles.
	 */
	synchronizeObjectStyle: boolean

	/**
	 * If true, synchronize paragraph styles.
	 */
	synchronizeParagraphStyle: boolean

	/**
	 * If true, synchronize swatches.
	 */
	synchronizeSwatch: boolean

	/**
	 * If true, synchronize table of content styles.
	 */
	synchronizeTableOfContentStyle: boolean

	/**
	 * If true, synchronize table styles.
	 */
	synchronizeTableStyle: boolean

	/**
	 * If true, synchronize text variables.
	 */
	synchronizeTextVariable: boolean

	/**
	 * If true, synchronize trap styles.
	 */
	synchronizeTrapStyle: boolean

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Close the Book
	 * @param saving Whether to save changes before closing the Book
	 * @param savingIn The file in which to save the Book
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	close(saving?: SaveOptions, savingIn?: File, versionComments?: string, forceSave?: boolean): void

	/**
	 * Exports the book to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The file to which to export the book.
	 * @param showingOptions Used to specify if the PDF Export Options Dialog needs to be shown or not
	 * @param using Used to specify the presets for the export which can be the object of the preset type, enumeration for existing presets or user defined presets, or a string naming the preset to be used, but in case Showing Options is true, the preset specified in the Export Dialog will over ride this parameter
	 * @param whichDocuments Used to specify a list of book content references, from the current book, where the list may contain duplicate entries and if the list is not specified then the entire book contents shall be exported
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, whichDocuments?: BookContent[], versionComments?: string, forceSave?: boolean): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Book[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Packages the document.
	 * @param to The folder, alias, or path in which to place the packaged files.
	 * @param copyingFonts If true, copies fonts used in the document to the package folder.
	 * @param copyingLinkedGraphics If true, copies linked graphics files to the package folder.
	 * @param copyingProfiles If true, copies color profiles to the package folder.
	 * @param updatingGraphics If true, updates graphics links to the package folder.
	 * @param includingHiddenLayers If true, copies fonts and links from hidden layers to the package.
	 * @param ignorePreflightErrors If true, ignores preflight errors and proceeds with the packaging. If false, cancels the packaging when errors exist.
	 * @param creatingReport If true, creates a package report that includes printing instructions, print settings, lists of fonts, links and required inks, and other information.
	 * @param includeIdml If true, generates and includes IDML in the package folder.
	 * @param includePdf If true, generates and includes PDF in the package folder.
	 * @param pdfStyle If specified and PDF is to be included, use this style for PDF export if it is valid, otherwise use the last used PDF preset.
	 * @param useDocumentHyphenationExceptionsOnly If this option is selected, InDesign flags this document so that it does not reflow when someone else opens or edits it on a computer that has different hyphenation and dictionary settings.
	 * @param versionComments The comments for the version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	packageForPrint(to: File, copyingFonts: boolean, copyingLinkedGraphics: boolean, copyingProfiles: boolean, updatingGraphics: boolean, includingHiddenLayers: boolean, ignorePreflightErrors: boolean, creatingReport: boolean, includeIdml: boolean, includePdf: boolean, pdfStyle: string, useDocumentHyphenationExceptionsOnly: boolean, versionComments: string, forceSave?: boolean): boolean

	/**
	 * Preflight a book and optionally save the resulting report.
	 * @param to The preflight report to save to.
	 * @param autoOpen If true, automatically open the report after creation.
	 */
	preflight(to: File, autoOpen?: boolean): void

	/**
	 * Prints the Book(s).
	 * @param printDialog Whether to invoke the print dialog
	 * @param using Printer preset to use.
	 * @param withGrids Whether to print grids
	 */
	print(printDialog: boolean, using: PrinterPresetTypes | PrinterPreset, withGrids?: boolean): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Repaginates the book.
	 */
	repaginate(): void

	/**
	 * Saves the book.
	 * @param to The file path. Note: Required only if the book has not been previously saved. If the book has previously been saved, specifying a path saves a copy and closes the original book.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	save(to: File, versionComments: string, forceSave?: boolean): void

	/**
	 * Synchronizes the entire book to the style source document.
	 */
	synchronize(): void

	/**
	 * Generates a string which, if executed, will return the Book.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Updates the cross references in the entire book.
	 */
	updateAllCrossReferences(): void

	/**
	 * Update all numbers (e.g. Page numbers, chapter numbers and paragraph numbers) throughout the book.
	 */
	updateAllNumbers(): void

	/**
	 * Updates chapter numbers and paragraph numbers throughout the book.
	 */
	updateChapterAndParagraphNumbers(): void

}

/**
 * A collection of books.
 */
declare class Books {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Book with the specified index.
	 * @param index The index.
	 */
	[index: number]: Book

	/**
	 * Creates a new book.
	 * @param fullName The full path name of the new book file, including the book file extension '.indb'.
	 * @param withProperties Initial values for properties of the new Book
	 */
	add(fullName: File, withProperties: object): Book

	/**
	 * Returns any Book in the collection.
	 */
	anyItem(): Book

	/**
	 * Displays the number of elements in the Book.
	 */
	count(): number

	/**
	 * Returns every Book in the collection.
	 */
	everyItem(): Book[]

	/**
	 * Returns the first Book in the collection.
	 */
	firstItem(): Book

	/**
	 * Returns the Book with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Book

	/**
	 * Returns the Book with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Book

	/**
	 * Returns the Books within the specified range.
	 * @param from The Book, index, or name at the beginning of the range.
	 * @param to The Book, index, or name at the end of the range.
	 */
	itemByRange(from: Book | number | string, to: Book | number | string): Book[]

	/**
	 * Returns the last Book in the collection.
	 */
	lastItem(): Book

	/**
	 * Returns the middle Book in the collection.
	 */
	middleItem(): Book

	/**
	 * Returns the Book whose index follows the specified Book in the collection.
	 * @param obj The Book whose index comes before the desired Book.
	 */
	nextItem(obj: Book): Book

	/**
	 * Returns the Book with the index previous to the specified index.
	 * @param obj The index of the Book that follows the desired Book.
	 */
	previousItem(obj: Book): Book

	/**
	 * Generates a string which, if executed, will return the Book.
	 */
	toSource(): string

}

/**
 * A document added to a book.
 */
declare class BookContent {
	/**
	 * The date and time the BookContent was created.
	 */
	date: Date

	/**
	 * The page range of the book content object within the book.
	 */
	documentPageRange: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The full path to the file.
	 */
	filePath: File

	/**
	 * The full path to the BookContent, including the name of the BookContent.
	 */
	fullName: File

	/**
	 * The unique ID of the BookContent.
	 */
	id: number

	/**
	 * The index of the BookContent within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the BookContent.
	 */
	name: string

	/**
	 * The parent of the BookContent (a Book).
	 */
	parent: Book

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The size of the BookContent file.
	 */
	size: number

	/**
	 * The status of the book content object file.
	 */
	status: BookContentStatus

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): BookContent[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the book content object.
	 * @param to The location relative to the reference object or within the book.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to?: LocationOptions, reference?: BookContent): BookContent

	/**
	 * Preflight a book content object and optionally save the resulting report.
	 * @param to The preflight report to save to.
	 * @param autoOpen If true, automatically open the report after creation.
	 */
	preflight(to: File, autoOpen?: boolean): void

	/**
	 * Deletes the BookContent.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Replaces a book content object with a new file. Note: If the new file replaces the current style source document, the new file becomes the style source document.
	 * @param using The full path name of the new book content object.
	 */
	replace(using: File): BookContent

	/**
	 * Matches the formatting of the book content object to the style source document.
	 */
	synchronize(): void

	/**
	 * Generates a string which, if executed, will return the BookContent.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of book content objects.
 */
declare class BookContents {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the BookContent with the specified index.
	 * @param index The index.
	 */
	[index: number]: BookContent

	/**
	 * Creates a new book content object.
	 * @param fullName The full path name of the new book content object.
	 * @param at The location of the book content object within the book.
	 * @param withProperties Initial values for properties of the new BookContent
	 */
	add(fullName: File, at?: number, withProperties?: object): BookContent

	/**
	 * Returns any BookContent in the collection.
	 */
	anyItem(): BookContent

	/**
	 * Displays the number of elements in the BookContent.
	 */
	count(): number

	/**
	 * Returns every BookContent in the collection.
	 */
	everyItem(): BookContent[]

	/**
	 * Returns the first BookContent in the collection.
	 */
	firstItem(): BookContent

	/**
	 * Returns the BookContent with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): BookContent

	/**
	 * Returns the BookContent with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): BookContent

	/**
	 * Returns the BookContent with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): BookContent

	/**
	 * Returns the BookContents within the specified range.
	 * @param from The BookContent, index, or name at the beginning of the range.
	 * @param to The BookContent, index, or name at the end of the range.
	 */
	itemByRange(from: BookContent | number | string, to: BookContent | number | string): BookContent[]

	/**
	 * Returns the last BookContent in the collection.
	 */
	lastItem(): BookContent

	/**
	 * Returns the middle BookContent in the collection.
	 */
	middleItem(): BookContent

	/**
	 * Returns the BookContent whose index follows the specified BookContent in the collection.
	 * @param obj The BookContent whose index comes before the desired BookContent.
	 */
	nextItem(obj: BookContent): BookContent

	/**
	 * Returns the BookContent with the index previous to the specified index.
	 * @param obj The index of the BookContent that follows the desired BookContent.
	 */
	previousItem(obj: BookContent): BookContent

	/**
	 * Generates a string which, if executed, will return the BookContent.
	 */
	toSource(): string

}

/**
 * An ink.
 */
declare class Ink {
	/**
	 * The ink object to map this ink to.
	 */
	aliasInkName: string

	/**
	 * The angle of the ink. (Range: 0 to 360)
	 */
	angle: number

	/**
	 * Converts spot inks to process inks.
	 */
	convertToProcess: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The frequency of the ink. (Range: 1 to 500)
	 */
	frequency: number

	/**
	 * The unique ID of the Ink.
	 */
	id: number

	/**
	 * The index of the Ink within its containing object.
	 */
	index: number

	/**
	 * The trapping type of the ink.
	 */
	inkType: InkTypes

	/**
	 * If true, the ink is a process ink.
	 */
	isProcessInk: boolean

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Ink.
	 */
	name: string

	/**
	 * The neutral density of the ink. (Range: 0.001 to 10.0)
	 */
	neutralDensity: number

	/**
	 * The parent of the Ink (a Application or Document).
	 */
	parent: any

	/**
	 * If true, prints the ink. Only valid when printing separations.
	 */
	printInk: boolean

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The solidity value of the ink. (Range: 0.0 to 1.0)
	 */
	solidity: number

	/**
	 * The place of the ink in the trapping sequence.
	 */
	trapOrder: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Ink[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Ink.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of inks.
 */
declare class Inks {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Ink with the specified index.
	 * @param index The index.
	 */
	[index: number]: Ink

	/**
	 * Returns any Ink in the collection.
	 */
	anyItem(): Ink

	/**
	 * Displays the number of elements in the Ink.
	 */
	count(): number

	/**
	 * Returns every Ink in the collection.
	 */
	everyItem(): Ink[]

	/**
	 * Returns the first Ink in the collection.
	 */
	firstItem(): Ink

	/**
	 * Returns the Ink with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Ink

	/**
	 * Returns the Ink with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Ink

	/**
	 * Returns the Ink with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Ink

	/**
	 * Returns the Inks within the specified range.
	 * @param from The Ink, index, or name at the beginning of the range.
	 * @param to The Ink, index, or name at the end of the range.
	 */
	itemByRange(from: Ink | number | string, to: Ink | number | string): Ink[]

	/**
	 * Returns the last Ink in the collection.
	 */
	lastItem(): Ink

	/**
	 * Returns the middle Ink in the collection.
	 */
	middleItem(): Ink

	/**
	 * Returns the Ink whose index follows the specified Ink in the collection.
	 * @param obj The Ink whose index comes before the desired Ink.
	 */
	nextItem(obj: Ink): Ink

	/**
	 * Returns the Ink with the index previous to the specified index.
	 * @param obj The index of the Ink that follows the desired Ink.
	 */
	previousItem(obj: Ink): Ink

	/**
	 * Generates a string which, if executed, will return the Ink.
	 */
	toSource(): string

}

/**
 * A trap preset.
 */
declare class TrapPreset {
	/**
	 * The minimum amount (as a percentage) of black ink required before the black width setting is applied. (Range: 0 to 100)
	 */
	blackColorThreshold: number

	/**
	 * The neutral density value at or above which an ink is considered black. (Range: .001 to 10)
	 */
	blackDensity: number

	/**
	 * The black width. (Range depends on unit. For points: 0.0 to 8.0; picas: 0p0 to 0p8; inches: 0 to 0.1111; mm: 0 to 2.822; cm: 0 to .2822; ciceros: 0c0 to 0c7.507)
	 */
	blackWidth: number | string

	/**
	 * The degree (as a percentage) to which components from abutting colors are used to reduce the trap color. (Range: 0 to 100) Note: 0% makes a trap whose neutral density is equal to the neutral density of the darker color.
	 */
	colorReduction: number

	/**
	 * The default width for trapping all colors except those involving solid black. (Range depends on unit. For points: 0.0 to 8.0; picas: 0p0 to 0p8; inches: 0 to 0.1111; mm: 0 to 2.822; cm: 0 to .2822; ciceros: 0c0 to 0c7.507)
	 */
	defaultTrapWidth: number | string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the TrapPreset.
	 */
	id: number

	/**
	 * The trap placement between vector objects and bitmap images.
	 */
	imagePlacement: TrapImagePlacementTypes

	/**
	 * If true, turns on trapping along the boundary of overlapping or abutting bitmap images.
	 */
	imagesToImages: boolean

	/**
	 * The index of the TrapPreset within its containing object.
	 */
	index: number

	/**
	 * If true, turns on trapping among colors within individual bitmap images.
	 */
	internalImages: boolean

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the TrapPreset.
	 */
	name: string

	/**
	 * If true, ensures that vector objects overlap bitmap images.
	 */
	objectsToImages: boolean

	/**
	 * If true, ensures that one-bit images trap to abutting objects.
	 */
	oneBitImages: boolean

	/**
	 * The parent of the TrapPreset (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The difference (as a percentage) between the neutral densities of abutting colors at which the trap is moved from the darker side of a color edge toward the centerline. (Range: 0 to 100)
	 */
	slidingTrapThreshold: number

	/**
	 * The amount (as a percentage) that components of abutting colors must vary before a trap is created. (Range: 1 to 100)
	 */
	stepThreshold: number

	/**
	 * The shape to use at the intersection of three-way traps.
	 */
	trapEnd: TrapEndTypes

	/**
	 * The join type of the trap preset.
	 */
	trapJoin: EndJoin

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the TrapPreset.
	 */
	duplicate(): TrapPreset

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TrapPreset[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the trap preset.
	 * @param replacingWith The trap preset to apply in place of the deleted preset.
	 */
	remove(replacingWith: TrapPreset): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TrapPreset.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of trap presets.
 */
declare class TrapPresets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TrapPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: TrapPreset

	/**
	 * Creates a new TrapPreset.
	 * @param withProperties Initial values for properties of the new TrapPreset
	 */
	add(withProperties: object): TrapPreset

	/**
	 * Returns any TrapPreset in the collection.
	 */
	anyItem(): TrapPreset

	/**
	 * Displays the number of elements in the TrapPreset.
	 */
	count(): number

	/**
	 * Returns every TrapPreset in the collection.
	 */
	everyItem(): TrapPreset[]

	/**
	 * Returns the first TrapPreset in the collection.
	 */
	firstItem(): TrapPreset

	/**
	 * Returns the TrapPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TrapPreset

	/**
	 * Returns the TrapPreset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TrapPreset

	/**
	 * Returns the TrapPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TrapPreset

	/**
	 * Returns the TrapPresets within the specified range.
	 * @param from The TrapPreset, index, or name at the beginning of the range.
	 * @param to The TrapPreset, index, or name at the end of the range.
	 */
	itemByRange(from: TrapPreset | number | string, to: TrapPreset | number | string): TrapPreset[]

	/**
	 * Returns the last TrapPreset in the collection.
	 */
	lastItem(): TrapPreset

	/**
	 * Returns the middle TrapPreset in the collection.
	 */
	middleItem(): TrapPreset

	/**
	 * Returns the TrapPreset whose index follows the specified TrapPreset in the collection.
	 * @param obj The TrapPreset whose index comes before the desired TrapPreset.
	 */
	nextItem(obj: TrapPreset): TrapPreset

	/**
	 * Returns the TrapPreset with the index previous to the specified index.
	 * @param obj The index of the TrapPreset that follows the desired TrapPreset.
	 */
	previousItem(obj: TrapPreset): TrapPreset

	/**
	 * Generates a string which, if executed, will return the TrapPreset.
	 */
	toSource(): string

}

/**
 * A mixed ink swatch.
 */
declare class MixedInk extends Swatch {
	/**
	 * The mixed ink group that a mixed ink swatch is based on.
	 */
	baseColor: MixedInkGroup

	/**
	 * The component inks.
	 */
	inkList: Ink[]

	/**
	 * The array of tint percentages for inks in the ink list. Note: Specify a value for each ink.
	 */
	inkPercentages: number[]

	/**
	 * The color model.
	 */
	model: ColorModel

	/**
	 * The color space.
	 */
	space: ColorSpace

}

/**
 * A collection of mixed inks.
 */
declare class MixedInks {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MixedInk with the specified index.
	 * @param index The index.
	 */
	[index: number]: MixedInk

	/**
	 * Creates a new mixed ink swatch.
	 * @param inkList The inks to mix. Note: Must contain at least two process inks and one spot ink.
	 * @param inkPercentages The percent to use of each ink in the ink list. (Range: 0 to 100 for each ink)
	 * @param withProperties Initial values for properties of the new MixedInk
	 */
	add(inkList: Ink[] | MixedInkGroup, inkPercentages: number[], withProperties: object): MixedInk

	/**
	 * Returns any MixedInk in the collection.
	 */
	anyItem(): MixedInk

	/**
	 * Displays the number of elements in the MixedInk.
	 */
	count(): number

	/**
	 * Returns every MixedInk in the collection.
	 */
	everyItem(): MixedInk[]

	/**
	 * Returns the first MixedInk in the collection.
	 */
	firstItem(): MixedInk

	/**
	 * Returns the MixedInk with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MixedInk

	/**
	 * Returns the MixedInk with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MixedInk

	/**
	 * Returns the MixedInk with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MixedInk

	/**
	 * Returns the MixedInks within the specified range.
	 * @param from The MixedInk, index, or name at the beginning of the range.
	 * @param to The MixedInk, index, or name at the end of the range.
	 */
	itemByRange(from: MixedInk | number | string, to: MixedInk | number | string): MixedInk[]

	/**
	 * Returns the last MixedInk in the collection.
	 */
	lastItem(): MixedInk

	/**
	 * Returns the middle MixedInk in the collection.
	 */
	middleItem(): MixedInk

	/**
	 * Returns the MixedInk whose index follows the specified MixedInk in the collection.
	 * @param obj The MixedInk whose index comes before the desired MixedInk.
	 */
	nextItem(obj: MixedInk): MixedInk

	/**
	 * Returns the MixedInk with the index previous to the specified index.
	 * @param obj The index of the MixedInk that follows the desired MixedInk.
	 */
	previousItem(obj: MixedInk): MixedInk

	/**
	 * Generates a string which, if executed, will return the MixedInk.
	 */
	toSource(): string

}

/**
 * A mixed ink group.
 */
declare class MixedInkGroup extends Swatch {
	/**
	 * The component inks.
	 */
	inkList: Ink[]

	/**
	 * The color model.
	 */
	model: ColorModel

}

/**
 * A collection of mixed ink groups.
 */
declare class MixedInkGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MixedInkGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: MixedInkGroup

	/**
	 * Creates a new mixed ink group.
	 * @param inkList The inks to include in the mix.
	 * @param inkPercentages The percent of each ink in the ink list. (Range: 0 to 100 for each ink)
	 * @param repeatValues The number of repetitions for each ink in the ink list. (Range: 0 to 100 for each ink)
	 * @param incrementValues The increment percent per repetition for each ink. (Range: 0 to 100) Note: The cumulative ink percentage per ink cannot exceed 100.)
	 * @param withProperties Initial values for properties of the new MixedInkGroup
	 */
	add(inkList: Ink[], inkPercentages: number[], repeatValues: number[], incrementValues: number[], withProperties: object): MixedInkGroup

	/**
	 * Returns any MixedInkGroup in the collection.
	 */
	anyItem(): MixedInkGroup

	/**
	 * Displays the number of elements in the MixedInkGroup.
	 */
	count(): number

	/**
	 * Returns every MixedInkGroup in the collection.
	 */
	everyItem(): MixedInkGroup[]

	/**
	 * Returns the first MixedInkGroup in the collection.
	 */
	firstItem(): MixedInkGroup

	/**
	 * Returns the MixedInkGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MixedInkGroup

	/**
	 * Returns the MixedInkGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MixedInkGroup

	/**
	 * Returns the MixedInkGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MixedInkGroup

	/**
	 * Returns the MixedInkGroups within the specified range.
	 * @param from The MixedInkGroup, index, or name at the beginning of the range.
	 * @param to The MixedInkGroup, index, or name at the end of the range.
	 */
	itemByRange(from: MixedInkGroup | number | string, to: MixedInkGroup | number | string): MixedInkGroup[]

	/**
	 * Returns the last MixedInkGroup in the collection.
	 */
	lastItem(): MixedInkGroup

	/**
	 * Returns the middle MixedInkGroup in the collection.
	 */
	middleItem(): MixedInkGroup

	/**
	 * Returns the MixedInkGroup whose index follows the specified MixedInkGroup in the collection.
	 * @param obj The MixedInkGroup whose index comes before the desired MixedInkGroup.
	 */
	nextItem(obj: MixedInkGroup): MixedInkGroup

	/**
	 * Returns the MixedInkGroup with the index previous to the specified index.
	 * @param obj The index of the MixedInkGroup that follows the desired MixedInkGroup.
	 */
	previousItem(obj: MixedInkGroup): MixedInkGroup

	/**
	 * Generates a string which, if executed, will return the MixedInkGroup.
	 */
	toSource(): string

}

/**
 * A gradient.
 */
declare class Gradient extends Swatch {
	/**
	 * A collection of gradient stops.
	 */
	gradientStops: GradientStops

	/**
	 * The gradient type.
	 */
	type: GradientType

}

/**
 * A collection of gradients.
 */
declare class Gradients {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Gradient with the specified index.
	 * @param index The index.
	 */
	[index: number]: Gradient

	/**
	 * Creates a new Gradient.
	 * @param withProperties Initial values for properties of the new Gradient
	 */
	add(withProperties: object): Gradient

	/**
	 * Returns any Gradient in the collection.
	 */
	anyItem(): Gradient

	/**
	 * Displays the number of elements in the Gradient.
	 */
	count(): number

	/**
	 * Returns every Gradient in the collection.
	 */
	everyItem(): Gradient[]

	/**
	 * Returns the first Gradient in the collection.
	 */
	firstItem(): Gradient

	/**
	 * Returns the Gradient with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Gradient

	/**
	 * Returns the Gradient with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Gradient

	/**
	 * Returns the Gradient with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Gradient

	/**
	 * Returns the Gradients within the specified range.
	 * @param from The Gradient, index, or name at the beginning of the range.
	 * @param to The Gradient, index, or name at the end of the range.
	 */
	itemByRange(from: Gradient | number | string, to: Gradient | number | string): Gradient[]

	/**
	 * Returns the last Gradient in the collection.
	 */
	lastItem(): Gradient

	/**
	 * Returns the middle Gradient in the collection.
	 */
	middleItem(): Gradient

	/**
	 * Returns the Gradient whose index follows the specified Gradient in the collection.
	 * @param obj The Gradient whose index comes before the desired Gradient.
	 */
	nextItem(obj: Gradient): Gradient

	/**
	 * Returns the Gradient with the index previous to the specified index.
	 * @param obj The index of the Gradient that follows the desired Gradient.
	 */
	previousItem(obj: Gradient): Gradient

	/**
	 * Generates a string which, if executed, will return the Gradient.
	 */
	toSource(): string

}

/**
 * A gradient stop in a gradient.
 */
declare class GradientStop {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the GradientStop within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The starting location (as a percentage of the gradient length) of the gradient stop on the gradient. (Range: 0 to 100).
	 */
	location: number

	/**
	 * The mid-point (as a percentage of the gradient length) of the gradient stop. (Range: 13 to 87)
	 */
	midpoint: number

	/**
	 * The parent of the GradientStop (a Gradient).
	 */
	parent: Gradient

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gradient stop.
	 */
	stopColor: MixedInk | Color

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): GradientStop[]

	/**
	 * Deletes the GradientStop.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the GradientStop.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of gradient stops.
 */
declare class GradientStops {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GradientStop with the specified index.
	 * @param index The index.
	 */
	[index: number]: GradientStop

	/**
	 * Creates a new GradientStop.
	 * @param withProperties Initial values for properties of the new GradientStop
	 */
	add(withProperties: object): GradientStop

	/**
	 * Returns any GradientStop in the collection.
	 */
	anyItem(): GradientStop

	/**
	 * Displays the number of elements in the GradientStop.
	 */
	count(): number

	/**
	 * Returns every GradientStop in the collection.
	 */
	everyItem(): GradientStop[]

	/**
	 * Returns the first GradientStop in the collection.
	 */
	firstItem(): GradientStop

	/**
	 * Returns the GradientStop with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GradientStop

	/**
	 * Returns the GradientStops within the specified range.
	 * @param from The GradientStop, index, or name at the beginning of the range.
	 * @param to The GradientStop, index, or name at the end of the range.
	 */
	itemByRange(from: GradientStop | number | string, to: GradientStop | number | string): GradientStop[]

	/**
	 * Returns the last GradientStop in the collection.
	 */
	lastItem(): GradientStop

	/**
	 * Returns the middle GradientStop in the collection.
	 */
	middleItem(): GradientStop

	/**
	 * Returns the GradientStop whose index follows the specified GradientStop in the collection.
	 * @param obj The GradientStop whose index comes before the desired GradientStop.
	 */
	nextItem(obj: GradientStop): GradientStop

	/**
	 * Returns the GradientStop with the index previous to the specified index.
	 * @param obj The index of the GradientStop that follows the desired GradientStop.
	 */
	previousItem(obj: GradientStop): GradientStop

	/**
	 * Generates a string which, if executed, will return the GradientStop.
	 */
	toSource(): string

}

/**
 * A swatch (color, gradient, tint, or mixed ink).
 */
declare class Swatch {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Swatch.
	 */
	id: number

	/**
	 * The index of the Swatch within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Swatch.
	 */
	name: string

	/**
	 * The parent of the Swatch (a Application or Document).
	 */
	parent: any

	/**
	 * The color group that a swatch belongs to
	 */
	parentColorGroup: ColorGroup

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the Swatch.
	 */
	duplicate(): Swatch

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Swatch[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Merges the specified swatches with the swatch.
	 * @param with_ The swatches to merge.
	 */
	merge(with_: Swatch[] | Swatch | string): Swatch

	/**
	 * Deletes the swatch.
	 * @param replacingWith The swatch to apply in place of the deleted swatch.
	 */
	remove(replacingWith: Swatch): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Swatch.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of swatches.
 */
declare class Swatches {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Swatch with the specified index.
	 * @param index The index.
	 */
	[index: number]: Swatch

	/**
	 * Returns any Swatch in the collection.
	 */
	anyItem(): Swatch

	/**
	 * Displays the number of elements in the Swatch.
	 */
	count(): number

	/**
	 * Returns every Swatch in the collection.
	 */
	everyItem(): Swatch[]

	/**
	 * Returns the first Swatch in the collection.
	 */
	firstItem(): Swatch

	/**
	 * Returns the Swatch with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Swatch

	/**
	 * Returns the Swatch with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Swatch

	/**
	 * Returns the Swatch with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Swatch

	/**
	 * Returns the Swatches within the specified range.
	 * @param from The Swatch, index, or name at the beginning of the range.
	 * @param to The Swatch, index, or name at the end of the range.
	 */
	itemByRange(from: Swatch | number | string, to: Swatch | number | string): Swatch[]

	/**
	 * Returns the last Swatch in the collection.
	 */
	lastItem(): Swatch

	/**
	 * Returns the middle Swatch in the collection.
	 */
	middleItem(): Swatch

	/**
	 * Returns the Swatch whose index follows the specified Swatch in the collection.
	 * @param obj The Swatch whose index comes before the desired Swatch.
	 */
	nextItem(obj: Swatch): Swatch

	/**
	 * Returns the Swatch with the index previous to the specified index.
	 * @param obj The index of the Swatch that follows the desired Swatch.
	 */
	previousItem(obj: Swatch): Swatch

	/**
	 * Generates a string which, if executed, will return the Swatch.
	 */
	toSource(): string

}

/**
 * A color swatch.
 */
declare class Color extends Swatch {
	/**
	 * The ink values that create the color, specified as a percentage for each ink. Note: The number of values required and the range depends on the color space. For RGB, specify three values, with each value in the range 0 to 255; for CMYK, specify four values representing C, M, Y, and K, with each value in the range 0 to 100; for LAB, specify three values representing L (Range: 0 to 100), A (Range: -128 to 127), and B (Range: -128 to 127); for mixed ink, specify values for each ink in the ink list, with each value in the range 0 to 100.
	 */
	colorValue: number[]

	/**
	 * The color model.
	 */
	model: ColorModel

	/**
	 * The color space.
	 */
	space: ColorSpace

}

/**
 * A collection of colors.
 */
declare class Colors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Color with the specified index.
	 * @param index The index.
	 */
	[index: number]: Color

	/**
	 * Creates a new Color.
	 * @param withProperties Initial values for properties of the new Color
	 */
	add(withProperties: object): Color

	/**
	 * Returns any Color in the collection.
	 */
	anyItem(): Color

	/**
	 * Displays the number of elements in the Color.
	 */
	count(): number

	/**
	 * Returns every Color in the collection.
	 */
	everyItem(): Color[]

	/**
	 * Returns the first Color in the collection.
	 */
	firstItem(): Color

	/**
	 * Returns the Color with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Color

	/**
	 * Returns the Color with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Color

	/**
	 * Returns the Color with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Color

	/**
	 * Returns the Colors within the specified range.
	 * @param from The Color, index, or name at the beginning of the range.
	 * @param to The Color, index, or name at the end of the range.
	 */
	itemByRange(from: Color | number | string, to: Color | number | string): Color[]

	/**
	 * Returns the last Color in the collection.
	 */
	lastItem(): Color

	/**
	 * Returns the middle Color in the collection.
	 */
	middleItem(): Color

	/**
	 * Returns the Color whose index follows the specified Color in the collection.
	 * @param obj The Color whose index comes before the desired Color.
	 */
	nextItem(obj: Color): Color

	/**
	 * Returns the Color with the index previous to the specified index.
	 * @param obj The index of the Color that follows the desired Color.
	 */
	previousItem(obj: Color): Color

	/**
	 * Generates a string which, if executed, will return the Color.
	 */
	toSource(): string

}

/**
 * A tint swatch.
 */
declare class Tint extends Color {
	/**
	 * The color that the tint is based on.
	 */
	baseColor: Color

	/**
	 * The percent of the base color. (Range: 0 to 100)
	 */
	tintValue: number

}

/**
 * A collection of tints.
 */
declare class Tints {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Tint with the specified index.
	 * @param index The index.
	 */
	[index: number]: Tint

	/**
	 * Creates a new tint swatch.
	 * @param baseColor The color that the tint is based upon.
	 * @param withProperties Initial values for properties of the new Tint
	 */
	add(baseColor: Color, withProperties: object): Tint

	/**
	 * Returns any Tint in the collection.
	 */
	anyItem(): Tint

	/**
	 * Displays the number of elements in the Tint.
	 */
	count(): number

	/**
	 * Returns every Tint in the collection.
	 */
	everyItem(): Tint[]

	/**
	 * Returns the first Tint in the collection.
	 */
	firstItem(): Tint

	/**
	 * Returns the Tint with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Tint

	/**
	 * Returns the Tint with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Tint

	/**
	 * Returns the Tint with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Tint

	/**
	 * Returns the Tints within the specified range.
	 * @param from The Tint, index, or name at the beginning of the range.
	 * @param to The Tint, index, or name at the end of the range.
	 */
	itemByRange(from: Tint | number | string, to: Tint | number | string): Tint[]

	/**
	 * Returns the last Tint in the collection.
	 */
	lastItem(): Tint

	/**
	 * Returns the middle Tint in the collection.
	 */
	middleItem(): Tint

	/**
	 * Returns the Tint whose index follows the specified Tint in the collection.
	 * @param obj The Tint whose index comes before the desired Tint.
	 */
	nextItem(obj: Tint): Tint

	/**
	 * Returns the Tint with the index previous to the specified index.
	 * @param obj The index of the Tint that follows the desired Tint.
	 */
	previousItem(obj: Tint): Tint

	/**
	 * Generates a string which, if executed, will return the Tint.
	 */
	toSource(): string

}

/**
 * A color group
 */
declare class ColorGroup {
	/**
	 * A collection of color group swatches.
	 */
	colorGroupSwatches: ColorGroupSwatches

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the ColorGroup.
	 */
	id: number

	/**
	 * The index of the ColorGroup within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the ColorGroup.
	 */
	name: string

	/**
	 * The parent of the ColorGroup (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the ColorGroup.
	 */
	duplicate(): ColorGroup

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ColorGroup[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the ColorGroup.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ColorGroup.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Ungroups a color group
	 */
	ungroup(): void

}

/**
 * A collection of color groups.
 */
declare class ColorGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ColorGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: ColorGroup

	/**
	 * Creates a new ColorGroup
	 * @param name The color group name
	 * @param swatchList The swatches to add in color group.
	 * @param withProperties Initial values for properties of the new ColorGroup
	 */
	add(name: string, swatchList: Swatch[], withProperties: object): ColorGroup

	/**
	 * Returns any ColorGroup in the collection.
	 */
	anyItem(): ColorGroup

	/**
	 * Displays the number of elements in the ColorGroup.
	 */
	count(): number

	/**
	 * Returns every ColorGroup in the collection.
	 */
	everyItem(): ColorGroup[]

	/**
	 * Returns the first ColorGroup in the collection.
	 */
	firstItem(): ColorGroup

	/**
	 * Returns the ColorGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ColorGroup

	/**
	 * Returns the ColorGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ColorGroup

	/**
	 * Returns the ColorGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ColorGroup

	/**
	 * Returns the ColorGroups within the specified range.
	 * @param from The ColorGroup, index, or name at the beginning of the range.
	 * @param to The ColorGroup, index, or name at the end of the range.
	 */
	itemByRange(from: ColorGroup | number | string, to: ColorGroup | number | string): ColorGroup[]

	/**
	 * Returns the last ColorGroup in the collection.
	 */
	lastItem(): ColorGroup

	/**
	 * Returns the middle ColorGroup in the collection.
	 */
	middleItem(): ColorGroup

	/**
	 * Returns the ColorGroup whose index follows the specified ColorGroup in the collection.
	 * @param obj The ColorGroup whose index comes before the desired ColorGroup.
	 */
	nextItem(obj: ColorGroup): ColorGroup

	/**
	 * Returns the ColorGroup with the index previous to the specified index.
	 * @param obj The index of the ColorGroup that follows the desired ColorGroup.
	 */
	previousItem(obj: ColorGroup): ColorGroup

	/**
	 * Generates a string which, if executed, will return the ColorGroup.
	 */
	toSource(): string

}

/**
 * A color group swatch.
 */
declare class ColorGroupSwatch {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the ColorGroupSwatch.
	 */
	id: number

	/**
	 * The index of the ColorGroupSwatch within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the ColorGroupSwatch (a ColorGroup).
	 */
	parent: ColorGroup

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The underlying swatch item
	 */
	swatchItemRef: Swatch

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ColorGroupSwatch[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ColorGroupSwatch.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of color group swatches.
 */
declare class ColorGroupSwatches {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ColorGroupSwatch with the specified index.
	 * @param index The index.
	 */
	[index: number]: ColorGroupSwatch

	/**
	 * Adds a color group swatch.
	 * @param swatchItemRef swatch to be added to color group
	 * @param withProperties Initial values for properties of the new ColorGroupSwatch
	 */
	add(swatchItemRef: Swatch, withProperties: object): ColorGroupSwatch

	/**
	 * Returns any ColorGroupSwatch in the collection.
	 */
	anyItem(): ColorGroupSwatch

	/**
	 * Displays the number of elements in the ColorGroupSwatch.
	 */
	count(): number

	/**
	 * Returns every ColorGroupSwatch in the collection.
	 */
	everyItem(): ColorGroupSwatch[]

	/**
	 * Returns the first ColorGroupSwatch in the collection.
	 */
	firstItem(): ColorGroupSwatch

	/**
	 * Returns the ColorGroupSwatch with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ColorGroupSwatch

	/**
	 * Returns the ColorGroupSwatch with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ColorGroupSwatch

	/**
	 * Returns the ColorGroupSwatches within the specified range.
	 * @param from The ColorGroupSwatch, index, or name at the beginning of the range.
	 * @param to The ColorGroupSwatch, index, or name at the end of the range.
	 */
	itemByRange(from: ColorGroupSwatch | number | string, to: ColorGroupSwatch | number | string): ColorGroupSwatch[]

	/**
	 * Returns the last ColorGroupSwatch in the collection.
	 */
	lastItem(): ColorGroupSwatch

	/**
	 * Returns the middle ColorGroupSwatch in the collection.
	 */
	middleItem(): ColorGroupSwatch

	/**
	 * Returns the ColorGroupSwatch whose index follows the specified ColorGroupSwatch in the collection.
	 * @param obj The ColorGroupSwatch whose index comes before the desired ColorGroupSwatch.
	 */
	nextItem(obj: ColorGroupSwatch): ColorGroupSwatch

	/**
	 * Returns the ColorGroupSwatch with the index previous to the specified index.
	 * @param obj The index of the ColorGroupSwatch that follows the desired ColorGroupSwatch.
	 */
	previousItem(obj: ColorGroupSwatch): ColorGroupSwatch

	/**
	 * Generates a string which, if executed, will return the ColorGroupSwatch.
	 */
	toSource(): string

}

/**
 * An opacity gradient stop.
 */
declare class OpacityGradientStop {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the OpacityGradientStop within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The location of the opacity gradient stop, as a percentage of the OpacityGradientStop size. (Range: 0 to 100)
	 */
	location: number

	/**
	 * The mid-point of the opacity gradient stop, as a percentage of the OpacityGradientStop size. (Range: 13 to 87)
	 */
	midpoint: number

	/**
	 * The opacity of the opacity gradient stop (as a percentage). (Range: 0 to 100)
	 */
	opacity: number

	/**
	 * The parent of the OpacityGradientStop (a GradientFeatherSetting or FindChangeGradientFeatherSetting).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): OpacityGradientStop[]

	/**
	 * Deletes the OpacityGradientStop.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the OpacityGradientStop.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of opacity gradient stops.
 */
declare class OpacityGradientStops {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the OpacityGradientStop with the specified index.
	 * @param index The index.
	 */
	[index: number]: OpacityGradientStop

	/**
	 * Creates a new OpacityGradientStop.
	 * @param withProperties Initial values for properties of the new OpacityGradientStop
	 */
	add(withProperties: object): OpacityGradientStop

	/**
	 * Returns any OpacityGradientStop in the collection.
	 */
	anyItem(): OpacityGradientStop

	/**
	 * Displays the number of elements in the OpacityGradientStop.
	 */
	count(): number

	/**
	 * Returns every OpacityGradientStop in the collection.
	 */
	everyItem(): OpacityGradientStop[]

	/**
	 * Returns the first OpacityGradientStop in the collection.
	 */
	firstItem(): OpacityGradientStop

	/**
	 * Returns the OpacityGradientStop with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): OpacityGradientStop

	/**
	 * Returns the OpacityGradientStops within the specified range.
	 * @param from The OpacityGradientStop, index, or name at the beginning of the range.
	 * @param to The OpacityGradientStop, index, or name at the end of the range.
	 */
	itemByRange(from: OpacityGradientStop | number | string, to: OpacityGradientStop | number | string): OpacityGradientStop[]

	/**
	 * Returns the last OpacityGradientStop in the collection.
	 */
	lastItem(): OpacityGradientStop

	/**
	 * Returns the middle OpacityGradientStop in the collection.
	 */
	middleItem(): OpacityGradientStop

	/**
	 * Returns the OpacityGradientStop whose index follows the specified OpacityGradientStop in the collection.
	 * @param obj The OpacityGradientStop whose index comes before the desired OpacityGradientStop.
	 */
	nextItem(obj: OpacityGradientStop): OpacityGradientStop

	/**
	 * Returns the OpacityGradientStop with the index previous to the specified index.
	 * @param obj The index of the OpacityGradientStop that follows the desired OpacityGradientStop.
	 */
	previousItem(obj: OpacityGradientStop): OpacityGradientStop

	/**
	 * Generates a string which, if executed, will return the OpacityGradientStop.
	 */
	toSource(): string

}

/**
 * An object that can contain a data merge text field.
 */
declare class DataMergeTextPlaceholder {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The data merge field to insert in the placeholder. For information, see data merge text placeholder and data merge image placeholder.
	 */
	field: DataMergeField

	/**
	 * The index of the DataMergeTextPlaceholder within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * The parent of the DataMergeTextPlaceholder (a Document).
	 */
	parent: Document

	/**
	 * The story that contains the text.
	 */
	parentStory: Story

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	storyOffset: InsertionPoint

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DataMergeTextPlaceholder[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the DataMergeTextPlaceholder.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of data merge text placeholders.
 */
declare class DataMergeTextPlaceholders {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DataMergeTextPlaceholder with the specified index.
	 * @param index The index.
	 */
	[index: number]: DataMergeTextPlaceholder

	/**
	 * Creates a data merge text placeholder.
	 * @param parentStory The story in which to insert the placeholder.
	 * @param storyOffset The position within the story at which to insert the placeholder, specified as an offset number or an insertion point.
	 * @param field The field to insert.
	 * @param withProperties Initial values for properties of the new DataMergeTextPlaceholder
	 */
	add(parentStory: Story, storyOffset: InsertionPoint | number, field: DataMergeField, withProperties: object): DataMergeTextPlaceholder

	/**
	 * Returns any DataMergeTextPlaceholder in the collection.
	 */
	anyItem(): DataMergeTextPlaceholder

	/**
	 * Displays the number of elements in the DataMergeTextPlaceholder.
	 */
	count(): number

	/**
	 * Returns every DataMergeTextPlaceholder in the collection.
	 */
	everyItem(): DataMergeTextPlaceholder[]

	/**
	 * Returns the first DataMergeTextPlaceholder in the collection.
	 */
	firstItem(): DataMergeTextPlaceholder

	/**
	 * Returns the DataMergeTextPlaceholder with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DataMergeTextPlaceholder

	/**
	 * Returns the DataMergeTextPlaceholders within the specified range.
	 * @param from The DataMergeTextPlaceholder, index, or name at the beginning of the range.
	 * @param to The DataMergeTextPlaceholder, index, or name at the end of the range.
	 */
	itemByRange(from: DataMergeTextPlaceholder | number | string, to: DataMergeTextPlaceholder | number | string): DataMergeTextPlaceholder[]

	/**
	 * Returns the last DataMergeTextPlaceholder in the collection.
	 */
	lastItem(): DataMergeTextPlaceholder

	/**
	 * Returns the middle DataMergeTextPlaceholder in the collection.
	 */
	middleItem(): DataMergeTextPlaceholder

	/**
	 * Returns the DataMergeTextPlaceholder whose index follows the specified DataMergeTextPlaceholder in the collection.
	 * @param obj The DataMergeTextPlaceholder whose index comes before the desired DataMergeTextPlaceholder.
	 */
	nextItem(obj: DataMergeTextPlaceholder): DataMergeTextPlaceholder

	/**
	 * Returns the DataMergeTextPlaceholder with the index previous to the specified index.
	 * @param obj The index of the DataMergeTextPlaceholder that follows the desired DataMergeTextPlaceholder.
	 */
	previousItem(obj: DataMergeTextPlaceholder): DataMergeTextPlaceholder

	/**
	 * Generates a string which, if executed, will return the DataMergeTextPlaceholder.
	 */
	toSource(): string

}

/**
 * An object that can contain a date merge image field.
 */
declare class DataMergeImagePlaceholder {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The data merge field to insert in the placeholder. For information, see data merge text placeholder and data merge image placeholder.
	 */
	field: DataMergeField

	/**
	 * The index of the DataMergeImagePlaceholder within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the DataMergeImagePlaceholder (a Document).
	 */
	parent: Document

	/**
	 * The page item on which to place the placeholder.
	 */
	placeholderPageItem: PageItem

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DataMergeImagePlaceholder[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the DataMergeImagePlaceholder.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of data merge image placeholders.
 */
declare class DataMergeImagePlaceholders {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DataMergeImagePlaceholder with the specified index.
	 * @param index The index.
	 */
	[index: number]: DataMergeImagePlaceholder

	/**
	 * Creates a data merge image placeholder.
	 * @param placeholder The page item on which to place the placeholder.
	 * @param field The data merge field to insert.
	 * @param withProperties Initial values for properties of the new DataMergeImagePlaceholder
	 */
	add(placeholder: PageItem, field: DataMergeField, withProperties: object): DataMergeImagePlaceholder

	/**
	 * Returns any DataMergeImagePlaceholder in the collection.
	 */
	anyItem(): DataMergeImagePlaceholder

	/**
	 * Displays the number of elements in the DataMergeImagePlaceholder.
	 */
	count(): number

	/**
	 * Returns every DataMergeImagePlaceholder in the collection.
	 */
	everyItem(): DataMergeImagePlaceholder[]

	/**
	 * Returns the first DataMergeImagePlaceholder in the collection.
	 */
	firstItem(): DataMergeImagePlaceholder

	/**
	 * Returns the DataMergeImagePlaceholder with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DataMergeImagePlaceholder

	/**
	 * Returns the DataMergeImagePlaceholders within the specified range.
	 * @param from The DataMergeImagePlaceholder, index, or name at the beginning of the range.
	 * @param to The DataMergeImagePlaceholder, index, or name at the end of the range.
	 */
	itemByRange(from: DataMergeImagePlaceholder | number | string, to: DataMergeImagePlaceholder | number | string): DataMergeImagePlaceholder[]

	/**
	 * Returns the last DataMergeImagePlaceholder in the collection.
	 */
	lastItem(): DataMergeImagePlaceholder

	/**
	 * Returns the middle DataMergeImagePlaceholder in the collection.
	 */
	middleItem(): DataMergeImagePlaceholder

	/**
	 * Returns the DataMergeImagePlaceholder whose index follows the specified DataMergeImagePlaceholder in the collection.
	 * @param obj The DataMergeImagePlaceholder whose index comes before the desired DataMergeImagePlaceholder.
	 */
	nextItem(obj: DataMergeImagePlaceholder): DataMergeImagePlaceholder

	/**
	 * Returns the DataMergeImagePlaceholder with the index previous to the specified index.
	 * @param obj The index of the DataMergeImagePlaceholder that follows the desired DataMergeImagePlaceholder.
	 */
	previousItem(obj: DataMergeImagePlaceholder): DataMergeImagePlaceholder

	/**
	 * Generates a string which, if executed, will return the DataMergeImagePlaceholder.
	 */
	toSource(): string

}

/**
 * A data merge field.
 */
declare class DataMergeField {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The name of the field.
	 */
	fieldName: string

	/**
	 * The source field type.
	 */
	fieldType: SourceFieldType

	/**
	 * The index of the DataMergeField within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the DataMergeField (a DataMerge).
	 */
	parent: DataMerge

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DataMergeField[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the DataMergeField.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of data merge fields.
 */
declare class DataMergeFields {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DataMergeField with the specified index.
	 * @param index The index.
	 */
	[index: number]: DataMergeField

	/**
	 * Returns any DataMergeField in the collection.
	 */
	anyItem(): DataMergeField

	/**
	 * Displays the number of elements in the DataMergeField.
	 */
	count(): number

	/**
	 * Returns every DataMergeField in the collection.
	 */
	everyItem(): DataMergeField[]

	/**
	 * Returns the first DataMergeField in the collection.
	 */
	firstItem(): DataMergeField

	/**
	 * Returns the DataMergeField with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DataMergeField

	/**
	 * Returns the DataMergeFields within the specified range.
	 * @param from The DataMergeField, index, or name at the beginning of the range.
	 * @param to The DataMergeField, index, or name at the end of the range.
	 */
	itemByRange(from: DataMergeField | number | string, to: DataMergeField | number | string): DataMergeField[]

	/**
	 * Returns the last DataMergeField in the collection.
	 */
	lastItem(): DataMergeField

	/**
	 * Returns the middle DataMergeField in the collection.
	 */
	middleItem(): DataMergeField

	/**
	 * Returns the DataMergeField whose index follows the specified DataMergeField in the collection.
	 * @param obj The DataMergeField whose index comes before the desired DataMergeField.
	 */
	nextItem(obj: DataMergeField): DataMergeField

	/**
	 * Returns the DataMergeField with the index previous to the specified index.
	 * @param obj The index of the DataMergeField that follows the desired DataMergeField.
	 */
	previousItem(obj: DataMergeField): DataMergeField

	/**
	 * Generates a string which, if executed, will return the DataMergeField.
	 */
	toSource(): string

}

/**
 * An object that can contain a date merge QR code field.
 */
declare class DataMergeQrcodePlaceholder {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The data merge field to insert in the placeholder. For information, see data merge text placeholder and data merge image placeholder.
	 */
	field: DataMergeField

	/**
	 * The index of the DataMergeQrcodePlaceholder within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the DataMergeQrcodePlaceholder (a Document).
	 */
	parent: Document

	/**
	 * The page item on which to place the placeholder.
	 */
	placeholderPageItem: PageItem

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DataMergeQrcodePlaceholder[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the DataMergeQrcodePlaceholder.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of data merge QR code placeholders.
 */
declare class DataMergeQrcodePlaceholders {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DataMergeQrcodePlaceholder with the specified index.
	 * @param index The index.
	 */
	[index: number]: DataMergeQrcodePlaceholder

	/**
	 * Creates a data merge QR code placeholder.
	 * @param placeholder The page item on which to place the placeholder.
	 * @param field The data merge field to insert.
	 * @param withProperties Initial values for properties of the new DataMergeQrcodePlaceholder
	 */
	add(placeholder: PageItem, field: DataMergeField, withProperties: object): DataMergeQrcodePlaceholder

	/**
	 * Returns any DataMergeQrcodePlaceholder in the collection.
	 */
	anyItem(): DataMergeQrcodePlaceholder

	/**
	 * Displays the number of elements in the DataMergeQrcodePlaceholder.
	 */
	count(): number

	/**
	 * Returns every DataMergeQrcodePlaceholder in the collection.
	 */
	everyItem(): DataMergeQrcodePlaceholder[]

	/**
	 * Returns the first DataMergeQrcodePlaceholder in the collection.
	 */
	firstItem(): DataMergeQrcodePlaceholder

	/**
	 * Returns the DataMergeQrcodePlaceholder with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DataMergeQrcodePlaceholder

	/**
	 * Returns the DataMergeQrcodePlaceholders within the specified range.
	 * @param from The DataMergeQrcodePlaceholder, index, or name at the beginning of the range.
	 * @param to The DataMergeQrcodePlaceholder, index, or name at the end of the range.
	 */
	itemByRange(from: DataMergeQrcodePlaceholder | number | string, to: DataMergeQrcodePlaceholder | number | string): DataMergeQrcodePlaceholder[]

	/**
	 * Returns the last DataMergeQrcodePlaceholder in the collection.
	 */
	lastItem(): DataMergeQrcodePlaceholder

	/**
	 * Returns the middle DataMergeQrcodePlaceholder in the collection.
	 */
	middleItem(): DataMergeQrcodePlaceholder

	/**
	 * Returns the DataMergeQrcodePlaceholder whose index follows the specified DataMergeQrcodePlaceholder in the collection.
	 * @param obj The DataMergeQrcodePlaceholder whose index comes before the desired DataMergeQrcodePlaceholder.
	 */
	nextItem(obj: DataMergeQrcodePlaceholder): DataMergeQrcodePlaceholder

	/**
	 * Returns the DataMergeQrcodePlaceholder with the index previous to the specified index.
	 * @param obj The index of the DataMergeQrcodePlaceholder that follows the desired DataMergeQrcodePlaceholder.
	 */
	previousItem(obj: DataMergeQrcodePlaceholder): DataMergeQrcodePlaceholder

	/**
	 * Generates a string which, if executed, will return the DataMergeQrcodePlaceholder.
	 */
	toSource(): string

}

/**
 * Story type options.
 */
declare enum StoryTypes {
	/**
	 * The story is an endnote story
	 */
	ENDNOTE_STORY = 1701737332,

	/**
	 * The story is an index.
	 */
	INDEXING_STORY = 1768190836,

	/**
	 * The story is a regular text story.
	 */
	REGULAR_STORY = 1919382388,

	/**
	 * The story is a table of contents.
	 */
	TOC_STORY = 1953461108,

}

/**
 * Story direction options.
 */
declare enum StoryDirectionOptions {
	/**
	 * Left to right direction.
	 */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,

	/**
	 * Right to left direction.
	 */
	RIGHT_TO_LEFT_DIRECTION = 1379028068,

	/**
	 * Unknown direction.
	 */
	UNKNOWN_DIRECTION = 1433299812,

}

/**
 * Style import options.
 */
declare enum ImportFormat {
	/**
	 * Imports cell styles.
	 */
	CELL_STYLES_FORMAT = 1698919284,

	/**
	 * Imports character styles.
	 */
	CHARACTER_STYLES_FORMAT = 1131565940,

	/**
	 * Imports named grids.
	 */
	NAMED_GRIDS_FORMAT = 1315394420,

	/**
	 * Imports object styles.
	 */
	OBJECT_STYLES_FORMAT = 1332368244,

	/**
	 * Imports paragraph styles.
	 */
	PARAGRAPH_STYLES_FORMAT = 1885885300,

	/**
	 * Imports stroke styles.
	 */
	STROKE_STYLES_FORMAT = 1817408620,

	/**
	 * Imports table and cell styles.
	 */
	TABLE_AND_CELL_STYLES_FORMAT = 1700021107,

	/**
	 * Imports table styles.
	 */
	TABLE_STYLES_FORMAT = 1700033396,

	/**
	 * Imports character and paragraph styles.
	 */
	TEXT_STYLES_FORMAT = 1668305780,

	/**
	 * Imports table of contents styles.
	 */
	TOC_STYLES_FORMAT = 1415795572,

}

/**
 * Delimiter options for marking the end of the application of the nested style.
 */
declare enum NestedStyleDelimiters {
	/**
	 * Uses the first character or characters other than zero-width markers as the nested style delimiter. Zero-width markers include anchors, index markers, XML tags, and so on.
	 */
	ANY_CHARACTER = 1380541539,

	/**
	 * Uses the first word or words in the paragraph as the nested style delimiter. The first word is considered all characters preceding the first space or white space character in the paragraph.
	 */
	ANY_WORD = 1380541559,

	/**
	 * Uses the first automatic page number as the nested style delimiter.
	 */
	AUTO_PAGE_NUMBER = 1396797550,

	/**
	 * Uses the first numeric character or characters as the nested style delimiter. Note: To specify the number of digits, see repetition.
	 */
	DIGITS = 1380541540,

	/**
	 * Uses the dropcap as the nested style delimiter.
	 */
	DROPCAP = 1380541507,

	/**
	 * Uses the first em space as the nested style delimiter.
	 */
	EM_SPACE = 1397058899,

	/**
	 * Uses the inserted end nested style here character as the nested style delimiter.
	 */
	END_NESTED_STYLE = 1396855379,

	/**
	 * Uses the first en space as the nested style delimiter.
	 */
	EN_SPACE = 1397059155,

	/**
	 * Uses the first forced line break as the nested style delimiter.
	 */
	FORCED_LINE_BREAK = 1397124194,

	/**
	 * Uses the first indent-to-here tab character as the nested style delimiter. Note: Does not use the first indent-to-here tab stop. If no actual indent-to-here tab character has been inserted in the paragraph, the nested style is applied through the end of the paragraph.
	 */
	INDENT_HERE_TAB = 1397319796,

	/**
	 * Uses the first inline graphic as the nested style delimiter.
	 */
	INLINE_GRAPHIC = 1380541545,

	/**
	 * Uses the first alpha character or characters as the nested style delimiter. Note: To specify the number of letters, see repetition.
	 */
	LETTERS = 1380541548,

	/**
	 * Uses the first nonbreaking space as the nested style delimiter.
	 */
	NONBREAKING_SPACE = 1397645907,

	/**
	 * Repeat
	 */
	REPEAT = 1380545132,

	/**
	 * Uses the first section name marker as the nested style delimiter.
	 */
	SECTION_MARKER = 1400073805,

	/**
	 * Uses the first sentence or sentences in the paragraph as the nested style delimiter. The first sentence is considered all text preceding the first period, question mark, or exclamation mark in the paragraph.
	 */
	SENTENCE = 1380541555,

	/**
	 * Uses the first tab character as the nested style delimiter. Note: Does not use the first tab stop. If no actual tab character has been inserted in the paragraph, the nested style is applied through the end of the paragraph.
	 */
	TABS = 1380541556,

}

/**
 * Options for specifying an object on which to base the width of the paragraph rule above.
 */
declare enum RuleWidth {
	/**
	 * Makes the rule the width of the column.
	 */
	COLUMN_WIDTH = 1265399652,

	/**
	 * Makes the paragraph rule above the width of the first line of text in the paragraph.
	 */
	TEXT_WIDTH = 1886681207,

}

/**
 * Text alignment options.
 */
declare enum Justification {
	/**
	 * Aligns text to the side opposite the binding spine of the page.
	 */
	AWAY_FROM_BINDING_SIDE = 1633772147,

	/**
	 * Center aligns the text.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Justifies text text and center aligns the last line in the paragraph.
	 */
	CENTER_JUSTIFIED = 1667920756,

	/**
	 * Justifies the text, including the last line in the paragraph.
	 */
	FULLY_JUSTIFIED = 1718971500,

	/**
	 * Left aligns the text.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Justifies the text and left aligns the last line in the paragraph.
	 */
	LEFT_JUSTIFIED = 1818915700,

	/**
	 * Right aligns the text.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Justifies the text and right aligns the last line in the paragraph.
	 */
	RIGHT_JUSTIFIED = 1919578996,

	/**
	 * Aligns text to the binding spine of the page or spread.
	 */
	TO_BINDING_SIDE = 1630691955,

}

/**
 * Alignment options for lines that contain a single word.
 */
declare enum SingleWordJustification {
	/**
	 * Center aligns the word.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Fully justifies the word.
	 */
	FULLY_JUSTIFIED = 1718971500,

	/**
	 * Left aligns the word.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Right aligns the word.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Column and page break options.
 */
declare enum StartParagraph {
	/**
	 * Starts in the next available space.
	 */
	ANYWHERE = 1851945579,

	/**
	 * Starts at the top of the next column.
	 */
	NEXT_COLUMN = 1667396203,

	/**
	 * Starts at the top of the next even-numbered page.
	 */
	NEXT_EVEN_PAGE = 1164993131,

	/**
	 * Starts at the top of the next text frame in the thread.
	 */
	NEXT_FRAME = 1313235563,

	/**
	 * Starts at the top of the next odd-numbered page.
	 */
	NEXT_ODD_PAGE = 1332765291,

	/**
	 * Starts at the top of the next page.
	 */
	NEXT_PAGE = 1885500011,

}

/**
 * Text frame type options.
 */
declare enum FrameTypes {
	/**
	 * A frame grid.
	 */
	FRAME_GRID_TYPE = 1179087984,

	/**
	 * A text frame.
	 */
	TEXT_FRAME_TYPE = 1417176692,

	/**
	 * The frame type is not known.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Orientation options.
 */
declare enum HorizontalOrVertical {
	/**
	 * Horizontal orientation.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * Vertical orientation.
	 */
	VERTICAL = 1986359924,

}

/**
 * Tab stop alignment options.
 */
declare enum TabStopAlignment {
	/**
	 * Center.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Aligns the specified character with the tab stop.
	 */
	CHARACTER_ALIGN = 1952604515,

	/**
	 * Left.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Right.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Starting point options for the first baseline of text.
 */
declare enum FirstBaseline {
	/**
	 * The tallest character in the font falls below the top inset of the object.
	 */
	ASCENT_OFFSET = 1296135023,

	/**
	 * The tops of upper case letters touch the top inset of the object.
	 */
	CAP_HEIGHT = 1296255087,

	/**
	 * The text em box height is the distance between the baseline of the text and the top inset of the object.
	 */
	EMBOX_HEIGHT = 1296386159,

	/**
	 * Uses the value specified for minimum first baseline offset as the distance between the baseline of the text and the top inset of the object.
	 */
	FIXED_HEIGHT = 1313228911,

	/**
	 * The text leading value defines the distance between the baseline of the text and the top inset of the object.
	 */
	LEADING_OFFSET = 1296852079,

	/**
	 * The tops of lower case letters touch the top inset of the object.
	 */
	X_HEIGHT = 1299728495,

}

/**
 * Vertical alignment options for text.
 */
declare enum VerticalJustification {
	/**
	 * Text is aligned at the bottom of the object.
	 */
	BOTTOM_ALIGN = 1651471469,

	/**
	 * Text is center aligned vertically in the object.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Lines of text are evenly distributed vertically between the top and bottom of the object.
	 */
	JUSTIFY_ALIGN = 1785951334,

	/**
	 * Text is aligned at the top of the object.
	 */
	TOP_ALIGN = 1953460256,

}

/**
 * Leading type options.
 */
declare enum Leading {
	/**
	 * Apply auto leading.
	 */
	AUTO = 1635019116,

}

/**
 * Figure style options for OpenType fonts.
 */
declare enum OTFFigureStyle {
	/**
	 * Use the default figure style for the font.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Use proportional width lining figures.
	 */
	PROPORTIONAL_LINING = 1330932848,

	/**
	 * Use proportional width oldstyle figures.
	 */
	PROPORTIONAL_OLDSTYLE = 1330933619,

	/**
	 * Use monspaced lining figures.
	 */
	TABULAR_LINING = 1330931316,

	/**
	 * Use monospaced oldstyle figures.
	 */
	TABULAR_OLDSTYLE = 1330933620,

}

/**
 * Capitalization options.
 */
declare enum Capitalization {
	/**
	 * Use all uppercase letters.
	 */
	ALL_CAPS = 1634493296,

	/**
	 * Use OpenType small caps.
	 */
	CAP_TO_SMALL_CAP = 1664250723,

	/**
	 * Do not change the capitalization of the text.
	 */
	NORMAL = 1852797549,

	/**
	 * Use small caps for lowercase letters.
	 */
	SMALL_CAPS = 1936548720,

}

/**
 * Text position options.
 */
declare enum Position {
	/**
	 * Normal position
	 */
	NORMAL = 1852797549,

	/**
	 * For OpenType fonts, shrinks the text but keeps text on the main text baseline. Note: Valid only for numeric characters.
	 */
	OT_DENOMINATOR = 1884247140,

	/**
	 * For OpenType fonts, shrinks the text but keeps the top of the characters aligned with the top of the main text. Note: Valid only for numeric characters.
	 */
	OT_NUMERATOR = 1884247150,

	/**
	 * For OpenType fonts, uses--if available--lowered glyphs that are sized correctly relative to the surrounding characters.
	 */
	OT_SUBSCRIPT = 1884247138,

	/**
	 * For OpenType fonts, uses--if available--raised glyphs that are sized correctly relative to the surrounding characters.
	 */
	OT_SUPERSCRIPT = 1884247155,

	/**
	 * Subscripts the text.
	 */
	SUBSCRIPT = 1935831907,

	/**
	 * Superscripts the text.
	 */
	SUPERSCRIPT = 1936749411,

}

/**
 * Text frame content type options.
 */
declare enum TextFrameContents {
	/**
	 * Fills the text frame with placeholder text.
	 */
	PLACEHOLDER_TEXT = 1346925688,

	/**
	 * Fills the text frame with arabic placeholder text.
	 */
	PLACEHOLDER_TEXT_ARABIC = 1346925665,

	/**
	 * Fills the text frame with cyrillic placeholder text.
	 */
	PLACEHOLDER_TEXT_CYRILLIC = 1346925667,

	/**
	 * Fills the text frame with greek placeholder text.
	 */
	PLACEHOLDER_TEXT_GREEK = 1346925671,

	/**
	 * Fills the text frame with hebrew placeholder text.
	 */
	PLACEHOLDER_TEXT_HEBREW = 1346925672,

}

/**
 * Special character options.
 */
declare enum SpecialCharacters {
	/**
	 * Inserts an arabic comma.
	 */
	ARABIC_COMMA = 1396798051,

	/**
	 * Inserts an arabic kashida.
	 */
	ARABIC_KASHIDA = 1396798059,

	/**
	 * Inserts an arabic question mark.
	 */
	ARABIC_QUESTION_MARK = 1396797805,

	/**
	 * Inserts an arabic semicolon.
	 */
	ARABIC_SEMICOLON = 1396798307,

	/**
	 * Inserts an automatic page number.
	 */
	AUTO_PAGE_NUMBER = 1396797550,

	/**
	 * Inserts a bullet character.
	 */
	BULLET_CHARACTER = 1396862068,

	/**
	 * Inserts a column break.
	 */
	COLUMN_BREAK = 1396927554,

	/**
	 * Inserts a copyright symbol.
	 */
	COPYRIGHT_SYMBOL = 1396929140,

	/**
	 * Inserts a degree symbol.
	 */
	DEGREE_SYMBOL = 1396991858,

	/**
	 * Inserts a discretionary hyphen.
	 */
	DISCRETIONARY_HYPHEN = 1396983920,

	/**
	 * Inserts a discretionary line break.
	 */
	DISCRETIONARY_LINE_BREAK = 1397777484,

	/**
	 * Inserts a dotted circle.
	 */
	DOTTED_CIRCLE = 1399092323,

	/**
	 * Inserts a double left quote.
	 */
	DOUBLE_LEFT_QUOTE = 1396984945,

	/**
	 * Inserts a double right quote.
	 */
	DOUBLE_RIGHT_QUOTE = 1396986481,

	/**
	 * Inserts a double straight quote.
	 */
	DOUBLE_STRAIGHT_QUOTE = 1396986737,

	/**
	 * Inserts an ellipsis character.
	 */
	ELLIPSIS_CHARACTER = 1397518451,

	/**
	 * Inserts an em dash.
	 */
	EM_DASH = 1397058884,

	/**
	 * Inserts an em space.
	 */
	EM_SPACE = 1397058899,

	/**
	 * Inserts an end nested style here character.
	 */
	END_NESTED_STYLE = 1396855379,

	/**
	 * Inserts an en dash.
	 */
	EN_DASH = 1397059140,

	/**
	 * Inserts an en space.
	 */
	EN_SPACE = 1397059155,

	/**
	 * Inserts a break to the next even page.
	 */
	EVEN_PAGE_BREAK = 1397059650,

	/**
	 * Inserts a figure space.
	 */
	FIGURE_SPACE = 1397122899,

	/**
	 * Inserts a fixed-width nonbreaking space.
	 */
	FIXED_WIDTH_NONBREAKING_SPACE = 1399746146,

	/**
	 * Inserts a flush space.
	 */
	FLUSH_SPACE = 1397124179,

	/**
	 * Inserts a footnote symbol.
	 */
	FOOTNOTE_SYMBOL = 1399221837,

	/**
	 * Inserts a forced line break.
	 */
	FORCED_LINE_BREAK = 1397124194,

	/**
	 * Inserts a frame break.
	 */
	FRAME_BREAK = 1397125698,

	/**
	 * Inserts a hair space.
	 */
	HAIR_SPACE = 1397256787,

	/**
	 * Inserts a hebrew geresh.
	 */
	HEBREW_GERESH = 1397253989,

	/**
	 * Inserts a hebrew gershayim.
	 */
	HEBREW_GERSHAYIM = 1397254003,

	/**
	 * Inserts a hebrew maqaf.
	 */
	HEBREW_MAQAF = 1397252717,

	/**
	 * Inserts a hebrew sof pasuk.
	 */
	HEBREW_SOF_PASUK = 1397252723,

	/**
	 * Inserts an indent to here character.
	 */
	INDENT_HERE_TAB = 1397319796,

	/**
	 * Inserts a left to right embedding mark.
	 */
	LEFT_TO_RIGHT_EMBEDDING = 1399616101,

	/**
	 * Inserts a left to right mark.
	 */
	LEFT_TO_RIGHT_MARK = 1399616109,

	/**
	 * Inserts a left to right override mark.
	 */
	LEFT_TO_RIGHT_OVERRIDE = 1399616111,

	/**
	 * Inserts the next page number.
	 */
	NEXT_PAGE_NUMBER = 1397649518,

	/**
	 * Inserts a nonbreaking hyphen.
	 */
	NONBREAKING_HYPHEN = 1397645928,

	/**
	 * Inserts a nonbreaking space.
	 */
	NONBREAKING_SPACE = 1397645907,

	/**
	 * Inserts a break to the next odd page.
	 */
	ODD_PAGE_BREAK = 1397715010,

	/**
	 * Inserts a page break.
	 */
	PAGE_BREAK = 1397778242,

	/**
	 * Inserts a paragraph symbol.
	 */
	PARAGRAPH_SYMBOL = 1397776754,

	/**
	 * Inserts a pop directional formatting mark.
	 */
	POP_DIRECTIONAL_FORMATTING = 1399874662,

	/**
	 * Inserts the previous page number.
	 */
	PREVIOUS_PAGE_NUMBER = 1397780590,

	/**
	 * Inserts a punctuation space.
	 */
	PUNCTUATION_SPACE = 1397780051,

	/**
	 * Inserts a quarter-width space.
	 */
	QUARTER_SPACE = 1397847379,

	/**
	 * Inserts a registered trademark.
	 */
	REGISTERED_TRADEMARK = 1397904493,

	/**
	 * Inserts a right indent tab.
	 */
	RIGHT_INDENT_TAB = 1397909876,

	/**
	 * Inserts a right to left embedding mark.
	 */
	RIGHT_TO_LEFT_EMBEDDING = 1400007781,

	/**
	 * Inserts a right to left mark.
	 */
	RIGHT_TO_LEFT_MARK = 1400007789,

	/**
	 * Inserts a right to left override mark.
	 */
	RIGHT_TO_LEFT_OVERRIDE = 1400007791,

	/**
	 * Inserts a section marker.
	 */
	SECTION_MARKER = 1400073805,

	/**
	 * Inserts a section symbol.
	 */
	SECTION_SYMBOL = 1400073811,

	/**
	 * Inserts a single left quote.
	 */
	SINGLE_LEFT_QUOTE = 1397967985,

	/**
	 * Inserts a single right quote.
	 */
	SINGLE_RIGHT_QUOTE = 1397969521,

	/**
	 * Inserts a single straight quote.
	 */
	SINGLE_STRAIGHT_QUOTE = 1397969777,

	/**
	 * Inserts a sixth-width space.
	 */
	SIXTH_SPACE = 1397975379,

	/**
	 * Inserts the specified text variable.
	 */
	TEXT_VARIABLE = 1397781622,

	/**
	 * Inserts a thin space.
	 */
	THIN_SPACE = 1398042195,

	/**
	 * Inserts a third-width space.
	 */
	THIRD_SPACE = 1398040659,

	/**
	 * Inserts a trademark symbol.
	 */
	TRADEMARK_SYMBOL = 1398041963,

	/**
	 * Inserts a zero width joiner.
	 */
	ZERO_WIDTH_JOINER = 1400534890,

	/**
	 * Inserts a zero-width non-joiner.
	 */
	ZERO_WIDTH_NONJOINER = 1397780074,

}

/**
 * Text case options.
 */
declare enum ChangecaseMode {
	/**
	 * Makes all letters lowercase.
	 */
	LOWERCASE = 1667460195,

	/**
	 * Makes the first letter of each sentence uppercase.
	 */
	SENTENCECASE = 1667461987,

	/**
	 * Makes the first letter of each word uppercase.
	 */
	TITLECASE = 1667462243,

	/**
	 * Makes all letters uppercase.
	 */
	UPPERCASE = 1667462499,

}

/**
 * The location of the binding spine in a spread.
 */
declare enum BindingOptions {
	/**
	 * Uses the default binding side.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Moves the page to the left side of the spread's binding spine.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Moves the page to the right side of the spread's binding spine.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Page orientation options.
 */
declare enum PageOrientation {
	/**
	 * Landscape.
	 */
	LANDSCAPE = 2003395685,

	/**
	 * Portrait.
	 */
	PORTRAIT = 1751738216,

}

/**
 * Zero point placement options.
 */
declare enum RulerOrigin {
	/**
	 * The top-left corner of each page is a new zero point on the horizontal ruler.
	 */
	PAGE_ORIGIN = 1380143215,

	/**
	 * The zero point is at the top-left corner of the left-most page and at the top of the binding spine. The horizontal ruler measures from the leftmost page to the binding edge, and from the binding spine through the right edge of the right-most page. Also locks the zero point and prevents manual overrides.
	 */
	SPINE_ORIGIN = 1380143984,

	/**
	 * The zero point is at the top-left corner of the spread and the ruler increments continuously across all pages of the spread.
	 */
	SPREAD_ORIGIN = 1380143983,

}

/**
 * The unit of measurement.
 */
declare enum MeasurementUnits {
	/**
	 * Agates
	 */
	AGATES = 2051106676,

	/**
	 * American points.
	 */
	AMERICAN_POINTS = 1514238068,

	/**
	 * Bai
	 */
	BAI = 2051170665,

	/**
	 * Centimeters.
	 */
	CENTIMETERS = 2053336435,

	/**
	 * Ciceros.
	 */
	CICEROS = 2053335395,

	/**
	 * Uses points as the unit of measurement and specifies the number of points between major tick marks on the specified ruler. For information, see horizontal custom points and vertical custom points.
	 */
	CUSTOM = 1131639917,

	/**
	 * Ha.
	 */
	HA = 1516790048,

	/**
	 * Inches.
	 */
	INCHES = 2053729891,

	/**
	 * Decimal inches.
	 */
	INCHES_DECIMAL = 2053729892,

	/**
	 * Millimeters.
	 */
	MILLIMETERS = 2053991795,

	/**
	 * Mils
	 */
	MILS = 2051893612,

	/**
	 * Picas.
	 */
	PICAS = 2054187363,

	/**
	 * Pixels.
	 */
	PIXELS = 2054187384,

	/**
	 * Points.
	 */
	POINTS = 2054188905,

	/**
	 * Q.
	 */
	Q = 2054255973,

	/**
	 * U
	 */
	U = 2051691808,

}

/**
 * The page binding placement.
 */
declare enum PageBindingOptions {
	/**
	 * Uses default page binding.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Pages are bound on the left.
	 */
	LEFT_TO_RIGHT = 1819570786,

	/**
	 * Pages are bound on the right.
	 */
	RIGHT_TO_LEFT = 1920232546,

}

/**
 * The zero point for the baseline grid offset.
 */
declare enum BaselineGridRelativeOption {
	/**
	 * The baseline grid offset zero point is at the top page margin.
	 */
	TOP_OF_MARGIN_OF_BASELINE_GRID_RELATIVE_OPTION = 1162766189,

	/**
	 * The baseline grid offset zero point is at the top of the page.
	 */
	TOP_OF_PAGE_OF_BASELINE_GRID_RELATIVE_OPTION = 1162766196,

}

/**
 * Binding spine placement options.
 */
declare enum PageSideOptions {
	/**
	 * The page is on the left side of the binding spine in the spread.
	 */
	LEFT_HAND = 1818653800,

	/**
	 * The page is on the right side of the binding spine in the spread.
	 */
	RIGHT_HAND = 1919382632,

	/**
	 * The page is a single-sided page.
	 */
	SINGLE_SIDED = 1970496888,

}

/**
 * Scaling options.
 */
declare enum WhenScalingOptions {
	/**
	 * Adjust the scaling percentage of the item's transform
	 */
	ADJUST_SCALING_PERCENTAGE = 1934587252,

	/**
	 * Apply scaling to the item's content
	 */
	APPLY_TO_CONTENT = 1934192243,

}

/**
 * Options for page color label.
 */
declare enum PageColorOptions {
	/**
	 * No color.
	 */
	NOTHING = 1851876449,

	/**
	 * Uses the color label of the page's master page.
	 */
	USE_MASTER_COLOR = 1346594413,

}

/**
 * Options for document intent.
 */
declare enum DocumentIntentOptions {
	/**
	 * Intended purpose of document is for publishing to mobiles.
	 */
	MOBILE_INTENT = 1768846445,

	/**
	 * Intended purpose of document is for print output.
	 */
	PRINT_INTENT = 1768846448,

	/**
	 * Intended purpose of document is for web output.
	 */
	WEB_INTENT = 1768846455,

}

/**
 * Options for setting the layout rule on a page.
 */
declare enum LayoutRuleOptions {
	/**
	 * Use guide slicing to resize objects on the page as it resizes.
	 */
	GUIDE_BASED = 1280329538,

	/**
	 * Reposition and resize objects on the page as it resizes.
	 */
	OBJECT_BASED = 1280331586,

	/**
	 * No layout rule on the page as it resizes.
	 */
	OFF = 1330005536,

	/**
	 * Use existing layout rule setting on the page. Used for creating alternate layouts.
	 */
	PRESERVE_EXISTING = 1280331890,

	/**
	 * Recenter objects on the page as it resizes.
	 */
	RECENTER = 1280332387,

	/**
	 * Scale objects on the page as it resizes.
	 */
	SCALE = 1280332643,

	/**
	 * Use layout rule from the page's applied master page.
	 */
	USE_MASTER = 1280333133,

}

/**
 * Modes that control which nearby snapshots, by size and shape, are blended into the new layout.
 */
declare enum SnapshotBlendingModes {
	/**
	 * Use up to three nearest snapshots even if a snapshot is in a different class that the new layout.
	 */
	FULL_SNAPSHOT_BLENDING = 1399735925,

	/**
	 * Turns off the influence of layout snapshots completely.
	 */
	IGNORE_LAYOUT_SNAPSHOTS = 1399736679,

	/**
	 * Use only layout snapshots within the same class as the new layout.
	 */
	LIMITED_SNAPSHOT_BLENDING = 1399737449,

	/**
	 * Use the layout snapshot nearest in size and shape to the new layout.
	 */
	USE_NEAREST_SNAPSHOT = 1399737957,

}

/**
 * Color space options for representing color in the exported EPS.
 */
declare enum EPSColorSpace {
	/**
	 * Creates a separable file by representing all color values using the gamut of CYMK process color inks.
	 */
	CMYK = 1129142603,

	/**
	 * Converts all color values to high-quality black-and-white images. Gray levels of the converted objects represent the luminosity of the original objects.
	 */
	GRAY = 1766290041,

	/**
	 * Uses PostScript color management (includes profiles).
	 */
	POSTSCRIPT_COLOR_MANAGEMENT = 1164208483,

	/**
	 * Represents all color values using the RGB color space. Best suited for documents that will be viewed on-screen.
	 */
	RGB = 1666336578,

	/**
	 * Leaves each image in its original color space.
	 */
	UNCHANGED_COLOR_SPACE = 1970161251,

}

/**
 * Preview image file format options.
 */
declare enum PreviewTypes {
	/**
	 * Does not save a preview image.
	 */
	NONE = 1852796517,

	/**
	 * Saves the preview in PICT format. Note: Valid only for Mac OS.
	 */
	PICT_PREVIEW = 1164996724,

	/**
	 * Saves the preview in TIFF format.
	 */
	TIFF_PREVIEW = 1164997734,

}

/**
 * Options for embedding fonts in the exported EPS.
 */
declare enum FontEmbedding {
	/**
	 * Embeds all fonts once per page.
	 */
	COMPLETE = 2003332197,

	/**
	 * Embeds only references to fonts.
	 */
	NONE = 1852796517,

	/**
	 * Embeds only the characters (glyphs) used in the document. Glyphs are downloaded once per page.
	 */
	SUBSET = 1768842098,

}

/**
 * Page scaling options.
 */
declare enum ScaleModes {
	/**
	 * Scales the page to fit the paper. Note: Valid only when tile is false.
	 */
	SCALE_TO_FIT = 1935897702,

	/**
	 * Scales the page width and height.
	 */
	SCALE_WIDTH_HEIGHT = 1935898745,

}

/**
 * Print layer options
 */
declare enum PrintLayerOptions {
	/**
	 * Prints all layers.
	 */
	ALL_LAYERS = 1634495564,

	/**
	 * Prints all visible layers.
	 */
	VISIBLE_LAYERS = 1986622284,

	/**
	 * Prints only layers that are both visible and printable.
	 */
	VISIBLE_PRINTABLE_LAYERS = 1987080780,

}

/**
 * The enumeration of tool box tools.
 */
declare enum UITools {
	/**
	 * The add anchor point tool
	 */
	ADD_ANCHOR_POINT = 1633767540,

	/**
	 * The convert direction point tool
	 */
	CONVERT_DIRECTION_POINT = 1667518580,

	/**
	 * The delete anchor point tool
	 */
	DELETE_ANCHOR_POINT = 1684099188,

	/**
	 * The direct selection tool
	 */
	DIRECT_SELECTION_TOOL = 1685277812,

	/**
	 * The ellipse frame tool
	 */
	ELLIPSE_FRAME_TOOL = 1701205100,

	/**
	 * The ellipse tool
	 */
	ELLIPSE_TOOL = 1701598316,

	/**
	 * The erase tool
	 */
	ERASE_TOOL = 1701991269,

	/**
	 * The eye dropper tool
	 */
	EYE_DROPPER_TOOL = 1701074028,

	/**
	 * The free transform tool
	 */
	FREE_TRANSFORM_TOOL = 1718899820,

	/**
	 * The gap tool
	 */
	GAP_TOOL = 1734430836,

	/**
	 * The gradient feather tool
	 */
	GRADIENT_FEATHER_TOOL = 1734759532,

	/**
	 * The gradient swatch tool
	 */
	GRADIENT_SWATCH_TOOL = 1735611500,

	/**
	 * The hand tool
	 */
	HAND_TOOL = 1751209068,

	/**
	 * The horizontal grid tool
	 */
	HORIZONTAL_GRID_TOOL = 1751602284,

	/**
	 * The line tool
	 */
	LINE_TOOL = 1819169900,

	/**
	 * The measure tool
	 */
	MEASURE_TOOL = 1835357292,

	/**
	 * The motion path tool
	 */
	MOTION_PATH_TOOL = 1836078188,

	/**
	 * No selection
	 */
	NONE = 1852796517,

	/**
	 * The note tool
	 */
	NOTE_TOOL = 1852789868,

	/**
	 * The page tool
	 */
	PAGE_TOOL = 1936741484,

	/**
	 * The pencil tool
	 */
	PENCIL_TOOL = 1886274412,

	/**
	 * The pen tool
	 */
	PEN_TOOL = 1885687412,

	/**
	 * The place cursor tool which gets set after an import via the Place command
	 */
	PLACE_CURSOR_TOOL = 1885557868,

	/**
	 * The polygon frame tool
	 */
	POLYGON_FRAME_TOOL = 1885754476,

	/**
	 * The polygon tool
	 */
	POLYGON_TOOL = 1886147692,

	/**
	 * The rectangle frame tool
	 */
	RECTANGLE_FRAME_TOOL = 1919308908,

	/**
	 * The rectangle tool
	 */
	RECTANGLE_TOOL = 1919243372,

	/**
	 * The rotate tool
	 */
	ROTATE_TOOL = 1919898732,

	/**
	 * The scale tool
	 */
	SCALE_TOOL = 1935889516,

	/**
	 * The scissors tool
	 */
	SCISSORS_TOOL = 1935891060,

	/**
	 * The selection tool
	 */
	SELECTION_TOOL = 1936018548,

	/**
	 * The shear tool
	 */
	SHEAR_TOOL = 1936217196,

	/**
	 * The smooth tool
	 */
	SMOOTH_TOOL = 1936544872,

	/**
	 * The table creation tool
	 */
	TABLE_TOOL = 1952601196,

	/**
	 * The type on a path tool
	 */
	TYPE_ON_PATH_TOOL = 1953452148,

	/**
	 * The type tool
	 */
	TYPE_TOOL = 1954107508,

	/**
	 * The vertical grid tool
	 */
	VERTICAL_GRID_TOOL = 1986483308,

	/**
	 * The vertical type on a path tool
	 */
	VERTICAL_TYPE_ON_PATH_TOOL = 1987334000,

	/**
	 * The vertical type tool
	 */
	VERTICAL_TYPE_TOOL = 1987335276,

	/**
	 * The zoom tool
	 */
	ZOOM_TOOL = 2053985388,

}

/**
 * Resolution options when loaded master pages have the same name as existing masterpages.
 */
declare enum GlobalClashResolutionStrategyForMasterPage {
	/**
	 * Overwrites the existing master page.
	 */
	LOAD_ALL_WITH_OVERWRITE = 1279350607,

	/**
	 * Renames the new master page.
	 */
	LOAD_ALL_WITH_RENAME = 1279350610,

}

/**
 * The type of clipping path to create.
 */
declare enum ClippingPathType {
	/**
	 * The clipping path is based on an alpha channel defined for the graphic in a graphics application.
	 */
	ALPHA_CHANNEL = 1634756707,

	/**
	 * The clipping path is based on pixel value threshold and tolerance.
	 */
	DETECT_EDGES = 1685349735,

	/**
	 * No clipping path applied.
	 */
	NONE = 1852796517,

	/**
	 * The clipping path is defined for the graphic in Photoshop.
	 */
	PHOTOSHOP_PATH = 1886613620,

	/**
	 * (Read-only) The clipping path has been manually edited.
	 */
	USER_MODIFIED_PATH = 1970106484,

}

/**
 * Link updating options.
 */
declare enum UpdateLinkOptions {
	/**
	 * Changes the visiblity settings to match the modified file.
	 */
	APPLICATION_SETTINGS = 1819243873,

	/**
	 * Ignores the modified settings and maintains those specified in the current document.
	 */
	KEEP_OVERRIDES = 1819241327,

	/**
	 * Unspecified update option.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Icon size options.
 */
declare enum IconSizes {
	/**
	 * Extra large icon.
	 */
	EXTRA_LARGE_ICON = 1885695079,

	/**
	 * Extra small icon.
	 */
	EXTRA_SMALL_ICON = 1885696877,

	/**
	 * Jumbo icon.
	 */
	JUMBO_ICON = 1886943340,

	/**
	 * Large icon.
	 */
	LARGE_ICON = 1884058215,

	/**
	 * Medium icon.
	 */
	MEDIUM_ICON = 1886217572,

	/**
	 * Small icon.
	 */
	SMALL_ICON = 1886612844,

}

/**
 * Palette layout resizing options.
 */
declare enum PanelLayoutResize {
	/**
	 * Do not resize master pages panel area when resizing panel.
	 */
	MASTERS_FIXED = 1886416230,

	/**
	 * Do not resize document pages panel area when resizing panel.
	 */
	PAGES_FIXED = 1886414456,

	/**
	 * Resize panel areas proportionally.
	 */
	PROPORTIONAL_RESIZE = 1886417010,

}

/**
 * options for viewing pages in Pages Panel
 */
declare enum PageViewOptions {
	/**
	 * Pages arranged in vertical columns by alternate layout.
	 */
	BY_ALTERNATE_LAYOUT = 1987277931,

	/**
	 * Pages arranged in horizontal rows.
	 */
	HORIZONTALLY = 1752396907,

	/**
	 * Pages arranged in a vertical column.
	 */
	VERTICALLY = 1987211127,

}

/**
 * Options for specifying how to represent color information in the exported PDF.
 */
declare enum PDFColorSpace {
	/**
	 * Represents all color values using CYMK color space.
	 */
	CMYK = 1129142603,

	/**
	 * Converts all color values to high-quality black-and-white images. Gray levels of the converted objects represent the luminosity of the original objects.
	 */
	GRAY = 1766290041,

	/**
	 * Repurposes CMYK colors.
	 */
	REPURPOSE_CMYK = 1917013337,

	/**
	 * Repurposes RGB colors.
	 */
	REPURPOSE_RGB = 1917994818,

	/**
	 * Represents all color values using the RGB color space. Best suited for documents that will be viewed onscreen.
	 */
	RGB = 1666336578,

	/**
	 * Leaves each image in its original color space.
	 */
	UNCHANGED_COLOR_SPACE = 1970161251,

}

/**
 * The exported PDF document's Acrobat compatibility.
 */
declare enum AcrobatCompatibility {
	/**
	 * Makes the file compatible with Acrobat 4.0 and later.
	 */
	ACROBAT_4 = 1097020464,

	/**
	 * Makes the file compatible with Acrobat 5.0 and later.
	 */
	ACROBAT_5 = 1097020720,

	/**
	 * Makes the file compatible with Acrobat 6.0 and later.
	 */
	ACROBAT_6 = 1097020976,

	/**
	 * Makes the file compatible with Acrobat 7.0 or higher.
	 */
	ACROBAT_7 = 1097021232,

	/**
	 * Acrobat 8.0 compatibility.
	 */
	ACROBAT_8 = 1097021488,

}

/**
 * The ICC profiles to include in the PDF document.
 */
declare enum ICCProfiles {
	/**
	 * Includes all ICC profiles.
	 */
	INCLUDE_ALL = 1229144929,

	/**
	 * Does not include ICC profiles.
	 */
	INCLUDE_NONE = 1229144942,

	/**
	 * Includes RGB and tagged source CMYK profiles.
	 */
	INCLUDE_RGB_AND_TAGGED = 1229144946,

	/**
	 * Includes tagged source profiles.
	 */
	INCLUDE_TAGGED = 1229144948,

}

/**
 * The type of compression for bitmap images.
 */
declare enum BitmapCompression {
	/**
	 * The Automatic JPEG 2000 compression method.
	 */
	AUTOMATIC_JPEG_2000 = 1634365490,

	/**
	 * Uses JPEG compression and automatically determines the best quality type. Valid only when acrobat compatibility is acrobat 6 or higher.
	 */
	AUTO_COMPRESSION = 1631808880,

	/**
	 * Uses JPEG compression.
	 */
	JPEG = 1785751398,

	/**
	 * Uses JPEG 2000 compression. Valid only when acrobat compatibility is acrobat 6 or higher.
	 */
	JPEG_2000 = 1785751346,

	/**
	 * Uses no compression.
	 */
	NONE = 1852796517,

	/**
	 * Uses ZIP compression.
	 */
	ZIP = 2053730371,

}

/**
 * The amount and type of compression to use for bitmap images.
 */
declare enum CompressionQuality {
	/**
	 * Uses 8-bit compression. Valid only when bitmap compression is ZIP.
	 */
	EIGHT_BIT = 1701722210,

	/**
	 * Uses 4-bit compression. Valid only when bitmap compression is ZIP.
	 */
	FOUR_BIT = 1701721186,

	/**
	 * Uses high compression. Not valid when bitmap compression is ZIP.
	 */
	HIGH = 1701726313,

	/**
	 * Uses low compression. Not valid when bitmap compression is ZIP.
	 */
	LOW = 1701727351,

	/**
	 * Uses maximum compression. Not valid when bitmap compression is ZIP.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Uses medium compression. Not valid when bitmap compression is ZIP.
	 */
	MEDIUM = 1701727588,

	/**
	 * Uses minimum compression. Not valid when bitmap compression is ZIP.
	 */
	MINIMUM = 1701727598,

}

/**
 * The amount and type of compression to apply to monochrome bitmap images.
 */
declare enum MonoBitmapCompression {
	/**
	 * Uses CCITT Group 3 compression.
	 */
	CCIT3 = 1128879155,

	/**
	 * Uses CCITT Group 4 compression.
	 */
	CCIT4 = 1128879156,

	/**
	 * Uses no compression.
	 */
	NONE = 1852796517,

	/**
	 * Uses Run Length compression.
	 */
	RUN_LENGTH = 1919839299,

	/**
	 * Uses ZIP compression.
	 */
	ZIP = 2053730371,

}

/**
 * PDF mark weight
 */
declare enum PDFMarkWeight {
	/**
	 * Printer mark line weight of 0.05 mm.
	 */
	P05MM = 808807789,

	/**
	 * Printer mark line weight of 0.07 mm.
	 */
	P07MM = 808938861,

	/**
	 * Printer mark line weight of 0.10 mm.
	 */
	P10MM = 825257325,

	/**
	 * Printer mark line weight of 0.125 points.
	 */
	P125PT = 825374064,

	/**
	 * Printer mark line weight of 0.15 mm.
	 */
	P15MM = 825585005,

	/**
	 * Printer mark line weight of 0.20 mm.
	 */
	P20MM = 842034541,

	/**
	 * Printer mark line weight of 0.25 points.
	 */
	P25PT = 842346608,

	/**
	 * Printer mark line weight of 0.30 mm.
	 */
	P30MM = 858811757,

	/**
	 * Printer mark line weight of 0.50 points.
	 */
	P50PT = 892350576,

}

/**
 * The resampling method.
 */
declare enum Sampling {
	/**
	 * Uses a weighted average to determine pixel color.
	 */
	BICUBIC_DOWNSAMPLE = 1650742125,

	/**
	 * Averages the pixels in a sample area and replaces the entire area with the average pixel color.
	 */
	DOWNSAMPLE = 1684951917,

	/**
	 * Uses no resampling.
	 */
	NONE = 1852796517,

	/**
	 * Chooses a pixel in the center of the sample area and replaces the entire area with that pixel color.
	 */
	SUBSAMPLE = 1935823725,

}

/**
 * The type of preset to import or export.
 */
declare enum ExportPresetFormat {
	/**
	 * Document presets.
	 */
	DOCUMENT_PRESETS_FORMAT = 1683190892,

	/**
	 * Flattener presets.
	 */
	FLATTENER_PRESETS_FORMAT = 1951626348,

	/**
	 * PDF export presets.
	 */
	PDF_EXPORT_PRESETS_FORMAT = 1716745324,

	/**
	 * Printer presets.
	 */
	PRINTER_PRESETS_FORMAT = 1918071916,

}

/**
 * The amount of the PDF document to place.
 */
declare enum PDFCrop {
	/**
	 * Places only the area defined by the PDF author as placeable artwork.
	 */
	CROP_ART = 1131573313,

	/**
	 * Places only the area that represents clipped content.
	 */
	CROP_BLEED = 1131573314,

	/**
	 * Places the page's bounding box using all layers.
	 */
	CROP_CONTENT_ALL_LAYERS = 1131561324,

	/**
	 * Places the page's bounding box using visible layers only.
	 */
	CROP_CONTENT_VISIBLE_LAYERS = 1131566703,

	/**
	 * Places the area that represents the physical paper size of the original PDF document.
	 */
	CROP_MEDIA = 1131573325,

	/**
	 * Places only the area displayed by Acrobat.
	 */
	CROP_PDF = 1131573328,

	/**
	 * Places only the area that represents the final trim size of the document.
	 */
	CROP_TRIM = 1131573332,

}

/**
 * The objects to compress in the PDF document.
 */
declare enum PDFCompressionType {
	/**
	 * Uses no compression.
	 */
	COMPRESS_NONE = 1131368047,

	/**
	 * Compress all objects.
	 */
	COMPRESS_OBJECTS = 1131368290,

	/**
	 * Compresses only objects related to PDF structure.
	 */
	COMPRESS_STRUCTURE = 1131369332,

}

/**
 * The color profile.
 */
declare enum PDFProfileSelector {
	/**
	 * Uses the document's CMYK profile.
	 */
	USE_DOCUMENT = 1967419235,

	/**
	 * Uses the monitor's color profile.
	 */
	USE_MONITOR_PROFILE = 1836008528,

	/**
	 * Uses no profile.
	 */
	USE_NO_PROFILE = 1851868240,

	/**
	 * Uses the working CMYK profile.
	 */
	WORKING = 1466921579,

}

/**
 * Options for specifying the PDF/X compliance standard.
 */
declare enum PDFXStandards {
	/**
	 * Does not check for compliance with a PDF/X standard.
	 */
	NONE = 1852796517,

	/**
	 * Checks for compliance with the PDF/X-1a:2001 standard.
	 */
	PDFX1A2001_STANDARD = 1396912481,

	/**
	 * Checks for compliance with the PDF/X-1a:2003 standard.
	 */
	PDFX1A2003_STANDARD = 1395745075,

	/**
	 * Checks for compliance with the PDF/X-3:2002 standard.
	 */
	PDFX32002_STANDARD = 1396922419,

	/**
	 * Checks for compliance with the PDF/X-3:2003 standard.
	 */
	PDFX32003_STANDARD = 1398289203,

	/**
	 * PDFX42010 standard is used.
	 */
	PDFX42010_STANDARD = 1398289496,

}

/**
 * Export layer options.
 */
declare enum ExportLayerOptions {
	/**
	 * Export all layers
	 */
	EXPORT_ALL_LAYERS = 1702388076,

	/**
	 * Export visible layers
	 */
	EXPORT_VISIBLE_LAYERS = 1702393452,

	/**
	 * Export visible and printable layers
	 */
	EXPORT_VISIBLE_PRINTABLE_LAYERS = 1702260844,

}

/**
 * PDF export magnification options.
 */
declare enum PdfMagnificationOptions {
	/**
	 * Uses the actual size.
	 */
	ACTUAL_SIZE = 2053206906,

	/**
	 * Uses default magnification.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Uses 50 percent magnification option.
	 */
	FIFTY_PERCENT = 2053531248,

	/**
	 * Uses the fit height magnification option.
	 */
	FIT_HEIGHT = 1212437352,

	/**
	 * Uses the fit page magnification option.
	 */
	FIT_PAGE = 2053534832,

	/**
	 * Uses the fit visible magnification option.
	 */
	FIT_VISIBLE = 1212437334,

	/**
	 * Uses the fit width magnification option.
	 */
	FIT_WIDTH = 1212437335,

	/**
	 * Uses 100 percent magnification option.
	 */
	ONE_HUNDRED_PERCENT = 2053533544,

	/**
	 * Uses 75 percent magnification option.
	 */
	SEVENTY_FIVE_PERCENT = 2053534566,

	/**
	 * Uses 25 percent magnification option.
	 */
	TWENTY_FIVE_PERCENT = 2053534822,

}

/**
 * PDF export page layout options.
 */
declare enum PageLayoutOptions {
	/**
	 * Uses default page layout.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Single page layout.
	 */
	SINGLE_PAGE = 1987736432,

	/**
	 * Single page continuous layout.
	 */
	SINGLE_PAGE_CONTINUOUS = 1884508259,

	/**
	 * Two up cover page page layout.
	 */
	TWO_UP_COVER_PAGE = 1884570448,

	/**
	 * Two up cover page continuous page layout.
	 */
	TWO_UP_COVER_PAGE_CONTINUOUS = 1884570467,

	/**
	 * Two up facing page layout.
	 */
	TWO_UP_FACING = 1884575046,

	/**
	 * Two up facing continuous page layout.
	 */
	TWO_UP_FACING_CONTINUOUS = 1884571235,

}

/**
 * PDF export raster resolution options.
 */
declare enum RasterResolutionOptions {
	/**
	 * 96 pixels per inch.
	 */
	NINETY_SIX_PPI = 1853059184,

	/**
	 * 144 pixels per inch.
	 */
	ONE_HUNDRED_FORTY_FOUR_PPI = 1868984432,

	/**
	 * 72 pixels per inch.
	 */
	SEVENTY_TWO_PPI = 1937010800,

}

/**
 * PDF raster compression options.
 */
declare enum PDFRasterCompressionOptions {
	/**
	 * Uses JPEG compression and automatically determines the best quality type.
	 */
	AUTOMATIC_COMPRESSION = 1936875875,

	/**
	 * Uses JPEG compression.
	 */
	JPEG_COMPRESSION = 1936878179,

	/**
	 * Uses the best quality type.
	 */
	LOSSLESS_COMPRESSION = 1936878691,

}

/**
 * PDF JPEG Quality options.
 */
declare enum PDFJPEGQualityOptions {
	/**
	 * Uses high JPEG compression.
	 */
	HIGH = 1701726313,

	/**
	 * Uses low JPEG compression.
	 */
	LOW = 1701727351,

	/**
	 * Uses maximum JPEG compression.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Uses medium JPEG compression.
	 */
	MEDIUM = 1701727588,

	/**
	 * Uses minimum JPEG compression.
	 */
	MINIMUM = 1701727598,

}

/**
 * Options for how to draw interactive elements.
 */
declare enum InteractiveElementsOptions {
	/**
	 * Draw interactive elements appearance only.
	 */
	APPEARANCE_ONLY = 1097887823,

	/**
	 * Do not include interactive elements.
	 */
	DO_NOT_INCLUDE = 1145981283,

}

/**
 * Options for how to draw interactive elements.
 */
declare enum InteractivePDFInteractiveElementsOptions {
	/**
	 * Draw interactive elements appearance only.
	 */
	APPEARANCE_ONLY = 1097887823,

	/**
	 * Include all interactive elements.
	 */
	INCLUDE_ALL_MEDIA = 1231241580,

}

/**
 * Page transition to use as an override when exporting.
 */
declare enum PageTransitionOverrideOptions {
	/**
	 * The Blinds page transition.
	 */
	BLINDS_TRANSITION = 1886667372,

	/**
	 * The Blinds page transition.
	 */
	BOX_TRANSITION = 1886667384,

	/**
	 * The Comb page transition.
	 */
	COMB_TRANSITION = 1886667618,

	/**
	 * The Cover page transition.
	 */
	COVER_TRANSITION = 1886667638,

	/**
	 * The Dissolve page transition.
	 */
	DISSOLVE_TRANSITION = 1886667891,

	/**
	 * The Fade page transition.
	 */
	FADE_TRANSITION = 1886668388,

	/**
	 * Use the page transition from the document.
	 */
	FROM_DOCUMENT = 1718764655,

	/**
	 * No page transition applied.
	 */
	NONE = 1852796517,

	/**
	 * The Page Turn page transition (SWF only).
	 */
	PAGE_TURN_TRANSITION = 1886670932,

	/**
	 * The Push page transition.
	 */
	PUSH_TRANSITION = 1886670963,

	/**
	 * The Split page transition.
	 */
	SPLIT_TRANSITION = 1886671728,

	/**
	 * The Uncover page transition.
	 */
	UNCOVER_TRANSITION = 1886672227,

	/**
	 * The Wipe page transition.
	 */
	WIPE_TRANSITION = 1886672752,

	/**
	 * The Zoom In page transition.
	 */
	ZOOM_IN_TRANSITION = 1886673481,

	/**
	 * The Zoom Out page transition.
	 */
	ZOOM_OUT_TRANSITION = 1886673487,

}

/**
 * Tagged PDF structure order options
 */
declare enum TaggedPDFStructureOrderOptions {
	/**
	 * Use Articles order for the tagged PDF structure.
	 */
	USE_ARTICLES = 1348554610,

	/**
	 * Use XML structure and layout heuristic fallback for the tagged PDF structure.
	 */
	USE_XML_STRUCTURE = 1350062959,

}

/**
 * PDF export display title options.
 */
declare enum PdfDisplayTitleOptions {
	/**
	 * Uses document title.
	 */
	DISPLAY_DOCUMENT_TITLE = 1148413044,

	/**
	 * Uses file name.
	 */
	DISPLAY_FILE_NAME = 1148413550,

}

/**
 * Options for specifying basis of the top origin of the paragraph shading.
 */
declare enum ParagraphShadingTopOriginEnum {
	/**
	 * Makes the paragraph shading top origin based on ascent of the text in the paragraph.
	 */
	ASCENT_TOP_ORIGIN = 1886606433,

	/**
	 * Makes the paragraph shading top origin based on baseline of the text in the paragraph.
	 */
	BASELINE_TOP_ORIGIN = 1886606434,

	/**
	 * Makes the paragraph shading top origin based on em box center of the text in the paragraph.
	 */
	EM_BOX_TOP_CENTER = 1886606446,

	/**
	 * Makes the paragraph shading top origin based on em box of the text in the paragraph.
	 */
	EM_BOX_TOP_ORIGIN = 1886606445,

	/**
	 * Makes the paragraph shading top origin based on leading of the text in the paragraph.
	 */
	LEADING_TOP_ORIGIN = 1885492332,

}

/**
 * Options for specifying basis of the bottom origin of the paragraph shading.
 */
declare enum ParagraphShadingBottomOriginEnum {
	/**
	 * Makes the paragraph shading bottom origin based on baseline of the text in the paragraph.
	 */
	BASELINE_BOTTOM_ORIGIN = 1886601826,

	/**
	 * Makes the paragraph shading bottom origin based on descent of the text in the paragraph.
	 */
	DESCENT_BOTTOM_ORIGIN = 1886601828,

	/**
	 * Makes the paragraph shading bottom origin based on em box center of the text in the paragraph.
	 */
	EM_BOX_BOTTOM_CENTER = 1886601838,

	/**
	 * Makes the paragraph shading bottom origin based on em box of the text in the paragraph.
	 */
	EM_BOX_BOTTOM_ORIGIN = 1886601837,

}

/**
 * Options for restarting endnote numbering.
 */
declare enum EndnoteRestarting {
	/**
	 * Does not restart numbering; numbers endnotes sequentially throughout the document.
	 */
	CONTINUOUS = 1164210803,

	/**
	 * Restarts endnote numbering on each story.
	 */
	STORY_RESTART = 1165193843,

}

/**
 * Options for scope of endnote placement.
 */
declare enum EndnoteScope {
	/**
	 * Endnotes specific to each document.
	 */
	ENDNOTE_DOCUMENT_SCOPE = 1162765427,

	/**
	 * Endnotes specific to each story.
	 */
	STORY_SCOPE = 1162769267,

}

/**
 * Options for frame creation of endnotes.
 */
declare enum EndnoteFrameCreate {
	/**
	 * Endnotes are loaded in placegun to be placed anywhere in document.
	 */
	LOAD_ENDNOTE_PLACE_GUN = 1162768487,

	/**
	 * Endnotes created on a new page and frame which are automatically created.
	 */
	NEW_PAGE = 1162767984,

}

/**
 * Options for specifying basis of the width of the paragraph border.
 */
declare enum ParagraphBorderEnum {
	/**
	 * Makes the paragraph border based on width of the column.
	 */
	COLUMN_WIDTH = 1265399652,

	/**
	 * Makes the paragraph border based on width of lines of text in the paragraph.
	 */
	TEXT_WIDTH = 1886681207,

}

/**
 * Options for specifying basis of the top origin of the paragraph border.
 */
declare enum ParagraphBorderTopOriginEnum {
	/**
	 * Makes the paragraph border top origin based on ascent of the text in the paragraph.
	 */
	ASCENT_TOP_ORIGIN = 1886606433,

	/**
	 * Makes the paragraph border top origin based on baseline of the text in the paragraph.
	 */
	BASELINE_TOP_ORIGIN = 1886606434,

	/**
	 * Makes the paragraph border top origin based on em box center of the text in the paragraph.
	 */
	EM_BOX_TOP_CENTER = 1886606446,

	/**
	 * Makes the paragraph border top origin based on em box of the text in the paragraph.
	 */
	EM_BOX_TOP_ORIGIN = 1886606445,

	/**
	 * Makes the paragraph border top origin based on leading of the text in the paragraph.
	 */
	LEADING_TOP_ORIGIN = 1885492332,

}

/**
 * Options for specifying basis of the bottom origin of the paragraph border.
 */
declare enum ParagraphBorderBottomOriginEnum {
	/**
	 * Makes the paragraph border bottom origin based on baseline of the text in the paragraph.
	 */
	BASELINE_BOTTOM_ORIGIN = 1886601826,

	/**
	 * Makes the paragraph border bottom origin based on descent of the text in the paragraph.
	 */
	DESCENT_BOTTOM_ORIGIN = 1886601828,

	/**
	 * Makes the paragraph border bottom origin based on em box center of the text in the paragraph.
	 */
	EM_BOX_BOTTOM_CENTER = 1886601838,

	/**
	 * Makes the paragraph border bottom origin based on em box of the text in the paragraph.
	 */
	EM_BOX_BOTTOM_ORIGIN = 1886601837,

}

/**
 * Provider hyphenation styles. Currently only supported by the Duden hyphenation provider.
 */
declare enum HyphenationStyleEnum {
	/**
	 * Hyphenates at aesthetic hyphenation points.
	 */
	HYPH_AESTHETIC = 1684104563,

	/**
	 * Hyphenates at all possible hyphenation points.
	 */
	HYPH_ALL = 1684106348,

	/**
	 * Hyphenates at all but unaesthetic hyphenation points.
	 */
	HYPH_ALL_BUT_UNAESTHETIC = 1684103797,

	/**
	 * Hyphenates at preferred aesthetic hyphenation points.
	 */
	HYPH_PREFERRED_AESTHETIC = 1685086565,

}

/**
 * The space between paragraphs using same style.
 */
declare enum Spacing {
	/**
	 * Ignore space between paragraphs using same style.
	 */
	SETIGNORE = 1768386162,

}

/**
 * Options for indicating the type of shape to which to covert an object.
 */
declare enum ConvertShapeOptions {
	/**
	 * Converts the object to a rectangle with beveled corners.
	 */
	CONVERT_TO_BEVELED_RECTANGLE = 1129529938,

	/**
	 * Converts the object to a closed path.
	 */
	CONVERT_TO_CLOSED_PATH = 1129530224,

	/**
	 * Converts the object to a rectangle with inverse rounded corners.
	 */
	CONVERT_TO_INVERSE_ROUNDED_RECTANGLE = 1129531730,

	/**
	 * Converts the object to a line that connects the upper left and lower right corners of the object's bounding box.
	 */
	CONVERT_TO_LINE = 1129532489,

	/**
	 * Converts the object to an open path.
	 */
	CONVERT_TO_OPEN_PATH = 1129533296,

	/**
	 * Converts the object to an ellipse.
	 */
	CONVERT_TO_OVAL = 1129533270,

	/**
	 * Converts the object to a polygon.
	 */
	CONVERT_TO_POLYGON = 1129533519,

	/**
	 * Converts the object to a rectangle.
	 */
	CONVERT_TO_RECTANGLE = 1129534021,

	/**
	 * Converts the object to a rectangle with rounded corners.
	 */
	CONVERT_TO_ROUNDED_RECTANGLE = 1129534034,

	/**
	 * Converts the object to straight line. If the object is a square, circle, or its bounding box is wider than it is tall, the line is horizontal and connects the center points on the vertical sides of the bounding box. If the object's bounding box is taller than it is wide, the line connects the center points of the horizontal sides of the bounding box.
	 */
	CONVERT_TO_STRAIGHT_LINE = 1129534284,

	/**
	 * Converts the object to a triangle.
	 */
	CONVERT_TO_TRIANGLE = 1129534546,

}

/**
 * Coordinate space options.
 */
declare enum CoordinateSpaces {
	/**
	 * Inner coordinates
	 */
	INNER_COORDINATES = 2021222766,

	/**
	 * Page coordinates.
	 */
	PAGE_COORDINATES = 2021224551,

	/**
	 * Parent coordinates
	 */
	PARENT_COORDINATES = 2021224545,

	/**
	 * Pasteboard coordinates
	 */
	PASTEBOARD_COORDINATES = 2021224546,

	/**
	 * Spread coordinates.
	 */
	SPREAD_COORDINATES = 2021225328,

}

/**
 * Matrix content.
 */
declare enum MatrixContent {
	/**
	 * Rotation value
	 */
	ROTATION_VALUE = 1936746862,

	/**
	 * Scale values
	 */
	SCALE_VALUES = 1735552887,

	/**
	 * Shear value
	 */
	SHEAR_VALUE = 1936486004,

	/**
	 * Translation values
	 */
	TRANSLATION_VALUES = 1936484720,

}

/**
 * Bounding box limits.
 */
declare enum BoundingBoxLimits {
	/**
	 * Geometric path bounds
	 */
	GEOMETRIC_PATH_BOUNDS = 1768844080,

	/**
	 * Outer stroke bounds
	 */
	OUTER_STROKE_BOUNDS = 1768844081,

}

/**
 * Resize constraints.
 */
declare enum ResizeConstraints {
	/**
	 * Inverse proportions
	 */
	INVERSE_PROPORTIONS = 1231976016,

	/**
	 * Keep current proportions
	 */
	KEEP_CURRENT_PROPORTIONS = 1264939088,

	/**
	 * Keep current value
	 */
	KEEP_CURRENT_VALUE = 1264939094,

	/**
	 * Tall proportions
	 */
	TALL_PROPORTIONS = 1415670864,

	/**
	 * Wide proportions
	 */
	WIDE_PROPORTIONS = 1466524752,

}

/**
 * Resize methods.
 */
declare enum ResizeMethods {
	/**
	 * Add additional width and height to current values
	 */
	ADDING_CURRENT_DIMENSIONS_TO = 1215264592,

	/**
	 * Multiply current width and height by the given factors
	 */
	MULTIPLYING_CURRENT_DIMENSIONS_BY = 1215264589,

	/**
	 * Change width and height overriding current values
	 */
	REPLACING_CURRENT_DIMENSIONS_WITH = 1215264581,

	/**
	 * Change width to height ratio keeping the current area
	 */
	RESHAPING_AREA_TO_RATIO = 1215264577,

	/**
	 * Change width to height ratio keeping the current perimeter
	 */
	RESHAPING_BORDER_TO_RATIO = 1215264595,

}

/**
 * Options for fitting content in an empty frame.
 */
declare enum EmptyFrameFittingOptions {
	/**
	 * Resizes content to fit the frame. Note: Content that has different proportions than the frame appears stretched or squeezed.
	 */
	CONTENT_TO_FRAME = 1668575078,

	/**
	 * Resizes content to fill the frame while perserving the content's proportions. If the content and frame have different proportions, some of the content is obscured by the frame.
	 */
	FILL_PROPORTIONALLY = 1718185072,

	/**
	 * Does not use a fitting option.
	 */
	NONE = 1852796517,

	/**
	 * Resizes content to fit the frame while preserving content proportions. If the content and frame have different proportions, some empty space appears in the frame.
	 */
	PROPORTIONALLY = 1668247152,

}

/**
 * Corner options.
 */
declare enum CornerOptions {
	/**
	 * Beveled corner option.
	 */
	BEVEL_CORNER = 1667588726,

	/**
	 * Fancy corner option.
	 */
	FANCY_CORNER = 1667589742,

	/**
	 * Inset corner option.
	 */
	INSET_CORNER = 1667591795,

	/**
	 * Inverted rounded corner option.
	 */
	INVERSE_ROUNDED_CORNER = 1667591798,

	/**
	 * No corner option.
	 */
	NONE = 1852796517,

	/**
	 * Rounded corner option.
	 */
	ROUNDED_CORNER = 1667592804,

}

/**
 * Dimension constraints for the object-based layout rule
 */
declare enum DimensionsConstraints {
	/**
	 * The dimension remains fixed relative to the parent.
	 */
	FIXED_DIMENSION = 1145267817,

	/**
	 * The dimension can vary relative to the parent.
	 */
	FLEXIBLE_DIMENSION = 1145267820,

}

/**
 * The content type of an object.
 */
declare enum ContentType {
	/**
	 * The frame is a graphics frame.
	 */
	GRAPHIC_TYPE = 1735553140,

	/**
	 * The frame is a text frame.
	 */
	TEXT_TYPE = 1952412773,

	/**
	 * No content type assigned.
	 */
	UNASSIGNED = 1970168179,

}

/**
 * End cap types.
 */
declare enum EndCap {
	/**
	 * A squared end that stops at the path's endpoint.
	 */
	BUTT_END_CAP = 1650680176,

	/**
	 * A squared end that extends beyond the endpoint by half the stroke-width.
	 */
	PROJECTING_END_CAP = 1886020464,

	/**
	 * A semicircular end that extends beyond the endpoint by half the stroke-width.
	 */
	ROUND_END_CAP = 1919115632,

}

/**
 * End join types.
 */
declare enum EndJoin {
	/**
	 * Beveled end join.
	 */
	BEVEL_END_JOIN = 1651142510,

	/**
	 * Miter end join.
	 */
	MITER_END_JOIN = 1835691886,

	/**
	 * Rounded end join.
	 */
	ROUND_END_JOIN = 1919577966,

}

/**
 * The automatic adjustment to make to the pattern of a dashed or dotted stroke to cover corner points in a path.
 */
declare enum StrokeCornerAdjustment {
	/**
	 * Changes the length of dashes so that dashes always occur at path ends and corners; maintains set gap length. Note: Can cause dashes to be different lengths on shapes whose sides are of different lengths, such as rectangles.
	 */
	DASHES = 1162113896,

	/**
	 * Adjusts both dashes and gaps to cover corners and end points. Note: Causes dash and gap sizes to be consistent on all sides of the shape.
	 */
	DASHES_AND_GAPS = 1148405616,

	/**
	 * Changes the length of gaps so that dashes or dots always occur at ends and corners; maintains dash length or dot diameter. Note: Can cause gaps to be different lengths on shapes whose sides are of different lengths, such as rectangles.
	 */
	GAPS = 1164406899,

	/**
	 * No adjustment.
	 */
	NONE = 1852796517,

}

/**
 * The shape of one or both ends of an open path.
 */
declare enum ArrowHead {
	/**
	 * A solid arrow head whose pierced end bows sharply toward the point and whose point describes a 45-degree angle.
	 */
	BARBED_ARROW_HEAD = 1650553442,

	/**
	 * A vertical bar bisected by the stroke, which meets the stroke at a right angle and is the same weight as the stroke. The bar's length is 4.5 times the stroke width.
	 */
	BAR_ARROW_HEAD = 1651663208,

	/**
	 * A hollow circle whose outline is the same weight as the stroke. The circle's diameter is 5 times the stroke width.
	 */
	CIRCLE_ARROW_HEAD = 1668440424,

	/**
	 * A solid circle whose diameter is 5 times the stroke width.
	 */
	CIRCLE_SOLID_ARROW_HEAD = 1668505960,

	/**
	 * A solid arrow head whose pierced end concaves toward the point and whose point describes a 45-degree angle.
	 */
	CURVED_ARROW_HEAD = 1668702568,

	/**
	 * None.
	 */
	NONE = 1852796517,

	/**
	 * An arrow head formed by two slanting lines whose intersection forms a 45-degree angle and whose stroke weight is the same as the path's stroke.
	 */
	SIMPLE_ARROW_HEAD = 1936289136,

	/**
	 * An arrow head formed by two slanting lines whose intersection forms a 90-degree angle and whose stroke weight is the same as the path's stroke.
	 */
	SIMPLE_WIDE_ARROW_HEAD = 1937203560,

	/**
	 * A hollow square set perpendicular to the path, whose outline is the same weight as the stroke. The length of one side of the square is 5 times the stroke width.
	 */
	SQUARE_ARROW_HEAD = 1936810344,

	/**
	 * A solid square set perpendicular to the end of the path. The length of one side of the square is 5 times the stroke width.
	 */
	SQUARE_SOLID_ARROW_HEAD = 1936941416,

	/**
	 * A solid triangle arrow head whose point describes a 45-degree angle.
	 */
	TRIANGLE_ARROW_HEAD = 1953655150,

	/**
	 * A solid triangle arrow head whose point describes a 90-degree angle.
	 */
	TRIANGLE_WIDE_ARROW_HEAD = 1953980776,

}

/**
 * Display performance options.
 */
declare enum DisplaySettingOptions {
	/**
	 * Uses the container object's default display performance preferences setting. For information, see default display settings.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Slower performance; displays high-resolution graphics and high-quality transparencies and turns on anti-aliasing.
	 */
	HIGH_QUALITY = 1346922866,

	/**
	 * Best performance; grays out graphics and turns off transparency and anti-aliasing.
	 */
	OPTIMIZED = 1349480564,

	/**
	 * Moderate performance speed; displays proxy graphics and low-quality transparencies and turns on anti-aliasing.
	 */
	TYPICAL = 1349810544,

}

/**
 * Options for fitting content to a frame.
 */
declare enum FitOptions {
	/**
	 * Applies the current frame fitting options to the frame and content. Before using this, do confirm that the expected Frame Fitting Options are applied on the frame. For example, the act of placing an image in a frame set to 'Fit Content Proportionally' can change the crop settings in the Frame Fitting Options, which would then get applied for any subsequent image placement when this API is called.
	 */
	APPLY_FRAME_FITTING_OPTIONS = 1634100847,

	/**
	 * Centers content in the frame; preserves the frame size as well as content size and proportions. Note: If the content is larger than the frame, content around the edges is obscured.
	 */
	CENTER_CONTENT = 1667591779,

	/**
	 * Selects best crop region of the content for the frame based on Adobe Sensei. Note: Preserves frame size but might scale the content size.
	 */
	CONTENT_AWARE_FIT = 1667327593,

	/**
	 * Resizes content to fit the frame. Note: Content that is a different size than the frame appears stretched or squeezed.
	 */
	CONTENT_TO_FRAME = 1668575078,

	/**
	 * Resizes content to fill the frame while perserving the proportions of the content. If the content and frame have different proportions, some of the content is obscured by the bounding box of the frame.
	 */
	FILL_PROPORTIONALLY = 1718185072,

	/**
	 * Resizes the frame so it fits the content.
	 */
	FRAME_TO_CONTENT = 1718906723,

	/**
	 * Resizes content to fit the frame while preserving content proportions. If the content and frame have different proportions, some empty space appears in the frame.
	 */
	PROPORTIONALLY = 1668247152,

}

/**
 * Options for positioning the stroke relative to its path.
 */
declare enum StrokeAlignment {
	/**
	 * The stroke straddles the path.
	 */
	CENTER_ALIGNMENT = 1936998723,

	/**
	 * The stroke is inside the path.
	 */
	INSIDE_ALIGNMENT = 1936998729,

	/**
	 * The stroke is outside the path, like a picture frame.
	 */
	OUTSIDE_ALIGNMENT = 1936998735,

}

/**
 * Guide type options for ruler guides.
 */
declare enum GuideTypeOptions {
	/**
	 * Liquid guide.
	 */
	LIQUID = 1735617635,

	/**
	 * Ruler guide (default).
	 */
	RULER = 1735618160,

}

/**
 * The path on which to base the contour text wrap.
 */
declare enum ContourOptionsTypes {
	/**
	 * Sets the text wrap shape to the edges of the specified alpha channel. To specify the alpha channel, see contour path name.
	 */
	ALPHA_CHANNEL = 1634756707,

	/**
	 * Sets the text wrap shape to the object's bounding box.
	 */
	BOUNDING_BOX = 1701732962,

	/**
	 * Sets the text wrap shape to the edges of the image.
	 */
	DETECT_EDGES = 1685349735,

	/**
	 * Sets the text wrap shape to the wrapped object's graphics frame.
	 */
	GRAPHIC_FRAME = 1701734246,

	/**
	 * Sets the text wrap shape to the specified Photoshop path. To specify the Photoshop path, see contour path name.
	 */
	PHOTOSHOP_PATH = 1886613620,

	/**
	 * Sets the text wrap shape to the clipping path (if any) defined in Photoshop. Note: A path cannot be specified using this enumeration. To set the text wrap shape to a specific path, use the photoshop path contour options type enumeration value.
	 */
	SAME_AS_CLIPPING = 1935762288,

}

/**
 * Text wrap side options.
 */
declare enum TextWrapSideOptions {
	/**
	 * Both sides text wrap.
	 */
	BOTH_SIDES = 1953981043,

	/**
	 * Largest side text wrap.
	 */
	LARGEST_AREA = 1953975411,

	/**
	 * Left side text wrap.
	 */
	LEFT_SIDE = 1953983603,

	/**
	 * Right side text wrap.
	 */
	RIGHT_SIDE = 1953985139,

	/**
	 * Away from binding side text wrap.
	 */
	SIDE_AWAY_FROM_SPINE = 1953980787,

	/**
	 * Binding side text wrap.
	 */
	SIDE_TOWARDS_SPINE = 1953985651,

}

/**
 * Options for wrapping text around an object.
 */
declare enum TextWrapModes {
	/**
	 * Wraps text around the object's bounding box.
	 */
	BOUNDING_BOX_TEXT_WRAP = 1651729523,

	/**
	 * Wraps text around the object following the specified contour options.
	 */
	CONTOUR = 1835233134,

	/**
	 * Forces text to jump above or below the object, so that no text appears on the object's right or left.
	 */
	JUMP_OBJECT_TEXT_WRAP = 1650552420,

	/**
	 * Forces text to jump to the next available column.
	 */
	NEXT_COLUMN_TEXT_WRAP = 1853384306,

	/**
	 * No text wrap.
	 */
	NONE = 1852796517,

}

/**
 * Font status options.
 */
declare enum FontStatus {
	/**
	 * The font has been fauxed.
	 */
	FAUXED = 1718830689,

	/**
	 * The font is installed.
	 */
	INSTALLED = 1718831470,

	/**
	 * The font is not available.
	 */
	NOT_AVAILABLE = 1718832705,

	/**
	 * The font is a substitute.
	 */
	SUBSTITUTED = 1718834037,

	/**
	 * The font's status is unknown.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Font type options.
 */
declare enum FontTypes {
	/**
	 * ATC.
	 */
	ATC = 1718894932,

	/**
	 * Bitmap.
	 */
	BITMAP = 1718895209,

	/**
	 * CID.
	 */
	CID = 1718895433,

	/**
	 * OCF.
	 */
	OCF = 1718898499,

	/**
	 * OpenType CFF.
	 */
	OPENTYPE_CFF = 1718898502,

	/**
	 * OpenType CID.
	 */
	OPENTYPE_CID = 1718898505,

	/**
	 * OpenType TT.
	 */
	OPENTYPE_TT = 1718898516,

	/**
	 * TrueType.
	 */
	TRUETYPE = 1718899796,

	/**
	 * Type 1.
	 */
	TYPE_1 = 1718899761,

	/**
	 * The font type is unknown.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Supported OpenType feature options.
 */
declare enum OpenTypeFeature {
	/**
	 * Provides authentic small caps rather than scaled-down versions of the font's regular caps.
	 */
	ALL_SMALL_CAPS_FEATURE = 1664250691,

	/**
	 * Activates contextual ligatures and connecting alternates.
	 */
	CONTEXTUAL_ALTERNATES_FEATURE = 1330930497,

	/**
	 * Applies the default figure style of the current font to figure glyphs.
	 */
	DEFAULT_FIGURE_STYLE_FEATURE = 1330931268,

	/**
	 * In a series of two numbers separated by a slash that form a non-standard fraction, such as 4/13, reformats the second number as a denominator.
	 */
	DENOMINATOR_FEATURE = 1884247108,

	/**
	 * Allows the use of optional discretionary ligatures.
	 */
	DISCRETIONARY_LIGATURES_FEATURE = 1330930764,

	/**
	 * Reformats numbers separated by a slash, such as 1/2, as fractions. Note: In some fonts, the fractions feature reformats only standard fractions. For information on reformatting non-standard fractions such as 4/13, see denominator feature and numerator feature.
	 */
	FRACTIONS_FEATURE = 1330931282,

	/**
	 * Justification alternate
	 */
	JUSTIFICATION_ALTERNATE = 1330932309,

	/**
	 * Low.
	 */
	LOW = 1701727351,

	/**
	 * In a series of two numbers separated by a slash that form a non-standard fraction, such as 4/13, reformats the first number as a numerator.
	 */
	NUMERATOR_FEATURE = 1884247118,

	/**
	 * Superscripts the alpha characters in ordinal numbers.
	 */
	ORDINAL_FEATURE = 1330933586,

	/**
	 * Overlap swash
	 */
	OVERLAP_SWASH = 1330933590,

	/**
	 * Gives full-height figures varying widths.
	 */
	PROPORTIONAL_LINING_FEATURE = 1330932816,

	/**
	 * Gives varying-height figures varying widths.
	 */
	PROPORTIONAL_OLDSTYLE_FEATURE = 1330933587,

	/**
	 * Stretched alternate
	 */
	STRETCHED_ALTERNATE = 1330934610,

	/**
	 * Stylistic alternate
	 */
	STYLISTIC_ALTERNATE = 1330934612,

	/**
	 * Sizes lowered glyphs correctly relative to the surrounding characters.
	 */
	SUBSCRIPT_FEATURE = 1884247106,

	/**
	 * Sizes raised glyphs correctly relative to the surrounding characters.
	 */
	SUPERSCRIPT_FEATURE = 1884247123,

	/**
	 * Provides regular and contextual swashes, which may include alternate caps and end-of-word alternatives.
	 */
	SWASH_FEATURE = 1330934615,

	/**
	 * Gives full-height figures fixed, equal width.
	 */
	TABULAR_LINING_FEATURE = 1330931284,

	/**
	 * Gives varying-height figures fixed, equal widths.
	 */
	TABULAR_OLDSTYLE_FEATURE = 1330933588,

	/**
	 * Activates alternative characters used for uppercase titles.
	 */
	TITLING_FEATURE = 1330934857,

}

/**
 * Options for aligning small characters to the largest character in the line.
 */
declare enum CharacterAlignment {
	/**
	 * Aligns small characters in a line to the large character.
	 */
	ALIGN_BASELINE = 1247896172,

	/**
	 * Aligns small characters in horizontal text to the bottom of the em box of large characters. In vertical text, aligns characters to the left of the em box.
	 */
	ALIGN_EM_BOTTOM = 1247896173,

	/**
	 * Aligns small characters to the center of the em box of large characters.
	 */
	ALIGN_EM_CENTER = 1247896436,

	/**
	 * Aligns small characters in horizontal text to the top of the em box of large characters. In vertical text, aligns characters to the right of the em box.
	 */
	ALIGN_EM_TOP = 1247900784,

	/**
	 * Aligns small characters in horizontal text to the bottom of the ICF of large characters. In vertical text, aligns characters to the left of the ICF.
	 */
	ALIGN_ICF_BOTTOM = 1248420461,

	/**
	 * Aligns small characters in horizontal text to the top of the ICF of large characters. In vertical text, aligns characters to the right of the ICF.
	 */
	ALIGN_ICF_TOP = 1248425072,

}

/**
 * Glyph variant substitution options for standard glyphs.
 */
declare enum AlternateGlyphForms {
	/**
	 * Uses the expert variant.
	 */
	EXPERT_FORM = 1247897445,

	/**
	 * Uses the full-width variant.
	 */
	FULL_WIDTH_FORM = 1247897446,

	/**
	 * Uses the JIS04 variant.
	 */
	JIS04_FORM = 1247897396,

	/**
	 * Uses the JIS78 variant.
	 */
	JIS78_FORM = 1247897399,

	/**
	 * Uses the JIS83 variant.
	 */
	JIS83_FORM = 1247897400,

	/**
	 * Uses the JIS90 variant.
	 */
	JIS90_FORM = 1247897401,

	/**
	 * Uses the monospaced half-width variant.
	 */
	MONOSPACED_HALF_WIDTH_FORM = 1247897453,

	/**
	 * Uses the NLC variant.
	 */
	NLC_FORM = 1247897454,

	/**
	 * Does not use an alternate form.
	 */
	NONE = 1852796517,

	/**
	 * Substitutes proportional glyphs for half-width and full-width glyphs.
	 */
	PROPORTIONAL_WIDTH_FORM = 1247897456,

	/**
	 * Uses the quarter-width variant.
	 */
	QUARTER_WIDTH_FORM = 1247897457,

	/**
	 * Uses the third-width variant.
	 */
	THIRD_WIDTH_FORM = 1247897448,

	/**
	 * Uses the traditional variant.
	 */
	TRADITIONAL_FORM = 1247897460,

}

/**
 * Overprint options for kenten marks.
 */
declare enum AdornmentOverprint {
	/**
	 * Uses auto overprint.
	 */
	AUTO = 1635019116,

	/**
	 * Turns off overprint.
	 */
	OVERPRINT_OFF = 1701736294,

	/**
	 * Turns on overprint.
	 */
	OVERPRINT_ON = 1701736302,

}

/**
 * Style options for kenten characters.
 */
declare enum KentenCharacter {
	/**
	 * Uses a custom kenten style.
	 */
	CUSTOM = 1131639917,

	/**
	 * Uses the kenten black circle.
	 */
	KENTEN_BLACK_CIRCLE = 1248551523,

	/**
	 * Uses the kenten black triangle.
	 */
	KENTEN_BLACK_TRIANGLE = 1248551540,

	/**
	 * Uses the kenten bullseye.
	 */
	KENTEN_BULLSEYE = 1248551525,

	/**
	 * Uses the kenten fisheye.
	 */
	KENTEN_FISHEYE = 1248552549,

	/**
	 * Uses the kenten sesame dot.
	 */
	KENTEN_SESAME_DOT = 1248551795,

	/**
	 * Uses the kenten small black circle.
	 */
	KENTEN_SMALL_BLACK_CIRCLE = 1248555875,

	/**
	 * Uses the kenten small white circle.
	 */
	KENTEN_SMALL_WHITE_CIRCLE = 1248555895,

	/**
	 * Uses the kenten white circle.
	 */
	KENTEN_WHITE_CIRCLE = 1248556899,

	/**
	 * Uses the kenten white sesame dot.
	 */
	KENTEN_WHITE_SESAME_DOT = 1248551799,

	/**
	 * Uses the kenten white triangle.
	 */
	KENTEN_WHITE_TRIANGLE = 1248556916,

	/**
	 * Does not use kenten.
	 */
	NONE = 1852796517,

}

/**
 * Options for specifying the kenten or ruby position relative to the parent character.
 */
declare enum RubyKentenPosition {
	/**
	 * Places kenten or ruby to the right and above the parent character.
	 */
	ABOVE_RIGHT = 1248551282,

	/**
	 * Places kenten or ruby to the left and below the parent character.
	 */
	BELOW_LEFT = 1248551532,

}

/**
 * Kenten character set options.
 */
declare enum KentenCharacterSet {
	/**
	 * Character input.
	 */
	CHARACTER_INPUT = 1248028777,

	/**
	 * JIS.
	 */
	JIS = 1246382419,

	/**
	 * Kuten.
	 */
	KUTEN = 1248556404,

	/**
	 * Shift JIS.
	 */
	SHIFT_JIS = 1249077875,

	/**
	 * Unicode.
	 */
	UNICODE = 1249209961,

}

/**
 * Ruby type options.
 */
declare enum RubyTypes {
	/**
	 * Provides ruby for a group of characters.
	 */
	GROUP_RUBY = 1249011570,

	/**
	 * Provides ruby for each individual character in the group.
	 */
	PER_CHARACTER_RUBY = 1249013859,

}

/**
 * Ruby alignment options.
 */
declare enum RubyAlignments {
	/**
	 * Ruby 1 aki.
	 */
	RUBY_1_AKI = 1248997729,

	/**
	 * Centers ruby relative to the parent text.
	 */
	RUBY_CENTER = 1249010548,

	/**
	 * Ruby equal aki.
	 */
	RUBY_EQUAL_AKI = 1249011041,

	/**
	 * Justifies ruby across the parent text.
	 */
	RUBY_FULL_JUSTIFY = 1249011306,

	/**
	 * Ruby JIS.
	 */
	RUBY_JIS = 1249012339,

	/**
	 * Aligns ruby with the left-most character in the parent text.
	 */
	RUBY_LEFT = 1249012838,

	/**
	 * Aligns ruby with the right-most character in the parent text.
	 */
	RUBY_RIGHT = 1249014388,

}

/**
 * Options for ruby spacing relative to the parent text.
 */
declare enum RubyParentSpacing {
	/**
	 * Ruby parent 121 aki.
	 */
	RUBY_PARENT_121_AKI = 1248997682,

	/**
	 * Ruby parent both sides.
	 */
	RUBY_PARENT_BOTH_SIDES = 1249010291,

	/**
	 * Applies the parent text aki to the ruby characters.
	 */
	RUBY_PARENT_EQUAL_AKI = 1249014113,

	/**
	 * Justifies ruby characters to both edges of the parent text.
	 */
	RUBY_PARENT_FULL_JUSTIFY = 1249014634,

	/**
	 * Does not base ruby spacing on parent text.
	 */
	RUBY_PARENT_NO_ADJUSTMENT = 1249013345,

}

/**
 * Ruby overhang options.
 */
declare enum RubyOverhang {
	/**
	 * Does not allow ruby overhang.
	 */
	NONE = 1852796517,

	/**
	 * Ruby is overhang one-half the size of one chararacter.
	 */
	RUBY_OVERHANG_HALF_CHAR = 1249011811,

	/**
	 * Ruby overhang is one-half ruby.
	 */
	RUBY_OVERHANG_HALF_RUBY = 1249013554,

	/**
	 * There is no ruby overhang size limit.
	 */
	RUBY_OVERHANG_NO_LIMIT = 1249013621,

	/**
	 * Ruby overhang is the size of one character.
	 */
	RUBY_OVERHANG_ONE_CHAR = 1249013603,

	/**
	 * Ruby overhang is one ruby.
	 */
	RUBY_OVERHANG_ONE_RUBY = 1249013553,

}

/**
 * Warichu text alignment options.
 */
declare enum WarichuAlignment {
	/**
	 * Automatically aligns warichu characters.
	 */
	AUTO = 1635019116,

	/**
	 * Aligns warichu in the center of the text frame.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Justifies warichu lines and center aligns the last line.
	 */
	CENTER_JUSTIFIED = 1667920756,

	/**
	 * Justifies warichu lines and makes all lines of equal length.
	 */
	FULLY_JUSTIFIED = 1718971500,

	/**
	 * Aligns warichu on the left side of the text frame.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Justifies warichu lines and left aligns the last line.
	 */
	LEFT_JUSTIFIED = 1818915700,

	/**
	 * Warichu on the rigt side of the text frame.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Justifies warichu lines and right aligns the last line.
	 */
	RIGHT_JUSTIFIED = 1919578996,

}

/**
 * Kinsoku processing options.
 */
declare enum KinsokuType {
	/**
	 * The kinsoku prioritize adjustment amount.
	 */
	KINSOKU_PRIORITIZE_ADJUSTMENT_AMOUNT = 1248553313,

	/**
	 * Attempts to move characters to the previous line; if the push-in is not possible, pushes characters to the next line.
	 */
	KINSOKU_PUSH_IN_FIRST = 1248553318,

	/**
	 * Attempts to move characters to the next line; if the push-out is not possible, pushes characters to the previous line.
	 */
	KINSOKU_PUSH_OUT_FIRST = 1248554854,

	/**
	 * Always moves characters to the next line. Does not attempt a push-in.
	 */
	KINSOKU_PUSH_OUT_ONLY = 1248554863,

}

/**
 * Hanging punctuation options when a kinsoku set is in effect.
 */
declare enum KinsokuHangTypes {
	/**
	 * Enables hanging punctuation but forces hanging punctuation outside the text frame and does not allow the punctuation to be placed on the text frame.
	 */
	KINSOKU_HANG_FORCE = 1248553062,

	/**
	 * Enables hanging punctuation and allows punctuation marks to be placed on or outside the text frame but allows burasagari characters to hang as little as possible. Note: Differs for justified and nonjustified text. For information on justification, see line alignment.
	 */
	KINSOKU_HANG_REGULAR = 1248553074,

	/**
	 * Disables hanging punctuation.
	 */
	NONE = 1852796517,

}

/**
 * Leading model options.
 */
declare enum LeadingModel {
	/**
	 * Measures the space between lines from the aki above.
	 */
	LEADING_MODEL_AKI_ABOVE = 1248616801,

	/**
	 * Measures the space between lines from the aki below.
	 */
	LEADING_MODEL_AKI_BELOW = 1248616802,

	/**
	 * Measures the space between the character center points.
	 */
	LEADING_MODEL_CENTER = 1248619875,

	/**
	 * Center down leading model.
	 */
	LEADING_MODEL_CENTER_DOWN = 1248617316,

	/**
	 * Measures the space between type baselines.
	 */
	LEADING_MODEL_ROMAN = 1248619858,

}

/**
 * Predefined kinsoku set options.
 */
declare enum KinsokuSet {
	/**
	 * Uses the hard or maximum kinsoku set, which includes all Japanese characters that should not begin or end a line.
	 */
	HARD_KINSOKU = 1248357235,

	/**
	 * Uses the Korean kinsoku set.
	 */
	KOREAN_KINSOKU = 1263692659,

	/**
	 * Does not use a kinsoku set.
	 */
	NOTHING = 1851876449,

	/**
	 * Uses the simplified Chinese kinsoku set.
	 */
	SIMPLIFIED_CHINESE_KINSOKU = 1396927347,

	/**
	 * Uses the soft or weak kinsoku set, which omits from the hard kinsoku set long vowel symbols and small hiragana and katakana characters.
	 */
	SOFT_KINSOKU = 1249078131,

	/**
	 * Uses the traditional Chinese kinsoku set.
	 */
	TRADITIONAL_CHINESE_KINSOKU = 1413704563,

}

/**
 * Mojikumi table options.
 */
declare enum MojikumiTableDefaults {
	/**
	 * Uses full-width spacing for all characters.
	 */
	LINE_END_ALL_ONE_EM_ENUM = 1246572848,

	/**
	 * Uses half-width spacing for all characters.
	 */
	LINE_END_ALL_ONE_HALF_EM_ENUM = 1246572593,

	/**
	 * Uses full-width spacing for punctuation.
	 */
	LINE_END_PERIOD_ONE_EM_ENUM = 1246572852,

	/**
	 * Uses line end uke no float.
	 */
	LINE_END_UKE_NO_FLOAT_ENUM = 1246572849,

	/**
	 * Turns off mojikumi.
	 */
	NOTHING = 1851876449,

	/**
	 * Indents lines one full space and uses no float for all characters.
	 */
	ONE_EM_INDENT_LINE_END_ALL_NO_FLOAT_ENUM = 1246572598,

	/**
	 * Indents lines one full space and uses full-width spacing for all characters.
	 */
	ONE_EM_INDENT_LINE_END_ALL_ONE_EM_ENUM = 1246572597,

	/**
	 * Indents lines one full space and uses half-width spacing for all characters.
	 */
	ONE_EM_INDENT_LINE_END_ALL_ONE_HALF_EM_ENUM = 1246572601,

	/**
	 * Indents lines one full space and uses full-width spacing for punctuation and for the last character in the line.
	 */
	ONE_EM_INDENT_LINE_END_PERIOD_ONE_EM_ENUM = 1246572851,

	/**
	 * Indents lines one full space and uses line end uke no float.
	 */
	ONE_EM_INDENT_LINE_END_UKE_NO_FLOAT_ENUM = 1246572599,

	/**
	 * Indents lines one space and uses line end uke one half space.
	 */
	ONE_EM_INDENT_LINE_END_UKE_ONE_HALF_EM_ENUM = 1246572594,

	/**
	 * Uses full-witdh spacing for all characters except the last character in the line, which uses either full- or half-width spacing.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_ALL_ONE_EM_ENUM = 1246572596,

	/**
	 * Indents lines one or one-half space and uses full-width spacing for punctuation and for the last character in the line.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_PERIOD_ONE_EM_ENUM = 1246572850,

	/**
	 * Indents lines one half space or one full space and uses line end uke no float.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_UKE_NO_FLOAT_ENUM = 1246572600,

	/**
	 * Indents lines one full or half space and uses line end uke one half space.
	 */
	ONE_OR_ONE_HALF_EM_INDENT_LINE_END_UKE_ONE_HALF_EM_ENUM = 1246572595,

	/**
	 * Uses mojikumi tsume and aki optimized for Simplified Chinese punctuation glyphs.
	 */
	SIMP_CHINESE_DEFAULT = 1246572854,

	/**
	 * Uses mojikumi tsume and aki optimized for Traditional Chinese centered punctuation glyphs.
	 */
	TRAD_CHINESE_DEFAULT = 1246572853,

}

/**
 * Alignment options for frame grids or baseline grids.
 */
declare enum GridAlignment {
	/**
	 * Aligns the text baseline to the grid.
	 */
	ALIGN_BASELINE = 1247896172,

	/**
	 * Aligns the bottom of the em box to the grid.
	 */
	ALIGN_EM_BOTTOM = 1247896173,

	/**
	 * Aligns the center of the em box to the grid.
	 */
	ALIGN_EM_CENTER = 1247896436,

	/**
	 * Aligns the top of the em box to the grid.
	 */
	ALIGN_EM_TOP = 1247900784,

	/**
	 * Aligns the bottom of the ICF box to the grid.
	 */
	ALIGN_ICF_BOTTOM = 1248420461,

	/**
	 * Aligns the top of the ICF box to the grid.
	 */
	ALIGN_ICF_TOP = 1248425072,

	/**
	 * Lines are not aligned to the grid.
	 */
	NONE = 1852796517,

}

/**
 * Options for aligning kenten characters relative to the parent characters.
 */
declare enum KentenAlignment {
	/**
	 * Aligns kenten with the center of parent charactrers.
	 */
	ALIGN_KENTEN_CENTER = 1248554595,

	/**
	 * Aligns kenten with the left of parent characters.
	 */
	ALIGN_KENTEN_LEFT = 1248554604,

}

/**
 * Hyphenation exceptions list options for composing text.
 */
declare enum ComposeUsing {
	/**
	 * Uses the lists stored in both the document and the user dictionary.
	 */
	BOTH = 1651471464,

	/**
	 * Uses the list stored in the document.
	 */
	USE_DOCUMENT = 1967419235,

	/**
	 * Uses the list stored in the external user dictionary.
	 */
	USE_USER_DICTIONARY = 1433629284,

}

/**
 * Page number style options.
 */
declare enum PageNumberStyle {
	/**
	 * Uses Arabic numerals.
	 */
	ARABIC = 1298231906,

	/**
	 * Uses Arabic Abjad
	 */
	ARABIC_ABJAD = 1296130410,

	/**
	 * Uses Arabic Alif Ba Tah
	 */
	ARABIC_ALIF_BA_TAH = 1296130420,

	/**
	 * Uses Arabic numerals and formats all page numbers as three digits.
	 */
	DOUBLE_LEADING_ZEROS = 1296329850,

	/**
	 * Full-width Arabic.
	 */
	FULL_WIDTH_ARABIC = 1296455521,

	/**
	 * Uses Hebrew Biblical
	 */
	HEBREW_BIBLICAL = 1296589410,

	/**
	 * Uses Hebrew Non Standard
	 */
	HEBREW_NON_STANDARD = 1296589422,

	/**
	 * Uses Kanji.
	 */
	KANJI = 1296788073,

	/**
	 * Uses lowercase letters.
	 */
	LOWER_LETTERS = 1296855660,

	/**
	 * Uses lowercase Roman numerals.
	 */
	LOWER_ROMAN = 1297247596,

	/**
	 * Uses Arabic numerals and formats all page numbers as two digits.
	 */
	SINGLE_LEADING_ZEROS = 1297312890,

	/**
	 * Uses Arabic numerals and formats all page numbers as four digits.
	 */
	TRIPLE_LEADING_ZEROS = 1297378426,

	/**
	 * Uses uppercase letters.
	 */
	UPPER_LETTERS = 1296855669,

	/**
	 * Uses uppercase Roman numerals.
	 */
	UPPER_ROMAN = 1297247605,

}

/**
 * Gradient type options.
 */
declare enum GradientType {
	/**
	 * A linear gradient.
	 */
	LINEAR = 1635282023,

	/**
	 * A radial gradient.
	 */
	RADIAL = 1918985319,

}

/**
 * Options for joining two path points.
 */
declare enum JoinOptions {
	/**
	 * Combine two end points and replace with an single averaged point.
	 */
	COMBINE = 1668113006,

	/**
	 * Connect two end points (default).
	 */
	CONNECT = 1668178804,

}

/**
 * Path type options.
 */
declare enum PathType {
	/**
	 * The path is a closed path.
	 */
	CLOSED_PATH = 1668051812,

	/**
	 * The path is an open path.
	 */
	OPEN_PATH = 1869639280,

}

/**
 * The path point type.
 */
declare enum PointType {
	/**
	 * The point is a corner point, it has either one direction line, or two independent direction lines.
	 */
	CORNER = 1668443762,

	/**
	 * The point is a plain point, it has no direction lines.
	 */
	PLAIN = 1886151022,

	/**
	 * The point is a smooth point, it has two direction lines which are parallel.
	 */
	SMOOTH = 1936553064,

	/**
	 * A special type of smooth point with two direction lines of equal length.
	 */
	SYMMETRICAL = 1937337709,

}

/**
 * Options for creating preview images.
 */
declare enum CreateProxy {
	/**
	 * Always creates preview images.
	 */
	ALWAYS = 1699307895,

	/**
	 * Creates preview images as needed.
	 */
	AS_NEEDED = 1699311204,

}

/**
 * The cropping option of an imported InDesign page.
 */
declare enum ImportedPageCropOptions {
	/**
	 * Places the page's bleed area.
	 */
	CROP_BLEED = 1131573314,

	/**
	 * Places the page's bounding box.
	 */
	CROP_CONTENT = 1131573315,

	/**
	 * Places the page's slug area.
	 */
	CROP_SLUG = 1131565932,

}

/**
 * Options for the active stroke/fill proxy.
 */
declare enum StrokeFillProxyOptions {
	/**
	 * Fill proxy is active.
	 */
	FILL = 1181314156,

	/**
	 * Stroke proxy is active.
	 */
	STROKE = 1400140395,

}

/**
 * Options for the target of the active stroke/fill proxy.
 */
declare enum StrokeFillTargetOptions {
	/**
	 * Formatting affects the container.
	 */
	FORMATTING_AFFECTS_CONTAINER = 1181696323,

	/**
	 * Formatting affects the text.
	 */
	FORMATTING_AFFECTS_TEXT = 1181696340,

}

/**
 * Options for rotating the contents of the place gun
 */
declare enum RotationDirection {
	/**
	 * Rotate the list backward (i.e., move backmost item to front)
	 */
	BACKWARD = 1113680759,

	/**
	 * Rotate the list forward (i.e., move the front item to end)
	 */
	FORWARD = 1181708919,

}

/**
 * Options for specifying location relative to the reference object or within the containing object.
 */
declare enum LocationOptions {
	/**
	 * Places the object after the reference object.
	 */
	AFTER = 1634104421,

	/**
	 * Places the object at the beginning of the containing object.
	 */
	AT_BEGINNING = 1650945639,

	/**
	 * Places the object at the end of the containing object.
	 */
	AT_END = 1701733408,

	/**
	 * Places the object before the reference object.
	 */
	BEFORE = 1650812527,

	/**
	 * No location specified.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Standard UI colors.
 */
declare enum UIColors {
	/**
	 * Black.
	 */
	BLACK = 1765960811,

	/**
	 * Blue.
	 */
	BLUE = 1765960821,

	/**
	 * Brick red.
	 */
	BRICK_RED = 1765962340,

	/**
	 * Brown.
	 */
	BROWN = 1765962350,

	/**
	 * Burgundy.
	 */
	BURGUNDY = 1765962343,

	/**
	 * Charcoal.
	 */
	CHARCOAL = 1766025324,

	/**
	 * Cute teal.
	 */
	CUTE_TEAL = 1766028396,

	/**
	 * Cyan.
	 */
	CYAN = 1766029678,

	/**
	 * Dark blue.
	 */
	DARK_BLUE = 1766089324,

	/**
	 * Dark green.
	 */
	DARK_GREEN = 1766090610,

	/**
	 * Fiesta.
	 */
	FIESTA = 1766222181,

	/**
	 * Gold.
	 */
	GOLD = 1766288484,

	/**
	 * Grass green.
	 */
	GRASS_GREEN = 1766287218,

	/**
	 * Gray.
	 */
	GRAY = 1766290041,

	/**
	 * Green.
	 */
	GREEN = 1766290030,

	/**
	 * Grid blue.
	 */
	GRID_BLUE = 1766285932,

	/**
	 * Grid green.
	 */
	GRID_GREEN = 1766286439,

	/**
	 * Grid orange.
	 */
	GRID_ORANGE = 1766289266,

	/**
	 * Lavender.
	 */
	LAVENDER = 1766618734,

	/**
	 * Light blue.
	 */
	LIGHT_BLUE = 1766613612,

	/**
	 * Light gray.
	 */
	LIGHT_GRAY = 1766614898,

	/**
	 * Light olive.
	 */
	LIGHT_OLIVE = 1766616940,

	/**
	 * Lipstick.
	 */
	LIPSTICK = 1766615408,

	/**
	 * Magenta.
	 */
	MAGENTA = 1766680430,

	/**
	 * Ochre.
	 */
	OCHRE = 1766810482,

	/**
	 * Olive green.
	 */
	OLIVE_GREEN = 1766812790,

	/**
	 * Orange.
	 */
	ORANGE = 1766814318,

	/**
	 * Peach.
	 */
	PEACH = 1766876008,

	/**
	 * Pink.
	 */
	PINK = 1766878827,

	/**
	 * Purple.
	 */
	PURPLE = 1766879856,

	/**
	 * Red.
	 */
	RED = 1767007588,

	/**
	 * Sulphur.
	 */
	SULPHUR = 1767077228,

	/**
	 * Tan.
	 */
	TAN = 1767137646,

	/**
	 * Teal.
	 */
	TEAL = 1767138668,

	/**
	 * Violet.
	 */
	VIOLET = 1767271540,

	/**
	 * White.
	 */
	WHITE = 1767336052,

	/**
	 * Yellow.
	 */
	YELLOW = 1767468151,

}

/**
 * Nothing.
 */
declare enum NothingEnum {
	/**
	 * Nothing
	 */
	NOTHING = 1851876449,

}

/**
 * The default value.
 */
declare enum AutoEnum {
	/**
	 * Uses the default value defined automatically for the object based on a parent or other type of object.
	 */
	AUTO_VALUE = 1635087471,

}

/**
 * Phase options for event propagation.
 */
declare enum EventPhases {
	/**
	 * The at-target phase of propagation.
	 */
	AT_TARGET = 1701724500,

	/**
	 * The bubbling phase of propagation.
	 */
	BUBBLING_PHASE = 1701724789,

	/**
	 * The propagation is complete.
	 */
	DONE = 1701725252,

	/**
	 * Not yet propagating.
	 */
	NOT_DISPATCHING = 1701727812,

}

/**
 * Export format options.
 */
declare enum ExportFormat {
	/**
	 * Exports to EPS format.
	 */
	EPS_TYPE = 1952400720,

	/**
	 * Exports to EPub format.
	 */
	EPUB = 1701868898,

	/**
	 * Exports to fixed layout EPub format.
	 */
	FIXED_LAYOUT_EPUB = 1701865080,

	/**
	 * Exports to XHTML format.
	 */
	HTML = 1213484364,

	/**
	 * Exports to XHTML FXL format.
	 */
	HTMLFXL = 1213490808,

	/**
	 * Exports to InCopy markup (ICML) format.
	 */
	INCOPY_MARKUP = 1768123756,

	/**
	 * Exports to InDesign markup (IDML) format.
	 */
	INDESIGN_MARKUP = 1768189292,

	/**
	 * Exports to InDesign snippet (IDMS) format.
	 */
	INDESIGN_SNIPPET = 1936617588,

	/**
	 * Exports to Interactive PDF format.
	 */
	INTERACTIVE_PDF = 1952409936,

	/**
	 * Exports to JPEG format.
	 */
	JPG = 1246775072,

	/**
	 * Exports to packaged XFL format.
	 */
	PACKAGED_XFL = 1702389356,

	/**
	 * Exports to PDF format.
	 */
	PDF_TYPE = 1952403524,

	/**
	 * Exports to PNG format.
	 */
	PNG_FORMAT = 1699761735,

	/**
	 * Exports to rich text format (RTF).
	 */
	RTF = 1381254688,

	/**
	 * Exports to SWF format.
	 */
	SWF = 1702066022,

	/**
	 * Exports to a tagged text file with a TXT extension.
	 */
	TAGGED_TEXT = 1416066168,

	/**
	 * Exports to text (TXT) format.
	 */
	TEXT_TYPE = 1952412773,

	/**
	 * Exports the document's tagged content to XML.
	 */
	XML = 1481460768,

}

/**
 * The color profile policy for placed vector files (PDF or EPS).
 */
declare enum PlacedVectorProfilePolicy {
	/**
	 * Honors all profiles and output intent.
	 */
	HONOR_ALL_PROFILES = 1148217441,

	/**
	 * Ignores all profiles and output intent.
	 */
	IGNORE_ALL = 1148217697,

	/**
	 * Ignores output intent; honors calibrated spaces.
	 */
	IGNORE_OUTPUT_INTENT = 1148217711,

}

/**
 * The policy for handling mismatched CMYK configurations.
 */
declare enum ColorSettingsPolicy {
	/**
	 * Turns off color management for documents whose profiles do not match the working space. For imported colors, numeric values override color appearance.
	 */
	COLOR_POLICY_OFF = 1129344870,

	/**
	 * Preserves raw color numbers and ignores embedded color profiles.
	 */
	COMBINATION_OF_PRESERVE_AND_SAFE_CMYK = 1129345124,

	/**
	 * Converts newly opened documents to the current working space. For imported colors, color appearance overrides numeric values.
	 */
	CONVERT_TO_WORKING_SPACE = 1129346931,

	/**
	 * Preserves embedded color profiles in newly opened documents.
	 */
	PRESERVE_EMBEDDED_PROFILES = 1129345136,

}

/**
 * The default rendering intent.
 */
declare enum DefaultRenderingIntent {
	/**
	 * Aims to maintain color accuracy at the expense of color relationshps and is suitable for proofing to simulate the output of a particular device. Note: Leaves colors that fall inside the destination gamut unchanged and clips out-of-gamut colors.
	 */
	ABSOLUTE_COLORIMETRIC = 1380540771,

	/**
	 * Aims to preserve the visual relationship between colors so they are perceived as natural to the human eye, even though the color values themselves may change.
	 */
	PERCEPTUAL = 1380544611,

	/**
	 * Compares the extreme highlight of the source color space to that of the destination color space and shifts all colors accordingly. Out-of-gamut colors are shifted to the closest reproducible color in the destination color space. Note: Preserves more of the original colors in an image than perceptual rendering intent does.
	 */
	RELATIVE_COLORIMETRIC = 1380545123,

	/**
	 * Tries to produce vivid colors in an image at the expense of color accuracy.
	 */
	SATURATION = 1380545377,

}

/**
 * Options for proofing colors.
 */
declare enum ProofingType {
	/**
	 * Allows creation of a custom proofing setup for a specific output condition.
	 */
	CUSTOM = 1131639917,

	/**
	 * Creates a soft proof of colors using the document's CMYK profile.
	 */
	DOCUMENT_CMYK = 1347708003,

	/**
	 * Turns off soft proof display.
	 */
	PROOF_OFF = 1347710822,

	/**
	 * Creates a soft proof of colors using the current CMYK working space.
	 */
	WORKING_CMYK = 1347712867,

}

/**
 * Change conditions modes.
 */
declare enum ChangeConditionsModes {
	/**
	 * Change adds to applied conditions.
	 */
	ADD_TO = 1633969202,

	/**
	 * Change replaces applied conditions.
	 */
	REPLACE_WITH = 1919250519,

}

/**
 * Search mode options.
 */
declare enum SearchModes {
	/**
	 * Glyph search.
	 */
	GLYPH_SEARCH = 1181183091,

	/**
	 * Grep search.
	 */
	GREP_SEARCH = 1181184627,

	/**
	 * Object search.
	 */
	OBJECT_SEARCH = 1181704819,

	/**
	 * Text search.
	 */
	TEXT_SEARCH = 1182038131,

	/**
	 * Transliterate search.
	 */
	TRANSLITERATE_SEARCH = 1182036595,

}

/**
 * Object type options.
 */
declare enum ObjectTypes {
	/**
	 * All frame types.
	 */
	ALL_FRAMES_TYPE = 1178682995,

	/**
	 * Graphics frame.
	 */
	GRAPHIC_FRAMES_TYPE = 1179076211,

	/**
	 * Text frame.
	 */
	TEXT_FRAMES_TYPE = 1179928178,

	/**
	 * Unassigned frame.
	 */
	UNASSIGNED_FRAMES_TYPE = 1179993715,

}

/**
 * Find/change transliterate character type options.
 */
declare enum FindChangeTransliterateCharacterTypes {
	/**
	 * Arabic Indic(hindi) digits.
	 */
	ARABIC_INDIC_DIGITS = 1095328873,

	/**
	 * Farsi digits.
	 */
	FARSI_DIGITS = 1684629089,

	/**
	 * Full-width hiragana.
	 */
	FULL_WIDTH_HIRAGANA = 1179023176,

	/**
	 * Full-width katakana.
	 */
	FULL_WIDTH_KATAKANA = 1179023179,

	/**
	 * Full-width Roman symbols.
	 */
	FULL_WIDTH_ROMAN_SYMBOLS = 1179023186,

	/**
	 * Half-width katakana.
	 */
	HALF_WIDTH_KATAKANA = 1179154251,

	/**
	 * Half-width Roman symbols.
	 */
	HALF_WIDTH_ROMAN_SYMBOLS = 1179154258,

	/**
	 * Western Arabic digits (0, 1, 2, 3, ...).
	 */
	WESTERN_ARABIC_DIGITS = 1463903337,

}

/**
 * Library panel views
 */
declare enum LibraryPanelViews {
	/**
	 * Large thumbnail view
	 */
	LARGE_THUMBNAIL_VIEW = 1699501142,

	/**
	 * List view
	 */
	LIST_VIEW = 1699501673,

	/**
	 * Thumbnail view
	 */
	THUMBNAIL_VIEW = 1700030550,

}

/**
 * Sort order options
 */
declare enum SortAssets {
	/**
	 * Sort by name
	 */
	BY_NAME = 1699955278,

	/**
	 * Sort newest first
	 */
	BY_NEWEST = 1699955310,

	/**
	 * Sort oldest first
	 */
	BY_OLDEST = 1699955279,

	/**
	 * Sort by type
	 */
	BY_TYPE = 1699955284,

}

/**
 * Link status options.
 */
declare enum LinkStatus {
	/**
	 * The file is embedded in the document.
	 */
	LINK_EMBEDDED = 1282237028,

	/**
	 * The url link is inaccessible.
	 */
	LINK_INACCESSIBLE = 1818848865,

	/**
	 * The linked file has been moved, renamed, or deleted.
	 */
	LINK_MISSING = 1819109747,

	/**
	 * A more recent version of the file exists on the disk.
	 */
	LINK_OUT_OF_DATE = 1819242340,

	/**
	 * The link is a normal link.
	 */
	NORMAL = 1852797549,

}

/**
 * The rendition type of the link resource.
 */
declare enum LinkResourceRenditionType {
	/**
	 * The link resource has original rendition.
	 */
	ACTUAL = 1282372201,

	/**
	 * The link resource has FPO rendition.
	 */
	FPO = 1281781871,

}

/**
 * Asset type options.
 */
declare enum AssetType {
	/**
	 * The asset is cataloged as an EPS asset.
	 */
	EPS_TYPE = 1952400720,

	/**
	 * The asset is cataloged as a geometric page item asset.
	 */
	GEOMETRY_TYPE = 1952409445,

	/**
	 * The asset is cataloged as an image asset.
	 */
	IMAGE_TYPE = 1952409965,

	/**
	 * InDesign file asset
	 */
	INDESIGN_FILE_TYPE = 1952409956,

	/**
	 * The asset is cataloged as a page asset.
	 */
	PAGE_TYPE = 1952411745,

	/**
	 * The asset is cataloged as a PDF asset.
	 */
	PDF_TYPE = 1952403524,

	/**
	 * Structure asset
	 */
	STRUCTURE_TYPE = 1952412532,

	/**
	 * The asset is cataloged as a text asset.
	 */
	TEXT_TYPE = 1952412773,

}

/**
 * Change type options.
 */
declare enum ChangeTypes {
	/**
	 * Deleted text.
	 */
	DELETED_TEXT = 1799644524,

	/**
	 * Added text.
	 */
	INSERTED_TEXT = 1799974515,

	/**
	 * Moved text.
	 */
	MOVED_TEXT = 1800236918,

}

/**
 * Options for the alignment and appearance of type on a path.
 */
declare enum TextPathEffects {
	/**
	 * The center of each character's baseline is on the path while each vertical edge is in line with the path's center point.
	 */
	GRAVITY_PATH_EFFECT = 1601201767,

	/**
	 * The center of each character's baseline is parallel to the path's tangent. This is the default effect.
	 */
	RAINBOW_PATH_EFFECT = 1601201778,

	/**
	 * The text characters' horizontal edges are perfectly horizontal regardless of the path shape.
	 */
	RIBBON_PATH_EFFECT = 1601201715,

	/**
	 * The text characters' vertical edges are perfectly vertical regardless of the path shape.
	 */
	SKEW_PATH_EFFECT = 1601201779,

	/**
	 * The left edge of each character's baseline is on the path and no characters are rotated.
	 */
	STAIR_STEP_PATH_EFFECT = 1601205107,

}

/**
 * The text alignment relative to the path.
 */
declare enum TextTypeAlignments {
	/**
	 * The top-edge or right-edge baseline of the em box is aligned to the path.
	 */
	ABOVE_RIGHT_EM_BOX_TEXT_ALIGNMENT = 1952543333,

	/**
	 * The ideographic character face box top-edge or right-edge baseline is aligned to the path.
	 */
	ABOVE_RIGHT_ICF_BOX_TEXT_ALIGNMENT = 1952543337,

	/**
	 * Aligns the ascender to the path (not the path's stroke).
	 */
	ASCENDER_TEXT_ALIGNMENT = 1952538995,

	/**
	 * The text baseline is aligned to the path (not the path's stroke).
	 */
	BASELINE_TEXT_ALIGNMENT = 1952539244,

	/**
	 * The bottom-edge or left-edge baseline of the em box is aligned to the path.
	 */
	BELOW_LEFT_EM_BOX_TEXT_ALIGNMENT = 1952607333,

	/**
	 * The ideographic character face box bottom-edge or left-edge baseline is aligned to the path.
	 */
	BELOW_LEFT_ICF_BOX_TEXT_ALIGNMENT = 1952607337,

	/**
	 * Aligns the midpoint between the ascender and the descender to the path (not the path's stroke).
	 */
	CENTER_TEXT_ALIGNMENT = 1952539508,

	/**
	 * Aligns descender to the path (not the path's stroke).
	 */
	DESCENDER_TEXT_ALIGNMENT = 1952539763,

}

/**
 * Options for aligning text to the path's stroke.
 */
declare enum PathTypeAlignments {
	/**
	 * The text is aligned to the bottom of the path stroke.
	 */
	BOTTOM_PATH_ALIGNMENT = 1885430367,

	/**
	 * The text is aligned to the center of the path stroke.
	 */
	CENTER_PATH_ALIGNMENT = 1885430623,

	/**
	 * The text is aligned to the top of the path stroke.
	 */
	TOP_PATH_ALIGNMENT = 1885434975,

}

/**
 * Options for flipping or unflipping text relative to the path.
 */
declare enum FlipValues {
	/**
	 * Flips the text across the path.
	 */
	FLIPPED = 2036755568,

	/**
	 * No flip effect applied.
	 */
	NOT_FLIPPED = 1852206192,

	/**
	 * Undefined flip effect.
	 */
	UNDEFINED_FLIP_VALUE = 1969646704,

}

/**
 * Location options for XML elements.
 */
declare enum XMLElementLocation {
	/**
	 * Locates the element at the end of the containing object.
	 */
	ELEMENT_END = 1483042404,

	/**
	 * Locates the element at the beginning of the containing object.
	 */
	ELEMENT_START = 1482844014,

}

/**
 * Options for specifying position relative to the reference XML element or withing the XML element.
 */
declare enum XMLElementPosition {
	/**
	 * Specifies the position after the XML element.
	 */
	AFTER_ELEMENT = 1482778228,

	/**
	 * Specifies the position before the XML element.
	 */
	BEFORE_ELEMENT = 1482843494,

	/**
	 * Specifies the position at the end of the XML element.
	 */
	ELEMENT_END = 1483042404,

	/**
	 * Specifies the position at the beginning of the XML element.
	 */
	ELEMENT_START = 1482844014,

}

/**
 * Options for incorporating imported XML content.
 */
declare enum XMLImportStyles {
	/**
	 * Appends the imported content.
	 */
	APPEND_IMPORT = 1481466217,

	/**
	 * Merges the imported content.
	 */
	MERGE_IMPORT = 1481469289,

}

/**
 * File encoding options for exported XML content.
 */
declare enum XMLFileEncoding {
	/**
	 * Shift-JIS encoding.
	 */
	SHIFT_JIS = 1249077875,

	/**
	 * UTF-16 encoding.
	 */
	UTF16 = 1937125686,

	/**
	 * UTF-8 encoding.
	 */
	UTF8 = 1937134904,

}

/**
 * File format options for converted images.
 */
declare enum ImageConversion {
	/**
	 * Uses the best format based on the image.
	 */
	AUTOMATIC = 1768059764,

	/**
	 * Uses GIF format for all images.
	 */
	GIF = 1734960742,

	/**
	 * Uses JPEG format for all images.
	 */
	JPEG = 1785751398,

	/**
	 * Uses PNG format for all images.
	 */
	PNG = 1397059687,

}

/**
 * Color palette options for GIF conversion.
 */
declare enum GIFOptionsPalette {
	/**
	 * Uses the adaptive (no dither) palette.
	 */
	ADAPTIVE_PALETTE = 1886151024,

	/**
	 * Uses the Macintosh palette.
	 */
	MACINTOSH_PALETTE = 1886154096,

	/**
	 * Uses the Web palette.
	 */
	WEB_PALETTE = 1886156656,

	/**
	 * Uses the Windows palette.
	 */
	WINDOWS_PALETTE = 1886156644,

}

/**
 * Quality options for converted JPEG images.
 */
declare enum JPEGOptionsQuality {
	/**
	 * High quality.
	 */
	HIGH = 1701726313,

	/**
	 * Low quality.
	 */
	LOW = 1701727351,

	/**
	 * Maximum quality.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Medium quality.
	 */
	MEDIUM = 1701727588,

}

/**
 * Formatting options for converted JPEG images.
 */
declare enum JPEGOptionsFormat {
	/**
	 * Uses baseline encoding to download the image in one pass.
	 */
	BASELINE_ENCODING = 1785751394,

	/**
	 * Uses progressive encoding to download the image in a series of passes, with the first pass at low resolution and each successive pass adding resolution to the image.
	 */
	PROGRESSIVE_ENCODING = 1785751408,

}

/**
 * Export options for untagged tables in tagged stories.
 */
declare enum XMLExportUntaggedTablesFormat {
	/**
	 * Exports untagged tables as CALS XML.
	 */
	CALS = 1484022643,

	/**
	 * Does not export untagged tables.
	 */
	NONE = 1852796517,

}

/**
 * File used for XML transformation.
 */
declare enum XMLTransformFile {
	/**
	 * Use stylesheet specified in XML
	 */
	STYLESHEET_IN_XML = 1483961208,

}

/**
 * Options for specifying the position of the anchored object relative to the its anchor.
 */
declare enum AnchorPosition {
	/**
	 * Place the anchored object above the line of text that contains the object.
	 */
	ABOVE_LINE = 1095716961,

	/**
	 * Custom anchor position.
	 */
	ANCHORED = 1097814113,

	/**
	 * Align the anchored object with the baseline of the line that contains the object.
	 */
	INLINE_POSITION = 1095716969,

}

/**
 * The horizontal alignment of an anchored object. Not valid when anchored position is inline.
 */
declare enum HorizontalAlignment {
	/**
	 * Place the anchored object at the center of the reference.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Place the anchored object to the left of the reference.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Place the anchored object to the right of the reference.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Place the anchored object relative to the text alignment.
	 */
	TEXT_ALIGN = 1954046316,

}

/**
 * The vertical alignment of an anchored object.
 */
declare enum VerticalAlignment {
	/**
	 * Place the anchored object at the bottom of the vertical reference point.
	 */
	BOTTOM_ALIGN = 1651471469,

	/**
	 * Place the anchored object at the vertical center of the vertical reference point.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Place the anchored object at the top of the vertical reference point.
	 */
	TOP_ALIGN = 1953460256,

}

/**
 * The horizontal alignment point of an anchored object.
 */
declare enum AnchoredRelativeTo {
	/**
	 * Align the anchored object to the anchor.
	 */
	ANCHOR_LOCATION = 1095786862,

	/**
	 * Align the anchored object to the edge of the text or table column.
	 */
	COLUMN_EDGE = 1095787375,

	/**
	 * Align the anchored object to the edge of the page.
	 */
	PAGE_EDGE = 1095790695,

	/**
	 * Align the anchored object to the page margin.
	 */
	PAGE_MARGINS = 1095789927,

	/**
	 * Align the anchored object to the edge of the text frame.
	 */
	TEXT_FRAME = 1954051174,

}

/**
 * Options for balancing line endings in the text.
 */
declare enum BalanceLinesStyle {
	/**
	 * Balances lines equally.
	 */
	FULLY_BALANCED = 1114391921,

	/**
	 * Does not balance lines.
	 */
	NO_BALANCING = 1114394470,

	/**
	 * Prefers longer last lines.
	 */
	PYRAMID_SHAPE = 1114394745,

	/**
	 * Prefers shorter last lines.
	 */
	VEE_SHAPE = 1114396261,

}

/**
 * The vertical alignment point of an anchored object.
 */
declare enum VerticallyRelativeTo {
	/**
	 * Align the anchored object to the top of capital letters.
	 */
	CAPHEIGHT = 1096185955,

	/**
	 * Align the anchored object to the edge of the text or table column.
	 */
	COLUMN_EDGE = 1095787375,

	/**
	 * Align the anchored object to the bottom of the embox.
	 */
	EMBOX_BOTTOM = 1096183106,

	/**
	 * Align the anchored object to the middle of the embox.
	 */
	EMBOX_MIDDLE = 1096183117,

	/**
	 * Align the anchored object to the top of the embox.
	 */
	EMBOX_TOP = 1096181101,

	/**
	 * Align the anchored object to the top of the tallest letters in the text.
	 */
	LINE_ASCENT = 1096180083,

	/**
	 * Align the anchored object to the baseline of the line of text.
	 */
	LINE_BASELINE = 1096180321,

	/**
	 * Align the anchored object to the top of lower case letters with no ascent, such as x.
	 */
	LINE_XHEIGHT = 1096185960,

	/**
	 * Align the anchored object to the edge of the page.
	 */
	PAGE_EDGE = 1095790695,

	/**
	 * Align the anchored object to the page margin.
	 */
	PAGE_MARGINS = 1095789927,

	/**
	 * Align the anchored object to the edge of the text frame.
	 */
	TEXT_FRAME = 1954051174,

	/**
	 * Align the anchored object to the top of the text leading.
	 */
	TOP_OF_LEADING = 1096180332,

}

/**
 * OpenType positional form options.
 */
declare enum PositionalForms {
	/**
	 * Calculated forms.
	 */
	CALCULATE = 1634756205,

	/**
	 * Final form.
	 */
	FINAL = 1718185569,

	/**
	 * Initial form.
	 */
	INITIAL = 1768843636,

	/**
	 * Isolated form.
	 */
	ISOLATED = 1769172844,

	/**
	 * Medial form.
	 */
	MEDIAL = 1835361385,

	/**
	 * None.
	 */
	NONE = 1852796517,

}

/**
 * Stroke alignment options.
 */
declare enum TextStrokeAlign {
	/**
	 * The stroke straddles the path.
	 */
	CENTER_ALIGNMENT = 1936998723,

	/**
	 * The stroke is outside the path, like a picture frame.
	 */
	OUTSIDE_ALIGNMENT = 1936998735,

}

/**
 * End join types.
 */
declare enum OutlineJoin {
	/**
	 * Beveled end join.
	 */
	BEVEL_END_JOIN = 1651142510,

	/**
	 * Miter end join.
	 */
	MITER_END_JOIN = 1835691886,

	/**
	 * Rounded end join.
	 */
	ROUND_END_JOIN = 1919577966,

}

/**
 * The starting point used to calculate the baseline frame grid offset.
 */
declare enum BaselineFrameGridRelativeOption {
	/**
	 * Offsets the grid from the top of the text frame.
	 */
	TOP_OF_FRAME = 1163161446,

	/**
	 * Offsets the grid from the top inset of the text frame.
	 */
	TOP_OF_INSET = 1163161449,

	/**
	 * Offsets the grid from the top margin of the page.
	 */
	TOP_OF_MARGIN = 1163161453,

	/**
	 * Offsets the grid from the top of the page.
	 */
	TOP_OF_PAGE = 1163161458,

}

/**
 * Options for specifying the amount of vertical space between the top of the footnote container and the first line of footnote text.
 */
declare enum FootnoteFirstBaseline {
	/**
	 * The tallest character in the font falls below the top of the footnote container.
	 */
	ASCENT_OFFSET = 1296135023,

	/**
	 * The tops of upper case letters touch the top of the footnote container.
	 */
	CAP_HEIGHT = 1296255087,

	/**
	 * The em box height of the text defines the distance between the baseline of the text and the top of the footnote container.
	 */
	EMBOX_HEIGHT = 1296386159,

	/**
	 * The footnote minimum first baseline offset value defines the distance between the baseline of the text and the top of the footnote container.
	 */
	FIXED_HEIGHT = 1313228911,

	/**
	 * The leading value of the text defines the distance between the baseline of the text and the top of the footnote container.
	 */
	LEADING_OFFSET = 1296852079,

	/**
	 * The tops of lower case letters without ascents, such as x, touch the top of the footnote container.
	 */
	X_HEIGHT = 1299728495,

}

/**
 * Options for restarting footnote numbering.
 */
declare enum FootnoteRestarting {
	/**
	 * Does not restart numbering; numbers footnotes sequentially throughout the document.
	 */
	DONT_RESTART = 1180988019,

	/**
	 * Restarts footnote numbering on each page.
	 */
	PAGE_RESTART = 1181774451,

	/**
	 * Restarts footnote numbering in each section.
	 */
	SECTION_RESTART = 1181053555,

	/**
	 * Restarts footnote numbering on each spread.
	 */
	SPREAD_RESTART = 1181971059,

}

/**
 * Footnote prefix or suffix placement options.
 */
declare enum FootnotePrefixSuffix {
	/**
	 * Does not use a prefix or suffix.
	 */
	NO_PREFIX_SUFFIX = 1181774702,

	/**
	 * Places the prefix and/or suffix on both the the footnote reference number in the main text and the footnote marker number in the footnote text.
	 */
	PREFIX_SUFFIX_BOTH = 1181774690,

	/**
	 * Places the prefix and/or suffix on the footnote marker number in the footnote text.
	 */
	PREFIX_SUFFIX_MARKER = 1181774708,

	/**
	 * Places the prefix and/or suffix on the footnote reference number in the main text.
	 */
	PREFIX_SUFFIX_REFERENCE = 1181774706,

}

/**
 * Footnote numbering style options.
 */
declare enum FootnoteNumberingStyle {
	/**
	 * Uses Arabic numerals.
	 */
	ARABIC = 1298231906,

	/**
	 * Uses Arabic Abjad
	 */
	ARABIC_ABJAD = 1296130410,

	/**
	 * Uses Arabic Alif Ba Tah
	 */
	ARABIC_ALIF_BA_TAH = 1296130420,

	/**
	 * Asterisks.
	 */
	ASTERISKS = 1298232180,

	/**
	 * Double leading zeros.
	 */
	DOUBLE_LEADING_ZEROS = 1296329850,

	/**
	 * Full-width Arabic.
	 */
	FULL_WIDTH_ARABIC = 1296455521,

	/**
	 * Uses Hebrew Biblical
	 */
	HEBREW_BIBLICAL = 1296589410,

	/**
	 * Uses Hebrew Non Standard
	 */
	HEBREW_NON_STANDARD = 1296589422,

	/**
	 * Kanji.
	 */
	KANJI = 1296788073,

	/**
	 * Uses lowercase letters.
	 */
	LOWER_LETTERS = 1296855660,

	/**
	 * Uses lowercase Roman numerals.
	 */
	LOWER_ROMAN = 1297247596,

	/**
	 * Single leading zeros.
	 */
	SINGLE_LEADING_ZEROS = 1297312890,

	/**
	 * Uses symbols.
	 */
	SYMBOLS = 1181971321,

	/**
	 * Uses uppercase letters.
	 */
	UPPER_LETTERS = 1296855669,

	/**
	 * Uses uppercase Roman numerals.
	 */
	UPPER_ROMAN = 1297247605,

}

/**
 * Options for positioning footnote reference numbers relative to characters the main text.
 */
declare enum FootnoteMarkerPositioning {
	/**
	 * Uses the position defined in the character style applied to footnote reference numbers. For information, see footnote marker style.
	 */
	NORMAL_MARKER = 1181576816,

	/**
	 * Gives the marker ruby style positioning.
	 */
	RUBY_MARKER = 1181577840,

	/**
	 * Subscripts footnote reference numbers.
	 */
	SUBSCRIPT_MARKER = 1181578096,

	/**
	 * Superscripts footnote reference numbers.
	 */
	SUPERSCRIPT_MARKER = 1181569904,

}

/**
 * Override clearing options.
 */
declare enum OverrideType {
	/**
	 * Clears all types of override.
	 */
	ALL = 1634495520,

	/**
	 * Clears only character style overrides.
	 */
	CHARACTER_ONLY = 1667789423,

	/**
	 * Clears only paragraph style overrides.
	 */
	PARAGRAPH_ONLY = 1885434479,

}

/**
 * The resolution strategy to employ for imported styles that have the same names as existing styles.
 */
declare enum GlobalClashResolutionStrategy {
	/**
	 * Does not import styles whose names clash with existing items.
	 */
	DO_NOT_LOAD_THE_STYLE = 1147495276,

	/**
	 * Overwrites existing styles whose names clash with imported items.
	 */
	LOAD_ALL_WITH_OVERWRITE = 1279350607,

	/**
	 * Renames imported styles whose names clash with existing items to preserve existing items.
	 */
	LOAD_ALL_WITH_RENAME = 1279350610,

}

/**
 * Text orientation options.
 */
declare enum StoryHorizontalOrVertical {
	/**
	 * Orients the text horizontally.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * The text direction is unknown.
	 */
	UNKNOWN = 1433299822,

	/**
	 * Orients the text vertically.
	 */
	VERTICAL = 1986359924,

}

/**
 * Options for auto page insertion in response to overset text.
 */
declare enum AddPageOptions {
	/**
	 * Insert pages at end of document.
	 */
	END_OF_DOCUMENT = 1634037604,

	/**
	 * Insert pages at end of section.
	 */
	END_OF_SECTION = 1634037624,

	/**
	 * Insert pages at end of story.
	 */
	END_OF_STORY = 1634037619,

}

/**
 * Text variable types.
 */
declare enum VariableTypes {
	/**
	 * Chapter number variable.
	 */
	CHAPTER_NUMBER_TYPE = 1668183152,

	/**
	 * Creation date variable.
	 */
	CREATION_DATE_TYPE = 1414947684,

	/**
	 * Custom text variable.
	 */
	CUSTOM_TEXT_TYPE = 1414947700,

	/**
	 * File name variable.
	 */
	FILE_NAME_TYPE = 1414948462,

	/**
	 * Last page number variable.
	 */
	LAST_PAGE_NUMBER_TYPE = 1414952048,

	/**
	 * Live Caption variable.
	 */
	LIVE_CAPTION_TYPE = 1414947693,

	/**
	 * Running header (character style) variable.
	 */
	MATCH_CHARACTER_STYLE_TYPE = 1414947667,

	/**
	 * Running header (paragraph style) variable.
	 */
	MATCH_PARAGRAPH_STYLE_TYPE = 1414950995,

	/**
	 * Modification date variable.
	 */
	MODIFICATION_DATE_TYPE = 1414950244,

	/**
	 * Output date variable.
	 */
	OUTPUT_DATE_TYPE = 1414950756,

	/**
	 * Private cross reference chapter number variable.
	 */
	XREF_CHAPTER_NUMBER_TYPE = 1414947694,

	/**
	 * Private cross reference page number variable.
	 */
	XREF_PAGE_NUMBER_TYPE = 1414953074,

}

/**
 * Scopes for page number variable.
 */
declare enum VariableScopes {
	/**
	 * The scope is limited to the current document.
	 */
	DOCUMENT_SCOPE = 1129538671,

	/**
	 * The scope is limited to the current section.
	 */
	SECTION_SCOPE = 1129542501,

}

/**
 * Number variable numbering styles.
 */
declare enum VariableNumberingStyles {
	/**
	 * Arabic numerals.
	 */
	ARABIC = 1298231906,

	/**
	 * Current
	 */
	CURRENT = 1298363762,

	/**
	 * Double leading zeros.
	 */
	DOUBLE_LEADING_ZEROS = 1296329850,

	/**
	 * Full-width Arabic numerals.
	 */
	FULL_WIDTH_ARABIC = 1296455521,

	/**
	 * Kanji.
	 */
	KANJI = 1296788073,

	/**
	 * Lowercase letters.
	 */
	LOWER_LETTERS = 1296855660,

	/**
	 * Lowercase Roman numerals.
	 */
	LOWER_ROMAN = 1297247596,

	/**
	 * Single leading zero.
	 */
	SINGLE_LEADING_ZEROS = 1297312890,

	/**
	 * Uppercase letters.
	 */
	UPPER_LETTERS = 1296855669,

	/**
	 * Uppercase Roman numerals.
	 */
	UPPER_ROMAN = 1297247605,

}

/**
 * Search strategy options.
 */
declare enum SearchStrategies {
	/**
	 * Searches forward from the start of the current page.
	 */
	FIRST_ON_PAGE = 1396794992,

	/**
	 * Search backward from the end of the current page.
	 */
	LAST_ON_PAGE = 1396796528,

}

/**
 * Change case options.
 */
declare enum ChangeCaseOptions {
	/**
	 * Converts all letters to lowercase.
	 */
	LOWERCASE = 1667460195,

	/**
	 * No conversion.
	 */
	NONE = 1852796517,

	/**
	 * Converts the first letter of the first word of each sentence to uppercase.
	 */
	SENTENCECASE = 1667461987,

	/**
	 * Converts the first letter of each word to uppercase.
	 */
	TITLECASE = 1667462243,

	/**
	 * Converts all letters to uppercase.
	 */
	UPPERCASE = 1667462499,

}

/**
 * Auto sizing type options for text.
 */
declare enum AutoSizingTypeEnum {
	/**
	 * Text frame will be resized in both(height and width) dimensions.
	 */
	HEIGHT_AND_WIDTH = 1752069993,

	/**
	 * Text frame will be resized in both(height and width) dimensions proportionally.
	 */
	HEIGHT_AND_WIDTH_PROPORTIONALLY = 1752070000,

	/**
	 * Text frame will be resized in height dimension only.
	 */
	HEIGHT_ONLY = 1751476583,

	/**
	 * Text frame auto-sizing is off.
	 */
	OFF = 1330005536,

	/**
	 * Text frame will be resized in width dimension only.
	 */
	WIDTH_ONLY = 2003395700,

}

/**
 * Auto sizing reference points for text.
 */
declare enum AutoSizingReferenceEnum {
	/**
	 * Center point on the botom edge of bounding box
	 */
	BOTTOM_CENTER_POINT = 1651467109,

	/**
	 * Bottom left point of bounding box
	 */
	BOTTOM_LEFT_POINT = 1651469413,

	/**
	 * Bottom right point of bounding box
	 */
	BOTTOM_RIGHT_POINT = 1651470953,

	/**
	 * Center point of bounding box
	 */
	CENTER_POINT = 1668183154,

	/**
	 * Center point on the left edge of bounding box
	 */
	LEFT_CENTER_POINT = 1818583909,

	/**
	 * Center point on the right edge of bounding box
	 */
	RIGHT_CENTER_POINT = 1919509349,

	/**
	 * Center point on the top edge of bounding box
	 */
	TOP_CENTER_POINT = 1953456997,

	/**
	 * Top left point of bounding box
	 */
	TOP_LEFT_POINT = 1953459301,

	/**
	 * Top right point of bounding box
	 */
	TOP_RIGHT_POINT = 1953460841,

}

/**
 * Type of Paragraph span.
 */
declare enum SpanColumnTypeOptions {
	/**
	 * Paragraph is a single column
	 */
	SINGLE_COLUMN = 1163092844,

	/**
	 * Paragraph spans the columns
	 */
	SPAN_COLUMNS = 1936745326,

	/**
	 * Paragraph splits the columns
	 */
	SPLIT_COLUMNS = 1937007470,

}

/**
 * Span Column Count Options.
 */
declare enum SpanColumnCountOptions {
	/**
	 * Paragraph spans all columns
	 */
	ALL = 1634495520,

}

/**
 * Options for specifying basis of the width of the paragraph shading.
 */
declare enum ParagraphShadingWidthEnum {
	/**
	 * Makes the paragraph shading based on width of the column.
	 */
	COLUMN_WIDTH = 1265399652,

	/**
	 * Makes the paragraph shading based on width of lines of text in the paragraph.
	 */
	TEXT_WIDTH = 1886681207,

}

/**
 * Line justification options.
 */
declare enum LineAlignment {
	/**
	 * Center aligns the text.
	 */
	CENTER_LINE_ALIGN = 1818321774,

	/**
	 * Justifies horizontal text on both the right and left and center aligns the last line or justifies vertical text on both the top and bottom and center aligns the last line.
	 */
	CENTER_LINE_JUSTIFY = 1818455658,

	/**
	 * Justifies horizontal text on both the right and left or justifies vertical text on both the top and bottom and gives all lines a uniform length.
	 */
	FULL_LINE_JUSTIFY = 1818651754,

	/**
	 * Left aligns horizontal text or top aligns vertical text.
	 */
	LEFT_OR_TOP_LINE_ALIGN = 1818324084,

	/**
	 * Justifies horizontal text on both the right and left and left aligns the last line or justifies vertical text on both the top and bottom and top aligns the last line.
	 */
	LEFT_OR_TOP_LINE_JUSTIFY = 1819047018,

	/**
	 * Right aligns horizontal text or bottom aligns vertical text.
	 */
	RIGHT_OR_BOTTOM_LINE_ALIGN = 1818325602,

	/**
	 * Justifies horizontal text on both the right and left and right aligns the last line or justifies vertical text on both the top and bottom and bottom aligns the last line.
	 */
	RIGHT_OR_BOTTOM_LINE_JUSTIFY = 1819435626,

}

/**
 * Grid view options.
 */
declare enum GridViewSettings {
	/**
	 * Align view.
	 */
	ALIGN_VIEW_ENUM = 1783062902,

	/**
	 * Grid and ZN view.
	 */
	GRID_AND_ZN_VIEW_ENUM = 1783064442,

	/**
	 * Grid view.
	 */
	GRID_VIEW_ENUM = 1783064438,

	/**
	 * ZN view.
	 */
	ZN_VIEW_ENUM = 1783069302,

}

/**
 * Character count location options.
 */
declare enum CharacterCountLocation {
	/**
	 * Displays the character count at the bottom of the frame.
	 */
	BOTTOM_ALIGN = 1651471469,

	/**
	 * Displays the character count on the left side of the frame.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Hides the character count.
	 */
	NONE = 1852796517,

	/**
	 * Displays the character count on the right side of the frame.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Displays the character count at the top of the frame.
	 */
	TOP_ALIGN = 1953460256,

}

/**
 * InCopy UI colors.
 */
declare enum InCopyUIColors {
	/**
	 * Amber.
	 */
	AMBER = 1765895522,

	/**
	 * Aqua.
	 */
	AQUA = 1765896545,

	/**
	 * Black.
	 */
	BLACK = 1765960811,

	/**
	 * Blue.
	 */
	BLUE = 1765960821,

	/**
	 * Blueberry.
	 */
	BLUEBERRY = 1765960802,

	/**
	 * Brick red.
	 */
	BRICK_RED = 1765962340,

	/**
	 * Brown.
	 */
	BROWN = 1765962350,

	/**
	 * Burgundy.
	 */
	BURGUNDY = 1765962343,

	/**
	 * Canary.
	 */
	CANARY = 1766026873,

	/**
	 * Carnation.
	 */
	CARNATION = 1766023538,

	/**
	 * Charcoal.
	 */
	CHARCOAL = 1766025324,

	/**
	 * Cirrus.
	 */
	CIRRUS = 1766025586,

	/**
	 * Cornstarch.
	 */
	CORNSTARCH = 1766027886,

	/**
	 * Cute teal.
	 */
	CUTE_TEAL = 1766028396,

	/**
	 * Cyan.
	 */
	CYAN = 1766029678,

	/**
	 * Dark blue.
	 */
	DARK_BLUE = 1766089324,

	/**
	 * Dark green.
	 */
	DARK_GREEN = 1766090610,

	/**
	 * Eggplant.
	 */
	EGGPLANT = 1766156135,

	/**
	 * Electrolyte.
	 */
	ELECTROLYTE = 1766157411,

	/**
	 * Ether.
	 */
	ETHER = 1766159464,

	/**
	 * Fiesta.
	 */
	FIESTA = 1766222181,

	/**
	 * Forest.
	 */
	FOREST = 1766224756,

	/**
	 * Fuchsia.
	 */
	FUCHSIA = 1766225267,

	/**
	 * Gold.
	 */
	GOLD = 1766288484,

	/**
	 * Grape.
	 */
	GRAPE = 1766290032,

	/**
	 * Graphite.
	 */
	GRAPHITE = 1766289512,

	/**
	 * Grass green.
	 */
	GRASS_GREEN = 1766287218,

	/**
	 * Gray.
	 */
	GRAY = 1766290041,

	/**
	 * Green.
	 */
	GREEN = 1766290030,

	/**
	 * Grid blue.
	 */
	GRID_BLUE = 1766285932,

	/**
	 * Grid green.
	 */
	GRID_GREEN = 1766286439,

	/**
	 * Grid orange.
	 */
	GRID_ORANGE = 1766289266,

	/**
	 * Gunmetal.
	 */
	GUNMETAL = 1766290798,

	/**
	 * Iris.
	 */
	IRIS = 1766421107,

	/**
	 * Jade.
	 */
	JADE = 1766482276,

	/**
	 * Lavender.
	 */
	LAVENDER = 1766618734,

	/**
	 * Lemon.
	 */
	LEMON = 1766616430,

	/**
	 * Lichen.
	 */
	LICHEN = 1766615395,

	/**
	 * Light blue.
	 */
	LIGHT_BLUE = 1766613612,

	/**
	 * Light gray.
	 */
	LIGHT_GRAY = 1766614898,

	/**
	 * Light olive.
	 */
	LIGHT_OLIVE = 1766616940,

	/**
	 * Lime.
	 */
	LIME = 1766615405,

	/**
	 * Lipstick.
	 */
	LIPSTICK = 1766615408,

	/**
	 * Magenta.
	 */
	MAGENTA = 1766680430,

	/**
	 * Midnight.
	 */
	MIDNIGHT = 1766680932,

	/**
	 * Mocha.
	 */
	MOCHA = 1766682467,

	/**
	 * Mustard.
	 */
	MUSTARD = 1766684019,

	/**
	 * Ochre.
	 */
	OCHRE = 1766810482,

	/**
	 * Olive green.
	 */
	OLIVE_GREEN = 1766812790,

	/**
	 * Orange.
	 */
	ORANGE = 1766814318,

	/**
	 * Peach.
	 */
	PEACH = 1766876008,

	/**
	 * Pink.
	 */
	PINK = 1766878827,

	/**
	 * Powder.
	 */
	POWDER = 1766879095,

	/**
	 * Purple.
	 */
	PURPLE = 1766879856,

	/**
	 * Red.
	 */
	RED = 1767007588,

	/**
	 * Slate.
	 */
	SLATE = 1767074932,

	/**
	 * Smoke.
	 */
	SMOKE = 1767075179,

	/**
	 * Sulphur.
	 */
	SULPHUR = 1767077228,

	/**
	 * Tan.
	 */
	TAN = 1767137646,

	/**
	 * Teal.
	 */
	TEAL = 1767138668,

	/**
	 * Ultramarine.
	 */
	ULTRAMARINE = 1767205997,

	/**
	 * Violet.
	 */
	VIOLET = 1767271540,

	/**
	 * Wheat.
	 */
	WHEAT = 1767336037,

	/**
	 * White.
	 */
	WHITE = 1767336052,

	/**
	 * Yellow.
	 */
	YELLOW = 1767468151,

}

/**
 * Cursor types.
 */
declare enum CursorTypes {
	/**
	 * Uses a barbell cursor.
	 */
	BARBELL_CURSOR = 1698841196,

	/**
	 * Uses a block cursor.
	 */
	BLOCK_CURSOR = 1698851951,

	/**
	 * Uses a standard cursor.
	 */
	STANDARD_CURSOR = 1699968100,

	/**
	 * Uses a thick cursor.
	 */
	THICK_CURSOR = 1700029291,

}

/**
 * The anti-aliasing type.
 */
declare enum AntiAliasType {
	/**
	 * Color anti-aliasing.
	 */
	COLOR_ANTIALIASING = 1665418322,

	/**
	 * Gray anti-aliasing.
	 */
	GRAY_ANTIALIASING = 1732527186,

	/**
	 * Thicker anti-aliasing.
	 */
	THICKER_ANTIALIASING = 1950444659,

}

/**
 * Line spacing type.
 */
declare enum LineSpacingType {
	/**
	 * Double space
	 */
	DOUBLE_SPACE = 1682068336,

	/**
	 * One and half space
	 */
	ONE_AND_HALF_SPACE = 1866549363,

	/**
	 * Single space
	 */
	SINGLE_SPACE = 1936282480,

	/**
	 * Triple space
	 */
	TRIPLE_SPACE = 1951552368,

}

/**
 * Page numbering options for book content objects within the book.
 */
declare enum RepaginateOption {
	/**
	 * Starts page numbers for each book content object at the next even-numbered page after the last page of the previous book content object.
	 */
	NEXT_EVEN_PAGE = 1164993131,

	/**
	 * Starts page numbers for each book content object at the next odd-numbered page after the last page of the previous book content object.
	 */
	NEXT_ODD_PAGE = 1332765291,

	/**
	 * Continues page numbers sequentially from the previous book content object.
	 */
	NEXT_PAGE = 1885500011,

}

/**
 * Book content file status options.
 */
declare enum BookContentStatus {
	/**
	 * The book content object is being used by someone else and is therefore locked.
	 */
	DOCUMENT_IN_USE = 1148150601,

	/**
	 * The book content object is open.
	 */
	DOCUMENT_IS_OPEN = 1148150607,

	/**
	 * The book content object has been modified after repagination.
	 */
	DOCUMENT_OUT_OF_DATE = 1148150596,

	/**
	 * The book content object is missing because it has been moved, renamed, or deleted.
	 */
	MISSING_DOCUMENT = 1148150605,

	/**
	 * The book content object is not open and is unchanged.
	 */
	NORMAL = 1852797549,

}

/**
 * Options for matching names when synchronizing styles in a book.
 */
declare enum SmartMatchOptions {
	/**
	 * Match only the style name while finding styles in target.
	 */
	MATCH_STYLE_NAME = 1936552814,

	/**
	 * Match the full path of style while finding styles in target.
	 */
	MATCH_STYLE_PATH = 1936549488,

}

/**
 * Specify the type of cell, either text or graphic.
 */
declare enum CellTypeEnum {
	/**
	 * Graphic or Page item cell.
	 */
	GRAPHIC_TYPE_CELL = 1701728329,

	/**
	 * Text cell.
	 */
	TEXT_TYPE_CELL = 1701730388,

}

/**
 * The row type.
 */
declare enum RowTypes {
	/**
	 * Makes the row a body row.
	 */
	BODY_ROW = 1161982583,

	/**
	 * Makes the row a footer row. Note: When setting row type as footer row, the row must be either the bottom row in the table or adjacent to an existing footer row.
	 */
	FOOTER_ROW = 1162244727,

	/**
	 * Makes the row a header row. Note: When setting row type as header row, the row must be either the top row in the table or adjacent to an existing header row.
	 */
	HEADER_ROW = 1162375799,

	/**
	 * (Read-only) The column's rows are of multiple types.
	 */
	MIXED_STATE = 1162703479,

}

/**
 * Placement options for header or footer rows.
 */
declare enum HeaderFooterBreakTypes {
	/**
	 * Places headers or footers in each text column.
	 */
	IN_ALL_TEXT_COLUMNS = 1231115363,

	/**
	 * Places one instance of headers or footers per page.
	 */
	ONCE_PER_PAGE = 1332760673,

	/**
	 * Repeats headers or footers in each text frame.
	 */
	ONCE_PER_TEXT_FRAME = 1332761702,

}

/**
 * Pattern options for alternating fills.
 */
declare enum AlternatingFillsTypes {
	/**
	 * Alternates column fills.
	 */
	ALTERNATING_COLUMNS = 1097614188,

	/**
	 * Alternates row fills.
	 */
	ALTERNATING_ROWS = 1097618039,

	/**
	 * No alternating pattern.
	 */
	NO_ALTERNATING_PATTERN = 1097617007,

}

/**
 * Options for displaying row and column strokes at corners.
 */
declare enum StrokeOrderTypes {
	/**
	 * Places row strokes in front of column strokes when row and column strokes are different colors; joins striped strokes and connects crossing points.
	 */
	BEST_JOINS = 1935828330,

	/**
	 * Places column strokes in front of row strokes.
	 */
	COLUMN_ON_TOP = 1935896436,

	/**
	 * Places row strokes in front when row and column strokes are different colors; joins striped strokes only at points where strokes cross in a T-shape.
	 */
	INDESIGN_2_COMPATIBILITY = 1936286819,

	/**
	 * Places row strokes in front of column strokes.
	 */
	ROW_ON_TOP = 1936879476,

}

/**
 * Values to specify the order table cells will display in story and galley views.
 */
declare enum DisplayOrderOptions {
	/**
	 * Order by columns.
	 */
	ORDER_BY_COLUMNS = 1652114254,

	/**
	 * Order by rows.
	 */
	ORDER_BY_ROWS = 1652118103,

}

/**
 * Rasterization options.
 */
declare enum FlattenerLevel {
	/**
	 * Keeps as much artwork as possible vector data.
	 */
	HIGH = 1701726313,

	/**
	 * Rasterizes all artwork.
	 */
	LOW = 1701727351,

	/**
	 * Rasterizes a medium amount of artwork.
	 */
	MEDIUM = 1701727588,

	/**
	 * Rasterizes more than a medium amount of artwork.
	 */
	MEDIUM_HIGH = 1718373704,

	/**
	 * Rasterizes almost all artwork.
	 */
	MEDIUM_LOW = 1718373708,

}

/**
 * Transparency blending space options.
 */
declare enum BlendingSpace {
	/**
	 * Uses the CMYK profile.
	 */
	CMYK = 1129142603,

	/**
	 * Defaults to the current color profile.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Uses the RGB color profile.
	 */
	RGB = 1666336578,

}

/**
 * Blend mode options.
 */
declare enum BlendMode {
	/**
	 * Creates a color with the luminance of the base color and the hue and saturation of the blend color. Note: Preserves gray levels and is useful for coloring monochrome images or tinting color images. Creates the inverse effect of the luminosity blend mode.
	 */
	COLOR = 1668246642,

	/**
	 * Darkens the base color to reflect the blend color. Note: Blending with white produces no change.
	 */
	COLOR_BURN = 2020625768,

	/**
	 * Brightens the base color to reflect the blend color. Note: Blending with pure black produces no change.
	 */
	COLOR_DODGE = 2020625767,

	/**
	 * Selects the darker of the base or blend colors as the resulting color; replaces areas lighter than the blend color but does not change areas darker than the blend color.
	 */
	DARKEN = 2020625769,

	/**
	 * Subtracts either the blend color from the base color or vice versa, depending on which has the greater brightness value. Note: Blending with white inverts the base color values; blending with black produces no change.
	 */
	DIFFERENCE = 2020625771,

	/**
	 * Creates an effect similar to--but lower in contrast than--the difference blend mode. Note: Blending with white inverts the base color values; blending with black produces no change
	 */
	EXCLUSION = 2020625772,

	/**
	 * For blend colors lighter than 50% gray, lightens the artwork as if it were screened; for blend colors darker than 50% gray, darkens the artwork as if it were multiplied. Note: Painting with pure black or white results in pure black or white.
	 */
	HARD_LIGHT = 2020625766,

	/**
	 * Creates a color with the luminance and saturation of the base color and the hue of the blend color.
	 */
	HUE = 2020625773,

	/**
	 * Selects the lighter of the base or blend colors as the resulting color; replaces areas darker than the blend color but does not change areas lighter than the blend color
	 */
	LIGHTEN = 2020625770,

	/**
	 * Creates a color with the hue and saturation of the base color and the luminance of the blend color. Note: Creates the inverse effect of the color blend mode.
	 */
	LUMINOSITY = 2020625776,

	/**
	 * Multiplies the base color by the blend color, resulting in a darker color. Note: Multiplying with black produces black; multiplying with white leaves the color unchanged.
	 */
	MULTIPLY = 2020625762,

	/**
	 * Colors the object with the blend color, without interaction with the base color.
	 */
	NORMAL = 1852797549,

	/**
	 * Multiplies or screens the colors, depending on the base color; patterns or colors overlay the existing artwork, preserving base color highlights and shadows while mixing in the blend color to reflect the lightness or darkness of the original color.
	 */
	OVERLAY = 2020625764,

	/**
	 * Creates a color with the luminance and hue of the base color and the saturation of the blend color. Note: Does not change areas with no saturation (0% gray).
	 */
	SATURATION = 1380545377,

	/**
	 * Multiplies the inverse of the blend and base colors, resulting in a lighter color. Note: Screening with white produces white; screening with black leaves the color unchanged.
	 */
	SCREEN = 2020625763,

	/**
	 * For blend colors lighter than 50% gray, lightens the artwork as if it were dodged; for blend colors darker than 50% gray, darkens the artwork as if it were burned. Note: Painting with pure black or white produces a distinctly darker or lighter area, but does not result in pure black or white.
	 */
	SOFT_LIGHT = 2020625765,

}

/**
 * Shadow mode options.
 */
declare enum ShadowMode {
	/**
	 * Uses a standard blurred drop shadow.
	 */
	DROP = 2020623440,

	/**
	 * Does not use a shadow.
	 */
	NONE = 1852796517,

}

/**
 * On/off options for feathering.
 */
declare enum FeatherMode {
	/**
	 * Does not use feathering.
	 */
	NONE = 1852796517,

	/**
	 * Uses standard feathering.
	 */
	STANDARD = 2020623970,

}

/**
 * Corner type options.
 */
declare enum FeatherCornerType {
	/**
	 * The edges of the object fade from opaque to transparent.
	 */
	DIFFUSION = 2020623203,

	/**
	 * The corners are rounded by the feather radius.
	 */
	ROUNDED = 2020623202,

	/**
	 * The gradient exactly follows the outer edge of the object, including sharp corners.
	 */
	SHARP = 2020623201,

}

/**
 * Flattener level override options.
 */
declare enum SpreadFlattenerLevel {
	/**
	 * Uses the specified custom flattening level.
	 */
	CUSTOM = 1131639917,

	/**
	 * Uses the default level.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Turns off flattening.
	 */
	NONE = 1852796517,

}

/**
 * Glow technique options.
 */
declare enum GlowTechnique {
	/**
	 * Precise.
	 */
	PRECISE = 2020618338,

	/**
	 * Softer.
	 */
	SOFTER = 2020618337,

}

/**
 * Inner glow source options.
 */
declare enum InnerGlowSource {
	/**
	 * The glow radiates from the object's center.
	 */
	CENTER_SOURCED = 2020618593,

	/**
	 * The glow radiates from the edge of the object.
	 */
	EDGE_SOURCED = 2020618594,

}

/**
 * Bevel and emboss style options.
 */
declare enum BevelAndEmbossStyle {
	/**
	 * An emboss effect is applied to the object.
	 */
	EMBOSS = 2020618851,

	/**
	 * The inside edges of the object are beveled.
	 */
	INNER_BEVEL = 2020618850,

	/**
	 * The outside edges of the object are beveled.
	 */
	OUTER_BEVEL = 2020618849,

	/**
	 * An emboss effect is applied to the edges of the object.
	 */
	PILLOW_EMBOSS = 2020618852,

}

/**
 * Bevel and emboss technique options.
 */
declare enum BevelAndEmbossTechnique {
	/**
	 * Emboss and bevel contours are chiseled and have hard corners.
	 */
	CHISEL_HARD = 2020619106,

	/**
	 * Emboss or bevel contours chiseled but softened somewhat.
	 */
	CHISEL_SOFT = 2020619107,

	/**
	 * Emboss and bevel contours are smooth.
	 */
	SMOOTH_CONTOUR = 2020619105,

}

/**
 * Bevel and emboss direction options.
 */
declare enum BevelAndEmbossDirection {
	/**
	 * The effect appears depressed.
	 */
	DOWN = 1181971556,

	/**
	 * The effect appears raised.
	 */
	UP = 1181971566,

}

/**
 * Follow-shape options for directional feathering.
 */
declare enum FollowShapeModeOptions {
	/**
	 * Feathers all edges that face the specified angle.
	 */
	ALL_EDGES = 1701721442,

	/**
	 * Feathers only the leading edge facing the specified angle.
	 */
	LEADING_EDGE = 1701721441,

	/**
	 * Disables shape following and uses the rectangular bounds of the object.
	 */
	NONE = 1852796517,

}

/**
 * Page number position options.
 */
declare enum PageNumberPosition {
	/**
	 * Places page numbers after entry text.
	 */
	AFTER_ENTRY = 1634100590,

	/**
	 * Places page numbers before entry text.
	 */
	BEFORE_ENTRY = 1650877806,

	/**
	 * Turns off page numbers.
	 */
	NONE = 1852796517,

}

/**
 * Numbered paragraphs options.
 */
declare enum NumberedParagraphsOptions {
	/**
	 * Excludes paragraph numbers.
	 */
	EXCLUDE_NUMBERS = 1952804469,

	/**
	 * Includes the full paragraph text.
	 */
	INCLUDE_FULL_PARAGRAPH = 1953064560,

	/**
	 * Includes only the paragraph number.
	 */
	INCLUDE_NUMBERS_ONLY = 1953066607,

}

/**
 * Enum for status of the comment
 */
declare enum CommentStatusEnum {
	/**
	 * Status is open
	 */
	OPEN_STATUS = 1634955120,

	/**
	 * Status is resolved
	 */
	RESOLVED_STATUS = 1634955877,

}

/**
 * Enum for type of the comment
 */
declare enum CommentTypeEnum {
	/**
	 * Type is arrow
	 */
	ARROW_TYPE = 1635017074,

	/**
	 * Type is cloud
	 */
	CLOUD_TYPE = 1635017572,

	/**
	 * Type is connected lines
	 */
	CONNECTED_LINES_TYPE = 1635017582,

	/**
	 * Type is freeform drawing
	 */
	FREEFORM_DRAWING_TYPE = 1635018340,

	/**
	 * Type is highlight text
	 */
	HIGHLIGHT_TEXT_TYPE = 1635018860,

	/**
	 * Type is insert text
	 */
	INSERT_TEXT_TYPE = 1635019124,

	/**
	 * Type is invalid comment type
	 */
	INVALID_COMMENT_TYPE = 1635019118,

	/**
	 * Type is line segment
	 */
	LINE_SEGMENT_TYPE = 1635019891,

	/**
	 * Type is oval
	 */
	OVAL_TYPE = 1635020662,

	/**
	 * Type is polygon
	 */
	POLYGON_TYPE = 1635020908,

	/**
	 * Type is rectangle
	 */
	RECTANGLE_TYPE = 1635021420,

	/**
	 * Type is replace text
	 */
	REPLACE_TEXT_TYPE = 1635021428,

	/**
	 * Type is squiggly text
	 */
	SQUIGGLY_TEXT_TYPE = 1635021681,

	/**
	 * Type is stamp
	 */
	STAMP_TYPE = 1635021680,

	/**
	 * Type is sticky note
	 */
	STICKY_NOTE_TYPE = 1635021678,

	/**
	 * Type is strikethrough text
	 */
	STRIKETHROUGH_TEXT_TYPE = 1635021682,

	/**
	 * Type is text box
	 */
	TEXT_BOX_TYPE = 1635021922,

	/**
	 * Type is text callout
	 */
	TEXT_CALLOUT_TYPE = 1635021923,

	/**
	 * Type is text typewriter
	 */
	TEXT_TYPEWRITER_TYPE = 1635021940,

	/**
	 * Type is underline text
	 */
	UNDERLINE_TEXT_TYPE = 1635022188,

}

/**
 * Character set options for importing text files.
 */
declare enum TextImportCharacterSet {
	/**
	 * The ANSI character set.
	 */
	ANSI = 1095652169,

	/**
	 * The Arabic ASMO character set.
	 */
	ARABIC_ASMO = 1415672685,

	/**
	 * The Arabic ASMO transparent character set.
	 */
	ARABIC_ASMO_TRANSPARENT = 1415672692,

	/**
	 * The Central European (ISO) character set.
	 */
	CENTRALEUROPEAN_ISO = 1416184645,

	/**
	 * The Chinese Big 5 character set.
	 */
	CHINESE_BIG_5 = 1415799349,

	/**
	 * The Cyrillic (CP855) character set.
	 */
	CYRILLIC_CP855 = 1415788597,

	/**
	 * The Cyrillic (ISO) character set.
	 */
	CYRILLIC_ISO = 1416184697,

	/**
	 * The Cyrillic (KOI8R) character set.
	 */
	CYRILLIC_KOI8R = 1416312946,

	/**
	 * The Cyrillic (KOI8U) character set.
	 */
	CYRILLIC_KOI8U = 1416312949,

	/**
	 * The DOS Latin 2 character set.
	 */
	DOS_LATIN_2 = 1415867442,

	/**
	 * The GB18030 character set.
	 */
	GB18030 = 1416061491,

	/**
	 * The GB2312 character set.
	 */
	GB2312 = 1416061535,

	/**
	 * The Greek (ISO) character set.
	 */
	GREEK_ISO = 1416185707,

	/**
	 * The KSC5601 character set.
	 */
	KSC5601 = 1414230883,

	/**
	 * The Macintosh Arabic character set.
	 */
	MACINTOSH_ARABIC = 1416446322,

	/**
	 * The Macintosh CE (Cantral European) character set.
	 */
	MACINTOSH_CE = 1416446789,

	/**
	 * The Macintosh Croatian character set.
	 */
	MACINTOSH_CROATIAN = 1416446834,

	/**
	 * The Macintosh Cyrillic character set.
	 */
	MACINTOSH_CYRILLIC = 1416446841,

	/**
	 * The Macintosh Greek character set.
	 */
	MACINTOSH_GREEK = 1416447858,

	/**
	 * The Macintosh Greek (Shared caps) character set.
	 */
	MACINTOSH_GREEK_SHARED_CAPS = 1416447794,

	/**
	 * The Macintosh Hebrew character set.
	 */
	MACINTOSH_HEBREW = 1416448098,

	/**
	 * The Macintosh Icelandic character set.
	 */
	MACINTOSH_ICELANDIC = 1416448355,

	/**
	 * The Macintosh Roman character set.
	 */
	MACINTOSH_ROMAN = 1416450669,

	/**
	 * The Macintosh Romanian character set.
	 */
	MACINTOSH_ROMANIAN = 1416450671,

	/**
	 * The Macintosh Turkish character set.
	 */
	MACINTOSH_TURKISH = 1416451186,

	/**
	 * The Recommend:Shift_JIS 83pv character set.
	 */
	RECOMMENDSHIFTJIS83PV = 1412969328,

	/**
	 * The Shift_JIS 90ms character set.
	 */
	SHIFTJIS90MS = 1413034093,

	/**
	 * The Shift_JIS 90pv character set.
	 */
	SHIFTJIS90PV = 1413034096,

	/**
	 * The Turkish (ISO) character set.
	 */
	TURKISH_ISO = 1416189045,

	/**
	 * The Unicode UTF16 character set.
	 */
	UTF16 = 1937125686,

	/**
	 * The Unicode UTF8 character set.
	 */
	UTF8 = 1937134904,

	/**
	 * The Windows Arabic character set.
	 */
	WINDOWS_ARABIC = 1417101682,

	/**
	 * Tthe Windows Baltic character set.
	 */
	WINDOWS_BALTIC = 1417101940,

	/**
	 * The Windows CE (Central European) character set.
	 */
	WINDOWS_CE = 1417102149,

	/**
	 * The Windows Cyrillic character set.
	 */
	WINDOWS_CYRILLIC = 1417102201,

	/**
	 * The Windows EE (Eastern European) character set.
	 */
	WINDOWS_EE = 1417102661,

	/**
	 * The Windows Greek character set.
	 */
	WINDOWS_GREEK = 1417103218,

	/**
	 * The Windows Hebrew character set.
	 */
	WINDOWS_HEBREW = 1417103458,

	/**
	 * The Windows Turkish character set.
	 */
	WINDOWS_TURKISH = 1417106549,

}

/**
 * Import platform options.
 */
declare enum ImportPlatform {
	/**
	 * Macintosh.
	 */
	MACINTOSH = 1296130931,

	/**
	 * Windows.
	 */
	PC = 1466852474,

}

/**
 * Options for converting manual page breaks.
 */
declare enum ConvertPageBreaks {
	/**
	 * Converts manual page breaks to column breaks.
	 */
	COLUMN_BREAK = 1396927554,

	/**
	 * Does not preserve page breaks; allows text to flow.
	 */
	NONE = 1852796517,

	/**
	 * Preserves page breaks.
	 */
	PAGE_BREAK = 1397778242,

}

/**
 * Character set options exporting tagged text files.
 */
declare enum TagTextExportCharacterSet {
	/**
	 * ANSI.
	 */
	ANSI = 1095652169,

	/**
	 * ASCII.
	 */
	ASCII = 1095975753,

	/**
	 * The Central European (ISO) character set.
	 */
	CENTRALEUROPEAN_ISO = 1416184645,

	/**
	 * Chinese Big 5
	 */
	CHINESE_BIG_5 = 1415799349,

	/**
	 * The Cyrillic (ISO) character set.
	 */
	CYRILLIC_ISO = 1416184697,

	/**
	 * Uses GB18030 encoding.
	 */
	GB18030 = 1416061491,

	/**
	 * The Greek (ISO) character set.
	 */
	GREEK_ISO = 1416185707,

	/**
	 * Uses KSC5601 encoding.
	 */
	KSC5601 = 1414230883,

	/**
	 * Shift_JIS.
	 */
	SHIFT_JIS = 1249077875,

	/**
	 * Unicode.
	 */
	UNICODE = 1249209961,

	/**
	 * The Windows Arabic character set.
	 */
	WINDOWS_ARABIC = 1417101682,

	/**
	 * The Windows Hebrew character set.
	 */
	WINDOWS_HEBREW = 1417103458,

}

/**
 * Tag form options.
 */
declare enum TagTextForm {
	/**
	 * Abbreviates tags; creates smaller text files.
	 */
	ABBREVIATED = 1414816098,

	/**
	 * Displays tags in long form; creates larger text files.
	 */
	VERBOSE = 1414821474,

}

/**
 * Options for resolving style conflicts when importing tagged text.
 */
declare enum StyleConflict {
	/**
	 * Uses the publication style.
	 */
	PUBLICATION_DEFINITION = 1414819940,

	/**
	 * Uses the tag file style.
	 */
	TAG_FILE_DEFINITION = 1413903460,

}

/**
 * Character set options for exported text files.
 */
declare enum TextExportCharacterSet {
	/**
	 * The default character set for the platform.
	 */
	DEFAULT_PLATFORM = 1415865972,

	/**
	 * The Unicode UTF16 character set.
	 */
	UTF16 = 1937125686,

	/**
	 * The Unicode UTF8 character set.
	 */
	UTF8 = 1937134904,

}

/**
 * Options for converting tables.
 */
declare enum ConvertTablesOptions {
	/**
	 * Convert tables to unformatted, tab-delimited text.
	 */
	UNFORMATTED_TABBED_TEXT = 1398101076,

	/**
	 * Converts tables to basic, unformatted tables.
	 */
	UNFORMATTED_TABLE = 1396921684,

}

/**
 * Formatting options for imported spreadsheets.
 */
declare enum TableFormattingOptions {
	/**
	 * Use formatting from the original spreadsheet.
	 */
	EXCEL_FORMATTED_TABLE = 2020361812,

	/**
	 * Converts the spreadsheet to a table that is formatted only on initial import but not on update.
	 */
	EXCEL_FORMAT_ONLY_ONCE = 2017873748,

	/**
	 * Convert the spreadsheet to unformatted, tab-delimited text.
	 */
	EXCEL_UNFORMATTED_TABBED_TEXT = 2018858068,

	/**
	 * Convert the spreadsheet to an unformatted table.
	 */
	EXCEL_UNFORMATTED_TABLE = 2020365652,

}

/**
 * Alignment options.
 */
declare enum AlignmentStyleOptions {
	/**
	 * Center aligns cells.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Left aligns cells.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Right aligns cells.
	 */
	RIGHT_ALIGN = 1919379572,

	/**
	 * Preserves the spreadsheet's alignment.
	 */
	SPREADSHEET = 1936749171,

}

/**
 * Options for resolving clashes that result from matching style names.
 */
declare enum ResolveStyleClash {
	/**
	 * Automatically renames the new style.
	 */
	RESOLVE_CLASH_AUTO_RENAME = 2001879873,

	/**
	 * Uses the existing style.
	 */
	RESOLVE_CLASH_USE_EXISTING = 2001879877,

	/**
	 * Uses the new style.
	 */
	RESOLVE_CLASH_USE_NEW = 2001879886,

}

/**
 * The container type.
 */
declare enum ContainerType {
	/**
	 * The container contains alternative values of which only one can be used.
	 */
	ALT = 1298424180,

	/**
	 * The container contains unordered items.
	 */
	BAG = 1298424423,

	/**
	 * The container contains ordered or sequential items.
	 */
	SEQ = 1298428785,

}

/**
 * The copyright status of the document.
 */
declare enum CopyrightStatus {
	/**
	 * The document is in the public domain.
	 */
	NO = 1852776480,

	/**
	 * The copyright status is unknown.
	 */
	UNKNOWN = 1433299822,

	/**
	 * The document is copyrighted.
	 */
	YES = 2036691744,

}

/**
 * Index entry capitalization options.
 */
declare enum IndexCapitalizationOptions {
	/**
	 * Capitalizes all index entries. Note: Capitalizes only topics created before the capitalization statement appears in the script.
	 */
	ALL_ENTRIES = 1097624645,

	/**
	 * Capitalizes all level 1 entries. Note: Capitalizes only topics created before the capitalization statement appears in the script.
	 */
	ALL_LEVEL_1_ENTRIES = 1095517556,

	/**
	 * Capitalizes the specified topic and its nested topics. Valid only as parameter of the topic capitalize method; cannot be used as a parameter of the index capitalize method. Note: Must occur after the selected topic and its nested subtopics are created.
	 */
	INCLUDE_SUBENTRIES = 1767072325,

	/**
	 * Capitalizes the specified topic but does not capitalize its nested topics. Valid only as parameter of the topic capitalize method; cannot be used as a parameter of the index capitalize method. Note: Must occur after the specified topic and its nested topics are created.
	 */
	SELECTED_ENTRY = 1398042725,

}

/**
 * Options for formatting level 2 and lower index topics.
 */
declare enum IndexFormat {
	/**
	 * Places nested topics on the line below and indented from the parent topic.
	 */
	NESTED_FORMAT = 1316243814,

	/**
	 * Places nested topics on the same line as their parent topic, separated by the specified separator.
	 */
	RUNIN_FORMAT = 1382631782,

}

/**
 * Instructional text options for cross reference.
 */
declare enum CrossReferenceType {
	/**
	 * Inserts the specified string in front of the referenced topic.
	 */
	CUSTOM_CROSS_REFERENCE = 1131639875,

	/**
	 * Inserts the specified following topic separator and the specified string after the referenced topic. If no following topic separator is specified, inserts a space.
	 */
	CUSTOM_CROSS_REFERENCE_AFTER = 1131639905,

	/**
	 * Inserts the specified string and the specified before cross reference separator in front of the referenced topic. If no before cross reference separator is specified, inserts a space.
	 */
	CUSTOM_CROSS_REFERENCE_BEFORE = 1131639906,

	/**
	 * Inserts 'See' in front of the referenced topic.
	 */
	SEE = 1701729125,

	/**
	 * Inserts 'See also' in front of the referenced topic.
	 */
	SEE_ALSO = 1399144812,

	/**
	 * Inserts 'See also herein' in front of the referenced topic.
	 */
	SEE_ALSO_HEREIN = 1398884466,

	/**
	 * Inserts 'See herein' in front of the referenced topic.
	 */
	SEE_HEREIN = 1397256814,

	/**
	 * Inserts 'See also' in front of the referenced topic if the topic has an associated page reference; inserts 'See' if the topic does not have a page reference.
	 */
	SEE_OR_ALSO_BRACKET = 1399800172,

}

/**
 * Options for index page references.
 */
declare enum PageReferenceType {
	/**
	 * The page on which the index entry is located.
	 */
	CURRENT_PAGE = 1668444263,

	/**
	 * The range of pages from the page containing the inedex entry to the nth page after that page (where n is the number of pages to include).
	 */
	FOR_NEXT_N_PAGES = 1718513767,

	/**
	 * The range of pages from the page containing the index entry to the page containing the nth full paragraph from the paragraph containing the index entry (where n is the number of paragraphs to include).
	 */
	FOR_NEXT_N_PARAGRAPHS = 1718513778,

	/**
	 * Turns off page numbers for the index topic.
	 */
	SUPPRESS_PAGE_NUMBERS = 1852863079,

	/**
	 * The last page in the document.
	 */
	TO_END_OF_DOCUMENT = 1701799011,

	/**
	 * The last page in the numbered section containing the index entry.
	 */
	TO_END_OF_SECTION = 1701802851,

	/**
	 * The last page in the story containing the index entry.
	 */
	TO_END_OF_STORY = 1701802868,

	/**
	 * The range of pages from the page containing the index entry to the page containing the next paragraph style change.
	 */
	TO_NEXT_STYLE_CHANGE = 1953395555,

	/**
	 * The range of pages from the page containing the index entry to the page that contains the next occurrance of the specified paragraph style. If no paragraph style is specified, the paragraph style of the index entry paragraph is used.
	 */
	TO_NEXT_USE_OF_STYLE = 1953396083,

}

/**
 * Indexing sort option header types
 */
declare enum HeaderTypes {
	/**
	 * Basic Latin
	 */
	BASIC_LATIN = 1213481548,

	/**
	 * Belarusian
	 */
	BELARUSIAN = 1213481573,

	/**
	 * Bulgarian
	 */
	BULGARIAN = 1213481589,

	/**
	 * Chinese Pinyin
	 */
	CHINESE_PINYIN = 1213481808,

	/**
	 * Chinese Stroke Count
	 */
	CHINESE_STROKE_COUNT = 1213481811,

	/**
	 * Croatian
	 */
	CROATIAN = 1213481842,

	/**
	 * Czech
	 */
	CZECH = 1213481850,

	/**
	 * Danish/Norwegian
	 */
	DANISH_NORWEGIAN = 1213482062,

	/**
	 * Estonian
	 */
	ESTONIAN = 1213482355,

	/**
	 * Finnish/Swedish
	 */
	FINNISH_SWEDISH = 1213485894,

	/**
	 * Hiragana: A, I, U, E, O...
	 */
	HIRAGANA_ALL = 1213483073,

	/**
	 * Hiragana: A, Ka, Sa, Ta, Na...
	 */
	HIRAGANA_CONSONANTS_ONLY = 1213483075,

	/**
	 * Hungarian
	 */
	HUNGARIAN = 1213483125,

	/**
	 * Katakana: A, I, U, E, O...
	 */
	KATAKANA_ALL = 1213483841,

	/**
	 * Katakana: A, Ka, Sa, Ta, Na...
	 */
	KATAKANA_CONSONANTS_ONLY = 1213483843,

	/**
	 * Korean Consonant
	 */
	KOREAN_CONSONANT = 1213483887,

	/**
	 * Korean Consonant Plus Vowel
	 */
	KOREAN_CONSONANT_PLUS_VOWEL = 1213483862,

	/**
	 * Latvian
	 */
	LATVIAN = 1213484129,

	/**
	 * Lithuanian
	 */
	LITHUANIAN = 1213484137,

	/**
	 * Polish
	 */
	POLISH = 1213485167,

	/**
	 * Romanian
	 */
	ROMANIAN = 1213485679,

	/**
	 * Russian
	 */
	RUSSIAN = 1213485685,

	/**
	 * Slovak
	 */
	SLOVAK = 1213485931,

	/**
	 * Slovenian
	 */
	SLOVENIAN = 1213485934,

	/**
	 * Spanish
	 */
	SPANISH = 1213485936,

	/**
	 * Turkish
	 */
	TURKISH = 1213486197,

	/**
	 * Ukrainian
	 */
	UKRAINIAN = 1213486443,

}

/**
 * Options for specifying how tranparencies are displayed.
 */
declare enum TagTransparency {
	/**
	 * Uses the default setting. For information, see display performance preferences.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Displays higher-resolution (144 dpi) drop shadows and feathers, CMYK mattes, and spread isolation.
	 */
	HIGH_QUALITY = 1346922866,

	/**
	 * Displays basic transparency (opacity and blend modes) and shows transparency effects such as drop shadow and feathering in a low-resolution approximation. Note: Does not isolate page content from the background. Objects with blend modes other than Normal might appear different in other applications and output.
	 */
	LOW_QUALITY = 1481666146,

	/**
	 * Displays drop shadows and feathering in low resolution.
	 */
	MEDIUM_QUALITY = 1481663597,

	/**
	 * Turns off the on-screen display of transparency. Note: Does not turn off transparency when printing or exporting the file.
	 */
	OFF = 1330005536,

}

/**
 * The display method for vector images.
 */
declare enum TagVector {
	/**
	 * Uses the default setting. For information, see display performance preferences.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Grays out the image.
	 */
	GRAY_OUT = 1917284985,

	/**
	 * Displays a high-resolution version of the image.
	 */
	HIGH_RESOLUTION = 1917348177,

	/**
	 * Displays a low-resolution proxy version of the image.
	 */
	PROXY = 1917874808,

}

/**
 * The display method for raster images.
 */
declare enum TagRaster {
	/**
	 * Uses the default setting. For information, see display performance preferences.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Grays out raster images.
	 */
	GRAY_OUT = 1917284985,

	/**
	 * Displays a high-resolution version of the image.
	 */
	HIGH_RESOLUTION = 1917348177,

	/**
	 * Displays a low-resolution proxy image appropriate for identifying and positioning an image.
	 */
	PROXY = 1917874808,

}

/**
 * Options for highlighting the hyperlink when selected.
 */
declare enum HyperlinkAppearanceHighlight {
	/**
	 * Highlights the hyperlink border inset.
	 */
	INSET = 1853056372,

	/**
	 * Highlights the hyperlink fill color.
	 */
	INVERT = 1853256308,

	/**
	 * Does not highlight the hyperlink.
	 */
	NONE = 1852796517,

	/**
	 * Highlights the hyperlink border.
	 */
	OUTLINE = 1869900910,

}

/**
 * Hyperlink border weight options.
 */
declare enum HyperlinkAppearanceWidth {
	/**
	 * Uses a medium border.
	 */
	MEDIUM = 1701727588,

	/**
	 * Uses a thick border.
	 */
	THICK = 1952999787,

	/**
	 * Uses a thin border.
	 */
	THIN = 1952999790,

}

/**
 * Hyperlink border style options.
 */
declare enum HyperlinkAppearanceStyle {
	/**
	 * Uses a dashed stroke.
	 */
	DASHED = 1684108136,

	/**
	 * Uses a solid stroke.
	 */
	SOLID = 1936682084,

}

/**
 * Hyperlink destination page display options.
 */
declare enum HyperlinkDestinationPageSetting {
	/**
	 * Fits the destination page to the window height; may obscure the right side the page. Note: The magnification changes automatically when the window is resized vertically.
	 */
	FIT_HEIGHT = 1212437352,

	/**
	 * Displays the visible portion of the destination page as the destination.
	 */
	FIT_VIEW = 1212437366,

	/**
	 * Fits the the text area of the destination page to the window width; obscures page margins and may obscure the lower portion of the page. Note: The magnification changes automatically when the window is resized horizontally.
	 */
	FIT_VISIBLE = 1212437334,

	/**
	 * Fits the destination page to the width of the window; may obscure the lower portion of the page. Note: The magnification changes automatically when the window is resized horizontally.
	 */
	FIT_WIDTH = 1212437335,

	/**
	 * Fits the entire destination page in the document window. Note: The magnification changes automatically when the window is resized.
	 */
	FIT_WINDOW = 1212437367,

	/**
	 * Fits the destination page within the specified rectangle. For information on specifying the rectangle size and position, see the entry for view bounds.
	 */
	FIXED = 1212437350,

	/**
	 * The destination page is displayed at the same zoom percent as the previously displayed page. Note: The magnification changes automatically when the window is resized.
	 */
	INHERIT_ZOOM = 1212437370,

}

/**
 * Cross reference building block types.
 */
declare enum BuildingBlockTypes {
	/**
	 * Bookmark name building block type.
	 */
	BOOKMARK_NAME_BUILDING_BLOCK = 1650614894,

	/**
	 * Chapter number building block type.
	 */
	CHAPTER_NUMBER_BUILDING_BLOCK = 1650615150,

	/**
	 * Custom string building block type.
	 */
	CUSTOM_STRING_BUILDING_BLOCK = 1650615155,

	/**
	 * File name building block type.
	 */
	FILE_NAME_BUILDING_BLOCK = 1650615918,

	/**
	 * Full paragraph building block type.
	 */
	FULL_PARAGRAPH_BUILDING_BLOCK = 1650615920,

	/**
	 * Page number building block type.
	 */
	PAGE_NUMBER_BUILDING_BLOCK = 1650618478,

	/**
	 * Paragraph number building block type.
	 */
	PARAGRAPH_NUMBER_BUILDING_BLOCK = 1651533678,

	/**
	 * Paragraph text building block type.
	 */
	PARAGRAPH_TEXT_BUILDING_BLOCK = 1650618484,

}

/**
 * Sort order for hyperlink ranges.
 */
declare enum RangeSortOrder {
	/**
	 * Sort the ranges in ascending order.
	 */
	ASCENDING_SORT = 1634952307,

	/**
	 * Sort the ranges in descending order.
	 */
	DESCENDING_SORT = 1685287796,

	/**
	 * Do not sort the ranges.
	 */
	NO_SORT = 1852797812,

}

/**
 * The flag indicating whether the rule is disabled, set for error, warning, or just informational.
 */
declare enum PreflightRuleFlag {
	/**
	 * Treat as error if rule check failed.
	 */
	RETURN_AS_ERROR = 1699890546,

	/**
	 * Treat as information only if rule check failed.
	 */
	RETURN_AS_INFORMATIONAL = 1699893865,

	/**
	 * Treat as warning if rule check failed.
	 */
	RETURN_AS_WARNING = 1699893879,

	/**
	 * Rule is currently disabled.
	 */
	RULE_IS_DISABLED = 1699890274,

}

/**
 * The type of data for this data object.
 */
declare enum RuleDataType {
	/**
	 * The data type is a boolean.
	 */
	BOOLEAN_DATA_TYPE = 1920221804,

	/**
	 * The data type is an int32.
	 */
	INTEGER_DATA_TYPE = 1920223598,

	/**
	 * The data type is a list.
	 */
	LIST_DATA_TYPE = 1920224372,

	/**
	 * The data type is an object.
	 */
	OBJECT_DATA_TYPE = 1920225122,

	/**
	 * The data type is a real.
	 */
	REAL_DATA_TYPE = 1920225900,

	/**
	 * The data type is an int16.
	 */
	SHORT_INTEGER_DATA_TYPE = 1920226153,

	/**
	 * The data type is a string.
	 */
	STRING_DATA_TYPE = 1920226162,

}

/**
 * Preflight scope options.
 */
declare enum PreflightScopeOptions {
	/**
	 * Include all documents in the book preflight.
	 */
	PREFLIGHT_ALL_DOCUMENTS = 1885552964,

	/**
	 * Include all pages in the preflight.
	 */
	PREFLIGHT_ALL_PAGES = 1885552976,

	/**
	 * Include only selected document for book preflight.
	 */
	PREFLIGHT_SELECTED_DOCUMENTS = 1885557572,

}

/**
 * Preflight layer options.
 */
declare enum PreflightLayerOptions {
	/**
	 * Preflight all layers
	 */
	PREFLIGHT_ALL_LAYERS = 1886142796,

	/**
	 * Preflight visible layers
	 */
	PREFLIGHT_VISIBLE_LAYERS = 1886148172,

	/**
	 * Preflight visible and printable layers
	 */
	PREFLIGHT_VISIBLE_PRINTABLE_LAYERS = 1886148176,

}

/**
 * Preflight Profile options.
 */
declare enum PreflightProfileOptions {
	/**
	 * Preflight using the embedded profile.
	 */
	USE_EMBEDDED_PROFILE = 1885619533,

	/**
	 * Preflight using working profile.
	 */
	USE_WORKING_PROFILE = 1885622342,

}

/**
 * PNG page export range options.
 */
declare enum PNGExportRangeEnum {
	/**
	 * Exports all pages.
	 */
	EXPORT_ALL = 1785742657,

	/**
	 * Exports the page range specified in the page string property.
	 */
	EXPORT_RANGE = 1785742674,

}

/**
 * Quality options for exported PNG images.
 */
declare enum PNGQualityEnum {
	/**
	 * High quality.
	 */
	HIGH = 1701726313,

	/**
	 * Low quality.
	 */
	LOW = 1701727351,

	/**
	 * Maximum quality.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Medium quality.
	 */
	MEDIUM = 1701727588,

}

/**
 * Color space options for representing color in the exported PNG.
 */
declare enum PNGColorSpaceEnum {
	/**
	 * Converts all color values to high-quality black-and-white images. Gray levels of the converted objects represent the luminosity of the original objects.
	 */
	GRAY = 1766290041,

	/**
	 * Represents all color values using the RGB color space. Best suited for documents that will be viewed on-screen.
	 */
	RGB = 1666336578,

}

/**
 * Options for specifying the events (user actions) that change a button's state.
 */
declare enum StateTypes {
	/**
	 * The mouse pointer is clicked on the button's area.
	 */
	DOWN = 1181971556,

	/**
	 * Down off state.
	 */
	DOWN_OFF = 1181967462,

	/**
	 * Down on state.
	 */
	DOWN_ON = 1181967471,

	/**
	 * The mouse pointer moves into the button's area.
	 */
	ROLLOVER = 1181971574,

	/**
	 * Rollover off state.
	 */
	ROLLOVER_OFF = 1181972070,

	/**
	 * Rollover on state.
	 */
	ROLLOVER_ON = 1181972079,

	/**
	 * The default appearance, used when there is no user activity on the button's area.
	 */
	UP = 1181971566,

	/**
	 * Up off state.
	 */
	UP_OFF = 1181970022,

	/**
	 * Up on state.
	 */
	UP_ON = 1181970031,

}

/**
 * Options for specifying the position of a movie's display window.
 */
declare enum FloatingWindowPosition {
	/**
	 * Positions the window in the center of the screen.
	 */
	CENTER = 1298359662,

	/**
	 * Positions the window on the left side of the screen midway between the top and bottom.
	 */
	CENTER_LEFT = 1298361446,

	/**
	 * Positions the window on the right side of the screen midway between the top and bottom.
	 */
	CENTER_RIGHT = 1298362996,

	/**
	 * Positions the window in the lower left corner of the screen.
	 */
	LOWER_LEFT = 1298951270,

	/**
	 * Positions the window at the bottom of the screen midway between the left and right edges.
	 */
	LOWER_MIDDLE = 1298951524,

	/**
	 * Positions the window in the lower right corner of the screen.
	 */
	LOWER_RIGHT = 1298952820,

	/**
	 * Positions the window in the upper left corner of the screen.
	 */
	UPPER_LEFT = 1668183118,

	/**
	 * Positions the window at the top of the screen midway between the left and right edges.
	 */
	UPPER_MIDDLE = 1299541348,

	/**
	 * Positions the window in the upper right corner of the screen.
	 */
	UPPER_RIGHT = 1299542644,

}

/**
 * The size of the movie's floating window. Valid only when floating window is true.
 */
declare enum FloatingWindowSize {
	/**
	 * The floating window is the movie's original display size.
	 */
	FULL = 1298560364,

	/**
	 * The floating window fills the entire screen.
	 */
	MAX = 1299014008,

	/**
	 * The floating window is one fifth the length and height of the movie's original display size.
	 */
	ONE_FIFTH = 1298557286,

	/**
	 * The floating window is one fourth the length and height of the movie's original display size.
	 */
	ONE_FOURTH = 1298558834,

	/**
	 * The floating window is one half the length and height of the movie's original display size.
	 */
	ONE_HALF = 1298686316,

	/**
	 * The floating window is quadruple the length and height of the movie's original display size.
	 */
	QUADRUPLE = 1299281272,

	/**
	 * The floating window is triple the length and height of the movie's original display size.
	 */
	TRIPLE = 1299477112,

	/**
	 * The floating window is twice the length and height of the movie's original display size.
	 */
	TWICE = 1299476344,

}

/**
 * The type of graphic for the movie poster.
 */
declare enum MoviePosterTypes {
	/**
	 * Uses an image from the movie file.
	 */
	FROM_MOVIE = 1298558310,

	/**
	 * None.
	 */
	NONE = 1852796517,

	/**
	 * (Read-only) Indicates whether the movie poster is not the standard, generic image.
	 */
	PROXY_IMAGE = 1299216505,

	/**
	 * Uses the generic movie poster image file.
	 */
	STANDARD = 2020623970,

}

/**
 * Playback options.
 */
declare enum MoviePlayOperations {
	/**
	 * Pauses playback.
	 */
	PAUSE = 1885435251,

	/**
	 * Starts playback.
	 */
	PLAY = 1886151033,

	/**
	 * Starts playback from the specified navigation point.
	 */
	PLAY_FROM_NAVIGATION_POINT = 1886154358,

	/**
	 * Resumes playback.
	 */
	RESUME = 1919251317,

	/**
	 * Stops playback.
	 */
	STOP = 1937010544,

	/**
	 * Stops all playback (SWF only).
	 */
	STOP_ALL = 1937010785,

}

/**
 * Sound poster graphics options.
 */
declare enum SoundPosterTypes {
	/**
	 * No sound poster.
	 */
	NONE = 1852796517,

	/**
	 * Proxy image sound poster.
	 */
	PROXY_IMAGE = 1299216505,

	/**
	 * Generic sound poster.
	 */
	STANDARD = 2020623970,

}

/**
 * Behavior trigger event options.
 */
declare enum BehaviorEvents {
	/**
	 * Triggers the behavior when the mouse button is clicked (without being released).
	 */
	MOUSE_DOWN = 1835296118,

	/**
	 * Triggers the behavior when the mouse pointer enters the area defined by the bounding box of the object.
	 */
	MOUSE_ENTER = 1835361654,

	/**
	 * Triggers the behavior when the mouse pointer exits the area defined by the bounding box of the object.
	 */
	MOUSE_EXIT = 1836606838,

	/**
	 * Triggers the behavior when the mouse is released after a click.
	 */
	MOUSE_UP = 1836410230,

	/**
	 * Triggers the behavior when the focus moves to a different interactive object.
	 */
	ON_BLUR = 1868719478,

	/**
	 * Triggers the behavior when the object receives focus, either through a mouse action or by pressing the Tab key.
	 */
	ON_FOCUS = 1868981622,

}

/**
 * Zoom options for the goto destination page.
 */
declare enum GoToZoomOptions {
	/**
	 * Displays the page at 100% magnification.
	 */
	ACTUAL_SIZE = 2053206906,

	/**
	 * Fits the text area of the page to the window width; obscures page margins and may obscure the lower portion of the page.
	 */
	FIT_VISIBLE = 1212437334,

	/**
	 * Fits the page to the width of the window; may obscure the lower portion of the page.
	 */
	FIT_WIDTH = 1212437335,

	/**
	 * Fits the page in the display window.
	 */
	FIT_WINDOW = 1212437367,

	/**
	 * Inherits the zoom setting from the previously displayed page.
	 */
	INHERIT_ZOOM = 1212437370,

}

/**
 * Playback options.
 */
declare enum PlayOperations {
	/**
	 * Pauses playback.
	 */
	PAUSE = 1885435251,

	/**
	 * Starts playback.
	 */
	PLAY = 1886151033,

	/**
	 * Resumes playback.
	 */
	RESUME = 1919251317,

	/**
	 * Stops playback.
	 */
	STOP = 1937010544,

	/**
	 * Stops all playback (SWF only).
	 */
	STOP_ALL = 1937010785,

}

/**
 * Playback options.
 */
declare enum AnimationPlayOperations {
	/**
	 * Pauses playback.
	 */
	PAUSE = 1885435251,

	/**
	 * Starts playback.
	 */
	PLAY = 1886151033,

	/**
	 * Resumes playback.
	 */
	RESUME = 1919251317,

	/**
	 * Reverses playback.
	 */
	REVERSE_PLAYBACK = 1919252069,

	/**
	 * Stops playback.
	 */
	STOP = 1937010544,

	/**
	 * Stops all playback.
	 */
	STOP_ALL = 1937010785,

}

/**
 * View zoom style options.
 */
declare enum ViewZoomStyle {
	/**
	 * Displays the page at 100% magnification.
	 */
	ACTUAL_SIZE = 2053206906,

	/**
	 * Fits the entire page in the window.
	 */
	FIT_PAGE = 2053534832,

	/**
	 * Fits the the text area of the page to the window width; obscures page margins and may obscure the lower portion of the page.
	 */
	FIT_VISIBLE = 1212437334,

	/**
	 * Fits the page to the width of the window; may obscure the lower portion of the page.
	 */
	FIT_WIDTH = 1212437335,

	/**
	 * Fills the screen with the page; hides the toolbar, command bar, menu bar, and window controls.
	 */
	FULL_SCREEN = 1987733107,

	/**
	 * Arranges the pages in a continuous vertical column that is one page wide.
	 */
	ONE_COLUMN = 1987735395,

	/**
	 * Displays one page in the document pane at a time.
	 */
	SINGLE_PAGE = 1987736432,

	/**
	 * Arranges the pages side by side in a continuous vertical column that is two pages wide.
	 */
	TWO_COLUMN = 1987736675,

	/**
	 * Magnifies the view to the next preset percentage.
	 */
	ZOOM_IN = 2053990766,

	/**
	 * Reduces the view to the previous preset percentage.
	 */
	ZOOM_OUT = 2054124916,

}

/**
 * The version state of the file in Version Cue.
 */
declare enum VersionState {
	/**
	 * The version has modifications that make it newer than the project.
	 */
	LOCAL_NEWER = 1986221644,

	/**
	 * The version is identical to the project.
	 */
	LOCAL_PROJECT_MATCH = 1986221645,

	/**
	 * No resource and no local file.
	 */
	NO_RESOURCE = 1986221646,

	/**
	 * The project has a newer file.
	 */
	PROJECT_FILE_NEWER = 1986221648,

	/**
	 * The version contains local edits but the project file is newer.
	 */
	VERSION_CONFLICT = 1986221635,

	/**
	 * The version is not known.
	 */
	VERSION_UNKNOWN = 1986221653,

}

/**
 * The editing state of the file in Version Cue.
 */
declare enum EditingState {
	/**
	 * The file was modified locally or remotely while it was locked and therefore two versions exist.
	 */
	EDITING_CONFLICT = 1986217283,

	/**
	 * The file has been modified locally and not locked.
	 */
	EDITING_LOCALLY = 1986217292,

	/**
	 * The file has been locked locally and may be modified.
	 */
	EDITING_LOCALLY_LOCKED = 1986217291,

	/**
	 * The file is not currently in use and is not locked.
	 */
	EDITING_NOWHERE = 1986217294,

	/**
	 * Lock held but not usable.
	 */
	EDITING_REMOTELY = 1986217298,

	/**
	 * The editing status is not known.
	 */
	EDITING_UNKNOWN = 1986217301,

}

/**
 * The synchronization status of the file in Version Cue.
 */
declare enum VersionCueSyncStatus {
	/**
	 * The project version of the file was downloaded to the local workspace.
	 */
	FILE_DOWNLOADED = 1986220868,

	/**
	 * The synchronization resulted in no change because the local and project versions were identical.
	 */
	FILE_NO_CHANGE = 1986220878,

	/**
	 * The file was not synchronized.
	 */
	FILE_SKIPPED = 1986220875,

	/**
	 * The file was unlocked locally.
	 */
	FILE_UNLOCKED = 1986220876,

	/**
	 * The local version of the file was uploaded to the project.
	 */
	FILE_UPLOADED = 1986220885,

}

/**
 * The type of conflict resolution to employ during Version Cue synchronization.
 */
declare enum SyncConflictResolution {
	/**
	 * Asks the user how to resolve conflicts.
	 */
	ASK_ABOUT_CONFLICTS = 1986216769,

	/**
	 * Uses the local version.
	 */
	PREFER_LOCAL = 1986216780,

	/**
	 * Uses the project version.
	 */
	PREFER_PROJECT = 1986216784,

	/**
	 * Skips conflicting files.
	 */
	SKIP_CONFLICTS = 1986216787,

}

/**
 * Used to specify a language and region.
 */
declare enum LanguageAndRegion {
	/**
	 * Albania: Albanian
	 */
	ALBANIA_ALBANIAN = 1936802124,

	/**
	 * Belarus: Belarusian
	 */
	BELARUS_BELARUSIAN = 1650803289,

	/**
	 * Brazil: Portuguese
	 */
	BRAZIL_PORTUGUESE = 1886667346,

	/**
	 * Bulgaria: Bulgarian
	 */
	BULGARIA_BULGARIAN = 1650934343,

	/**
	 * Croatia: Croatian
	 */
	CROATIA_CROATIAN = 1752320082,

	/**
	 * Czech Republic: Czech
	 */
	CZECH_REPUBLIC_CZECH = 1668498266,

	/**
	 * Denmark: Danish
	 */
	DENMARK_DANISH = 1684096075,

	/**
	 * Estonia: Estonian
	 */
	ESTONIA_ESTONIAN = 1702118725,

	/**
	 * Finland: Finnish
	 */
	FINLAND_FINNISH = 1718175305,

	/**
	 * France: French
	 */
	FRANCE_FRENCH = 1718765138,

	/**
	 * Germany: German
	 */
	GERMANY_GERMAN = 1684358213,

	/**
	 * Greece: Greek
	 */
	GREECE_GREEK = 1701594962,

	/**
	 * Hungary: Hungarian
	 */
	HUNGARY_HUNGARIAN = 1752516693,

	/**
	 * India: Tamil
	 */
	INDIA_TAMIL = 1952532814,

	/**
	 * Indic
	 */
	INDIC = 1768842345,

	/**
	 * Israel: Hebrew
	 */
	ISRAEL_HEBREW = 1751468364,

	/**
	 * Italy: Italian
	 */
	ITALY_ITALIAN = 1769228628,

	/**
	 * Japan: Japanese
	 */
	JAPAN_JAPANESE = 1784760912,

	/**
	 * Latvia: Latvian
	 */
	LATVIA_LATVIAN = 1819692118,

	/**
	 * Lituania: Lithuanian
	 */
	LITUANIA_LITHUANIAN = 1819561044,

	/**
	 * Netherlands: Dutch
	 */
	NETHERLANDS_DUTCH = 1852591692,

	/**
	 * Norway: Norwegian
	 */
	NORWAY_NORWEGIAN = 1851936335,

	/**
	 * Poland: Polish
	 */
	POLAND_POLISH = 1886146636,

	/**
	 * Republic Of Korea: Korean
	 */
	REPUBLIC_OF_KOREA_KOREAN = 1802455890,

	/**
	 * Romania: Romanian
	 */
	ROMANIA_ROMANIAN = 1919898191,

	/**
	 * Russian Federation: Russian
	 */
	RUSSIAN_FEDERATION_RUSSIAN = 1920291413,

	/**
	 * Simplified Chinese
	 */
	SIMPLIFIED_CHINESE = 2053653326,

	/**
	 * Slovakia: Slovak
	 */
	SLOVAKIA_SLOVAK = 1936479051,

	/**
	 * Slovenia: Slovenian
	 */
	SLOVENIA_SLOVENIAN = 1936479049,

	/**
	 * Spain: Spanish
	 */
	SPAIN_SPANISH = 1702053203,

	/**
	 * Standard Arabic
	 */
	STANDARD_ARABIC = 1634877765,

	/**
	 * Sweden: Swedish
	 */
	SWEDEN_SWEDISH = 1937134422,

	/**
	 * Thailand: Thai
	 */
	THAILAND_THAI = 1952994376,

	/**
	 * Traditional Chinese
	 */
	TRADITIONAL_CHINESE = 2053657687,

	/**
	 * Turkey: Turkish
	 */
	TURKEY_TURKISH = 1953649746,

	/**
	 * Ukraine: Ukrainian
	 */
	UKRAINE_UKRAINIAN = 1969968449,

	/**
	 * United Kingdom: English
	 */
	UNITED_KINGDOM_ENGLISH = 1701726018,

	/**
	 * United States: English
	 */
	UNITED_STATES_ENGLISH = 1701729619,

	/**
	 * Vietnam: Vietnamese
	 */
	VIETNAM_VIETNAMESE = 1986614862,

}

/**
 * User interaction level options.
 */
declare enum UserInteractionLevels {
	/**
	 * Displays alerts but not dialogs.
	 */
	INTERACT_WITH_ALERTS = 1699311170,

	/**
	 * The script displays all dialogs and alerts.
	 */
	INTERACT_WITH_ALL = 1699311169,

	/**
	 * The script does not display any dialogs or alerts.
	 */
	NEVER_INTERACT = 1699640946,

}

/**
 * The locale.
 */
declare enum Locale {
	/**
	 * Arabic
	 */
	ARABIC_LOCALE = 1279476082,

	/**
	 * Czech
	 */
	CZECH_LOCALE = 1279476602,

	/**
	 * Danish.
	 */
	DANISH_LOCALE = 1279476846,

	/**
	 * English.
	 */
	ENGLISH_LOCALE = 1279477102,

	/**
	 * Finnish.
	 */
	FINNISH_LOCALE = 1279477358,

	/**
	 * French.
	 */
	FRENCH_LOCALE = 1279477362,

	/**
	 * German.
	 */
	GERMAN_LOCALE = 1279477613,

	/**
	 * Greek
	 */
	GREEK_LOCALE = 1279477618,

	/**
	 * Hebrew
	 */
	HEBREW_LOCALE = 1279477858,

	/**
	 * Hungarian
	 */
	HUNGARIAN_LOCALE = 1279477877,

	/**
	 * International English.
	 */
	INTERNATIONAL_ENGLISH_LOCALE = 1279477097,

	/**
	 * Italian.
	 */
	ITALIAN_LOCALE = 1279478132,

	/**
	 * Japanese.
	 */
	JAPANESE_LOCALE = 1279478384,

	/**
	 * en_KoreanLocale
	 */
	KOREAN_LOCALE = 1279478639,

	/**
	 * Polish
	 */
	POLISH_LOCALE = 1279479916,

	/**
	 * Portuguese.
	 */
	PORTUGUESE_LOCALE = 1279479911,

	/**
	 * Romanian
	 */
	ROMANIAN_LOCALE = 1279480431,

	/**
	 * Russian
	 */
	RUSSIAN_LOCALE = 1279480437,

	/**
	 * simplified chinese
	 */
	SIMPLIFIED_CHINESE_LOCALE = 1279476590,

	/**
	 * Spanish.
	 */
	SPANISH_LOCALE = 1279480688,

	/**
	 * Swedish.
	 */
	SWEDISH_LOCALE = 1279480695,

	/**
	 * traditional chinese
	 */
	TRADITIONAL_CHINESE_LOCALE = 1279480951,

	/**
	 * Turkish
	 */
	TURKISH_LOCALE = 1279480946,

	/**
	 * Ukrainian
	 */
	UKRAINIAN_LOCALE = 1279481195,

}

/**
 * The language of the script to execute.
 */
declare enum ScriptLanguage {
	/**
	 * The AppleScript language.
	 */
	APPLESCRIPT_LANGUAGE = 1095978087,

	/**
	 * The JavaScript language.
	 */
	JAVASCRIPT = 1246973031,

	/**
	 * Language not specified.
	 */
	UNKNOWN = 1433299822,

}

/**
 * Options for specifying a feature set.
 */
declare enum FeatureSetOptions {
	/**
	 * Uses the Japanese feature set and defaults.
	 */
	JAPANESE = 1247899758,

	/**
	 * Uses the R2L feature set
	 */
	RIGHTTOLEFT = 1381265228,

	/**
	 * Uses the Roman feature set and defaults.
	 */
	ROMAN = 1383034222,

}

/**
 * Undo options for executing a script.
 */
declare enum UndoModes {
	/**
	 * Automatically undo the entire script as part of the previous step.
	 */
	AUTO_UNDO = 1699963221,

	/**
	 * Undo the entire script as a single step.
	 */
	ENTIRE_SCRIPT = 1699963733,

	/**
	 * Fast undo the entire script as a single step.
	 */
	FAST_ENTIRE_SCRIPT = 1699964501,

	/**
	 * Undo each script request as a separate step.
	 */
	SCRIPT_REQUEST = 1699967573,

}

/**
 * Used to specify how to open a document.
 */
declare enum OpenOptions {
	/**
	 * Default based on the file type or extension.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Open a copy of the document.
	 */
	OPEN_COPY = 1332757360,

	/**
	 * Open the document itself.
	 */
	OPEN_ORIGINAL = 1332760434,

}

/**
 * The state of a task.
 */
declare enum TaskState {
	/**
	 * Task was cancelled (either before it ran or during execution
	 */
	CANCELLED = 1700029292,

	/**
	 * Task was signalled to cancel but did not stop yet
	 */
	CANCELLING = 1700029281,

	/**
	 * Task completed execution (successfully or with errors)
	 */
	COMPLETED = 1700029296,

	/**
	 * Task was queued and is waiting to be scheduled for execution
	 */
	QUEUED = 1699837285,

	/**
	 * Task is running
	 */
	RUNNING = 1700033141,

	/**
	 * Task is waiting
	 */
	WAITING = 1700225396,

}

/**
 * The type of a task alert.
 */
declare enum TaskAlertType {
	/**
	 * error message
	 */
	TASK_ERROR = 1699040627,

	/**
	 * Information message
	 */
	TASK_INFORMATION = 1699302771,

	/**
	 * Warning message
	 */
	TASK_WARNING = 1700220275,

}

/**
 * Options for saving a document before closing or quitting.
 */
declare enum SaveOptions {
	/**
	 * Displays a prompts asking whether to save changes.
	 */
	ASK = 1634954016,

	/**
	 * Does not save changes.
	 */
	NO = 1852776480,

	/**
	 * Saves changes.
	 */
	YES = 2036691744,

}

/**
 * Display size options.
 */
declare enum ZoomOptions {
	/**
	 * Zooms to 100%.
	 */
	ACTUAL_SIZE = 2053206906,

	/**
	 * Centers the active page in the window.
	 */
	FIT_PAGE = 2053534832,

	/**
	 * Centers the active spread in the window.
	 */
	FIT_SPREAD = 2053534835,

	/**
	 * Fits the entire pasteboard in the window.
	 */
	SHOW_PASTEBOARD = 2054385762,

	/**
	 * Magnifies the view to the next preset percentage.
	 */
	ZOOM_IN = 2053990766,

	/**
	 * Reduces the view to the next preset percentage.
	 */
	ZOOM_OUT = 2054124916,

}

/**
 * Options for display performance settings, which influence the speed and quality with which an object draws and redraws.
 */
declare enum ViewDisplaySettings {
	/**
	 * Slower performance; displays high-resolution graphics and high-quality transparencies and turns on anti-aliasing.
	 */
	HIGH_QUALITY = 1346922866,

	/**
	 * Best performance; grays out graphics and turns off transparency and anti-aliasing.
	 */
	OPTIMIZED = 1349480564,

	/**
	 * Moderate performance speed; displays proxy graphics and low-quality transparencies and turns on anti-aliasing.
	 */
	TYPICAL = 1349810544,

}

/**
 * The reference point on the object's bounding box that does not move during transformation operations. Note: Transformations include rotation, scaling, flipping, and shearing.
 */
declare enum AnchorPoint {
	/**
	 * The center point on the bottom of the bounding box.
	 */
	BOTTOM_CENTER_ANCHOR = 1095656035,

	/**
	 * The bottom left corner.
	 */
	BOTTOM_LEFT_ANCHOR = 1095656044,

	/**
	 * The bottom right corner.
	 */
	BOTTOM_RIGHT_ANCHOR = 1095656050,

	/**
	 * The center point in the bounding box.
	 */
	CENTER_ANCHOR = 1095656308,

	/**
	 * The center point on the left side of the bounding box.
	 */
	LEFT_CENTER_ANCHOR = 1095658595,

	/**
	 * The center point on the right side of the bounding box.
	 */
	RIGHT_CENTER_ANCHOR = 1095660131,

	/**
	 * The center point on the top of the bounding box.
	 */
	TOP_CENTER_ANCHOR = 1095660643,

	/**
	 * The top left corner.
	 */
	TOP_LEFT_ANCHOR = 1095660652,

	/**
	 * The top right corner.
	 */
	TOP_RIGHT_ANCHOR = 1095660658,

}

/**
 * Color model options.
 */
declare enum ColorModel {
	/**
	 * Mixed ink color.
	 */
	MIXEDINKMODEL = 1768844664,

	/**
	 * Process color.
	 */
	PROCESS = 1886548851,

	/**
	 * Registration color.
	 */
	REGISTRATION = 1919248243,

	/**
	 * Spot color.
	 */
	SPOT = 1936748404,

}

/**
 * Color space options.
 */
declare enum ColorSpace {
	/**
	 * CMYK.
	 */
	CMYK = 1129142603,

	/**
	 * LAB.
	 */
	LAB = 1665941826,

	/**
	 * Mixed ink.
	 */
	MIXEDINK = 1666009432,

	/**
	 * RGB.
	 */
	RGB = 1666336578,

}

/**
 * Screen mode options.
 */
declare enum ScreenModeOptions {
	/**
	 * Preview mode with editing turned off. Mouse clicks and arrow keys will move to previous or next spread.
	 */
	PRESENTATION_PREVIEW = 1936552046,

	/**
	 * Normal view; displays guides and frame edges.
	 */
	PREVIEW_OFF = 1936552047,

	/**
	 * Preview mode including the bleed area.
	 */
	PREVIEW_TO_BLEED = 1936552034,

	/**
	 * Preview mode; displays the document as it will be printed (hides guides and frame edges).
	 */
	PREVIEW_TO_PAGE = 1936552048,

	/**
	 * Preview mode including the slug area.
	 */
	PREVIEW_TO_SLUG = 1936552051,

}

/**
 * Watermark vertical position enum type.
 */
declare enum WatermarkVerticalPositionEnum {
	/**
	 * Place watermark vertical bottom.
	 */
	WATERMARK_V_BOTTOM = 1884704866,

	/**
	 * Place watermark vertical center.
	 */
	WATERMARK_V_CENTER = 1884704867,

	/**
	 * Place watermark vertical top.
	 */
	WATERMARK_V_TOP = 1884704884,

}

/**
 * Watermark horizontal position enum type.
 */
declare enum WatermarkHorizontalPositionEnum {
	/**
	 * Place watermark horizontal center.
	 */
	WATERMARK_H_CENTER = 1883787363,

	/**
	 * Place watermark horizontal left.
	 */
	WATERMARK_H_LEFT = 1883787372,

	/**
	 * Place watermark horizontal right.
	 */
	WATERMARK_H_RIGHT = 1883787378,

}

/**
 * Options for page numbering.
 */
declare enum PageNumberingOptions {
	/**
	 * Numbers all pages in the document sequentially.
	 */
	ABSOLUTE = 1096971116,

	/**
	 * Numbers pages according to page numbering specifications of the section.
	 */
	SECTION = 1935897710,

}

/**
 * Tool tip behavior options.
 */
declare enum ToolTipOptions {
	/**
	 * Displays tool tips more quickly than normal.
	 */
	FAST = 1180791668,

	/**
	 * Turns off tool tips.
	 */
	NONE = 1852796517,

	/**
	 * Displays tool tips.
	 */
	NORMAL = 1852797549,

}

/**
 * Options for selection status in relation to previously selected objects.
 */
declare enum SelectionOptions {
	/**
	 * Adds the object to the existing selection; if no object was previously selected, makes the object the only selected object.
	 */
	ADD_TO = 1633969202,

	/**
	 * Deselects the object.
	 */
	REMOVE_FROM = 1919249734,

	/**
	 * Selects the object and deselects any previously selected objects.
	 */
	REPLACE_WITH = 1919250519,

	/**
	 * Sets the key object. At least 2 objects must be selected, and the key object specified must be one of them.
	 */
	SET_KEY = 1936028779,

}

/**
 * Selection options.
 */
declare enum SelectAll {
	/**
	 * Selects all.
	 */
	ALL = 1634495520,

}

/**
 * Preview size options.
 */
declare enum PreviewSizeOptions {
	/**
	 * Extra large preview (1024 x 1024).
	 */
	EXTRA_LARGE = 1162629234,

	/**
	 * Large preview (512 x 512).
	 */
	LARGE = 1281446002,

	/**
	 * Medium preview (256 x 256).
	 */
	MEDIUM = 1701727588,

	/**
	 * Small preview (128 x 128).
	 */
	SMALL = 1399672946,

}

/**
 * Options for Tools panel.
 */
declare enum ToolsPanelOptions {
	/**
	 * Double column
	 */
	DOUBLE_COLUMN = 1162109804,

	/**
	 * Single column
	 */
	SINGLE_COLUMN = 1163092844,

	/**
	 * Single row
	 */
	SINGLE_ROW = 1163096695,

}

/**
 * Live drawing options for when user mouse actions trigger live screen drawing of page items.
 */
declare enum LiveDrawingOptions {
	/**
	 * Use live screen drawing during mouse operations after a delay if user pauses before the mouse moves.
	 */
	DELAYED = 1347765349,

	/**
	 * Use live screen drawing during mouse operations.
	 */
	IMMEDIATELY = 1347766637,

	/**
	 * Never use live screen drawing during mouse operations, use sprite mode.
	 */
	NEVER = 1347767926,

}

/**
 * Options for preview pages.
 */
declare enum PreviewPagesOptions {
	/**
	 * All pages.
	 */
	ALL_PAGES = 1886547553,

	/**
	 * First ten pages.
	 */
	FIRST_10_PAGES = 1180192871,

	/**
	 * First two pages.
	 */
	FIRST_2_PAGES = 1177702503,

	/**
	 * First five pages.
	 */
	FIRST_5_PAGES = 1177899111,

	/**
	 * First page.
	 */
	FIRST_PAGE = 1700947536,

}

/**
 * The alignment for static text.
 */
declare enum StaticAlignmentOptions {
	/**
	 * Center align the text.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Left align the text.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Right align the text.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Rendering intent options.
 */
declare enum RenderingIntent {
	/**
	 * Maintains color accuracy at the expense of preserving relationships between colors; most suitable for previewing how paper color affects printed colors.
	 */
	ABSOLUTE_COLORIMETRIC = 1380540771,

	/**
	 * Preserves the visual relationship between colors at the expense of actual color values; most suitable for photographic images with high percentages of out-of-gamut colors.
	 */
	PERCEPTUAL = 1380544611,

	/**
	 * Compares the extreme highlight of the source color space to that of the desination color space and shifts all colors accordingly; out-of-gamut colors are shifted to the closest reproducible color in the destination color space.
	 */
	RELATIVE_COLORIMETRIC = 1380545123,

	/**
	 * Produces vivid colors at the expense of color accuracy; most suitable for business graphics such as graphs or charts.
	 */
	SATURATION = 1380545377,

	/**
	 * Uses the current color settings.
	 */
	USE_COLOR_SETTINGS = 1380541299,

}

/**
 * Stroke weight options for printer marks.
 */
declare enum MarkLineWeight {
	/**
	 * 05 mm.
	 */
	P05MM = 808807789,

	/**
	 * 07 mm.
	 */
	P07MM = 808938861,

	/**
	 * 10 mm.
	 */
	P10MM = 825257325,

	/**
	 * 125 pt.
	 */
	P125PT = 825374064,

	/**
	 * 15 mm.
	 */
	P15MM = 825585005,

	/**
	 * 20 mm.
	 */
	P20MM = 842034541,

	/**
	 * 25 pt.
	 */
	P25PT = 842346608,

	/**
	 * 30 mm.
	 */
	P30MM = 858811757,

	/**
	 * 50 pt.
	 */
	P50PT = 892350576,

}

/**
 * Options for printer marks formats.
 */
declare enum MarkTypes {
	/**
	 * Uses the default format.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Uses J marks without a circle.
	 */
	J_MARK_WITHOUT_CIRCLE = 1785556579,

	/**
	 * Uses J marks with a circle.
	 */
	J_MARK_WITH_CIRCLE = 1785558883,

}

/**
 * Color output mode options for composites.
 */
declare enum ColorOutputModes {
	/**
	 * Sends full-color versions of the specified pages to the printer. Note: Available only for PostScript printers.
	 */
	COMPOSITE_CMYK = 1668105035,

	/**
	 * Sends grayscale versions of the specified pages to the printer.
	 */
	COMPOSITE_GRAY = 1668116583,

	/**
	 * Sends a full-color version of the specified pages to the printer, preserving all color values in the original document. Note: Cannot simulate overprint when using this option.
	 */
	COMPOSITE_LEAVE_UNCHANGED = 1668107349,

	/**
	 * Sends full-color versions of the specified pages to the printer.
	 */
	COMPOSITE_RGB = 1668108866,

	/**
	 * Allows the printer to create color separations. Note: Valid only with a PostScript raster image processing (RIP) device.
	 */
	INRIP_SEPARATIONS = 1919512691,

	/**
	 * Sends PostScript information for each of the required separations to the printer. Note: Available only for PostScript printers.
	 */
	SEPARATIONS = 1936027745,

}

/**
 * Format options for image data.
 */
declare enum DataFormat {
	/**
	 * Uses ASCII format.
	 */
	ASCII = 1095975753,

	/**
	 * Uses binary format.
	 */
	BINARY = 1114534521,

}

/**
 * Flip direction options.
 */
declare enum Flip {
	/**
	 * Horizontal and vertical flip (same as rotate 180)
	 */
	BOTH = 1651471464,

	/**
	 * Flips the printed image horizontally.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * Flips the printed image horizontally and vertically (same as rotate 180).
	 */
	HORIZONTAL_AND_VERTICAL = 1215977068,

	/**
	 * The printed image is not flipped.
	 */
	NONE = 1852796517,

	/**
	 * Flips the printed image vertically.
	 */
	VERTICAL = 1986359924,

}

/**
 * Options for downloading fonts to the printer.
 */
declare enum FontDownloading {
	/**
	 * Downloads all fonts once per page.
	 */
	COMPLETE = 2003332197,

	/**
	 * Downloads only references to fonts. Note: Use when fonts reside in the printer.
	 */
	NONE = 1852796517,

	/**
	 * Downloads only the characters (glyphs) used in the document. Glyphs are downloaded once per page.
	 */
	SUBSET = 1768842098,

	/**
	 * Downloads only the characters (glyphs) used in the document. Glyphs are downloaded once per page. Note: Use when the number of glyphs exceeds 350.
	 */
	SUBSET_LARGE = 1818325607,

}

/**
 * Options for positioning the page on the paper or film.
 */
declare enum PagePositions {
	/**
	 * Centers the page horizontally and vertically.
	 */
	CENTERED = 1668183106,

	/**
	 * Centers the page horizontally.
	 */
	CENTER_HORIZONTALLY = 1668183112,

	/**
	 * Centers the page vertically.
	 */
	CENTER_VERTICALLY = 1668183126,

	/**
	 * Places the page in the upper left corner.
	 */
	UPPER_LEFT = 1668183118,

}

/**
 * Printer PostScript level options.
 */
declare enum PostScriptLevels {
	/**
	 * Level 2 PostScript.
	 */
	LEVEL_2 = 1347636274,

	/**
	 * Level 3 PostScript.
	 */
	LEVEL_3 = 1347636275,

}

/**
 * Page orientation options.
 */
declare enum PrintPageOrientation {
	/**
	 * Landscape.
	 */
	LANDSCAPE = 2003395685,

	/**
	 * Portrait.
	 */
	PORTRAIT = 1751738216,

	/**
	 * Reverse landscape.
	 */
	REVERSE_LANDSCAPE = 1869771372,

	/**
	 * Reverse portrait.
	 */
	REVERSE_PORTRAIT = 1869771376,

}

/**
 * Options for sending image data to the printer or file.
 */
declare enum ImageDataTypes {
	/**
	 * Sends full-resolution data.
	 */
	ALL_IMAGE_DATA = 1853058416,

	/**
	 * Prints graphics frames with crossbars in place of graphics.
	 */
	NONE = 1852796517,

	/**
	 * Sends just enough data to print graphics at the best possible resolution for the output device.
	 */
	OPTIMIZED_SUBSAMPLING = 1869640563,

	/**
	 * Sends screen-resolution versions (72 dpi) of placed bitmap images.
	 */
	PROXY_IMAGE_DATA = 1819243130,

}

/**
 * Options for printing page sequences.
 */
declare enum Sequences {
	/**
	 * Prints all pages.
	 */
	ALL = 1634495520,

	/**
	 * Prints only even-numbered pages.
	 */
	EVEN = 1702258030,

	/**
	 * Prints only odd-numbered pages.
	 */
	ODD = 1868850208,

}

/**
 * Color-management system source options.
 */
declare enum SourceSpaces {
	/**
	 * Uses the color space of the proof.
	 */
	PROOF_SPACE = 1886548848,

	/**
	 * Uses the color space of the document.
	 */
	USE_DOCUMENT = 1967419235,

}

/**
 * Options for the number of thumbnails per page.
 */
declare enum ThumbsPerPage {
	/**
	 * Fits one row on the page; the row contains two thumbnails.
	 */
	K1X2 = 1949399090,

	/**
	 * Fits two rows of two.
	 */
	K2X2 = 1949464626,

	/**
	 * Fits three rows of three.
	 */
	K3X3 = 1949530163,

	/**
	 * Fits four rows of four.
	 */
	K4X4 = 1949595700,

	/**
	 * Fits five rows of five.
	 */
	K5X5 = 1949661237,

	/**
	 * Fits six rows of six.
	 */
	K6X6 = 1949726774,

	/**
	 * Fits seven rows of seven.
	 */
	K7X7 = 1949792311,

}

/**
 * Tiling type options.
 */
declare enum TilingTypes {
	/**
	 * Automatically calculates the number of tiles required, including the overlap. For information, see tiling overlap.
	 */
	AUTO = 1635019116,

	/**
	 * Increases the amount of overlap as necessary so that the right sides of the right-most tiles are aligned at the right edge of the document page, and the bottom sides of the bottom-most tiles are aligned at the bottom edge of the document page. For information, see tiling overlap.
	 */
	AUTO_JUSTIFIED = 1634366324,

	/**
	 * Prints a single tile whose upper left corner is at the zero point of the rulers.
	 */
	MANUAL = 1835955308,

}

/**
 * Trapping options.
 */
declare enum Trapping {
	/**
	 * Adobe in-RIP.
	 */
	ADOBE_INRIP = 1919512660,

	/**
	 * Application built-in.
	 */
	APPLICATION_BUILTIN = 1114199152,

	/**
	 * No trapping.
	 */
	OFF = 1330005536,

}

/**
 * Ink trapping type options.
 */
declare enum InkTypes {
	/**
	 * Uses traditional process inks and most spot inks.
	 */
	NORMAL = 1852797549,

	/**
	 * Uses heavy, nontransparent inks to prevent trapping of underlying colors but allow for trapping along the edges of the ink. Best for metallic inks.
	 */
	OPAQUE = 1769230192,

	/**
	 * Uses heavy, nontransparent inks to prevent trapping of underlying colors but allow for trapping along the edges of the ink. Best for inks that have undesirable interactions with other inks.
	 */
	OPAQUE_IGNORE = 1769228647,

	/**
	 * Uses clear inks to ensure that underlying items trap. Best for varnishes and dieline inks.
	 */
	TRANSPARENT = 1769231474,

}

/**
 * Printer preset options.
 */
declare enum PrinterPresetTypes {
	/**
	 * A custom printer preset.
	 */
	CUSTOM = 1131639917,

	/**
	 * The default printer preset.
	 */
	DEFAULT_VALUE = 1147563124,

}

/**
 * The color-rendering dictionary (CRD) to use.
 */
declare enum ColorRenderingDictionary {
	/**
	 * Uses the default CRD.
	 */
	DEFAULT_VALUE = 1147563124,

	/**
	 * Uses the document's CRD.
	 */
	USE_DOCUMENT = 1967419235,

	/**
	 * Uses the working CRD.
	 */
	WORKING = 1466921579,

}

/**
 * Page range options.
 */
declare enum PageRange {
	/**
	 * Print or export all pages in the document.
	 */
	ALL_PAGES = 1886547553,

	/**
	 * Export selected items in the document.
	 */
	SELECTED_ITEMS = 1886547571,

}

/**
 * Paper size options.
 */
declare enum PaperSize {
	/**
	 * Automatic
	 */
	AUTO = 1635019116,

}

/**
 * PPD options.
 */
declare enum PPDValues {
	/**
	 * Device-independent.
	 */
	DEVICE_INDEPENDENT = 1684367716,

}

/**
 * Color profile options.
 */
declare enum Profile {
	/**
	 * No CMS profile is used.
	 */
	NO_CMS = 1970499183,

	/**
	 * Uses the PostScript CMS profile.
	 */
	POSTSCRIPT_CMS = 1970303843,

	/**
	 * Uses the document profile.
	 */
	USE_DOCUMENT = 1967419235,

	/**
	 * Uses the working profile.
	 */
	WORKING = 1466921579,

}

/**
 * Options for ink screening for composite gray output in PostScript or PDF format.
 */
declare enum Screeening {
	/**
	 * Uses custom screening settings for ink angle and frequency. For information, see composite angle and composite frequency.
	 */
	CUSTOM = 1131639917,

	/**
	 * Uses the default screening settings.
	 */
	DEFAULT_VALUE = 1147563124,

}

/**
 * Paper size optons.
 */
declare enum PaperSizes {
	/**
	 * Allows definition of a custom paper size. Note: Not all printers allow custom paper sizes.
	 */
	CUSTOM = 1131639917,

	/**
	 * Allows the printer driver to define the paper size.
	 */
	DEFINED_BY_DRIVER = 1347634290,

}

/**
 * Printer options.
 */
declare enum Printer {
	/**
	 * Prints to a PostScript file.
	 */
	POSTSCRIPT_FILE = 1886611052,

}

/**
 * Options for trap placement between vector objects and bitmap images.
 */
declare enum TrapImagePlacementTypes {
	/**
	 * Creates a trap that straddles the edge between vector objects and bitmap images.
	 */
	CENTER_EDGES = 1953522542,

	/**
	 * Causes vector objects to overlap abutting images.
	 */
	CHOKE = 1953522536,

	/**
	 * Causes bitmap images to overlap the abutting objects.
	 */
	IMAGES_OVER_SPREAD = 1953526640,

	/**
	 * Applies the same trapping rules as used elsewhere in the document. Note: When used to trap an object to a photograph, can result in noticeably uneven edges as the trap moves from one side of the edge to another.
	 */
	IMAGE_NEUTRAL_DENSITY = 1953525348,

}

/**
 * Shape options for the intersection of three-way traps.
 */
declare enum TrapEndTypes {
	/**
	 * Shapes the end of the trap to keep it away from the intersecting object.
	 */
	MITER_TRAP_ENDS = 1953525093,

	/**
	 * Reshapes the trap generated by the lightest neutral density object so that it wraps around the point where the three objects intersect.
	 */
	OVERLAP_TRAP_ENDS = 1953525612,

}

/**
 * Options for exporting image data to the EPS document.
 */
declare enum EPSImageData {
	/**
	 * Exports high-resolution data. Note: Use when the file will be printed on a high-resolution output device.
	 */
	ALL_IMAGE_DATA = 1853058416,

	/**
	 * Exports only screen-resolution versions (72 dpi) of placed bitmap images. Note: Use in conjunction with OPI image replacement or if the resulting file will be viewed on-screen.
	 */
	PROXY_IMAGE_DATA = 1819243130,

}

/**
 * Booklet type options.
 */
declare enum BookletTypeOptions {
	/**
	 * Four up consecutive imposition.
	 */
	FOUR_UP_CONSECUTIVE = 1110721363,

	/**
	 * Three up consecutive imposition.
	 */
	THREE_UP_CONSECUTIVE = 1110655827,

	/**
	 * Two up consecutive imposition.
	 */
	TWO_UP_CONSECUTIVE = 1110590291,

	/**
	 * Two up perfect bound imposition.
	 */
	TWO_UP_PERFECT_BOUND = 1110593602,

	/**
	 * Two up saddle stitch imposition.
	 */
	TWO_UP_SADDLE_STITCH = 1110594387,

}

/**
 * Signature size options.
 */
declare enum SignatureSizeOptions {
	/**
	 * Signature size 12.
	 */
	SIGNATURE_SIZE_12 = 1112748338,

	/**
	 * Signature size 16.
	 */
	SIGNATURE_SIZE_16 = 1112748342,

	/**
	 * Signature size 32.
	 */
	SIGNATURE_SIZE_32 = 1112748850,

	/**
	 * Signature size 4.
	 */
	SIGNATURE_SIZE_4 = 1112748084,

	/**
	 * Signature size 8.
	 */
	SIGNATURE_SIZE_8 = 1112748088,

}

/**
 * Document print ui options
 */
declare enum DocumentPrintUiOptions {
	/**
	 * Do not show file save dialog during printing.
	 */
	SUPPRESS_FILE_SAVE_DIALOG = 1936089444,

	/**
	 * Do not show print dialog.
	 */
	SUPPRESS_PRINT_DIALOG = 1936745575,

	/**
	 * Do not show progress bar during printing.
	 */
	SUPPRESS_PRINT_PROGRESS = 1936748659,

	/**
	 * Do not show warning dialog during printing.
	 */
	SUPPRESS_PRINT_WARNINGS = 1936750450,

}

/**
 * Note background color options.
 */
declare enum NoteBackgrounds {
	/**
	 * Uses the galley background color.
	 */
	GALLEY_BACKGROUND_COLOR = 1699168839,

	/**
	 * Uses the note color.
	 */
	USE_NOTE_COLOR = 1700020807,

}

/**
 * Note color options.
 */
declare enum NoteColorChoices {
	/**
	 * Uses the note color.
	 */
	USE_NOTE_PREF_COLOR = 1700089923,

	/**
	 * Uses the color assigned to the user.
	 */
	USE_USER_COLOR = 1700091203,

}

/**
 * Marking options for changed text.
 */
declare enum ChangeMarkings {
	/**
	 * Does not mark changed text.
	 */
	NONE = 1852796517,

	/**
	 * Outlines changed text.
	 */
	OUTLINE = 1869900910,

	/**
	 * Uses a strikethrough to mark changed text.
	 */
	STRIKETHROUGH = 1699968114,

	/**
	 * Underlines changed text.
	 */
	UNDERLINE_SINGLE = 1700097636,

}

/**
 * Change bar location options.
 */
declare enum ChangebarLocations {
	/**
	 * Change bars are in the left margin.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Change bars are in the right margin.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Changed text color options.
 */
declare enum ChangeTextColorChoices {
	/**
	 * The text color for changed text is the same as the text color defined in track changes preferences. For information, see text color for added text, text color for deleted text, or text color for moved text.
	 */
	CHANGE_USES_CHANGE_PREF_COLOR = 1700098147,

	/**
	 * The text color for changed text is the same as the galley text color.
	 */
	CHANGE_USES_GALLEY_TEXT_COLOR = 1700095843,

}

/**
 * Background color options for changed text.
 */
declare enum ChangeBackgroundColorChoices {
	/**
	 * The background color for changed text is the same as the track changes preferences background color. For information, see background color for added text, background color for deleted text, or background color for moved text.
	 */
	CHANGE_BACKGROUND_USES_CHANGE_PREF_COLOR = 1700098146,

	/**
	 * The background color for changed text is the same as the galley background color.
	 */
	CHANGE_BACKGROUND_USES_GALLEY_BACKGROUND_COLOR = 1700095842,

	/**
	 * The background color for changed text is the same as the color assigned to the current user.
	 */
	CHANGE_BACKGROUND_USES_USER_COLOR = 1700099426,

}

/**
 * Lock state options.
 */
declare enum LockStateValues {
	/**
	 * The story has been checked in.
	 */
	CHECKED_IN_STORY = 1112695657,

	/**
	 * The story has been checked out.
	 */
	CHECKED_OUT_STORY = 1112695663,

	/**
	 * The story is embedded.
	 */
	EMBEDDED_STORY = 1112696173,

	/**
	 * The story is locked.
	 */
	LOCKED_STORY = 1112697963,

	/**
	 * The story file is missing.
	 */
	MISSING_LOCK_STATE = 1112698227,

	/**
	 * The stories have a mixed lock state.
	 */
	MIXED_LOCK_STATE = 1112698232,

	/**
	 * No lock state.
	 */
	NONE = 1852796517,

	/**
	 * The story is unmanaged.
	 */
	UNMANAGED_STORY = 1112700269,

}

/**
 * Color space options for representing color in the exported JPEG.
 */
declare enum JpegColorSpaceEnum {
	/**
	 * Represents all color values using the CMYK color space.
	 */
	CMYK = 1129142603,

	/**
	 * Converts all color values to high-quality black-and-white images. Gray levels of the converted objects represent the luminosity of the original objects.
	 */
	GRAY = 1766290041,

	/**
	 * Represents all color values using the RGB color space. Best suited for documents that will be viewed on-screen.
	 */
	RGB = 1666336578,

}

/**
 * Page export options.
 */
declare enum ExportRangeOrAllPages {
	/**
	 * Exports all pages.
	 */
	EXPORT_ALL = 1785742657,

	/**
	 * Exports the page range specified in the page string property.
	 */
	EXPORT_RANGE = 1785742674,

}

/**
 * The records to merge.
 */
declare enum RecordSelection {
	/**
	 * Merges all records.
	 */
	ALL_RECORDS = 1684881778,

	/**
	 * Merges the specified record.
	 */
	ONE_RECORD = 1684885362,

	/**
	 * Merges all records in the specified range.
	 */
	RANGE = 1684886130,

}

/**
 * The order in which to arrange records in the target document.
 */
declare enum ArrangeBy {
	/**
	 * Arranges records by column.
	 */
	COLUMNS_FIRST = 1684882278,

	/**
	 * Arranges records by row.
	 */
	ROWS_FIRST = 1684886118,

}

/**
 * The number of records per page.
 */
declare enum RecordsPerPage {
	/**
	 * Places as many records as fit on a page.
	 */
	MULTIPLE_RECORD = 1684884850,

	/**
	 * Places each record on a new page.
	 */
	SINGLE_RECORD = 1684886386,

}

/**
 * Options for fitting content to a frame.
 */
declare enum Fitting {
	/**
	 * Selects best crop region of the content for the frame based on Adobe Sensei. Note: Preserves frame size but might scale the content size. If this fitting is set, centerImage property is turned-off.
	 */
	CONTENT_AWARE_FITTING = 1684882241,

	/**
	 * Resizes content to fill the frame while preserving content proportions. If the content and frame have different proportions, some content is obscured by the bounding box of the frame.
	 */
	FILL_PROPORTIONAL = 1684883056,

	/**
	 * Resizes content to fit the frame. Note: Content that is a different size than the frame appears stretched or squeezed.
	 */
	FIT_CONTENT_TO_FRAME = 1684883043,

	/**
	 * Resizes the frame to fit the content.
	 */
	FIT_FRAME_TO_CONTENT = 1684883046,

	/**
	 * Preserves the original sizes of the frame and the content. Note: Content that is larger than the frame is obscured around the edges.
	 */
	PRESERVE_SIZES = 1684885619,

	/**
	 * Resizes content to fit the frame while preserving content proportions. If the content and frame have different proportions, some empty space occurs in the frame.
	 */
	PROPORTIONAL = 1684885618,

}

/**
 * Data type options for data merge fields.
 */
declare enum SourceFieldType {
	/**
	 * The field can fill a data merge image placeholder.
	 */
	IMAGE_FIELD = 1684883814,

	/**
	 * The field can fill a data merge QR code placeholder.
	 */
	QRCODE_FIELD = 1684885862,

	/**
	 * The field can fill a data merge text placeholder.
	 */
	TEXT_FIELD = 1684886630,

}

/**
 * List type options.
 */
declare enum ListType {
	/**
	 * Bullet list.
	 */
	BULLET_LIST = 1280598644,

	/**
	 * No list.
	 */
	NO_LIST = 1280601711,

	/**
	 * Numbered list.
	 */
	NUMBERED_LIST = 1280601709,

}

/**
 * Bullet character type.
 */
declare enum BulletCharacterType {
	/**
	 * Glyph with font.
	 */
	GLYPH_WITH_FONT = 1111713638,

	/**
	 * Unicode only.
	 */
	UNICODE_ONLY = 1111717231,

	/**
	 * Unicode with font.
	 */
	UNICODE_WITH_FONT = 1111717222,

}

/**
 * Numbering style
 */
declare enum NumberingStyle {
	/**
	 * Arabic
	 */
	ARABIC = 1298231906,

	/**
	 * Uses Arabic Abjad
	 */
	ARABIC_ABJAD = 1296130410,

	/**
	 * Uses Arabic Alif Ba Tah
	 */
	ARABIC_ALIF_BA_TAH = 1296130420,

	/**
	 * Add double leading zeros.
	 */
	DOUBLE_LEADING_ZEROS = 1296329850,

	/**
	 * Do not add characters.
	 */
	FORMAT_NONE = 1701733998,

	/**
	 * Uses Hebrew Biblical
	 */
	HEBREW_BIBLICAL = 1296589410,

	/**
	 * Uses Hebrew Non Standard
	 */
	HEBREW_NON_STANDARD = 1296589422,

	/**
	 * Kanji
	 */
	KANJI = 1296788073,

	/**
	 * Katakana (a, i, u, e, o...).
	 */
	KATAKANA_MODERN = 1265920877,

	/**
	 * Katakana (i, ro, ha, ni...).
	 */
	KATAKANA_TRADITIONAL = 1265920884,

	/**
	 * Lower letters
	 */
	LOWER_LETTERS = 1296855660,

	/**
	 * Lower roman
	 */
	LOWER_ROMAN = 1297247596,

	/**
	 * Add single leading zeros.
	 */
	SINGLE_LEADING_ZEROS = 1297312890,

	/**
	 * Add triple leading zeros.
	 */
	TRIPLE_LEADING_ZEROS = 1297378426,

	/**
	 * Upper letters
	 */
	UPPER_LETTERS = 1296855669,

	/**
	 * Upper roman
	 */
	UPPER_ROMAN = 1297247605,

}

/**
 * Restart numbering options.
 */
declare enum RestartPolicy {
	/**
	 * Restart numbering after a specific numbering level.
	 */
	AFTER_SPECIFIC_LEVEL = 1701737324,

	/**
	 * Restart numbering after any previous (higher) numbering level.
	 */
	ANY_PREVIOUS_LEVEL = 1701732720,

	/**
	 * Restart numbering after any of a range of numbering levels.
	 */
	RANGE_OF_LEVELS = 1701737068,

}

/**
 * List alignment options.
 */
declare enum ListAlignment {
	/**
	 * Align center.
	 */
	CENTER_ALIGN = 1667591796,

	/**
	 * Align left.
	 */
	LEFT_ALIGN = 1818584692,

	/**
	 * Align right.
	 */
	RIGHT_ALIGN = 1919379572,

}

/**
 * Chapter number sources.
 */
declare enum ChapterNumberSources {
	/**
	 * Continue chapter number from previous document.
	 */
	CONTINUE_FROM_PREVIOUS_DOCUMENT = 1668178800,

	/**
	 * Chapter number same as previous document.
	 */
	SAME_AS_PREVIOUS_DOCUMENT = 1668182896,

	/**
	 * User-defined chapter number.
	 */
	USER_DEFINED = 1668183396,

}

/**
 * Custom Layout Type Options.
 */
declare enum CustomLayoutTypeEnum {
	/**
	 * Alignment And Spacing.
	 */
	ALIGNMENT_AND_SPACING = 1097618288,

	/**
	 * Float Left.
	 */
	FLOAT_LEFT = 1181502565,

	/**
	 * Float Right.
	 */
	FLOAT_RIGHT = 1181504105,

}

/**
 * Export options for assignment files.
 */
declare enum AssignmentExportOptions {
	/**
	 * Exports only spreads with assigned frames.
	 */
	ASSIGNED_SPREADS = 1098073459,

	/**
	 * Exports frames but does not export content.
	 */
	EMPTY_FRAMES = 1098073446,

	/**
	 * Exports the entire document.
	 */
	EVERYTHING = 1098073441,

}

/**
 * The status of the assigment.
 */
declare enum AssignmentStatus {
	/**
	 * The assignment file is missing.
	 */
	ASSIGNMENT_FILE_MISSING = 1095126387,

	/**
	 * The assignment has been modified and needs to be updated.
	 */
	ASSIGNMENT_OUT_OF_DATE = 1095724868,

	/**
	 * The assignment has not been modified.
	 */
	ASSIGNMENT_UP_TO_DATE = 1096119364,

}

/**
 * The display performance settings to use while scrolling.
 */
declare enum PanningTypes {
	/**
	 * While scrolling, greeks newly revealed images until the mouse is released; medium quality display with medium performance speed.
	 */
	GREEK_IMAGES = 1699111248,

	/**
	 * While scrolling, greeks newly revealed images and text until the mouse is released; highest quality display with the slowest performance.
	 */
	GREEK_IMAGES_AND_TEXT = 1699639120,

	/**
	 * While scrolling, does not greek images or text; lowest quality display with the fastest performance.
	 */
	NO_GREEKING = 1699116368,

}

/**
 * Options for aligning or distributing objects.
 */
declare enum AlignDistributeBounds {
	/**
	 * Align or distribute to the bounds of the objects.
	 */
	ITEM_BOUNDS = 1416587604,

	/**
	 * Align or distribute to a key object.
	 */
	KEY_OBJECT = 1699439993,

	/**
	 * Align or distribute to the margins of the page.
	 */
	MARGIN_BOUNDS = 1416588609,

	/**
	 * Align or distribute to the bounds of the page.
	 */
	PAGE_BOUNDS = 1416589377,

	/**
	 * Align or distribute to the bounds of the spread.
	 */
	SPREAD_BOUNDS = 1416590160,

}

/**
 * Options for aligning objects.
 */
declare enum AlignOptions {
	/**
	 * Align the bottom edges of the objects.
	 */
	BOTTOM_EDGES = 1114916196,

	/**
	 * Align the horizontal centers of the objects.
	 */
	HORIZONTAL_CENTERS = 1215257187,

	/**
	 * Align the left edges of the objects.
	 */
	LEFT_EDGES = 1281770852,

	/**
	 * Align the right edges of the objects.
	 */
	RIGHT_EDGES = 1383351652,

	/**
	 * Align the top edges of the objects.
	 */
	TOP_EDGES = 1416643940,

	/**
	 * Align the vertical centers of the objects.
	 */
	VERTICAL_CENTERS = 1449481315,

}

/**
 * Options for distributing objects.
 */
declare enum DistributeOptions {
	/**
	 * Distribute based on the bottom edges of the objects.
	 */
	BOTTOM_EDGES = 1114916196,

	/**
	 * Distribute based on the horizontal centers of the objects.
	 */
	HORIZONTAL_CENTERS = 1215257187,

	/**
	 * Distribute based on the horizontal spacing of the objects.
	 */
	HORIZONTAL_SPACE = 1215257203,

	/**
	 * Distribute based on the left edges of the objects.
	 */
	LEFT_EDGES = 1281770852,

	/**
	 * Distribute based on the right edges of the objects.
	 */
	RIGHT_EDGES = 1383351652,

	/**
	 * Distribute based on the top edges of the objects.
	 */
	TOP_EDGES = 1416643940,

	/**
	 * Distribute based on the vertical centers of the objects.
	 */
	VERTICAL_CENTERS = 1449481315,

	/**
	 * Distribute based on the vertical spacing of the objects.
	 */
	VERTICAL_SPACE = 1449489523,

}

/**
 * The source type of alternate or actual text
 */
declare enum SourceType {
	/**
	 * Custom Text
	 */
	SOURCE_CUSTOM = 1934902125,

	/**
	 * XML Structure
	 */
	SOURCE_XML_STRUCTURE = 1934907507,

	/**
	 * XMP Description
	 */
	SOURCE_XMP_DESCRIPTION = 1934907492,

	/**
	 * XMP Headline
	 */
	SOURCE_XMP_HEADLINE = 1934907496,

	/**
	 * User specified XMP metadata property
	 */
	SOURCE_XMP_OTHER = 1934907503,

	/**
	 * XMP Title
	 */
	SOURCE_XMP_TITLE = 1934907508,

}

/**
 * The tag type of page item
 */
declare enum TagType {
	/**
	 * Tag as artifact
	 */
	TAG_ARTIFACT = 1952924006,

	/**
	 * Tag as Story or Figure based on object type
	 */
	TAG_BASED_ON_OBJECT = 1952924271,

	/**
	 * Determine the tag from XML structure, or fallback to standard tag
	 */
	TAG_FROM_STRUCTURE = 1952928613,

}

/**
 * File format options for converted images
 */
declare enum ImageFormat {
	/**
	 * Uses GIF format for selected object.
	 */
	GIF = 1734960742,

	/**
	 * Uses JPEG format for selected object.
	 */
	JPEG = 1785751398,

	/**
	 * Uses PNG format, for selected object.
	 */
	PNG = 1397059687,

}

/**
 * Image size option for a converted object
 */
declare enum ImageSizeOption {
	/**
	 * Image size to be used is absolute.
	 */
	SIZE_FIXED = 1182295162,

	/**
	 * Image size to be used is relative to the text flow.
	 */
	SIZE_RELATIVE_TO_TEXT_FLOW = 1383486566,

}

/**
 * Image resolution for converted object
 */
declare enum ImageResolution {
	/**
	 * 150 pixels per inch
	 */
	PPI_150 = 1920151654,

	/**
	 * 300 pixels per inch
	 */
	PPI_300 = 1920160872,

	/**
	 * 72 pixels per inch
	 */
	PPI_72 = 1920160628,

	/**
	 * 96 pixels per inch
	 */
	PPI_96 = 1920159347,

}

/**
 * Type of Image alignment for objects
 */
declare enum ImageAlignmentType {
	/**
	 * image will be aligned center
	 */
	ALIGN_CENTER = 1097614194,

	/**
	 * image will be aligned left
	 */
	ALIGN_LEFT = 1097616486,

	/**
	 * image will be aligned right
	 */
	ALIGN_RIGHT = 1097618036,

}

/**
 * Image Page Break Options.
 */
declare enum ImagePageBreakType {
	/**
	 * Page break after image.
	 */
	PAGE_BREAK_AFTER = 1114792294,

	/**
	 * Page break before image.
	 */
	PAGE_BREAK_BEFORE = 1114792550,

	/**
	 * Page break before and after image.
	 */
	PAGE_BREAK_BEFORE_AND_AFTER = 1114792545,

}

/**
 * size type options.
 */
declare enum SizeTypeEnum {
	/**
	 * Default size.
	 */
	DEFAULT_SIZE = 1147491177,

	/**
	 * Fixed size.
	 */
	FIXED_SIZE = 1181317203,

	/**
	 * None size.
	 */
	NONE_SIZE = 1315925587,

	/**
	 * Relative to text flow.
	 */
	RELATIVE_TO_TEXT_FLOW = 1383289940,

	/**
	 * Relative to text size.
	 */
	RELATIVE_TO_TEXT_SIZE = 1383486579,

	/**
	 * Use custom height.
	 */
	USE_CUSTOM_HEIGHT = 1430472805,

	/**
	 * Use custom width.
	 */
	USE_CUSTOM_WIDTH = 1430476649,

}

/**
 * Preserve Appearance from Layout Options
 */
declare enum PreserveAppearanceFromLayoutEnum {
	/**
	 * Export preferences will be honoured
	 */
	PRESERVE_APPEARANCE_DEFAULT = 1349665893,

	/**
	 * Container & content both will be rasterized, if can be
	 */
	PRESERVE_APPEARANCE_RASTERIZE_CONTAINER = 1349669490,

	/**
	 * Content will be rasterized, if can be
	 */
	PRESERVE_APPEARANCE_RASTERIZE_CONTENT = 1349669492,

	/**
	 * Exiting image will be used
	 */
	PRESERVE_APPEARANCE_USE_EXISTING_IMAGE = 1349670245,

}

/**
 * Arrowhead alignment types.
 */
declare enum ArrowHeadAlignmentEnum {
	/**
	 * The arrowhead is inside the path, path geometry changes to accomodate arrow heads.
	 */
	INSIDE_PATH = 1634230633,

	/**
	 * The arrowhead is outside the path i.e. path geometry remains same.
	 */
	OUTSIDE_PATH = 1634230639,

}

/**
 * Options for specifying the reference position for X and Y attributes of style. If set none, it will disable the attribute.
 */
declare enum TransformPositionReference {
	/**
	 * Corresponding edge of the page. Left edge for X attribute, Top edge for Y attribute.
	 */
	PAGE_EDGE_REFERENCE = 1348945255,

	/**
	 * Corresponding page margin of the page.Left margin for X attribute, Top margin for Y attribute.
	 */
	PAGE_MARGIN_REFERENCE = 1883721063,

}

/**
 * Dimension attribute which you want to control.
 */
declare enum DimensionAttributes {
	/**
	 * Both height and width of dimension.
	 */
	BOTH_HEIGHT_WIDTH_ATTRIBUTE = 1700227170,

	/**
	 * Height attribute of dimension.
	 */
	HEIGHT_ATTRIBUTE = 1699247183,

	/**
	 * Width attribute of dimension.
	 */
	WIDTH_ATTRIBUTE = 1700226127,

}

/**
 * Position attribute which you want to control.
 */
declare enum PositionAttributes {
	/**
	 * Both X and Y of position.
	 */
	BOTH_X_Y_ATTRIBUTE = 1698855001,

	/**
	 * X attribute of position.
	 */
	X_ATTRIBUTE = 1700282735,

	/**
	 * Y attribute of position.
	 */
	Y_ATTRIBUTE = 1700348271,

}

/**
 * Performance metric options.
 */
declare enum PerformanceMetricOptions {
	/**
	 * AGMXShowTime
	 */
	AGMXSHOWTIME = 1095191924,

	/**
	 * Number of attachable events that have been dispatched.
	 */
	ATTACHABLE_EVENT_COUNT = 1095058292,

	/**
	 * Number of attached scripts that have been executed.
	 */
	ATTACHED_SCRIPTS_COUNT = 1095975796,

	/**
	 * BIB Allocations
	 */
	BIB_ALLOCATIONS = 1112097345,

	/**
	 * BIB Allocations peak
	 */
	BIB_ALLOCATIONS_PEAK = 1111576683,

	/**
	 * BIB cache
	 */
	BIB_CACHE = 1112097379,

	/**
	 * BIB cache peak
	 */
	BIB_CACHE_PEAK = 1111707755,

	/**
	 * change manager update call count
	 */
	CHANGE_MANAGER_UPDATE_CALL_COUNT = 1129137012,

	/**
	 * change manager update call time
	 */
	CHANGE_MANAGER_UPDATE_CALL_TIME = 1129141357,

	/**
	 * The core allocation count.
	 */
	CORE_ALLOCATION_COUNT = 1128361059,

	/**
	 * The core memory size.
	 */
	CORE_MEMORY_SIZE = 1129539962,

	/**
	 * The CPU time.
	 */
	CPU_TIME = 1668314484,

	/**
	 * The current memory mark.
	 */
	CURRENT_MEMORY_MARK = 1296921195,

	/**
	 * database file bytes read
	 */
	DATABASE_FILE_BYTES_READ = 1145197156,

	/**
	 * database file bytes written
	 */
	DATABASE_FILE_BYTES_WRITTEN = 1145198450,

	/**
	 * database file page reads
	 */
	DATABASE_FILE_PAGE_READS = 1145194098,

	/**
	 * database file read time
	 */
	DATABASE_FILE_READ_TIME = 1145197172,

	/**
	 * database file write time
	 */
	DATABASE_FILE_WRITE_TIME = 1145198452,

	/**
	 * database instantiate count
	 */
	DATABASE_INSTANTIATE_COUNT = 1145194862,

	/**
	 * database new UID count
	 */
	DATABASE_NEW_UID_COUNT = 1145197929,

	/**
	 * Total amount of time spent dispatching attachable events.
	 */
	DISPATCH_EVENT_TIME = 1145394285,

	/**
	 * draw manager draw time
	 */
	DRAW_MANAGER_DRAW_TIME = 1145918573,

	/**
	 * draw manager number of interrupts
	 */
	DRAW_MANAGER_NUMBER_OF_INTERRUPTS = 1145915758,

	/**
	 * drop shadow file read bytes
	 */
	DROP_SHADOW_FILE_READ_BYTES = 1145459298,

	/**
	 * drop shadow file read time
	 */
	DROP_SHADOW_FILE_READ_TIME = 1145459316,

	/**
	 * drop shadow file write bytes
	 */
	DROP_SHADOW_FILE_WRITE_BYTES = 1145460578,

	/**
	 * drop shadow file write time
	 */
	DROP_SHADOW_FILE_WRITE_TIME = 1145460596,

	/**
	 * drop shadow memory read bytes
	 */
	DROP_SHADOW_MEMORY_READ_BYTES = 1146311266,

	/**
	 * drop shadow memory read time
	 */
	DROP_SHADOW_MEMORY_READ_TIME = 1146311284,

	/**
	 * drop shadow memory write bytes
	 */
	DROP_SHADOW_MEMORY_WRITE_BYTES = 1146312546,

	/**
	 * drop shadow memory write time
	 */
	DROP_SHADOW_MEMORY_WRITE_TIME = 1146312564,

	/**
	 * galley composition count
	 */
	GALLEY_COMPOSITION_COUNT = 1195590516,

	/**
	 * galley composition time
	 */
	GALLEY_COMPOSITION_TIME = 1195594861,

	/**
	 * The GDI object count.
	 */
	GDI_OBJECT_COUNT = 1195657582,

	/**
	 * The handle count.
	 */
	HANDLE_COUNT = 1212378740,

	/**
	 * heap allocations
	 */
	HEAP_ALLOCATIONS = 1212247148,

	/**
	 * heap allocations peak
	 */
	HEAP_ALLOCATIONS_PEAK = 1212239979,

	/**
	 * image cache allocations
	 */
	IMAGE_CACHE_ALLOCATIONS = 1231897409,

	/**
	 * image cache allocations peak
	 */
	IMAGE_CACHE_ALLOCATIONS_PEAK = 1229144427,

	/**
	 * image cache file bytes read
	 */
	IMAGE_CACHE_FILE_BYTES_READ = 1231901284,

	/**
	 * image cache file bytes written
	 */
	IMAGE_CACHE_FILE_BYTES_WRITTEN = 1231902578,

	/**
	 * image cache file read time
	 */
	IMAGE_CACHE_FILE_READ_TIME = 1229148772,

	/**
	 * image cache file write time
	 */
	IMAGE_CACHE_FILE_WRITE_TIME = 1229150066,

	/**
	 * instance cache purge count
	 */
	INSTANCE_CACHE_PURGE_COUNT = 1229148259,

	/**
	 * layout composition count
	 */
	LAYOUT_COMPOSITION_COUNT = 1279476596,

	/**
	 * layout composition time
	 */
	LAYOUT_COMPOSITION_TIME = 1279480941,

	/**
	 * memory purge count
	 */
	MEMORY_PURGE_COUNT = 1297105780,

	/**
	 * memory purge time
	 */
	MEMORY_PURGE_TIME = 1297110125,

	/**
	 * minisave count
	 */
	MINISAVE_COUNT = 1297302388,

	/**
	 * new snapshot time
	 */
	NEW_SNAPSHOT_TIME = 1397651284,

	/**
	 * The number of threads.
	 */
	NUMBER_OF_THREADS = 1853122674,

	/**
	 * The overall system CPU.
	 */
	OVERALL_SYSTEM_CPU = 1399025781,

	/**
	 * The overall user CPU.
	 */
	OVERALL_USER_CPU = 1432580213,

	/**
	 * PDF allocactions
	 */
	PDF_ALLOCACTIONS = 1346651713,

	/**
	 * PDF allocactions peak
	 */
	PDF_ALLOCACTIONS_PEAK = 1346650475,

	/**
	 * process IO bytes read
	 */
	PROCESS_IO_BYTES_READ = 1229935204,

	/**
	 * process IO bytes written
	 */
	PROCESS_IO_BYTES_WRITTEN = 1229936498,

	/**
	 * The resident memory size.
	 */
	RESIDENT_MEMORY_SIZE = 1381198202,

	/**
	 * snapshot count
	 */
	SNAPSHOT_COUNT = 1397965684,

	/**
	 * snapshot read write byte count
	 */
	SNAPSHOT_READ_WRITE_BYTE_COUNT = 1397905251,

	/**
	 * snapshot read write time
	 */
	SNAPSHOT_READ_WRITE_TIME = 1397905268,

	/**
	 * The virtual memory size.
	 */
	VIRTUAL_MEMORY_SIZE = 1448307066,

	/**
	 * VXferAlloc
	 */
	VXFERALLOC = 1448633921,

	/**
	 * VXferAllocPeak
	 */
	VXFERALLOCPEAK = 1448624491,

	/**
	 * VXferBytesRead
	 */
	VXFERBYTESREAD = 1448633938,

	/**
	 * VXferBytesWritten
	 */
	VXFERBYTESWRITTEN = 1448633943,

	/**
	 * VXferFileBytesRead
	 */
	VXFERFILEBYTESREAD = 1447445106,

	/**
	 * VXFerFileBytesWritten
	 */
	VXFERFILEBYTESWRITTEN = 1447445111,

	/**
	 * VXferReadTime
	 */
	VXFERREADTIME = 1448628852,

	/**
	 * VXferWriteTime
	 */
	VXFERWRITETIME = 1448630132,

	/**
	 * XMP filter time
	 */
	XMP_FILTER_TIME = 1481461876,

}

/**
 * SWF export background options.
 */
declare enum SWFBackgroundOptions {
	/**
	 * Paper color background.
	 */
	PAPER_COLOR = 1935831139,

	/**
	 * Transparent background.
	 */
	TRANSPARENT_SWF_BACKGROUND = 1935828852,

}

/**
 * XFL rasterize format options.
 */
declare enum XFLRasterizeFormatOptions {
	/**
	 * Uses the best format based on the image when rasterizes.
	 */
	AUTOMATIC = 1768059764,

	/**
	 * Uses GIF format when rasterizes.
	 */
	GIF = 1734960742,

	/**
	 * Uses JPEG format when rasterizes.
	 */
	JPEG = 1785751398,

	/**
	 * Uses PNG format when rasterizes.
	 */
	PNG = 1397059687,

}

/**
 * The ease option.
 */
declare enum AnimationEaseOptions {
	/**
	 * cutom read only ease type.
	 */
	CUSTOM_EASE = 2051363407,

	/**
	 * simple ease in.
	 */
	EASE_IN = 2051371849,

	/**
	 * simple ease in and out.
	 */
	EASE_IN_OUT = 2051361103,

	/**
	 * simple ease out.
	 */
	EASE_OUT = 2051371855,

	/**
	 * no easing.
	 */
	NO_EASE = 2051960645,

}

/**
 * The event that triggers a list of dynamic target objects to play.
 */
declare enum DynamicTriggerEvents {
	/**
	 * target is triggered on a button or self click.
	 */
	ON_CLICK = 1953317740,

	/**
	 * target is triggered on clicking on the page.
	 */
	ON_PAGE_CLICK = 1953321027,

	/**
	 * target is triggered on loading of the page.
	 */
	ON_PAGE_LOAD = 1953321036,

	/**
	 * target is triggered on a button release.
	 */
	ON_RELEASE = 1953321580,

	/**
	 * target is triggered on a button rolloff.
	 */
	ON_ROLLOFF = 1953321574,

	/**
	 * target is triggered on a button or self rollover.
	 */
	ON_ROLLOVER = 1953321590,

	/**
	 * target is triggered on self click.
	 */
	ON_SELF_CLICK = 1951613804,

	/**
	 * target is triggered on self rollover.
	 */
	ON_SELF_ROLLOVER = 1951617638,

	/**
	 * target is triggered on loading of the state in a multi-state object.
	 */
	ON_STATE_LOAD = 1953321804,

}

/**
 * The page transition type options.
 */
declare enum PageTransitionTypeOptions {
	/**
	 * The Blinds page transition.
	 */
	BLINDS_TRANSITION = 1886667372,

	/**
	 * The Blinds page transition.
	 */
	BOX_TRANSITION = 1886667384,

	/**
	 * The Comb page transition.
	 */
	COMB_TRANSITION = 1886667618,

	/**
	 * The Cover page transition.
	 */
	COVER_TRANSITION = 1886667638,

	/**
	 * The Dissolve page transition.
	 */
	DISSOLVE_TRANSITION = 1886667891,

	/**
	 * The Fade page transition.
	 */
	FADE_TRANSITION = 1886668388,

	/**
	 * No page transition applied.
	 */
	NONE = 1852796517,

	/**
	 * The Page Turn page transition.
	 */
	PAGE_TURN_TRANSITION = 1886670932,

	/**
	 * The Push page transition.
	 */
	PUSH_TRANSITION = 1886670963,

	/**
	 * The Split page transition.
	 */
	SPLIT_TRANSITION = 1886671728,

	/**
	 * The Uncover page transition.
	 */
	UNCOVER_TRANSITION = 1886672227,

	/**
	 * The Wipe page transition.
	 */
	WIPE_TRANSITION = 1886672752,

	/**
	 * The Zoom In page transition.
	 */
	ZOOM_IN_TRANSITION = 1886673481,

	/**
	 * The Zoom Out page transition.
	 */
	ZOOM_OUT_TRANSITION = 1886673487,

}

/**
 * The page transition direction options.
 */
declare enum PageTransitionDirectionOptions {
	/**
	 * The top to bottom direction.
	 */
	DOWN = 1181971556,

	/**
	 * The horizontal direction.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * The horizontal inward direction.
	 */
	HORIZONTAL_IN = 1886668873,

	/**
	 * The horizontal outward direction.
	 */
	HORIZONTAL_OUT = 1886668879,

	/**
	 * The inward direction.
	 */
	IN = 1768824864,

	/**
	 * The down and left direction.
	 */
	LEFT_DOWN = 1886669892,

	/**
	 * The left to right direction.
	 */
	LEFT_TO_RIGHT = 1819570786,

	/**
	 * The up and left direction.
	 */
	LEFT_UP = 1886669909,

	/**
	 * Direction does not apply.
	 */
	NOT_APPLICABLE = 1886670401,

	/**
	 * The outward direction.
	 */
	OUT = 1886670708,

	/**
	 * The down and right direction.
	 */
	RIGHT_DOWN = 1886671428,

	/**
	 * The right to left direction.
	 */
	RIGHT_TO_LEFT = 1920232546,

	/**
	 * The up and right direction.
	 */
	RIGHT_UP = 1886671445,

	/**
	 * The bottom to top direction.
	 */
	UP = 1181971566,

	/**
	 * The vertical direction.
	 */
	VERTICAL = 1986359924,

	/**
	 * The vertical inward direction.
	 */
	VERTICAL_IN = 1886672457,

	/**
	 * The vertical outward direction.
	 */
	VERTICAL_OUT = 1886672463,

}

/**
 * SWF raster compression options.
 */
declare enum RasterCompressionOptions {
	/**
	 * Uses JPEG compression and automatically determines the best quality type.
	 */
	AUTOMATIC_COMPRESSION = 1936875875,

	/**
	 * Uses JPEG compression.
	 */
	JPEG_COMPRESSION = 1936878179,

	/**
	 * Uses the best quality type.
	 */
	LOSSLESS_COMPRESSION = 1936878691,

}

/**
 * Dynamic documents JPEG Quality options.
 */
declare enum DynamicDocumentsJPEGQualityOptions {
	/**
	 * Uses high JPEG compression.
	 */
	HIGH = 1701726313,

	/**
	 * Uses low JPEG compression.
	 */
	LOW = 1701727351,

	/**
	 * Uses maximum JPEG compression.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Uses medium JPEG compression.
	 */
	MEDIUM = 1701727588,

	/**
	 * Uses minimum JPEG compression.
	 */
	MINIMUM = 1701727598,

}

/**
 * Dynamic documents text export policy.
 */
declare enum DynamicDocumentsTextExportPolicy {
	/**
	 * Text is exported as live text.
	 */
	LIVE = 1952804972,

	/**
	 * Text is to be rasterized.
	 */
	RASTERIZE = 1952804978,

	/**
	 * Text is exported as Text Layout Framework text.
	 */
	TLF = 1952804980,

	/**
	 * Text is to be vectorized.
	 */
	VECTORIZE = 1952804982,

}

/**
 * Fit method settings.
 */
declare enum FitMethodSettings {
	/**
	 * Fit to given scale percentage.
	 */
	FIT_GIVEN_SCALE_PERCENTAGE = 1684304739,

	/**
	 * Fit to given width and height.
	 */
	FIT_GIVEN_WIDTH_AND_HEIGHT = 1684305768,

	/**
	 * Fit to predefined settings.
	 */
	FIT_PREDEFINED_SETTINGS = 1684301427,

}

/**
 * Options for fitting to dimension.
 */
declare enum FitDimension {
	/**
	 * Fit to 1024x768 dimension.
	 */
	FIT1024X768 = 1718906726,

	/**
	 * Fit to 1240x620 dimension.
	 */
	FIT1240X620 = 1718908023,

	/**
	 * Fit to 1280x800 dimension.
	 */
	FIT1280X800 = 1718906725,

	/**
	 * Fit to 600x300 dimension.
	 */
	FIT600X300 = 1718907764,

	/**
	 * Fit to 640x480 dimension.
	 */
	FIT640X480 = 1718907753,

	/**
	 * Fit to 760x420 dimension.
	 */
	FIT760X420 = 1718907750,

	/**
	 * Fit to 800x600 dimension.
	 */
	FIT800X600 = 1718904179,

	/**
	 * Fit to 984x588 dimension.
	 */
	FIT984X588 = 1718906470,

}

/**
 * The page transition duration options.
 */
declare enum PageTransitionDurationOptions {
	/**
	 * Fast duration.
	 */
	FAST = 1180791668,

	/**
	 * Medium duration.
	 */
	MEDIUM = 1701727588,

	/**
	 * Slow duration.
	 */
	SLOW = 1886671692,

}

/**
 * SWF curve quality values.
 */
declare enum SWFCurveQualityValue {
	/**
	 * High curve quality.
	 */
	HIGH = 1701726313,

	/**
	 * Low curve quality.
	 */
	LOW = 1701727351,

	/**
	 * Maximum curve quality.
	 */
	MAXIMUM = 1701727608,

	/**
	 * Medium curve quality.
	 */
	MEDIUM = 1701727588,

	/**
	 * Minimum curve quality.
	 */
	MINIMUM = 1701727598,

}

/**
 * Dynamic media handling options.
 */
declare enum DynamicMediaHandlingOptions {
	/**
	 * Draw interactive elements appearance only.
	 */
	APPEARANCE_ONLY = 1097887823,

	/**
	 * Include all interactive elements.
	 */
	INCLUDE_ALL_MEDIA = 1231241580,

}

/**
 * The animation design options.
 */
declare enum DesignOptions {
	/**
	 * Uses the current object's properties as the starting appearance of the animation at runtime.
	 */
	FROM_CURRENT_APPEARANCE = 1634551405,

	/**
	 * Uses the current object's properties as the end appearance of the animation at runtime.
	 */
	TO_CURRENT_APPEARANCE = 1634554991,

	/**
	 * Uses the current object's properties as the starting appearance, and current position as the end location of the animation at runtime.
	 */
	TO_CURRENT_LOCATION = 1634553702,

}

/**
 * Options for the condition indicator method.
 */
declare enum ConditionIndicatorMethod {
	/**
	 * Highlights conditional text.
	 */
	USE_HIGHLIGHT = 1699244391,

	/**
	 * Underlines conditional text.
	 */
	USE_UNDERLINE = 1700097644,

}

/**
 * Options for the condition underline indicator appearance.
 */
declare enum ConditionUnderlineIndicatorAppearance {
	/**
	 * Dashed underline.
	 */
	DASHED = 1684108136,

	/**
	 * Solid underline.
	 */
	SOLID = 1936682084,

	/**
	 * Wavy underline.
	 */
	WAVY = 1937208953,

}

/**
 * Condition indicator mode options.
 */
declare enum ConditionIndicatorMode {
	/**
	 * Conditions indicators hide.
	 */
	HIDE_INDICATORS = 1698908520,

	/**
	 * Conditions indicators show and print.
	 */
	SHOW_AND_PRINT_INDICATORS = 1698908528,

	/**
	 * Condition indicators show only.
	 */
	SHOW_INDICATORS = 1698908531,

}

/**
 * Style Type
 */
declare enum StyleType {
	/**
	 * Character Style
	 */
	CHARACTER_STYLE_TYPE = 1665684340,

	/**
	 * Paragraph Style
	 */
	PARAGRAPH_STYLE_TYPE = 1883730548,

}

/**
 * Text Directions.
 */
declare enum TextDirection {
	/**
	 * Horizontal Text Direction
	 */
	HORIZONTAL_TYPE = 1702126696,

	/**
	 * Mixed Text Direction
	 */
	MIXED_TYPE = 1702126701,

	/**
	 * Unknown Text Direction
	 */
	UNKNOWN_TYPE = 1702126709,

	/**
	 * Vertical Text Direction
	 */
	VERTICAL_TYPE = 1702126710,

}

/**
 * Text to consider in case of threaded text frames.
 */
declare enum ThreadedTextFrameTextOptions {
	/**
	 * Text for the complete story
	 */
	TEXT_FOR_COMPLETE_STORY = 1698911092,

	/**
	 * Text within current text frame
	 */
	TEXT_WITHIN_TEXTFRAME = 1700021844,

}

/**
 * The smooth scrolling option.
 */
declare enum SmoothScrollingOptions {
	/**
	 * horizontal smooth scrolling.
	 */
	HORIZONTAL = 1752134266,

	/**
	 * no smooth scrolling.
	 */
	NO_SMOOTH_SCROLL = 1699959662,

	/**
	 * vertical smooth scrolling.
	 */
	VERTICAL = 1986359924,

	/**
	 * vertical and horizontal smooth scrolling.
	 */
	VERTICAL_AND_HORIZONTAL = 1699959650,

}

/**
 * The folio orientation option.
 */
declare enum FolioOrientationOptions {
	/**
	 * automatic - determine orientation based on the orientation of the mini folios.
	 */
	AUTO = 1635019116,

	/**
	 * landscape orientation only.
	 */
	LANDSCAPE = 2003395685,

	/**
	 * portrait orientation only.
	 */
	PORTRAIT = 1751738216,

	/**
	 * both portrait and landscape orientations.
	 */
	PORTRAIT_AND_LANDSCAPE = 1699303266,

}

/**
 * The folio binding direction option.
 */
declare enum FolioBindingDirectionOptions {
	/**
	 * left-edge binding.
	 */
	LEFT = 1835102828,

	/**
	 * right-edge binding.
	 */
	RIGHT = 1835102834,

}

/**
 * The versions that are available.
 */
declare enum DigpubVersion {
	/**
	 * plugin, folio and plist versions in that order.
	 */
	ALL = 1634495520,

	/**
	 * folio version.
	 */
	FOLIO = 1685087862,

	/**
	 * plist version.
	 */
	PLIST = 1685090422,

	/**
	 * plugin version.
	 */
	PLUGIN = 1685090412,

}

/**
 * The device types that are attached.
 */
declare enum AttachedDevices {
	/**
	 * all devices, Android followed by iOS.
	 */
	ALL = 1634495520,

	/**
	 * Android devices.
	 */
	ANDROID = 1685086564,

	/**
	 * iOS devices.
	 */
	IOS = 1684631411,

}

/**
 * The version of the plugin and article that are available.
 */
declare enum DigpubArticleVersion {
	/**
	 * plugin and article versions in that order.
	 */
	ALL = 1634495520,

	/**
	 * article version.
	 */
	ARTICLE = 1685078390,

	/**
	 * plugin version.
	 */
	PLUGIN = 1685090412,

}

/**
 * Choices for export order of epub and html.
 */
declare enum ExportOrder {
	/**
	 * based on article defined in article panel.
	 */
	ARTICLE_PANEL_ORDER = 1700946288,

	/**
	 * based on document layout.
	 */
	LAYOUT_ORDER = 1700949113,

	/**
	 * based on XML structure.
	 */
	XML_STRUCTURE_ORDER = 1700952179,

}

/**
 * EPub export option for cover image.
 */
declare enum EpubCover {
	/**
	 * Use external image as cover image.
	 */
	EXTERNAL_IMAGE = 1700952169,

	/**
	 * Rasterize first page as cover image.
	 */
	FIRST_PAGE = 1700947536,

	/**
	 * no cover image.
	 */
	NONE = 1852796517,

}

/**
 * Options for export unorder list.
 */
declare enum BulletListExportOption {
	/**
	 * convert to text.
	 */
	AS_TEXT = 1700946804,

	/**
	 * map to html unordered list.
	 */
	UNORDERED_LIST = 1700949333,

}

/**
 * Options for export order list.
 */
declare enum NumberedListExportOption {
	/**
	 * convert to text.
	 */
	AS_TEXT = 1700946804,

	/**
	 * map to html ordered list.
	 */
	ORDERED_LIST = 1700949359,

}

/**
 * EPub export option for epub version.
 */
declare enum EpubVersion {
	/**
	 * EPUB 2.0.1.
	 */
	EPUB2 = 1702257970,

	/**
	 * EPUB 3.0.
	 */
	EPUB3 = 1702257971,

}

/**
 * Choices for export image.
 */
declare enum ImageExportOption {
	/**
	 * link to server.
	 */
	LINK_TO_SERVER = 1700949107,

	/**
	 * optimized image.
	 */
	OPTIMIZED_IMAGE = 1700949872,

	/**
	 * original image.
	 */
	ORIGINAL_IMAGE = 1700949874,

}

/**
 * Choices for footnote placement.
 */
declare enum EPubFootnotePlacement {
	/**
	 * Footnote after paragraph.
	 */
	FOOTNOTE_AFTER_PARAGRAPH = 1701213296,

	/**
	 * Footnote after story.
	 */
	FOOTNOTE_AFTER_STORY = 1701213267,

	/**
	 * Footnote inside popup.
	 */
	FOOTNOTE_INSIDE_POPUP = 1701213235,

}

/**
 * Choices for page range format for export.
 */
declare enum PageRangeFormat {
	/**
	 * export all pages.
	 */
	EXPORT_ALL_PAGES = 1700883568,

	/**
	 * export page ranges.
	 */
	EXPORT_PAGE_RANGE = 1700951410,

}

/**
 * Choices for epub navigation style.
 */
declare enum EpubNavigationStyle {
	/**
	 * Bookmarks based navigation
	 */
	BOOKMARKS_NAVIGATION = 1700949622,

	/**
	 * File name based navigation
	 */
	FILENAME_NAVIGATION = 1701211766,

	/**
	 * No navigation.
	 */
	NO_NAVIGATION = 1701736054,

	/**
	 * TOC style based navigation
	 */
	TOC_STYLE_NAVIGATION = 1702129270,

}

/**
 * Choices for spread control for fixed layout EPub.
 */
declare enum EpubFixedLayoutSpreadControl {
	/**
	 * No spreads.
	 */
	NO_SPREADS = 1702063727,

	/**
	 * Physical spreads.
	 */
	PHYSICAL_SPREADS = 1701865593,

	/**
	 * Spreads based on document.
	 */
	SPREADS_BASED_ON_DOC = 1700949860,

	/**
	 * Synthetic spreads.
	 */
	SYNTHETIC_SPREADS = 1702066542,

}

/**
 * Choices for publish format.
 */
declare enum PublishFormatEnum {
	/**
	 * publish by pages.
	 */
	PUBLISH_BY_PAGES = 1700950134,

	/**
	 * publish by spread.
	 */
	PUBLISH_BY_SPREAD = 1700950902,

}

/**
 * publish export option for cover image.
 */
declare enum PublishCoverEnum {
	/**
	 * Rasterize chosen page as cover image.
	 */
	CHOSEN_PAGE = 1701013072,

	/**
	 * Use external image as cover image.
	 */
	EXTERNAL_IMAGE = 1700952169,

	/**
	 * Rasterize first page as cover image.
	 */
	FIRST_PAGE = 1700947536,

}

/**
 * Mapping type for style mappings.
 */
declare enum MapType {
	/**
	 * group to group mapping rule.
	 */
	GROUP_MAPPING_RULE = 1735681906,

	/**
	 * group to style mapping rule.
	 */
	GROUP_TO_STYLE_MAPPING_RULE = 1735684978,

	/**
	 * style to style mapping rule.
	 */
	STYLE_MAPPING_RULE = 1937011570,

	/**
	 * style to group mapping rule.
	 */
	STYLE_TO_GROUP_MAPPING_RULE = 1937008498,

}

/**
 * Paragraph direction.
 */
declare enum ParagraphDirectionOptions {
	/**
	 * Left to Right paragraph direction
	 */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,

	/**
	 * Right to Left paragraph direction
	 */
	RIGHT_TO_LEFT_DIRECTION = 1379028068,

}

/**
 * Paragraph justification.
 */
declare enum ParagraphJustificationOptions {
	/**
	 * Arabic justification
	 */
	ARABIC_JUSTIFICATION = 1886019954,

	/**
	 * Default justification
	 */
	DEFAULT_JUSTIFICATION = 1886020709,

	/**
	 * Naskh justification
	 */
	NASKH_JUSTIFICATION = 1886023265,

	/**
	 * Kashidas. Use naskh justification if you want to also use Justifcation Alternates.
	 */
	NASKH_KASHIDA_JUSTIFICATION = 1886023275,

	/**
	 * Fractional Kashidas. Use naskh justification if you want to also use Justifcation Alternates.
	 */
	NASKH_KASHIDA_JUSTIFICATION_FRAC = 1886021227,

	/**
	 * Kashidas without Stretched Connections.
	 */
	NASKH_TATWEEL_JUSTIFICATION = 1886023284,

	/**
	 * Fractional Kashidas without Stretched Connections.
	 */
	NASKH_TATWEEL_JUSTIFICATION_FRAC = 1886021236,

}

/**
 * Character direction.
 */
declare enum CharacterDirectionOptions {
	/**
	 * Default direction
	 */
	DEFAULT_DIRECTION = 1147496036,

	/**
	 * Left to right direction
	 */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,

	/**
	 * Right to left direction
	 */
	RIGHT_TO_LEFT_DIRECTION = 1379028068,

}

/**
 * Digits type options.
 */
declare enum DigitsTypeOptions {
	/**
	 * Arabic digits
	 */
	ARABIC_DIGITS = 1684627826,

	/**
	 * Bengali digits
	 */
	BENGALI_DIGITS = 1684628069,

	/**
	 * Burmese digits
	 */
	BURMESE_DIGITS = 1684628085,

	/**
	 * Default digits
	 */
	DEFAULT_DIGITS = 1684628581,

	/**
	 * Devanagari digits
	 */
	DEVANAGARI_DIGITS = 1684628598,

	/**
	 * Farsi digits
	 */
	FARSI_DIGITS = 1684629089,

	/**
	 * Full Farsi digits
	 */
	FULL_FARSI_DIGITS = 1684629094,

	/**
	 * Gujarati digits
	 */
	GUJARATI_DIGITS = 1684629354,

	/**
	 * Gurmukhi digits
	 */
	GURMUKHI_DIGITS = 1684629357,

	/**
	 * Hindi digits
	 */
	HINDI_DIGITS = 1684629609,

	/**
	 * Kannada digits
	 */
	KANNADA_DIGITS = 1684630369,

	/**
	 * Khmer digits
	 */
	KHMER_DIGITS = 1684630376,

	/**
	 * Lao digits
	 */
	LAO_DIGITS = 1684630625,

	/**
	 * Malayalam digits
	 */
	MALAYALAM_DIGITS = 1684630881,

	/**
	 * native digits
	 */
	NATIVE_DIGITS = 1684631137,

	/**
	 * Oriya digits
	 */
	ORIYA_DIGITS = 1684631410,

	/**
	 * Tamil digits
	 */
	TAMIL_DIGITS = 1684632673,

	/**
	 * Telugu digits
	 */
	TELUGU_DIGITS = 1684632677,

	/**
	 * Thai digits
	 */
	THAI_DIGITS = 1684632680,

	/**
	 * Tibetan digits
	 */
	TIBETAN_DIGITS = 1684632681,

}

/**
 * Kashidas.
 */
declare enum KashidasOptions {
	/**
	 * Default kashidas
	 */
	DEFAULT_KASHIDAS = 1801544805,

	/**
	 * Kashidas off
	 */
	KASHIDAS_OFF = 1801547622,

}

/**
 * Diacritic position.
 */
declare enum DiacriticPositionOptions {
	/**
	 * Default position
	 */
	DEFAULT_POSITION = 1685090150,

	/**
	 * Loose position
	 */
	LOOSE_POSITION = 1685089391,

	/**
	 * Medium position
	 */
	MEDIUM_POSITION = 1685089637,

	/**
	 * OpenType position
	 */
	OPENTYPE_POSITION = 1685090164,

	/**
	 * OpenType position from baseline
	 */
	OPENTYPE_POSITION_FROM_BASELINE = 1685090146,

	/**
	 * Tight position
	 */
	TIGHT_POSITION = 1685091433,

}

/**
 * Table direction options.
 */
declare enum TableDirectionOptions {
	/**
	 * Set left to right table direction
	 */
	LEFT_TO_RIGHT_DIRECTION = 1278366308,

	/**
	 * Set right to left table direction
	 */
	RIGHT_TO_LEFT_DIRECTION = 1379028068,

}

/**
 * A hyperlink.
 */
declare class Hyperlink {
	/**
	 * The hyperlink border color.
	 */
	borderColor: [number, number, number] | UIColors

	/**
	 * The hyperlink border style.
	 */
	borderStyle: HyperlinkAppearanceStyle

	/**
	 * The text, page, or URL that the hyperlink points to.
	 */
	destination: HyperlinkTextDestination | HyperlinkPageDestination | HyperlinkExternalPageDestination | HyperlinkURLDestination | ParagraphDestination

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the hyperlink is hidden.
	 */
	hidden: boolean

	/**
	 * The hyperlink highlight style.
	 */
	highlight: HyperlinkAppearanceHighlight

	/**
	 * The unique ID of the Hyperlink.
	 */
	id: number

	/**
	 * The index of the Hyperlink within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Hyperlink.
	 */
	name: string

	/**
	 * The parent of the Hyperlink (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The hyperlinked text or page item.
	 */
	source: HyperlinkPageItemSource | HyperlinkTextSource | CrossReferenceSource

	/**
	 * If true, the Hyperlink is visible.
	 */
	visible: boolean

	/**
	 * The stroke weight of the hyperlink border.
	 */
	width: HyperlinkAppearanceWidth

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Hyperlink[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the Hyperlink.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void

	/**
	 * Jumps to the hyperlink source.
	 */
	showSource(): void

	/**
	 * Generates a string which, if executed, will return the Hyperlink.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of hyperlinks.
 */
declare class Hyperlinks {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Hyperlink with the specified index.
	 * @param index The index.
	 */
	[index: number]: Hyperlink

	/**
	 * Creates a new hyperlink.
	 * @param hyperlinkSource The hyperlinked object.
	 * @param hyperlinkDestination The destination that the hyperlink points to. Can accept: Ordered array containing fileName:String, volumn:String, directoryId:Long Integer, dataLinkClassId:Long Integer, destinationUid:Long Integer, HyperlinkTextDestination, HyperlinkPageDestination, HyperlinkExternalPageDestination, HyperlinkURLDestination or ParagraphDestination.
	 * @param withProperties Initial values for properties of the new Hyperlink
	 */
	add(hyperlinkSource: HyperlinkPageItemSource | HyperlinkTextSource | CrossReferenceSource, hyperlinkDestination: any, withProperties: object): Hyperlink

	/**
	 * Returns any Hyperlink in the collection.
	 */
	anyItem(): Hyperlink

	/**
	 * Displays the number of elements in the Hyperlink.
	 */
	count(): number

	/**
	 * Returns every Hyperlink in the collection.
	 */
	everyItem(): Hyperlink[]

	/**
	 * Returns the first Hyperlink in the collection.
	 */
	firstItem(): Hyperlink

	/**
	 * Returns the Hyperlink with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Hyperlink

	/**
	 * Returns the Hyperlink with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Hyperlink

	/**
	 * Returns the Hyperlink with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Hyperlink

	/**
	 * Returns the Hyperlinks within the specified range.
	 * @param from The Hyperlink, index, or name at the beginning of the range.
	 * @param to The Hyperlink, index, or name at the end of the range.
	 */
	itemByRange(from: Hyperlink | number | string, to: Hyperlink | number | string): Hyperlink[]

	/**
	 * Returns the last Hyperlink in the collection.
	 */
	lastItem(): Hyperlink

	/**
	 * Returns the middle Hyperlink in the collection.
	 */
	middleItem(): Hyperlink

	/**
	 * Returns the Hyperlink whose index follows the specified Hyperlink in the collection.
	 * @param obj The Hyperlink whose index comes before the desired Hyperlink.
	 */
	nextItem(obj: Hyperlink): Hyperlink

	/**
	 * Returns the Hyperlink with the index previous to the specified index.
	 * @param obj The index of the Hyperlink that follows the desired Hyperlink.
	 */
	previousItem(obj: Hyperlink): Hyperlink

	/**
	 * Generates a string which, if executed, will return the Hyperlink.
	 */
	toSource(): string

}

/**
 * A bookmark.
 */
declare class Bookmark {
	/**
	 * A collection of bookmarks.
	 */
	bookmarks: Bookmarks

	/**
	 * The destination that the hyperlink points to.
	 */
	destination: HyperlinkTextDestination | HyperlinkPageDestination | HyperlinkExternalPageDestination | Page

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Bookmark.
	 */
	id: number

	/**
	 * The indent level of the bookmark.
	 */
	indent: number

	/**
	 * The index of the Bookmark within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Bookmark.
	 */
	name: string

	/**
	 * The parent of the Bookmark (a Document or Bookmark).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Bookmark[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the bookmark to the specified location.
	 * @param to The bookmark location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to?: LocationOptions, reference?: Bookmark | Document): Bookmark

	/**
	 * Deletes the Bookmark.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Go to the bookmark.
	 */
	showBookmark(): void

	/**
	 * Generates a string which, if executed, will return the Bookmark.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of bookmarks.
 */
declare class Bookmarks {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Bookmark with the specified index.
	 * @param index The index.
	 */
	[index: number]: Bookmark

	/**
	 * Creates a new bookmark.
	 * @param destination The bookmark destination.
	 * @param withProperties Initial values for properties of the new Bookmark
	 */
	add(destination: HyperlinkTextDestination | HyperlinkPageDestination | HyperlinkExternalPageDestination | Page, withProperties: object): Bookmark

	/**
	 * Returns any Bookmark in the collection.
	 */
	anyItem(): Bookmark

	/**
	 * Displays the number of elements in the Bookmark.
	 */
	count(): number

	/**
	 * Returns every Bookmark in the collection.
	 */
	everyItem(): Bookmark[]

	/**
	 * Returns the first Bookmark in the collection.
	 */
	firstItem(): Bookmark

	/**
	 * Returns the Bookmark with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Bookmark

	/**
	 * Returns the Bookmark with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Bookmark

	/**
	 * Returns the Bookmark with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Bookmark

	/**
	 * Returns the Bookmarks within the specified range.
	 * @param from The Bookmark, index, or name at the beginning of the range.
	 * @param to The Bookmark, index, or name at the end of the range.
	 */
	itemByRange(from: Bookmark | number | string, to: Bookmark | number | string): Bookmark[]

	/**
	 * Returns the last Bookmark in the collection.
	 */
	lastItem(): Bookmark

	/**
	 * Returns the middle Bookmark in the collection.
	 */
	middleItem(): Bookmark

	/**
	 * Returns the Bookmark whose index follows the specified Bookmark in the collection.
	 * @param obj The Bookmark whose index comes before the desired Bookmark.
	 */
	nextItem(obj: Bookmark): Bookmark

	/**
	 * Returns the Bookmark with the index previous to the specified index.
	 * @param obj The index of the Bookmark that follows the desired Bookmark.
	 */
	previousItem(obj: Bookmark): Bookmark

	/**
	 * Generates a string which, if executed, will return the Bookmark.
	 */
	toSource(): string

}

/**
 * A hyperlinked page item.
 */
declare class HyperlinkPageItemSource {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the hyperlink is hidden.
	 */
	hidden: boolean

	/**
	 * The unique ID of the HyperlinkPageItemSource.
	 */
	id: number

	/**
	 * The index of the HyperlinkPageItemSource within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the HyperlinkPageItemSource.
	 */
	name: string

	/**
	 * The parent of the HyperlinkPageItemSource (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The hyperlinked page item.
	 */
	sourcePageItem: PageItem

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkPageItemSource[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the HyperlinkPageItemSource.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Jumps to the hyperlink source.
	 */
	showSource(): void

	/**
	 * Generates a string which, if executed, will return the HyperlinkPageItemSource.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of hyperlink page item sources.
 */
declare class HyperlinkPageItemSources {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the HyperlinkPageItemSource with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkPageItemSource

	/**
	 * Creates a new hyperlink page item source.
	 * @param source The page item to hyperlink.
	 * @param withProperties Initial values for properties of the new HyperlinkPageItemSource
	 */
	add(source: PageItem, withProperties: object): HyperlinkPageItemSource

	/**
	 * Returns any HyperlinkPageItemSource in the collection.
	 */
	anyItem(): HyperlinkPageItemSource

	/**
	 * Displays the number of elements in the HyperlinkPageItemSource.
	 */
	count(): number

	/**
	 * Returns every HyperlinkPageItemSource in the collection.
	 */
	everyItem(): HyperlinkPageItemSource[]

	/**
	 * Returns the first HyperlinkPageItemSource in the collection.
	 */
	firstItem(): HyperlinkPageItemSource

	/**
	 * Returns the HyperlinkPageItemSource with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkPageItemSource

	/**
	 * Returns the HyperlinkPageItemSource with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkPageItemSource

	/**
	 * Returns the HyperlinkPageItemSource with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkPageItemSource

	/**
	 * Returns the HyperlinkPageItemSources within the specified range.
	 * @param from The HyperlinkPageItemSource, index, or name at the beginning of the range.
	 * @param to The HyperlinkPageItemSource, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkPageItemSource | number | string, to: HyperlinkPageItemSource | number | string): HyperlinkPageItemSource[]

	/**
	 * Returns the last HyperlinkPageItemSource in the collection.
	 */
	lastItem(): HyperlinkPageItemSource

	/**
	 * Returns the middle HyperlinkPageItemSource in the collection.
	 */
	middleItem(): HyperlinkPageItemSource

	/**
	 * Returns the HyperlinkPageItemSource whose index follows the specified HyperlinkPageItemSource in the collection.
	 * @param obj The HyperlinkPageItemSource whose index comes before the desired HyperlinkPageItemSource.
	 */
	nextItem(obj: HyperlinkPageItemSource): HyperlinkPageItemSource

	/**
	 * Returns the HyperlinkPageItemSource with the index previous to the specified index.
	 * @param obj The index of the HyperlinkPageItemSource that follows the desired HyperlinkPageItemSource.
	 */
	previousItem(obj: HyperlinkPageItemSource): HyperlinkPageItemSource

	/**
	 * Generates a string which, if executed, will return the HyperlinkPageItemSource.
	 */
	toSource(): string

}

/**
 * A hyperlinked text object or insertion point.
 */
declare class HyperlinkTextSource {
	/**
	 * Character style of the hyperlink text source.
	 */
	appliedCharacterStyle: CharacterStyle

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the hyperlink is hidden.
	 */
	hidden: boolean

	/**
	 * The unique ID of the HyperlinkTextSource.
	 */
	id: number

	/**
	 * The index of the HyperlinkTextSource within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the HyperlinkTextSource.
	 */
	name: string

	/**
	 * The parent of the HyperlinkTextSource (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The hyperlinked text or insertion point.
	 */
	sourceText: Text

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkTextSource[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the HyperlinkTextSource.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Jumps to the hyperlink source.
	 */
	showSource(): void

	/**
	 * Generates a string which, if executed, will return the HyperlinkTextSource.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of hyperlink text sources.
 */
declare class HyperlinkTextSources {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the HyperlinkTextSource with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkTextSource

	/**
	 * Creates a new hyperlink text source.
	 * @param source The text or insertion point to hyperlink.
	 * @param withProperties Initial values for properties of the new HyperlinkTextSource
	 */
	add(source: Text, withProperties: object): HyperlinkTextSource

	/**
	 * Returns any HyperlinkTextSource in the collection.
	 */
	anyItem(): HyperlinkTextSource

	/**
	 * Displays the number of elements in the HyperlinkTextSource.
	 */
	count(): number

	/**
	 * Returns every HyperlinkTextSource in the collection.
	 */
	everyItem(): HyperlinkTextSource[]

	/**
	 * Returns the first HyperlinkTextSource in the collection.
	 */
	firstItem(): HyperlinkTextSource

	/**
	 * Returns the HyperlinkTextSource with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkTextSource

	/**
	 * Returns the HyperlinkTextSource with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkTextSource

	/**
	 * Returns the HyperlinkTextSource with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkTextSource

	/**
	 * Returns the HyperlinkTextSources within the specified range.
	 * @param from The HyperlinkTextSource, index, or name at the beginning of the range.
	 * @param to The HyperlinkTextSource, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkTextSource | number | string, to: HyperlinkTextSource | number | string): HyperlinkTextSource[]

	/**
	 * Returns the last HyperlinkTextSource in the collection.
	 */
	lastItem(): HyperlinkTextSource

	/**
	 * Returns the middle HyperlinkTextSource in the collection.
	 */
	middleItem(): HyperlinkTextSource

	/**
	 * Returns the HyperlinkTextSource whose index follows the specified HyperlinkTextSource in the collection.
	 * @param obj The HyperlinkTextSource whose index comes before the desired HyperlinkTextSource.
	 */
	nextItem(obj: HyperlinkTextSource): HyperlinkTextSource

	/**
	 * Returns the HyperlinkTextSource with the index previous to the specified index.
	 * @param obj The index of the HyperlinkTextSource that follows the desired HyperlinkTextSource.
	 */
	previousItem(obj: HyperlinkTextSource): HyperlinkTextSource

	/**
	 * Generates a string which, if executed, will return the HyperlinkTextSource.
	 */
	toSource(): string

}

/**
 * A hyperlink destination that is either text or an insertion point.
 */
declare class HyperlinkTextDestination {
	/**
	 * The text or insertion point that the hyperlink points to.
	 */
	destinationText: InsertionPoint | Text

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the hyperlink is hidden.
	 */
	hidden: boolean

	/**
	 * The unique ID of the HyperlinkTextDestination.
	 */
	id: number

	/**
	 * The index of the HyperlinkTextDestination within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the HyperlinkTextDestination.
	 */
	name: string

	/**
	 * The parent of the HyperlinkTextDestination (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkTextDestination[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the HyperlinkTextDestination.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void

	/**
	 * Generates a string which, if executed, will return the HyperlinkTextDestination.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of hyperlink text destinations.
 */
declare class HyperlinkTextDestinations {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the HyperlinkTextDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkTextDestination

	/**
	 * Creates a new hyperlink text destination.
	 * @param destination The text or insertion point location that the hyperlink points to.
	 * @param withProperties Initial values for properties of the new HyperlinkTextDestination
	 */
	add(destination: Text, withProperties: object): HyperlinkTextDestination

	/**
	 * Returns any HyperlinkTextDestination in the collection.
	 */
	anyItem(): HyperlinkTextDestination

	/**
	 * Displays the number of elements in the HyperlinkTextDestination.
	 */
	count(): number

	/**
	 * Returns every HyperlinkTextDestination in the collection.
	 */
	everyItem(): HyperlinkTextDestination[]

	/**
	 * Returns the first HyperlinkTextDestination in the collection.
	 */
	firstItem(): HyperlinkTextDestination

	/**
	 * Returns the HyperlinkTextDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkTextDestination

	/**
	 * Returns the HyperlinkTextDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkTextDestination

	/**
	 * Returns the HyperlinkTextDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkTextDestination

	/**
	 * Returns the HyperlinkTextDestinations within the specified range.
	 * @param from The HyperlinkTextDestination, index, or name at the beginning of the range.
	 * @param to The HyperlinkTextDestination, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkTextDestination | number | string, to: HyperlinkTextDestination | number | string): HyperlinkTextDestination[]

	/**
	 * Returns the last HyperlinkTextDestination in the collection.
	 */
	lastItem(): HyperlinkTextDestination

	/**
	 * Returns the middle HyperlinkTextDestination in the collection.
	 */
	middleItem(): HyperlinkTextDestination

	/**
	 * Returns the HyperlinkTextDestination whose index follows the specified HyperlinkTextDestination in the collection.
	 * @param obj The HyperlinkTextDestination whose index comes before the desired HyperlinkTextDestination.
	 */
	nextItem(obj: HyperlinkTextDestination): HyperlinkTextDestination

	/**
	 * Returns the HyperlinkTextDestination with the index previous to the specified index.
	 * @param obj The index of the HyperlinkTextDestination that follows the desired HyperlinkTextDestination.
	 */
	previousItem(obj: HyperlinkTextDestination): HyperlinkTextDestination

	/**
	 * Generates a string which, if executed, will return the HyperlinkTextDestination.
	 */
	toSource(): string

}

/**
 * A hyperlink destination that is a document page.
 */
declare class HyperlinkPageDestination {
	/**
	 * The page that the hyperlink points to.
	 */
	destinationPage: Page

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the hyperlink is hidden.
	 */
	hidden: boolean

	/**
	 * The unique ID of the HyperlinkPageDestination.
	 */
	id: number

	/**
	 * The index of the HyperlinkPageDestination within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the HyperlinkPageDestination.
	 */
	name: string

	/**
	 * If true or unspecified, allows a custom destination name; also does not update the name when the destination is moved to a different page. If false, uses the page number as the page destination name and makes the name property read-only for the destination object; also updates the name when the destination is moved to a different page.
	 */
	nameManually: boolean

	/**
	 * The parent of the HyperlinkPageDestination (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The view rectangle, specified in the format [y1, x1, y2, x2]. Note: Valid only when view setting is fixed. Can return: Ordered array containing top:Unit, left:Unit, bottom:Unit, right:Unit.
	 */
	viewBounds: any

	/**
	 * The zoom percentage. (Range: 5 to 4000) Note: Valid only when view setting is fixed.
	 */
	viewPercentage: number

	/**
	 * The destination page size when the page is reached by clicking the hyperlink.
	 */
	viewSetting: HyperlinkDestinationPageSetting

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkPageDestination[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the HyperlinkPageDestination.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void

	/**
	 * Generates a string which, if executed, will return the HyperlinkPageDestination.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of hyperlink page destinations.
 */
declare class HyperlinkPageDestinations {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the HyperlinkPageDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkPageDestination

	/**
	 * Creates a new hyperlink page destination.
	 * @param destination The document page that the hyperlink points to.
	 * @param withProperties Initial values for properties of the new HyperlinkPageDestination
	 */
	add(destination: Page, withProperties: object): HyperlinkPageDestination

	/**
	 * Returns any HyperlinkPageDestination in the collection.
	 */
	anyItem(): HyperlinkPageDestination

	/**
	 * Displays the number of elements in the HyperlinkPageDestination.
	 */
	count(): number

	/**
	 * Returns every HyperlinkPageDestination in the collection.
	 */
	everyItem(): HyperlinkPageDestination[]

	/**
	 * Returns the first HyperlinkPageDestination in the collection.
	 */
	firstItem(): HyperlinkPageDestination

	/**
	 * Returns the HyperlinkPageDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkPageDestination

	/**
	 * Returns the HyperlinkPageDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkPageDestination

	/**
	 * Returns the HyperlinkPageDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkPageDestination

	/**
	 * Returns the HyperlinkPageDestinations within the specified range.
	 * @param from The HyperlinkPageDestination, index, or name at the beginning of the range.
	 * @param to The HyperlinkPageDestination, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkPageDestination | number | string, to: HyperlinkPageDestination | number | string): HyperlinkPageDestination[]

	/**
	 * Returns the last HyperlinkPageDestination in the collection.
	 */
	lastItem(): HyperlinkPageDestination

	/**
	 * Returns the middle HyperlinkPageDestination in the collection.
	 */
	middleItem(): HyperlinkPageDestination

	/**
	 * Returns the HyperlinkPageDestination whose index follows the specified HyperlinkPageDestination in the collection.
	 * @param obj The HyperlinkPageDestination whose index comes before the desired HyperlinkPageDestination.
	 */
	nextItem(obj: HyperlinkPageDestination): HyperlinkPageDestination

	/**
	 * Returns the HyperlinkPageDestination with the index previous to the specified index.
	 * @param obj The index of the HyperlinkPageDestination that follows the desired HyperlinkPageDestination.
	 */
	previousItem(obj: HyperlinkPageDestination): HyperlinkPageDestination

	/**
	 * Generates a string which, if executed, will return the HyperlinkPageDestination.
	 */
	toSource(): string

}

/**
 * A hyperlink destination that is a page in a document other than the document that contains the hyperlink source. For information on hyperlink sources, hyperlink page item source or hyperlink text source.
 */
declare class HyperlinkExternalPageDestination {
	/**
	 * The index of the page that the hyperlink destination points to. Note: Valid only when hyperlink destination is an external page.
	 */
	destinationPageIndex: number

	/**
	 * The path to the document that the hyperlink destination points to.
	 */
	documentPath: File

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the hyperlink is hidden.
	 */
	hidden: boolean

	/**
	 * The unique ID of the HyperlinkExternalPageDestination.
	 */
	id: number

	/**
	 * The index of the HyperlinkExternalPageDestination within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the HyperlinkExternalPageDestination.
	 */
	name: string

	/**
	 * The parent of the HyperlinkExternalPageDestination (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The view rectangle, specified in the format [y1, x1, y2, x2]. Note: Valid only when view setting is fixed. Can return: Ordered array containing top:Unit, left:Unit, bottom:Unit, right:Unit.
	 */
	viewBounds: any

	/**
	 * The zoom percentage. (Range: 5 to 4000) Note: Valid only when view setting is fixed.
	 */
	viewPercentage: number

	/**
	 * The destination page size when the page is reached by clicking the hyperlink.
	 */
	viewSetting: HyperlinkDestinationPageSetting

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkExternalPageDestination[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the HyperlinkExternalPageDestination.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void

	/**
	 * Generates a string which, if executed, will return the HyperlinkExternalPageDestination.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of hyperlink external page destinations.
 */
declare class HyperlinkExternalPageDestinations {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the HyperlinkExternalPageDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkExternalPageDestination

	/**
	 * Creates a new hyperlink external page destination.
	 * @param destination The destination page.
	 * @param withProperties Initial values for properties of the new HyperlinkExternalPageDestination
	 */
	add(destination: Page, withProperties: object): HyperlinkExternalPageDestination

	/**
	 * Returns any HyperlinkExternalPageDestination in the collection.
	 */
	anyItem(): HyperlinkExternalPageDestination

	/**
	 * Displays the number of elements in the HyperlinkExternalPageDestination.
	 */
	count(): number

	/**
	 * Returns every HyperlinkExternalPageDestination in the collection.
	 */
	everyItem(): HyperlinkExternalPageDestination[]

	/**
	 * Returns the first HyperlinkExternalPageDestination in the collection.
	 */
	firstItem(): HyperlinkExternalPageDestination

	/**
	 * Returns the HyperlinkExternalPageDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkExternalPageDestination

	/**
	 * Returns the HyperlinkExternalPageDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkExternalPageDestination

	/**
	 * Returns the HyperlinkExternalPageDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkExternalPageDestination

	/**
	 * Returns the HyperlinkExternalPageDestinations within the specified range.
	 * @param from The HyperlinkExternalPageDestination, index, or name at the beginning of the range.
	 * @param to The HyperlinkExternalPageDestination, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkExternalPageDestination | number | string, to: HyperlinkExternalPageDestination | number | string): HyperlinkExternalPageDestination[]

	/**
	 * Returns the last HyperlinkExternalPageDestination in the collection.
	 */
	lastItem(): HyperlinkExternalPageDestination

	/**
	 * Returns the middle HyperlinkExternalPageDestination in the collection.
	 */
	middleItem(): HyperlinkExternalPageDestination

	/**
	 * Returns the HyperlinkExternalPageDestination whose index follows the specified HyperlinkExternalPageDestination in the collection.
	 * @param obj The HyperlinkExternalPageDestination whose index comes before the desired HyperlinkExternalPageDestination.
	 */
	nextItem(obj: HyperlinkExternalPageDestination): HyperlinkExternalPageDestination

	/**
	 * Returns the HyperlinkExternalPageDestination with the index previous to the specified index.
	 * @param obj The index of the HyperlinkExternalPageDestination that follows the desired HyperlinkExternalPageDestination.
	 */
	previousItem(obj: HyperlinkExternalPageDestination): HyperlinkExternalPageDestination

	/**
	 * Generates a string which, if executed, will return the HyperlinkExternalPageDestination.
	 */
	toSource(): string

}

/**
 * A hyperlink destination that is a URL.
 */
declare class HyperlinkURLDestination {
	/**
	 * The URL the hyperlink points to.
	 */
	destinationURL: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the hyperlink is hidden.
	 */
	hidden: boolean

	/**
	 * The unique ID of the HyperlinkURLDestination.
	 */
	id: number

	/**
	 * The index of the HyperlinkURLDestination within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the HyperlinkURLDestination.
	 */
	name: string

	/**
	 * The parent of the HyperlinkURLDestination (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyperlinkURLDestination[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the HyperlinkURLDestination.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Jumps to the hyperlink destination.
	 */
	showDestination(): void

	/**
	 * Generates a string which, if executed, will return the HyperlinkURLDestination.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of hyperlink URL destinations.
 */
declare class HyperlinkURLDestinations {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the HyperlinkURLDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyperlinkURLDestination

	/**
	 * Creates a new hyperlink URL destination.
	 * @param destination The URL that the hyperlink points to.
	 * @param withProperties Initial values for properties of the new HyperlinkURLDestination
	 */
	add(destination: string, withProperties: object): HyperlinkURLDestination

	/**
	 * Returns any HyperlinkURLDestination in the collection.
	 */
	anyItem(): HyperlinkURLDestination

	/**
	 * Displays the number of elements in the HyperlinkURLDestination.
	 */
	count(): number

	/**
	 * Returns every HyperlinkURLDestination in the collection.
	 */
	everyItem(): HyperlinkURLDestination[]

	/**
	 * Returns the first HyperlinkURLDestination in the collection.
	 */
	firstItem(): HyperlinkURLDestination

	/**
	 * Returns the HyperlinkURLDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyperlinkURLDestination

	/**
	 * Returns the HyperlinkURLDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HyperlinkURLDestination

	/**
	 * Returns the HyperlinkURLDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyperlinkURLDestination

	/**
	 * Returns the HyperlinkURLDestinations within the specified range.
	 * @param from The HyperlinkURLDestination, index, or name at the beginning of the range.
	 * @param to The HyperlinkURLDestination, index, or name at the end of the range.
	 */
	itemByRange(from: HyperlinkURLDestination | number | string, to: HyperlinkURLDestination | number | string): HyperlinkURLDestination[]

	/**
	 * Returns the last HyperlinkURLDestination in the collection.
	 */
	lastItem(): HyperlinkURLDestination

	/**
	 * Returns the middle HyperlinkURLDestination in the collection.
	 */
	middleItem(): HyperlinkURLDestination

	/**
	 * Returns the HyperlinkURLDestination whose index follows the specified HyperlinkURLDestination in the collection.
	 * @param obj The HyperlinkURLDestination whose index comes before the desired HyperlinkURLDestination.
	 */
	nextItem(obj: HyperlinkURLDestination): HyperlinkURLDestination

	/**
	 * Returns the HyperlinkURLDestination with the index previous to the specified index.
	 * @param obj The index of the HyperlinkURLDestination that follows the desired HyperlinkURLDestination.
	 */
	previousItem(obj: HyperlinkURLDestination): HyperlinkURLDestination

	/**
	 * Generates a string which, if executed, will return the HyperlinkURLDestination.
	 */
	toSource(): string

}

/**
 * A cross reference format object.
 */
declare class CrossReferenceFormat {
	/**
	 * Character style of the cross reference format.
	 */
	appliedCharacterStyle: CharacterStyle

	/**
	 * A collection of cross reference building blocks.
	 */
	buildingBlocks: BuildingBlocks

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the CrossReferenceFormat.
	 */
	id: number

	/**
	 * The index of the CrossReferenceFormat within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the CrossReferenceFormat.
	 */
	name: string

	/**
	 * The parent of the CrossReferenceFormat (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CrossReferenceFormat[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the CrossReferenceFormat.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CrossReferenceFormat.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of cross reference formats.
 */
declare class CrossReferenceFormats {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CrossReferenceFormat with the specified index.
	 * @param index The index.
	 */
	[index: number]: CrossReferenceFormat

	/**
	 * Creates a new cross reference format.
	 * @param name The format name.
	 * @param withProperties Initial values for properties of the new CrossReferenceFormat
	 */
	add(name: string, withProperties: object): CrossReferenceFormat

	/**
	 * Returns any CrossReferenceFormat in the collection.
	 */
	anyItem(): CrossReferenceFormat

	/**
	 * Displays the number of elements in the CrossReferenceFormat.
	 */
	count(): number

	/**
	 * Returns every CrossReferenceFormat in the collection.
	 */
	everyItem(): CrossReferenceFormat[]

	/**
	 * Returns the first CrossReferenceFormat in the collection.
	 */
	firstItem(): CrossReferenceFormat

	/**
	 * Returns the CrossReferenceFormat with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CrossReferenceFormat

	/**
	 * Returns the CrossReferenceFormat with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CrossReferenceFormat

	/**
	 * Returns the CrossReferenceFormat with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CrossReferenceFormat

	/**
	 * Returns the CrossReferenceFormats within the specified range.
	 * @param from The CrossReferenceFormat, index, or name at the beginning of the range.
	 * @param to The CrossReferenceFormat, index, or name at the end of the range.
	 */
	itemByRange(from: CrossReferenceFormat | number | string, to: CrossReferenceFormat | number | string): CrossReferenceFormat[]

	/**
	 * Returns the last CrossReferenceFormat in the collection.
	 */
	lastItem(): CrossReferenceFormat

	/**
	 * Returns the middle CrossReferenceFormat in the collection.
	 */
	middleItem(): CrossReferenceFormat

	/**
	 * Returns the CrossReferenceFormat whose index follows the specified CrossReferenceFormat in the collection.
	 * @param obj The CrossReferenceFormat whose index comes before the desired CrossReferenceFormat.
	 */
	nextItem(obj: CrossReferenceFormat): CrossReferenceFormat

	/**
	 * Returns the CrossReferenceFormat with the index previous to the specified index.
	 * @param obj The index of the CrossReferenceFormat that follows the desired CrossReferenceFormat.
	 */
	previousItem(obj: CrossReferenceFormat): CrossReferenceFormat

	/**
	 * Generates a string which, if executed, will return the CrossReferenceFormat.
	 */
	toSource(): string

}

/**
 * A cross reference text source object.
 */
declare class CrossReferenceSource extends HyperlinkTextSource {
	/**
	 * Format used for cross reference source.
	 */
	appliedFormat: CrossReferenceFormat

	/**
	 * Updates cross reference text source content.
	 */
	update(): void

}

/**
 * A collection of cross reference text sources.
 */
declare class CrossReferenceSources {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CrossReferenceSource with the specified index.
	 * @param index The index.
	 */
	[index: number]: CrossReferenceSource

	/**
	 * Creates a new cross reference text source.
	 * @param source The text or insertion point to create the source.
	 * @param appliedFormat Format used for cross reference source.
	 * @param withProperties Initial values for properties of the new CrossReferenceSource
	 */
	add(source: Text, appliedFormat: CrossReferenceFormat, withProperties: object): CrossReferenceSource

	/**
	 * Returns any CrossReferenceSource in the collection.
	 */
	anyItem(): CrossReferenceSource

	/**
	 * Displays the number of elements in the CrossReferenceSource.
	 */
	count(): number

	/**
	 * Returns every CrossReferenceSource in the collection.
	 */
	everyItem(): CrossReferenceSource[]

	/**
	 * Returns the first CrossReferenceSource in the collection.
	 */
	firstItem(): CrossReferenceSource

	/**
	 * Returns the CrossReferenceSource with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CrossReferenceSource

	/**
	 * Returns the CrossReferenceSource with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CrossReferenceSource

	/**
	 * Returns the CrossReferenceSource with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CrossReferenceSource

	/**
	 * Returns the CrossReferenceSources within the specified range.
	 * @param from The CrossReferenceSource, index, or name at the beginning of the range.
	 * @param to The CrossReferenceSource, index, or name at the end of the range.
	 */
	itemByRange(from: CrossReferenceSource | number | string, to: CrossReferenceSource | number | string): CrossReferenceSource[]

	/**
	 * Returns the last CrossReferenceSource in the collection.
	 */
	lastItem(): CrossReferenceSource

	/**
	 * Returns the middle CrossReferenceSource in the collection.
	 */
	middleItem(): CrossReferenceSource

	/**
	 * Returns the CrossReferenceSource whose index follows the specified CrossReferenceSource in the collection.
	 * @param obj The CrossReferenceSource whose index comes before the desired CrossReferenceSource.
	 */
	nextItem(obj: CrossReferenceSource): CrossReferenceSource

	/**
	 * Returns the CrossReferenceSource with the index previous to the specified index.
	 * @param obj The index of the CrossReferenceSource that follows the desired CrossReferenceSource.
	 */
	previousItem(obj: CrossReferenceSource): CrossReferenceSource

	/**
	 * Generates a string which, if executed, will return the CrossReferenceSource.
	 */
	toSource(): string

}

/**
 * A cross reference building block object.
 */
declare class BuildingBlock {
	/**
	 * Character style to be applied to the building block.
	 */
	appliedCharacterStyle: CharacterStyle

	/**
	 * Delimiter character for paragraph text and full paragraph building blocks. It is ignored for other types of building blocks.
	 */
	appliedDelimiter: string

	/**
	 * Type of the building block.
	 */
	blockType: BuildingBlockTypes

	/**
	 * Building block custom text. Currently this is only useful in custom string building block. It is ignored for other types of building blocks.
	 */
	customText: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the source generated for the building block includes the delimiter. It is ignored if no delimiter is specified on the building block.
	 */
	includeDelimiter: boolean

	/**
	 * The index of the BuildingBlock within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the BuildingBlock (a CrossReferenceFormat).
	 */
	parent: CrossReferenceFormat

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): BuildingBlock[]

	/**
	 * Deletes the BuildingBlock.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the BuildingBlock.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of cross reference building blocks.
 */
declare class BuildingBlocks {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the BuildingBlock with the specified index.
	 * @param index The index.
	 */
	[index: number]: BuildingBlock

	/**
	 * Creates a new cross reference building block.
	 * @param blockType Type of the building block.
	 * @param appliedCharacterStyle Character style to be applied to the building block.
	 * @param customText Building block custom text. Currently this is only useful in custom string building block. It is ignored for other types of building blocks.
	 * @param withProperties Initial values for properties of the new BuildingBlock
	 */
	add(blockType: BuildingBlockTypes, appliedCharacterStyle: CharacterStyle, customText: string, withProperties: object): BuildingBlock

	/**
	 * Returns any BuildingBlock in the collection.
	 */
	anyItem(): BuildingBlock

	/**
	 * Displays the number of elements in the BuildingBlock.
	 */
	count(): number

	/**
	 * Returns every BuildingBlock in the collection.
	 */
	everyItem(): BuildingBlock[]

	/**
	 * Returns the first BuildingBlock in the collection.
	 */
	firstItem(): BuildingBlock

	/**
	 * Returns the BuildingBlock with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): BuildingBlock

	/**
	 * Returns the BuildingBlocks within the specified range.
	 * @param from The BuildingBlock, index, or name at the beginning of the range.
	 * @param to The BuildingBlock, index, or name at the end of the range.
	 */
	itemByRange(from: BuildingBlock | number | string, to: BuildingBlock | number | string): BuildingBlock[]

	/**
	 * Returns the last BuildingBlock in the collection.
	 */
	lastItem(): BuildingBlock

	/**
	 * Returns the middle BuildingBlock in the collection.
	 */
	middleItem(): BuildingBlock

	/**
	 * Returns the BuildingBlock whose index follows the specified BuildingBlock in the collection.
	 * @param obj The BuildingBlock whose index comes before the desired BuildingBlock.
	 */
	nextItem(obj: BuildingBlock): BuildingBlock

	/**
	 * Returns the BuildingBlock with the index previous to the specified index.
	 * @param obj The index of the BuildingBlock that follows the desired BuildingBlock.
	 */
	previousItem(obj: BuildingBlock): BuildingBlock

	/**
	 * Generates a string which, if executed, will return the BuildingBlock.
	 */
	toSource(): string

}

/**
 * Paragraph destination of a cross reference.
 */
declare class ParagraphDestination extends HyperlinkTextDestination {
}

/**
 * A collection of paragraph destinations.
 */
declare class ParagraphDestinations {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ParagraphDestination with the specified index.
	 * @param index The index.
	 */
	[index: number]: ParagraphDestination

	/**
	 * Creates a new paragraph destination.
	 * @param destination The text or insertion point inside the paragraph that the cross reference points to. The insertion point is always adjusted to the beginning of the paragraph.
	 * @param withProperties Initial values for properties of the new ParagraphDestination
	 */
	add(destination: Text, withProperties: object): ParagraphDestination

	/**
	 * Returns any ParagraphDestination in the collection.
	 */
	anyItem(): ParagraphDestination

	/**
	 * Displays the number of elements in the ParagraphDestination.
	 */
	count(): number

	/**
	 * Returns every ParagraphDestination in the collection.
	 */
	everyItem(): ParagraphDestination[]

	/**
	 * Returns the first ParagraphDestination in the collection.
	 */
	firstItem(): ParagraphDestination

	/**
	 * Returns the ParagraphDestination with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ParagraphDestination

	/**
	 * Returns the ParagraphDestination with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ParagraphDestination

	/**
	 * Returns the ParagraphDestination with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ParagraphDestination

	/**
	 * Returns the ParagraphDestinations within the specified range.
	 * @param from The ParagraphDestination, index, or name at the beginning of the range.
	 * @param to The ParagraphDestination, index, or name at the end of the range.
	 */
	itemByRange(from: ParagraphDestination | number | string, to: ParagraphDestination | number | string): ParagraphDestination[]

	/**
	 * Returns the last ParagraphDestination in the collection.
	 */
	lastItem(): ParagraphDestination

	/**
	 * Returns the middle ParagraphDestination in the collection.
	 */
	middleItem(): ParagraphDestination

	/**
	 * Returns the ParagraphDestination whose index follows the specified ParagraphDestination in the collection.
	 * @param obj The ParagraphDestination whose index comes before the desired ParagraphDestination.
	 */
	nextItem(obj: ParagraphDestination): ParagraphDestination

	/**
	 * Returns the ParagraphDestination with the index previous to the specified index.
	 * @param obj The index of the ParagraphDestination that follows the desired ParagraphDestination.
	 */
	previousItem(obj: ParagraphDestination): ParagraphDestination

	/**
	 * Generates a string which, if executed, will return the ParagraphDestination.
	 */
	toSource(): string

}

/**
 * An index.
 */
declare class Index {
	/**
	 * The topics in the specified index section.
	 */
	allTopics: Topic[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Index.
	 */
	id: number

	/**
	 * The index of the Index within its containing object.
	 */
	index: number

	/**
	 * A collection of index sections.
	 */
	indexSections: IndexSections

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Index; this is an alias to the Index's label property.
	 */
	name: string

	/**
	 * The parent of the Index (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of index topics.
	 */
	topics: Topics

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Makes the initial letter for the specified index topic or group of index topics upper case.
	 * @param capitalizationOption The entry or entries to capitalize.
	 */
	capitalize(capitalizationOption?: IndexCapitalizationOptions): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Generates a new index story.
	 * @param on The spread or page on which to place the story.
	 * @param placePoint The coordinates of the upper left corner of the story bounding box, in the format [x, y].
	 * @param destinationLayer The layer on which to place the story.
	 * @param autoflowing If true, allows the story to flow onto subsequent pages if the story does not fit on the specified page. If no subsequent pages exist in the document, creates the necessary pages.
	 * @param includeOverset If true, includes topics in overset text in the story.
	 */
	generate(on: Page | Spread | MasterSpread, placePoint: (number | string)[], destinationLayer: Layer, autoflowing?: boolean, includeOverset?: boolean): Story[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Index[]

	/**
	 * Imports a list of index topics.
	 * @param from The file from which to import the topics.
	 */
	importTopics(from: File): void

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Removes all index topics that do not have any index entries.
	 */
	removeUnusedTopics(): void

	/**
	 * Generates a string which, if executed, will return the Index.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Updates the index preview pane. Note: Does not update the index.
	 */
	update(): void

}

/**
 * A collection of indexes.
 */
declare class Indexes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Index with the specified index.
	 * @param index The index.
	 */
	[index: number]: Index

	/**
	 * Creates a new Index.
	 * @param withProperties Initial values for properties of the new Index
	 */
	add(withProperties: object): Index

	/**
	 * Returns any Index in the collection.
	 */
	anyItem(): Index

	/**
	 * Displays the number of elements in the Index.
	 */
	count(): number

	/**
	 * Returns every Index in the collection.
	 */
	everyItem(): Index[]

	/**
	 * Returns the first Index in the collection.
	 */
	firstItem(): Index

	/**
	 * Returns the Index with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Index

	/**
	 * Returns the Index with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Index

	/**
	 * Returns the Index with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Index

	/**
	 * Returns the Indexes within the specified range.
	 * @param from The Index, index, or name at the beginning of the range.
	 * @param to The Index, index, or name at the end of the range.
	 */
	itemByRange(from: Index | number | string, to: Index | number | string): Index[]

	/**
	 * Returns the last Index in the collection.
	 */
	lastItem(): Index

	/**
	 * Returns the middle Index in the collection.
	 */
	middleItem(): Index

	/**
	 * Returns the Index whose index follows the specified Index in the collection.
	 * @param obj The Index whose index comes before the desired Index.
	 */
	nextItem(obj: Index): Index

	/**
	 * Returns the Index with the index previous to the specified index.
	 * @param obj The index of the Index that follows the desired Index.
	 */
	previousItem(obj: Index): Index

	/**
	 * Generates a string which, if executed, will return the Index.
	 */
	toSource(): string

}

/**
 * Index options.
 */
declare class IndexOptions extends Preference {
	/**
	 * The character(s) inserted at the start of cross references.
	 */
	beforeCrossReferenceSeparator: string

	/**
	 * The character(s) inserted between index entries when runin-style index format is used for nested topics.
	 */
	betweenEntriesSeparator: string

	/**
	 * The character(s) inserted between separate page numbers, page numbers and page ranges, and series of page ranges.
	 */
	betweenPageNumbersSeparator: string

	/**
	 * The character style applied to cross references.
	 */
	crossReferenceStyle: CharacterStyle

	/**
	 * The character style applied to cross reference topics.
	 */
	crossReferenceTopicStyle: CharacterStyle

	/**
	 * The character(s) inserted at the end of each index entry.
	 */
	entryEndSeparator: string

	/**
	 * The character(s) inserted after each index topic.
	 */
	followingTopicSeparator: string

	/**
	 * If true, includes topics and page references from all the documents in a book.
	 */
	includeBookDocuments: boolean

	/**
	 * If true, displays headings for sections with no index topics. Note: Valid only when include section headings is true.
	 */
	includeEmptyIndexSections: boolean

	/**
	 * If true, includes topics and page references on hidden layers.
	 */
	includeHiddenEntries: boolean

	/**
	 * If true, displays the letters of the alphabet as index section headings.
	 */
	includeSectionHeadings: boolean

	/**
	 * The format for level 2 and lower index topics.
	 */
	indexFormat: IndexFormat

	/**
	 * The paragraph style applied to level 1 index topics.
	 */
	level1Style: ParagraphStyle

	/**
	 * The paragraph style applied to level 2 index topics.
	 */
	level2Style: ParagraphStyle

	/**
	 * The paragraph style applied to level 3 index topics.
	 */
	level3Style: ParagraphStyle

	/**
	 * The paragraph style applied to level 4 index topics.
	 */
	level4Style: ParagraphStyle

	/**
	 * The character style applied to page numbers in the index.
	 */
	pageNumberStyle: CharacterStyle

	/**
	 * The character(s) inserted between page numbers to indicate a page range.
	 */
	pageRangeSeparator: string

	/**
	 * If true, replaces the content of the existing index. Note: Replaces only index content; does not update the index location or other index properties that may have been changed.
	 */
	replaceExistingIndex: boolean

	/**
	 * The paragraph style applied to index section headings. Note: Valid when include section headings is true.
	 */
	sectionHeadingStyle: ParagraphStyle

	/**
	 * The title of the generated index.
	 */
	title: string

	/**
	 * The paragraph style applied to the title of the generated index.
	 */
	titleStyle: ParagraphStyle | string

}

/**
 * An index topic.
 */
declare class Topic {
	/**
	 * A collection of index cross references. (For cross references in text, use the 'cross reference source' and 'hyperlink' objects.)
	 */
	crossReferences: CrossReferences

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the Topic within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the Topic.
	 */
	name: string

	/**
	 * A collection of index page references.
	 */
	pageReferences: PageReferences

	/**
	 * The parent of the Topic (a IndexSection, Topic or Index).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The string by which the topic is sorted instead of the topic name is not used. Note: The actual topic text, rather than the sort order text, appears in the index.
	 */
	sortOrder: string

	/**
	 * A collection of index topics.
	 */
	topics: Topics

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Makes the initial letter for the specified index topic or group of index topics upper case.
	 * @param capitalizationOption The entry or entries to capitalize.
	 */
	capitalize(capitalizationOption?: IndexCapitalizationOptions): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Topic[]

	/**
	 * Deletes the Topic.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Topic.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of index topics.
 */
declare class Topics {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Topic with the specified index.
	 * @param index The index.
	 */
	[index: number]: Topic

	/**
	 * Creates a new index topic.
	 * @param name The name of the topic. Note: This is the text that appears in the index.
	 * @param sortBy The string to sort this topic by instead of the topic name. Note: The actual topic text, rather than the sort order text, appears in the index.
	 * @param withProperties Initial values for properties of the new Topic
	 */
	add(name: string, sortBy: string, withProperties: object): Topic

	/**
	 * Returns any Topic in the collection.
	 */
	anyItem(): Topic

	/**
	 * Displays the number of elements in the Topic.
	 */
	count(): number

	/**
	 * Returns every Topic in the collection.
	 */
	everyItem(): Topic[]

	/**
	 * Returns the first Topic in the collection.
	 */
	firstItem(): Topic

	/**
	 * Returns the Topic with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Topic

	/**
	 * Returns the Topic with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Topic

	/**
	 * Returns the Topics within the specified range.
	 * @param from The Topic, index, or name at the beginning of the range.
	 * @param to The Topic, index, or name at the end of the range.
	 */
	itemByRange(from: Topic | number | string, to: Topic | number | string): Topic[]

	/**
	 * Returns the last Topic in the collection.
	 */
	lastItem(): Topic

	/**
	 * Returns the middle Topic in the collection.
	 */
	middleItem(): Topic

	/**
	 * Returns the Topic whose index follows the specified Topic in the collection.
	 * @param obj The Topic whose index comes before the desired Topic.
	 */
	nextItem(obj: Topic): Topic

	/**
	 * Returns the Topic with the index previous to the specified index.
	 * @param obj The index of the Topic that follows the desired Topic.
	 */
	previousItem(obj: Topic): Topic

	/**
	 * Generates a string which, if executed, will return the Topic.
	 */
	toSource(): string

}

/**
 * A cross reference to a different index topic. (For cross references in text, use the 'cross reference source' and 'hyperlink' objects.)
 */
declare class CrossReference {
	/**
	 * The text that precedes or follows the referenced topic.
	 */
	crossReferenceType: CrossReferenceType

	/**
	 * The text used for a custom cross reference type. Note: Valid only for custom cross reference types.
	 */
	customTypeString: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the CrossReference.
	 */
	id: number

	/**
	 * The index of the CrossReference within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the CrossReference; this is an alias to the CrossReference's label property.
	 */
	name: string

	/**
	 * The parent of the CrossReference (a Topic).
	 */
	parent: Topic

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The topic to which this CrossReference points.
	 */
	referencedTopic: Topic

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CrossReference[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the CrossReference.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CrossReference.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of index cross references. (For cross references in text, use the 'cross reference source' and 'hyperlink' objects.)
 */
declare class CrossReferences {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CrossReference with the specified index.
	 * @param index The index.
	 */
	[index: number]: CrossReference

	/**
	 * Creates a new cross reference.
	 * @param referencedTopic The topic that the cross reference points to.
	 * @param crossReferenceType The cross reference type.
	 * @param customTypeString The custom string to use in the cross reference. Valid only for custom cross reference types.
	 * @param withProperties Initial values for properties of the new CrossReference
	 */
	add(referencedTopic: Topic, crossReferenceType: CrossReferenceType, customTypeString: string, withProperties: object): CrossReference

	/**
	 * Returns any CrossReference in the collection.
	 */
	anyItem(): CrossReference

	/**
	 * Displays the number of elements in the CrossReference.
	 */
	count(): number

	/**
	 * Returns every CrossReference in the collection.
	 */
	everyItem(): CrossReference[]

	/**
	 * Returns the first CrossReference in the collection.
	 */
	firstItem(): CrossReference

	/**
	 * Returns the CrossReference with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CrossReference

	/**
	 * Returns the CrossReference with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CrossReference

	/**
	 * Returns the CrossReference with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CrossReference

	/**
	 * Returns the CrossReferences within the specified range.
	 * @param from The CrossReference, index, or name at the beginning of the range.
	 * @param to The CrossReference, index, or name at the end of the range.
	 */
	itemByRange(from: CrossReference | number | string, to: CrossReference | number | string): CrossReference[]

	/**
	 * Returns the last CrossReference in the collection.
	 */
	lastItem(): CrossReference

	/**
	 * Returns the middle CrossReference in the collection.
	 */
	middleItem(): CrossReference

	/**
	 * Returns the CrossReference whose index follows the specified CrossReference in the collection.
	 * @param obj The CrossReference whose index comes before the desired CrossReference.
	 */
	nextItem(obj: CrossReference): CrossReference

	/**
	 * Returns the CrossReference with the index previous to the specified index.
	 * @param obj The index of the CrossReference that follows the desired CrossReference.
	 */
	previousItem(obj: CrossReference): CrossReference

	/**
	 * Generates a string which, if executed, will return the CrossReference.
	 */
	toSource(): string

}

/**
 * The page reference for an index topic.
 */
declare class PageReference {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the PageReference.
	 */
	id: number

	/**
	 * The index of the PageReference within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the PageReference; this is an alias to the PageReference's label property.
	 */
	name: string

	/**
	 * The character style applied to page numbers.
	 */
	pageNumberStyleOverride: CharacterStyle

	/**
	 * The paragraph style or number of paragraphs or pages that defines the last page in a page range. Note: Valid only when page reference type specifies the next use of a paragraph style or a number of paragraphs or pages. .
	 */
	pageReferenceLimit: ParagraphStyle | number

	/**
	 * Options for index page references.
	 */
	pageReferenceType: PageReferenceType

	/**
	 * The parent of the PageReference (a Topic).
	 */
	parent: Topic

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The hyperlinked text or insertion point.
	 */
	sourceText: Text

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PageReference[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the PageReference.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the PageReference.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of index page references.
 */
declare class PageReferences {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PageReference with the specified index.
	 * @param index The index.
	 */
	[index: number]: PageReference

	/**
	 * Creates a new page reference.
	 * @param source The text or insertion point to which the page reference points.
	 * @param pageReferenceType The page number for an index page reference or the last page in an index page reference page range.
	 * @param pageReferenceLimit The paragraph style or number of paragraphs or pages that defines the last page in a page range. Valid only when page reference type specifies the next use of a paragraph style or a number of paragraphs or pages. .
	 * @param pageNumberStyleOverride The style override for the page number.
	 * @param withProperties Initial values for properties of the new PageReference
	 */
	add(source: Text, pageReferenceType?: PageReferenceType, pageReferenceLimit?: ParagraphStyle | number, pageNumberStyleOverride?: CharacterStyle, withProperties?: object): PageReference

	/**
	 * Returns any PageReference in the collection.
	 */
	anyItem(): PageReference

	/**
	 * Displays the number of elements in the PageReference.
	 */
	count(): number

	/**
	 * Returns every PageReference in the collection.
	 */
	everyItem(): PageReference[]

	/**
	 * Returns the first PageReference in the collection.
	 */
	firstItem(): PageReference

	/**
	 * Returns the PageReference with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PageReference

	/**
	 * Returns the PageReference with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PageReference

	/**
	 * Returns the PageReference with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PageReference

	/**
	 * Returns the PageReferences within the specified range.
	 * @param from The PageReference, index, or name at the beginning of the range.
	 * @param to The PageReference, index, or name at the end of the range.
	 */
	itemByRange(from: PageReference | number | string, to: PageReference | number | string): PageReference[]

	/**
	 * Returns the last PageReference in the collection.
	 */
	lastItem(): PageReference

	/**
	 * Returns the middle PageReference in the collection.
	 */
	middleItem(): PageReference

	/**
	 * Returns the PageReference whose index follows the specified PageReference in the collection.
	 * @param obj The PageReference whose index comes before the desired PageReference.
	 */
	nextItem(obj: PageReference): PageReference

	/**
	 * Returns the PageReference with the index previous to the specified index.
	 * @param obj The index of the PageReference that follows the desired PageReference.
	 */
	previousItem(obj: PageReference): PageReference

	/**
	 * Generates a string which, if executed, will return the PageReference.
	 */
	toSource(): string

}

/**
 * A section within an index.
 */
declare class IndexSection {
	/**
	 * The topics in the specified index section.
	 */
	allTopics: Topic[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the IndexSection.
	 */
	id: number

	/**
	 * The index of the IndexSection within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the IndexSection.
	 */
	name: string

	/**
	 * The parent of the IndexSection (a Index).
	 */
	parent: Index

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of index topics.
	 */
	topics: Topics

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): IndexSection[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the IndexSection.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of index sections.
 */
declare class IndexSections {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the IndexSection with the specified index.
	 * @param index The index.
	 */
	[index: number]: IndexSection

	/**
	 * Returns any IndexSection in the collection.
	 */
	anyItem(): IndexSection

	/**
	 * Displays the number of elements in the IndexSection.
	 */
	count(): number

	/**
	 * Returns every IndexSection in the collection.
	 */
	everyItem(): IndexSection[]

	/**
	 * Returns the first IndexSection in the collection.
	 */
	firstItem(): IndexSection

	/**
	 * Returns the IndexSection with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IndexSection

	/**
	 * Returns the IndexSection with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): IndexSection

	/**
	 * Returns the IndexSection with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): IndexSection

	/**
	 * Returns the IndexSections within the specified range.
	 * @param from The IndexSection, index, or name at the beginning of the range.
	 * @param to The IndexSection, index, or name at the end of the range.
	 */
	itemByRange(from: IndexSection | number | string, to: IndexSection | number | string): IndexSection[]

	/**
	 * Returns the last IndexSection in the collection.
	 */
	lastItem(): IndexSection

	/**
	 * Returns the middle IndexSection in the collection.
	 */
	middleItem(): IndexSection

	/**
	 * Returns the IndexSection whose index follows the specified IndexSection in the collection.
	 * @param obj The IndexSection whose index comes before the desired IndexSection.
	 */
	nextItem(obj: IndexSection): IndexSection

	/**
	 * Returns the IndexSection with the index previous to the specified index.
	 * @param obj The index of the IndexSection that follows the desired IndexSection.
	 */
	previousItem(obj: IndexSection): IndexSection

	/**
	 * Generates a string which, if executed, will return the IndexSection.
	 */
	toSource(): string

}

/**
 * A form field.
 */
declare class FormField extends PageItem {
	/**
	 * The index of the active state in the object's states collection.
	 */
	activeStateIndex: number

	/**
	 * Anchored object settings.
	 */
	anchoredObjectSettings: AnchoredObjectSetting

	/**
	 * The description of the FormField.
	 */
	description: string

}

/**
 * A collection of form fields.
 */
declare class FormFields {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the FormField with the specified index.
	 * @param index The index.
	 */
	[index: number]: FormField

	/**
	 * Creates a new FormField
	 * @param layer The layer on which to create the FormField.
	 * @param at The location at which to insert the FormField relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new FormField
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): FormField

	/**
	 * Returns any FormField in the collection.
	 */
	anyItem(): FormField

	/**
	 * Displays the number of elements in the FormField.
	 */
	count(): number

	/**
	 * Returns every FormField in the collection.
	 */
	everyItem(): FormField[]

	/**
	 * Returns the first FormField in the collection.
	 */
	firstItem(): FormField

	/**
	 * Returns the FormField with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): FormField

	/**
	 * Returns the FormField with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): FormField

	/**
	 * Returns the FormField with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): FormField

	/**
	 * Returns the FormFields within the specified range.
	 * @param from The FormField, index, or name at the beginning of the range.
	 * @param to The FormField, index, or name at the end of the range.
	 */
	itemByRange(from: FormField | number | string, to: FormField | number | string): FormField[]

	/**
	 * Returns the last FormField in the collection.
	 */
	lastItem(): FormField

	/**
	 * Returns the middle FormField in the collection.
	 */
	middleItem(): FormField

	/**
	 * Returns the FormField whose index follows the specified FormField in the collection.
	 * @param obj The FormField whose index comes before the desired FormField.
	 */
	nextItem(obj: FormField): FormField

	/**
	 * Returns the FormField with the index previous to the specified index.
	 * @param obj The index of the FormField that follows the desired FormField.
	 */
	previousItem(obj: FormField): FormField

	/**
	 * Generates a string which, if executed, will return the FormField.
	 */
	toSource(): string

}

/**
 * A button.
 */
declare class Button extends FormField {
	/**
	 * A collection of animation behaviors.
	 */
	animationBehaviors: AnimationBehaviors

	/**
	 * A collection of behavior objects.
	 */
	behaviors: Behaviors

	/**
	 * A collection of clear form behavior objects.
	 */
	clearFormBehaviors: ClearFormBehaviors

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of goto anchor behavior objects.
	 */
	gotoAnchorBehaviors: GotoAnchorBehaviors

	/**
	 * A collection of goto first page behavior objects.
	 */
	gotoFirstPageBehaviors: GotoFirstPageBehaviors

	/**
	 * A collection of goto last page behavior objects.
	 */
	gotoLastPageBehaviors: GotoLastPageBehaviors

	/**
	 * A collection of goto next page behavior objects.
	 */
	gotoNextPageBehaviors: GotoNextPageBehaviors

	/**
	 * A collection of goto next state behaviors.
	 */
	gotoNextStateBehaviors: GotoNextStateBehaviors

	/**
	 * A collection of goto next view behavior objects.
	 */
	gotoNextViewBehaviors: GotoNextViewBehaviors

	/**
	 * A collection of go to page behavior objects.
	 */
	gotoPageBehaviors: GotoPageBehaviors

	/**
	 * A collection of goto previous page behavior objects.
	 */
	gotoPreviousPageBehaviors: GotoPreviousPageBehaviors

	/**
	 * A collection of goto previous state behaviors.
	 */
	gotoPreviousStateBehaviors: GotoPreviousStateBehaviors

	/**
	 * A collection of goto previous view behavior objects.
	 */
	gotoPreviousViewBehaviors: GotoPreviousViewBehaviors

	/**
	 * A collection of goto state behaviors.
	 */
	gotoStateBehaviors: GotoStateBehaviors

	/**
	 * A collection of goto URL behavior objects.
	 */
	gotoURLBehaviors: GotoURLBehaviors

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * A collection of movie behavior objects.
	 */
	movieBehaviors: MovieBehaviors

	/**
	 * A collection of open file behavior objects.
	 */
	openFileBehaviors: OpenFileBehaviors

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of paths.
	 */
	paths: Paths

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of print form behavior objects.
	 */
	printFormBehaviors: PrintFormBehaviors

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	showHideFieldsBehaviors: ShowHideFieldsBehaviors

	/**
	 * A collection of sound behavior objects.
	 */
	soundBehaviors: SoundBehaviors

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of states.
	 */
	states: States

	/**
	 * A collection of submit form behavior objects.
	 */
	submitFormBehaviors: SubmitFormBehaviors

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of view zoom behavior objects.
	 */
	viewZoomBehaviors: ViewZoomBehaviors

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Brings the Button forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the Button to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void

	/**
	 * Sends the Button back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the Button to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * A collection of buttons.
 */
declare class Buttons {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Button with the specified index.
	 * @param index The index.
	 */
	[index: number]: Button

	/**
	 * Creates a new Button
	 * @param layer The layer on which to create the Button.
	 * @param at The location at which to insert the Button relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Button
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Button

	/**
	 * Returns any Button in the collection.
	 */
	anyItem(): Button

	/**
	 * Displays the number of elements in the Button.
	 */
	count(): number

	/**
	 * Returns every Button in the collection.
	 */
	everyItem(): Button[]

	/**
	 * Returns the first Button in the collection.
	 */
	firstItem(): Button

	/**
	 * Returns the Button with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Button

	/**
	 * Returns the Button with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Button

	/**
	 * Returns the Button with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Button

	/**
	 * Returns the Buttons within the specified range.
	 * @param from The Button, index, or name at the beginning of the range.
	 * @param to The Button, index, or name at the end of the range.
	 */
	itemByRange(from: Button | number | string, to: Button | number | string): Button[]

	/**
	 * Returns the last Button in the collection.
	 */
	lastItem(): Button

	/**
	 * Returns the middle Button in the collection.
	 */
	middleItem(): Button

	/**
	 * Returns the Button whose index follows the specified Button in the collection.
	 * @param obj The Button whose index comes before the desired Button.
	 */
	nextItem(obj: Button): Button

	/**
	 * Returns the Button with the index previous to the specified index.
	 * @param obj The index of the Button that follows the desired Button.
	 */
	previousItem(obj: Button): Button

	/**
	 * Generates a string which, if executed, will return the Button.
	 */
	toSource(): string

}

/**
 * A state (states define the display of the field in an exported PDF or SWF).
 */
declare class State {
	/**
	 * If true, the state is active in the exported PDF.
	 */
	active: boolean

	/**
	 * If true, the state is enabled in PDF documents.
	 */
	enabled: boolean

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * The unique ID of the State.
	 */
	id: number

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * The index of the State within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the State.
	 */
	name: string

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * The parent of the State (a Button, MultiStateObject, CheckBox or RadioButton).
	 */
	parent: any

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * For a button, the type of user action that dictates the object's appearance. For a MultiStateObject, which has no user actions associated with states, this property is a numeric value uniquely identifying the state.
	 */
	statetype: StateTypes | number

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Adds page items to this state.
	 * @param pageitems One or more page items to add to this state.
	 */
	addItemsToState(pageitems: PageItem[]): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): State[]

	/**
	 * Moves the state to a new position in its parent collection.
	 * @param newPosition the index to move the state to in its parent collection
	 */
	move(newPosition: number): void

	/**
	 * Releases this state's appearance as a page item, removing the state from its parent object.
	 */
	releaseAsObject(): void

	/**
	 * Deletes the State.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the State.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of states.
 */
declare class States {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the State with the specified index.
	 * @param index The index.
	 */
	[index: number]: State

	/**
	 * Creates a new State.
	 * @param withProperties Initial values for properties of the new State
	 */
	add(withProperties: object): State

	/**
	 * Returns any State in the collection.
	 */
	anyItem(): State

	/**
	 * Displays the number of elements in the State.
	 */
	count(): number

	/**
	 * Returns every State in the collection.
	 */
	everyItem(): State[]

	/**
	 * Returns the first State in the collection.
	 */
	firstItem(): State

	/**
	 * Returns the State with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): State

	/**
	 * Returns the State with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): State

	/**
	 * Returns the State with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): State

	/**
	 * Returns the States within the specified range.
	 * @param from The State, index, or name at the beginning of the range.
	 * @param to The State, index, or name at the end of the range.
	 */
	itemByRange(from: State | number | string, to: State | number | string): State[]

	/**
	 * Returns the last State in the collection.
	 */
	lastItem(): State

	/**
	 * Returns the middle State in the collection.
	 */
	middleItem(): State

	/**
	 * Returns the State whose index follows the specified State in the collection.
	 * @param obj The State whose index comes before the desired State.
	 */
	nextItem(obj: State): State

	/**
	 * Returns the State with the index previous to the specified index.
	 * @param obj The index of the State that follows the desired State.
	 */
	previousItem(obj: State): State

	/**
	 * Generates a string which, if executed, will return the State.
	 */
	toSource(): string

}

/**
 * A multi-state object.
 */
declare class MultiStateObject extends FormField {
	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * Determines if this object is initially hidden when displayed in an exported SWF file.
	 */
	initiallyHidden: boolean

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of paths.
	 */
	paths: Paths

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of states.
	 */
	states: States

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Adds items to a specific appearance state of this object.
	 * @param pageitems One or more page items to add as a state.
	 */
	addItemsAsState(pageitems: PageItem[]): void

	/**
	 * Brings the MultiStateObject forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the MultiStateObject to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Releases all the states associated with this object and then destroys the parent object.
	 */
	releaseAsObjects(): void

	/**
	 * Sends the MultiStateObject back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the MultiStateObject to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * A collection of multi-state objects.
 */
declare class MultiStateObjects {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MultiStateObject with the specified index.
	 * @param index The index.
	 */
	[index: number]: MultiStateObject

	/**
	 * Creates a new MultiStateObject
	 * @param layer The layer on which to create the MultiStateObject.
	 * @param at The location at which to insert the MultiStateObject relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new MultiStateObject
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): MultiStateObject

	/**
	 * Returns any MultiStateObject in the collection.
	 */
	anyItem(): MultiStateObject

	/**
	 * Displays the number of elements in the MultiStateObject.
	 */
	count(): number

	/**
	 * Returns every MultiStateObject in the collection.
	 */
	everyItem(): MultiStateObject[]

	/**
	 * Returns the first MultiStateObject in the collection.
	 */
	firstItem(): MultiStateObject

	/**
	 * Returns the MultiStateObject with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MultiStateObject

	/**
	 * Returns the MultiStateObject with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MultiStateObject

	/**
	 * Returns the MultiStateObject with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MultiStateObject

	/**
	 * Returns the MultiStateObjects within the specified range.
	 * @param from The MultiStateObject, index, or name at the beginning of the range.
	 * @param to The MultiStateObject, index, or name at the end of the range.
	 */
	itemByRange(from: MultiStateObject | number | string, to: MultiStateObject | number | string): MultiStateObject[]

	/**
	 * Returns the last MultiStateObject in the collection.
	 */
	lastItem(): MultiStateObject

	/**
	 * Returns the middle MultiStateObject in the collection.
	 */
	middleItem(): MultiStateObject

	/**
	 * Returns the MultiStateObject whose index follows the specified MultiStateObject in the collection.
	 * @param obj The MultiStateObject whose index comes before the desired MultiStateObject.
	 */
	nextItem(obj: MultiStateObject): MultiStateObject

	/**
	 * Returns the MultiStateObject with the index previous to the specified index.
	 * @param obj The index of the MultiStateObject that follows the desired MultiStateObject.
	 */
	previousItem(obj: MultiStateObject): MultiStateObject

	/**
	 * Generates a string which, if executed, will return the MultiStateObject.
	 */
	toSource(): string

}

/**
 * A checkbox.
 */
declare class CheckBox extends FormField {
	/**
	 * A collection of behavior objects.
	 */
	behaviors: Behaviors

	/**
	 * If true, the check box/radio button is selected by default in the exported PDF.
	 */
	checkedByDefault: boolean

	/**
	 * A collection of clear form behavior objects.
	 */
	clearFormBehaviors: ClearFormBehaviors

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * Export value for the check box/radio button in the exported PDF.
	 */
	exportValue: string

	/**
	 * A collection of goto anchor behavior objects.
	 */
	gotoAnchorBehaviors: GotoAnchorBehaviors

	/**
	 * A collection of goto first page behavior objects.
	 */
	gotoFirstPageBehaviors: GotoFirstPageBehaviors

	/**
	 * A collection of goto last page behavior objects.
	 */
	gotoLastPageBehaviors: GotoLastPageBehaviors

	/**
	 * A collection of goto next page behavior objects.
	 */
	gotoNextPageBehaviors: GotoNextPageBehaviors

	/**
	 * A collection of goto next view behavior objects.
	 */
	gotoNextViewBehaviors: GotoNextViewBehaviors

	/**
	 * A collection of goto previous page behavior objects.
	 */
	gotoPreviousPageBehaviors: GotoPreviousPageBehaviors

	/**
	 * A collection of goto previous view behavior objects.
	 */
	gotoPreviousViewBehaviors: GotoPreviousViewBehaviors

	/**
	 * A collection of goto URL behavior objects.
	 */
	gotoURLBehaviors: GotoURLBehaviors

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * A collection of movie behavior objects.
	 */
	movieBehaviors: MovieBehaviors

	/**
	 * A collection of open file behavior objects.
	 */
	openFileBehaviors: OpenFileBehaviors

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of print form behavior objects.
	 */
	printFormBehaviors: PrintFormBehaviors

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	showHideFieldsBehaviors: ShowHideFieldsBehaviors

	/**
	 * A collection of sound behavior objects.
	 */
	soundBehaviors: SoundBehaviors

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of states.
	 */
	states: States

	/**
	 * A collection of submit form behavior objects.
	 */
	submitFormBehaviors: SubmitFormBehaviors

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of view zoom behavior objects.
	 */
	viewZoomBehaviors: ViewZoomBehaviors

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Brings the CheckBox forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the CheckBox to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void

	/**
	 * Sends the CheckBox back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the CheckBox to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * A collection of checkboxes.
 */
declare class CheckBoxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CheckBox with the specified index.
	 * @param index The index.
	 */
	[index: number]: CheckBox

	/**
	 * Creates a new CheckBox
	 * @param layer The layer on which to create the CheckBox.
	 * @param at The location at which to insert the CheckBox relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new CheckBox
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): CheckBox

	/**
	 * Returns any CheckBox in the collection.
	 */
	anyItem(): CheckBox

	/**
	 * Displays the number of elements in the CheckBox.
	 */
	count(): number

	/**
	 * Returns every CheckBox in the collection.
	 */
	everyItem(): CheckBox[]

	/**
	 * Returns the first CheckBox in the collection.
	 */
	firstItem(): CheckBox

	/**
	 * Returns the CheckBox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CheckBox

	/**
	 * Returns the CheckBox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CheckBox

	/**
	 * Returns the CheckBox with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CheckBox

	/**
	 * Returns the CheckBoxes within the specified range.
	 * @param from The CheckBox, index, or name at the beginning of the range.
	 * @param to The CheckBox, index, or name at the end of the range.
	 */
	itemByRange(from: CheckBox | number | string, to: CheckBox | number | string): CheckBox[]

	/**
	 * Returns the last CheckBox in the collection.
	 */
	lastItem(): CheckBox

	/**
	 * Returns the middle CheckBox in the collection.
	 */
	middleItem(): CheckBox

	/**
	 * Returns the CheckBox whose index follows the specified CheckBox in the collection.
	 * @param obj The CheckBox whose index comes before the desired CheckBox.
	 */
	nextItem(obj: CheckBox): CheckBox

	/**
	 * Returns the CheckBox with the index previous to the specified index.
	 * @param obj The index of the CheckBox that follows the desired CheckBox.
	 */
	previousItem(obj: CheckBox): CheckBox

	/**
	 * Generates a string which, if executed, will return the CheckBox.
	 */
	toSource(): string

}

/**
 * A combobox.
 */
declare class ComboBox extends FormField {
	/**
	 * The font family for the form field in the exported PDF.
	 */
	appliedFont: string

	/**
	 * A collection of behavior objects.
	 */
	behaviors: Behaviors

	/**
	 * The list of choices for combo and list boxes in the exported PDF.
	 */
	choiceList: string[]

	/**
	 * A collection of clear form behavior objects.
	 */
	clearFormBehaviors: ClearFormBehaviors

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * The font size for the form field in the exported PDF.
	 */
	fontSize: number

	/**
	 * The font style for the form field in the exported PDF.
	 */
	fontStyle: string

	/**
	 * A collection of goto anchor behavior objects.
	 */
	gotoAnchorBehaviors: GotoAnchorBehaviors

	/**
	 * A collection of goto first page behavior objects.
	 */
	gotoFirstPageBehaviors: GotoFirstPageBehaviors

	/**
	 * A collection of goto last page behavior objects.
	 */
	gotoLastPageBehaviors: GotoLastPageBehaviors

	/**
	 * A collection of goto next page behavior objects.
	 */
	gotoNextPageBehaviors: GotoNextPageBehaviors

	/**
	 * A collection of goto next view behavior objects.
	 */
	gotoNextViewBehaviors: GotoNextViewBehaviors

	/**
	 * A collection of goto previous page behavior objects.
	 */
	gotoPreviousPageBehaviors: GotoPreviousPageBehaviors

	/**
	 * A collection of goto previous view behavior objects.
	 */
	gotoPreviousViewBehaviors: GotoPreviousViewBehaviors

	/**
	 * A collection of goto URL behavior objects.
	 */
	gotoURLBehaviors: GotoURLBehaviors

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * A collection of movie behavior objects.
	 */
	movieBehaviors: MovieBehaviors

	/**
	 * A collection of open file behavior objects.
	 */
	openFileBehaviors: OpenFileBehaviors

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of print form behavior objects.
	 */
	printFormBehaviors: PrintFormBehaviors

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean

	/**
	 * If true, the form field has right to left text enabled in the exported PDF.
	 */
	rightToLeftField: boolean

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	showHideFieldsBehaviors: ShowHideFieldsBehaviors

	/**
	 * If true, the choices would be sorted in the exported PDF.
	 */
	sortChoices: boolean

	/**
	 * A collection of sound behavior objects.
	 */
	soundBehaviors: SoundBehaviors

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of submit form behavior objects.
	 */
	submitFormBehaviors: SubmitFormBehaviors

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of view zoom behavior objects.
	 */
	viewZoomBehaviors: ViewZoomBehaviors

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Brings the ComboBox forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the ComboBox to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void

	/**
	 * Sends the ComboBox back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the ComboBox to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * A collection of comboboxes.
 */
declare class ComboBoxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ComboBox with the specified index.
	 * @param index The index.
	 */
	[index: number]: ComboBox

	/**
	 * Creates a new ComboBox
	 * @param layer The layer on which to create the ComboBox.
	 * @param at The location at which to insert the ComboBox relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new ComboBox
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): ComboBox

	/**
	 * Returns any ComboBox in the collection.
	 */
	anyItem(): ComboBox

	/**
	 * Displays the number of elements in the ComboBox.
	 */
	count(): number

	/**
	 * Returns every ComboBox in the collection.
	 */
	everyItem(): ComboBox[]

	/**
	 * Returns the first ComboBox in the collection.
	 */
	firstItem(): ComboBox

	/**
	 * Returns the ComboBox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ComboBox

	/**
	 * Returns the ComboBox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ComboBox

	/**
	 * Returns the ComboBox with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ComboBox

	/**
	 * Returns the ComboBoxes within the specified range.
	 * @param from The ComboBox, index, or name at the beginning of the range.
	 * @param to The ComboBox, index, or name at the end of the range.
	 */
	itemByRange(from: ComboBox | number | string, to: ComboBox | number | string): ComboBox[]

	/**
	 * Returns the last ComboBox in the collection.
	 */
	lastItem(): ComboBox

	/**
	 * Returns the middle ComboBox in the collection.
	 */
	middleItem(): ComboBox

	/**
	 * Returns the ComboBox whose index follows the specified ComboBox in the collection.
	 * @param obj The ComboBox whose index comes before the desired ComboBox.
	 */
	nextItem(obj: ComboBox): ComboBox

	/**
	 * Returns the ComboBox with the index previous to the specified index.
	 * @param obj The index of the ComboBox that follows the desired ComboBox.
	 */
	previousItem(obj: ComboBox): ComboBox

	/**
	 * Generates a string which, if executed, will return the ComboBox.
	 */
	toSource(): string

}

/**
 * A listbox.
 */
declare class ListBox extends FormField {
	/**
	 * The font family for the form field in the exported PDF.
	 */
	appliedFont: string

	/**
	 * A collection of behavior objects.
	 */
	behaviors: Behaviors

	/**
	 * The list of choices for combo and list boxes in the exported PDF.
	 */
	choiceList: string[]

	/**
	 * A collection of clear form behavior objects.
	 */
	clearFormBehaviors: ClearFormBehaviors

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * The font size for the form field in the exported PDF.
	 */
	fontSize: number

	/**
	 * The font style for the form field in the exported PDF.
	 */
	fontStyle: string

	/**
	 * A collection of goto anchor behavior objects.
	 */
	gotoAnchorBehaviors: GotoAnchorBehaviors

	/**
	 * A collection of goto first page behavior objects.
	 */
	gotoFirstPageBehaviors: GotoFirstPageBehaviors

	/**
	 * A collection of goto last page behavior objects.
	 */
	gotoLastPageBehaviors: GotoLastPageBehaviors

	/**
	 * A collection of goto next page behavior objects.
	 */
	gotoNextPageBehaviors: GotoNextPageBehaviors

	/**
	 * A collection of goto next view behavior objects.
	 */
	gotoNextViewBehaviors: GotoNextViewBehaviors

	/**
	 * A collection of goto previous page behavior objects.
	 */
	gotoPreviousPageBehaviors: GotoPreviousPageBehaviors

	/**
	 * A collection of goto previous view behavior objects.
	 */
	gotoPreviousViewBehaviors: GotoPreviousViewBehaviors

	/**
	 * A collection of goto URL behavior objects.
	 */
	gotoURLBehaviors: GotoURLBehaviors

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * A collection of movie behavior objects.
	 */
	movieBehaviors: MovieBehaviors

	/**
	 * If true, the list box can have multiple items selected simultaneously in the exported PDF.
	 */
	multipleSelection: boolean

	/**
	 * A collection of open file behavior objects.
	 */
	openFileBehaviors: OpenFileBehaviors

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of print form behavior objects.
	 */
	printFormBehaviors: PrintFormBehaviors

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean

	/**
	 * If true, the form field has right to left text enabled in the exported PDF.
	 */
	rightToLeftField: boolean

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	showHideFieldsBehaviors: ShowHideFieldsBehaviors

	/**
	 * If true, the choices would be sorted in the exported PDF.
	 */
	sortChoices: boolean

	/**
	 * A collection of sound behavior objects.
	 */
	soundBehaviors: SoundBehaviors

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of submit form behavior objects.
	 */
	submitFormBehaviors: SubmitFormBehaviors

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of view zoom behavior objects.
	 */
	viewZoomBehaviors: ViewZoomBehaviors

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Brings the ListBox forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the ListBox to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void

	/**
	 * Sends the ListBox back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the ListBox to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * A collection of listboxes.
 */
declare class ListBoxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ListBox with the specified index.
	 * @param index The index.
	 */
	[index: number]: ListBox

	/**
	 * Creates a new ListBox
	 * @param layer The layer on which to create the ListBox.
	 * @param at The location at which to insert the ListBox relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new ListBox
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): ListBox

	/**
	 * Returns any ListBox in the collection.
	 */
	anyItem(): ListBox

	/**
	 * Displays the number of elements in the ListBox.
	 */
	count(): number

	/**
	 * Returns every ListBox in the collection.
	 */
	everyItem(): ListBox[]

	/**
	 * Returns the first ListBox in the collection.
	 */
	firstItem(): ListBox

	/**
	 * Returns the ListBox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ListBox

	/**
	 * Returns the ListBox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ListBox

	/**
	 * Returns the ListBox with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ListBox

	/**
	 * Returns the ListBoxes within the specified range.
	 * @param from The ListBox, index, or name at the beginning of the range.
	 * @param to The ListBox, index, or name at the end of the range.
	 */
	itemByRange(from: ListBox | number | string, to: ListBox | number | string): ListBox[]

	/**
	 * Returns the last ListBox in the collection.
	 */
	lastItem(): ListBox

	/**
	 * Returns the middle ListBox in the collection.
	 */
	middleItem(): ListBox

	/**
	 * Returns the ListBox whose index follows the specified ListBox in the collection.
	 * @param obj The ListBox whose index comes before the desired ListBox.
	 */
	nextItem(obj: ListBox): ListBox

	/**
	 * Returns the ListBox with the index previous to the specified index.
	 * @param obj The index of the ListBox that follows the desired ListBox.
	 */
	previousItem(obj: ListBox): ListBox

	/**
	 * Generates a string which, if executed, will return the ListBox.
	 */
	toSource(): string

}

/**
 * A radio button.
 */
declare class RadioButton extends FormField {
	/**
	 * A collection of behavior objects.
	 */
	behaviors: Behaviors

	/**
	 * If true, the check box/radio button is selected by default in the exported PDF.
	 */
	checkedByDefault: boolean

	/**
	 * A collection of clear form behavior objects.
	 */
	clearFormBehaviors: ClearFormBehaviors

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * Export value for the check box/radio button in the exported PDF.
	 */
	exportValue: string

	/**
	 * A collection of goto anchor behavior objects.
	 */
	gotoAnchorBehaviors: GotoAnchorBehaviors

	/**
	 * A collection of goto first page behavior objects.
	 */
	gotoFirstPageBehaviors: GotoFirstPageBehaviors

	/**
	 * A collection of goto last page behavior objects.
	 */
	gotoLastPageBehaviors: GotoLastPageBehaviors

	/**
	 * A collection of goto next page behavior objects.
	 */
	gotoNextPageBehaviors: GotoNextPageBehaviors

	/**
	 * A collection of goto next view behavior objects.
	 */
	gotoNextViewBehaviors: GotoNextViewBehaviors

	/**
	 * A collection of goto previous page behavior objects.
	 */
	gotoPreviousPageBehaviors: GotoPreviousPageBehaviors

	/**
	 * A collection of goto previous view behavior objects.
	 */
	gotoPreviousViewBehaviors: GotoPreviousViewBehaviors

	/**
	 * A collection of goto URL behavior objects.
	 */
	gotoURLBehaviors: GotoURLBehaviors

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * A collection of movie behavior objects.
	 */
	movieBehaviors: MovieBehaviors

	/**
	 * A collection of open file behavior objects.
	 */
	openFileBehaviors: OpenFileBehaviors

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of print form behavior objects.
	 */
	printFormBehaviors: PrintFormBehaviors

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	showHideFieldsBehaviors: ShowHideFieldsBehaviors

	/**
	 * A collection of sound behavior objects.
	 */
	soundBehaviors: SoundBehaviors

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of states.
	 */
	states: States

	/**
	 * A collection of submit form behavior objects.
	 */
	submitFormBehaviors: SubmitFormBehaviors

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of view zoom behavior objects.
	 */
	viewZoomBehaviors: ViewZoomBehaviors

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Brings the RadioButton forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the RadioButton to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void

	/**
	 * Sends the RadioButton back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the RadioButton to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * A collection of radio buttons.
 */
declare class RadioButtons {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the RadioButton with the specified index.
	 * @param index The index.
	 */
	[index: number]: RadioButton

	/**
	 * Creates a new RadioButton
	 * @param layer The layer on which to create the RadioButton.
	 * @param at The location at which to insert the RadioButton relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new RadioButton
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): RadioButton

	/**
	 * Returns any RadioButton in the collection.
	 */
	anyItem(): RadioButton

	/**
	 * Displays the number of elements in the RadioButton.
	 */
	count(): number

	/**
	 * Returns every RadioButton in the collection.
	 */
	everyItem(): RadioButton[]

	/**
	 * Returns the first RadioButton in the collection.
	 */
	firstItem(): RadioButton

	/**
	 * Returns the RadioButton with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RadioButton

	/**
	 * Returns the RadioButton with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RadioButton

	/**
	 * Returns the RadioButton with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): RadioButton

	/**
	 * Returns the RadioButtons within the specified range.
	 * @param from The RadioButton, index, or name at the beginning of the range.
	 * @param to The RadioButton, index, or name at the end of the range.
	 */
	itemByRange(from: RadioButton | number | string, to: RadioButton | number | string): RadioButton[]

	/**
	 * Returns the last RadioButton in the collection.
	 */
	lastItem(): RadioButton

	/**
	 * Returns the middle RadioButton in the collection.
	 */
	middleItem(): RadioButton

	/**
	 * Returns the RadioButton whose index follows the specified RadioButton in the collection.
	 * @param obj The RadioButton whose index comes before the desired RadioButton.
	 */
	nextItem(obj: RadioButton): RadioButton

	/**
	 * Returns the RadioButton with the index previous to the specified index.
	 * @param obj The index of the RadioButton that follows the desired RadioButton.
	 */
	previousItem(obj: RadioButton): RadioButton

	/**
	 * Generates a string which, if executed, will return the RadioButton.
	 */
	toSource(): string

}

/**
 * A text box.
 */
declare class TextBox extends FormField {
	/**
	 * The font family for the form field in the exported PDF.
	 */
	appliedFont: string

	/**
	 * A collection of behavior objects.
	 */
	behaviors: Behaviors

	/**
	 * A collection of clear form behavior objects.
	 */
	clearFormBehaviors: ClearFormBehaviors

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * The font size for the form field in the exported PDF.
	 */
	fontSize: number

	/**
	 * The font style for the form field in the exported PDF.
	 */
	fontStyle: string

	/**
	 * A collection of goto anchor behavior objects.
	 */
	gotoAnchorBehaviors: GotoAnchorBehaviors

	/**
	 * A collection of goto first page behavior objects.
	 */
	gotoFirstPageBehaviors: GotoFirstPageBehaviors

	/**
	 * A collection of goto last page behavior objects.
	 */
	gotoLastPageBehaviors: GotoLastPageBehaviors

	/**
	 * A collection of goto next page behavior objects.
	 */
	gotoNextPageBehaviors: GotoNextPageBehaviors

	/**
	 * A collection of goto next view behavior objects.
	 */
	gotoNextViewBehaviors: GotoNextViewBehaviors

	/**
	 * A collection of goto previous page behavior objects.
	 */
	gotoPreviousPageBehaviors: GotoPreviousPageBehaviors

	/**
	 * A collection of goto previous view behavior objects.
	 */
	gotoPreviousViewBehaviors: GotoPreviousViewBehaviors

	/**
	 * A collection of goto URL behavior objects.
	 */
	gotoURLBehaviors: GotoURLBehaviors

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * A collection of movie behavior objects.
	 */
	movieBehaviors: MovieBehaviors

	/**
	 * If true, the text field is multiline in the exported PDF.
	 */
	multiline: boolean

	/**
	 * A collection of open file behavior objects.
	 */
	openFileBehaviors: OpenFileBehaviors

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * If true, the text field is a password field in the exported PDF.
	 */
	password: boolean

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of print form behavior objects.
	 */
	printFormBehaviors: PrintFormBehaviors

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean

	/**
	 * If true, the form field has right to left text enabled in the exported PDF.
	 */
	rightToLeftField: boolean

	/**
	 * If true, the text field is scrollable in the exported PDF.
	 */
	scrollable: boolean

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	showHideFieldsBehaviors: ShowHideFieldsBehaviors

	/**
	 * A collection of sound behavior objects.
	 */
	soundBehaviors: SoundBehaviors

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of submit form behavior objects.
	 */
	submitFormBehaviors: SubmitFormBehaviors

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of view zoom behavior objects.
	 */
	viewZoomBehaviors: ViewZoomBehaviors

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Brings the TextBox forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the TextBox to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void

	/**
	 * Sends the TextBox back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the TextBox to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * A collection of text boxes.
 */
declare class TextBoxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TextBox with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextBox

	/**
	 * Creates a new TextBox
	 * @param layer The layer on which to create the TextBox.
	 * @param at The location at which to insert the TextBox relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new TextBox
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): TextBox

	/**
	 * Returns any TextBox in the collection.
	 */
	anyItem(): TextBox

	/**
	 * Displays the number of elements in the TextBox.
	 */
	count(): number

	/**
	 * Returns every TextBox in the collection.
	 */
	everyItem(): TextBox[]

	/**
	 * Returns the first TextBox in the collection.
	 */
	firstItem(): TextBox

	/**
	 * Returns the TextBox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextBox

	/**
	 * Returns the TextBox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextBox

	/**
	 * Returns the TextBox with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextBox

	/**
	 * Returns the TextBoxes within the specified range.
	 * @param from The TextBox, index, or name at the beginning of the range.
	 * @param to The TextBox, index, or name at the end of the range.
	 */
	itemByRange(from: TextBox | number | string, to: TextBox | number | string): TextBox[]

	/**
	 * Returns the last TextBox in the collection.
	 */
	lastItem(): TextBox

	/**
	 * Returns the middle TextBox in the collection.
	 */
	middleItem(): TextBox

	/**
	 * Returns the TextBox whose index follows the specified TextBox in the collection.
	 * @param obj The TextBox whose index comes before the desired TextBox.
	 */
	nextItem(obj: TextBox): TextBox

	/**
	 * Returns the TextBox with the index previous to the specified index.
	 * @param obj The index of the TextBox that follows the desired TextBox.
	 */
	previousItem(obj: TextBox): TextBox

	/**
	 * Generates a string which, if executed, will return the TextBox.
	 */
	toSource(): string

}

/**
 * A signature field.
 */
declare class SignatureField extends FormField {
	/**
	 * A collection of behavior objects.
	 */
	behaviors: Behaviors

	/**
	 * A collection of clear form behavior objects.
	 */
	clearFormBehaviors: ClearFormBehaviors

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of goto anchor behavior objects.
	 */
	gotoAnchorBehaviors: GotoAnchorBehaviors

	/**
	 * A collection of goto first page behavior objects.
	 */
	gotoFirstPageBehaviors: GotoFirstPageBehaviors

	/**
	 * A collection of goto last page behavior objects.
	 */
	gotoLastPageBehaviors: GotoLastPageBehaviors

	/**
	 * A collection of goto next page behavior objects.
	 */
	gotoNextPageBehaviors: GotoNextPageBehaviors

	/**
	 * A collection of goto next view behavior objects.
	 */
	gotoNextViewBehaviors: GotoNextViewBehaviors

	/**
	 * A collection of goto previous page behavior objects.
	 */
	gotoPreviousPageBehaviors: GotoPreviousPageBehaviors

	/**
	 * A collection of goto previous view behavior objects.
	 */
	gotoPreviousViewBehaviors: GotoPreviousViewBehaviors

	/**
	 * A collection of goto URL behavior objects.
	 */
	gotoURLBehaviors: GotoURLBehaviors

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * If true, the form field/push button is hidden until triggered in the exported PDF.
	 */
	hiddenUntilTriggered: boolean

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * A collection of movie behavior objects.
	 */
	movieBehaviors: MovieBehaviors

	/**
	 * A collection of open file behavior objects.
	 */
	openFileBehaviors: OpenFileBehaviors

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of print form behavior objects.
	 */
	printFormBehaviors: PrintFormBehaviors

	/**
	 * If true, the form field/push button is printable in the exported PDF.
	 */
	printableInPdf: boolean

	/**
	 * If true, the form field is read only in the exported PDF.
	 */
	readOnly: boolean

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, the form field is required in the exported PDF.
	 */
	required: boolean

	/**
	 * A collection of show/hide fields behavior objects.
	 */
	showHideFieldsBehaviors: ShowHideFieldsBehaviors

	/**
	 * A collection of sound behavior objects.
	 */
	soundBehaviors: SoundBehaviors

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of submit form behavior objects.
	 */
	submitFormBehaviors: SubmitFormBehaviors

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of view zoom behavior objects.
	 */
	viewZoomBehaviors: ViewZoomBehaviors

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Brings the SignatureField forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the SignatureField to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Converts the button object to the page item currently in the active state. Page items from other states will be lost.
	 */
	convertToObject(): void

	/**
	 * Sends the SignatureField back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the SignatureField to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * A collection of signature fields.
 */
declare class SignatureFields {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the SignatureField with the specified index.
	 * @param index The index.
	 */
	[index: number]: SignatureField

	/**
	 * Creates a new SignatureField
	 * @param layer The layer on which to create the SignatureField.
	 * @param at The location at which to insert the SignatureField relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new SignatureField
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): SignatureField

	/**
	 * Returns any SignatureField in the collection.
	 */
	anyItem(): SignatureField

	/**
	 * Displays the number of elements in the SignatureField.
	 */
	count(): number

	/**
	 * Returns every SignatureField in the collection.
	 */
	everyItem(): SignatureField[]

	/**
	 * Returns the first SignatureField in the collection.
	 */
	firstItem(): SignatureField

	/**
	 * Returns the SignatureField with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): SignatureField

	/**
	 * Returns the SignatureField with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): SignatureField

	/**
	 * Returns the SignatureField with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): SignatureField

	/**
	 * Returns the SignatureFields within the specified range.
	 * @param from The SignatureField, index, or name at the beginning of the range.
	 * @param to The SignatureField, index, or name at the end of the range.
	 */
	itemByRange(from: SignatureField | number | string, to: SignatureField | number | string): SignatureField[]

	/**
	 * Returns the last SignatureField in the collection.
	 */
	lastItem(): SignatureField

	/**
	 * Returns the middle SignatureField in the collection.
	 */
	middleItem(): SignatureField

	/**
	 * Returns the SignatureField whose index follows the specified SignatureField in the collection.
	 * @param obj The SignatureField whose index comes before the desired SignatureField.
	 */
	nextItem(obj: SignatureField): SignatureField

	/**
	 * Returns the SignatureField with the index previous to the specified index.
	 * @param obj The index of the SignatureField that follows the desired SignatureField.
	 */
	previousItem(obj: SignatureField): SignatureField

	/**
	 * Generates a string which, if executed, will return the SignatureField.
	 */
	toSource(): string

}

/**
 * A movie.
 */
declare class Movie extends MediaItem {
	/**
	 * The video controller skin name.
	 */
	controllerSkin: string

	/**
	 * The description of the Movie.
	 */
	description: string

	/**
	 * If true, the file is embedded in the PDF. If false, the file is linked to the PDF. Note: To embed movie files, acrobat compatibility must be acrobat 6 or higher.
	 */
	embedInPDF: boolean

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File

	/**
	 * If true, opens a new window to play the movie. If false, plays the movie in the poster frame on the PDF document page.
	 */
	floatingWindow: boolean

	/**
	 * The position of the floating window that displays the movie.
	 */
	floatingWindowPosition: FloatingWindowPosition

	/**
	 * The size of the floating window that displays the movie.
	 */
	floatingWindowSize: FloatingWindowSize

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * The source file of the link.
	 */
	itemLink: Link

	/**
	 * If true, movie loops forever.
	 */
	movieLoop: boolean

	/**
	 * The type of poster for the movie.
	 */
	moviePosterType: MoviePosterTypes

	/**
	 * A collection of navigation points.
	 */
	navigationPoints: NavigationPoints

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * If true, the movie plays automatically when a user views the page that contains the movie poster in the PDF document.
	 */
	playOnPageTurn: boolean

	/**
	 * The poster file.
	 */
	posterFile: string

	/**
	 * If true, displays controller skin with mouse rollover.
	 */
	showController: boolean

	/**
	 * If true, displays playback controls at the bottom of the movie display window.
	 */
	showControls: boolean

	/**
	 * The URL.
	 */
	url: string

	/**
	 * Brings the Movie forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the Movie to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Sends the Movie back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the Movie to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

	/**
	 * Verifies that the specified URL is valid and contains the specified movie file. Valid only when the movie file is specified by a URL rather than a file path.
	 */
	verifyURL(): boolean

}

/**
 * A collection of movies.
 */
declare class Movies {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Movie with the specified index.
	 * @param index The index.
	 */
	[index: number]: Movie

	/**
	 * Creates a new Movie
	 * @param layer The layer on which to create the Movie.
	 * @param at The location at which to insert the Movie relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Movie
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Movie

	/**
	 * Returns any Movie in the collection.
	 */
	anyItem(): Movie

	/**
	 * Displays the number of elements in the Movie.
	 */
	count(): number

	/**
	 * Returns every Movie in the collection.
	 */
	everyItem(): Movie[]

	/**
	 * Returns the first Movie in the collection.
	 */
	firstItem(): Movie

	/**
	 * Returns the Movie with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Movie

	/**
	 * Returns the Movie with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Movie

	/**
	 * Returns the Movie with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Movie

	/**
	 * Returns the Movies within the specified range.
	 * @param from The Movie, index, or name at the beginning of the range.
	 * @param to The Movie, index, or name at the end of the range.
	 */
	itemByRange(from: Movie | number | string, to: Movie | number | string): Movie[]

	/**
	 * Returns the last Movie in the collection.
	 */
	lastItem(): Movie

	/**
	 * Returns the middle Movie in the collection.
	 */
	middleItem(): Movie

	/**
	 * Returns the Movie whose index follows the specified Movie in the collection.
	 * @param obj The Movie whose index comes before the desired Movie.
	 */
	nextItem(obj: Movie): Movie

	/**
	 * Returns the Movie with the index previous to the specified index.
	 * @param obj The index of the Movie that follows the desired Movie.
	 */
	previousItem(obj: Movie): Movie

	/**
	 * Generates a string which, if executed, will return the Movie.
	 */
	toSource(): string

}

/**
 * A navigation point.
 */
declare class NavigationPoint {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * Unique internally-generated identifier (read only).
	 */
	id: number

	/**
	 * The index of the NavigationPoint within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The UI display name.
	 */
	name: string

	/**
	 * The parent of the NavigationPoint (a Movie).
	 */
	parent: Movie

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The time in seconds rounded up to two decimal places (e.g., 3.115 rounded to 3.12).
	 */
	time: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NavigationPoint[]

	/**
	 * Deletes the NavigationPoint.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the NavigationPoint.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of navigation points.
 */
declare class NavigationPoints {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the NavigationPoint with the specified index.
	 * @param index The index.
	 */
	[index: number]: NavigationPoint

	/**
	 * Creates a new NavigationPoint.
	 * @param withProperties Initial values for properties of the new NavigationPoint
	 */
	add(withProperties: object): NavigationPoint

	/**
	 * Returns any NavigationPoint in the collection.
	 */
	anyItem(): NavigationPoint

	/**
	 * Displays the number of elements in the NavigationPoint.
	 */
	count(): number

	/**
	 * Returns every NavigationPoint in the collection.
	 */
	everyItem(): NavigationPoint[]

	/**
	 * Returns the first NavigationPoint in the collection.
	 */
	firstItem(): NavigationPoint

	/**
	 * Returns the NavigationPoint with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NavigationPoint

	/**
	 * Returns the NavigationPoint with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): NavigationPoint

	/**
	 * Returns the NavigationPoint with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): NavigationPoint

	/**
	 * Returns the NavigationPoints within the specified range.
	 * @param from The NavigationPoint, index, or name at the beginning of the range.
	 * @param to The NavigationPoint, index, or name at the end of the range.
	 */
	itemByRange(from: NavigationPoint | number | string, to: NavigationPoint | number | string): NavigationPoint[]

	/**
	 * Returns the last NavigationPoint in the collection.
	 */
	lastItem(): NavigationPoint

	/**
	 * Returns the middle NavigationPoint in the collection.
	 */
	middleItem(): NavigationPoint

	/**
	 * Returns the NavigationPoint whose index follows the specified NavigationPoint in the collection.
	 * @param obj The NavigationPoint whose index comes before the desired NavigationPoint.
	 */
	nextItem(obj: NavigationPoint): NavigationPoint

	/**
	 * Returns the NavigationPoint with the index previous to the specified index.
	 * @param obj The index of the NavigationPoint that follows the desired NavigationPoint.
	 */
	previousItem(obj: NavigationPoint): NavigationPoint

	/**
	 * Generates a string which, if executed, will return the NavigationPoint.
	 */
	toSource(): string

}

/**
 * A sound clip.
 */
declare class Sound extends MediaItem {
	/**
	 * The description of the Sound.
	 */
	description: string

	/**
	 * If true, the sound poster does not print with the document.
	 */
	doNotPrintPoster: boolean

	/**
	 * If true, the file is embedded in the PDF. If false, the file is linked to the PDF. Note: To embed movie files, acrobat compatibility must be acrobat 6 or higher.
	 */
	embedInPDF: boolean

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * The source file of the link.
	 */
	itemLink: Link

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * If true, the movie plays automatically when a user views the page that contains the movie poster in the PDF document.
	 */
	playOnPageTurn: boolean

	/**
	 * The poster file.
	 */
	posterFile: string

	/**
	 * If true, sound loops forever (SWF only).
	 */
	soundLoop: boolean

	/**
	 * The type of sound poster.
	 */
	soundPosterType: SoundPosterTypes

	/**
	 * If true, sounds stops playing when its page turns.
	 */
	stopOnPageTurn: boolean

	/**
	 * Brings the Sound forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the Sound to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Sends the Sound back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the Sound to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * A collection of sound clips.
 */
declare class Sounds {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Sound with the specified index.
	 * @param index The index.
	 */
	[index: number]: Sound

	/**
	 * Creates a new Sound
	 * @param layer The layer on which to create the Sound.
	 * @param at The location at which to insert the Sound relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Sound
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Sound

	/**
	 * Returns any Sound in the collection.
	 */
	anyItem(): Sound

	/**
	 * Displays the number of elements in the Sound.
	 */
	count(): number

	/**
	 * Returns every Sound in the collection.
	 */
	everyItem(): Sound[]

	/**
	 * Returns the first Sound in the collection.
	 */
	firstItem(): Sound

	/**
	 * Returns the Sound with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Sound

	/**
	 * Returns the Sound with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Sound

	/**
	 * Returns the Sound with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Sound

	/**
	 * Returns the Sounds within the specified range.
	 * @param from The Sound, index, or name at the beginning of the range.
	 * @param to The Sound, index, or name at the end of the range.
	 */
	itemByRange(from: Sound | number | string, to: Sound | number | string): Sound[]

	/**
	 * Returns the last Sound in the collection.
	 */
	lastItem(): Sound

	/**
	 * Returns the middle Sound in the collection.
	 */
	middleItem(): Sound

	/**
	 * Returns the Sound whose index follows the specified Sound in the collection.
	 * @param obj The Sound whose index comes before the desired Sound.
	 */
	nextItem(obj: Sound): Sound

	/**
	 * Returns the Sound with the index previous to the specified index.
	 * @param obj The index of the Sound that follows the desired Sound.
	 */
	previousItem(obj: Sound): Sound

	/**
	 * Generates a string which, if executed, will return the Sound.
	 */
	toSource(): string

}

/**
 * A behavior object.
 */
declare class Behavior {
	/**
	 * The event which triggers the behavior.
	 */
	behaviorEvent: BehaviorEvents

	/**
	 * If true, the behavior is enabled.
	 */
	enableBehavior: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Behavior.
	 */
	id: number

	/**
	 * The index of the Behavior within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Behavior.
	 */
	name: string

	/**
	 * The parent of the Behavior (a Button, CheckBox, ComboBox, ListBox, RadioButton, TextBox or SignatureField).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Behavior[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the Behavior.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Behavior.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of behavior objects.
 */
declare class Behaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Behavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: Behavior

	/**
	 * Returns any Behavior in the collection.
	 */
	anyItem(): Behavior

	/**
	 * Displays the number of elements in the Behavior.
	 */
	count(): number

	/**
	 * Returns every Behavior in the collection.
	 */
	everyItem(): Behavior[]

	/**
	 * Returns the first Behavior in the collection.
	 */
	firstItem(): Behavior

	/**
	 * Returns the Behavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Behavior

	/**
	 * Returns the Behavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Behavior

	/**
	 * Returns the Behavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Behavior

	/**
	 * Returns the Behaviors within the specified range.
	 * @param from The Behavior, index, or name at the beginning of the range.
	 * @param to The Behavior, index, or name at the end of the range.
	 */
	itemByRange(from: Behavior | number | string, to: Behavior | number | string): Behavior[]

	/**
	 * Returns the last Behavior in the collection.
	 */
	lastItem(): Behavior

	/**
	 * Returns the middle Behavior in the collection.
	 */
	middleItem(): Behavior

	/**
	 * Returns the Behavior whose index follows the specified Behavior in the collection.
	 * @param obj The Behavior whose index comes before the desired Behavior.
	 */
	nextItem(obj: Behavior): Behavior

	/**
	 * Returns the Behavior with the index previous to the specified index.
	 * @param obj The index of the Behavior that follows the desired Behavior.
	 */
	previousItem(obj: Behavior): Behavior

	/**
	 * Generates a string which, if executed, will return the Behavior.
	 */
	toSource(): string

}

/**
 * A behavior object that jumps to the first page of the document.
 */
declare class GotoFirstPageBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions

}

/**
 * A collection of goto first page behavior objects.
 */
declare class GotoFirstPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoFirstPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoFirstPageBehavior

	/**
	 * Creates a new GotoFirstPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoFirstPageBehavior
	 */
	add(withProperties: object): GotoFirstPageBehavior

	/**
	 * Returns any GotoFirstPageBehavior in the collection.
	 */
	anyItem(): GotoFirstPageBehavior

	/**
	 * Displays the number of elements in the GotoFirstPageBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoFirstPageBehavior in the collection.
	 */
	everyItem(): GotoFirstPageBehavior[]

	/**
	 * Returns the first GotoFirstPageBehavior in the collection.
	 */
	firstItem(): GotoFirstPageBehavior

	/**
	 * Returns the GotoFirstPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoFirstPageBehavior

	/**
	 * Returns the GotoFirstPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoFirstPageBehavior

	/**
	 * Returns the GotoFirstPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoFirstPageBehavior

	/**
	 * Returns the GotoFirstPageBehaviors within the specified range.
	 * @param from The GotoFirstPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoFirstPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoFirstPageBehavior | number | string, to: GotoFirstPageBehavior | number | string): GotoFirstPageBehavior[]

	/**
	 * Returns the last GotoFirstPageBehavior in the collection.
	 */
	lastItem(): GotoFirstPageBehavior

	/**
	 * Returns the middle GotoFirstPageBehavior in the collection.
	 */
	middleItem(): GotoFirstPageBehavior

	/**
	 * Returns the GotoFirstPageBehavior whose index follows the specified GotoFirstPageBehavior in the collection.
	 * @param obj The GotoFirstPageBehavior whose index comes before the desired GotoFirstPageBehavior.
	 */
	nextItem(obj: GotoFirstPageBehavior): GotoFirstPageBehavior

	/**
	 * Returns the GotoFirstPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoFirstPageBehavior that follows the desired GotoFirstPageBehavior.
	 */
	previousItem(obj: GotoFirstPageBehavior): GotoFirstPageBehavior

	/**
	 * Generates a string which, if executed, will return the GotoFirstPageBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that jumps to the last page of the document.
 */
declare class GotoLastPageBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions

}

/**
 * A collection of goto last page behavior objects.
 */
declare class GotoLastPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoLastPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoLastPageBehavior

	/**
	 * Creates a new GotoLastPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoLastPageBehavior
	 */
	add(withProperties: object): GotoLastPageBehavior

	/**
	 * Returns any GotoLastPageBehavior in the collection.
	 */
	anyItem(): GotoLastPageBehavior

	/**
	 * Displays the number of elements in the GotoLastPageBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoLastPageBehavior in the collection.
	 */
	everyItem(): GotoLastPageBehavior[]

	/**
	 * Returns the first GotoLastPageBehavior in the collection.
	 */
	firstItem(): GotoLastPageBehavior

	/**
	 * Returns the GotoLastPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoLastPageBehavior

	/**
	 * Returns the GotoLastPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoLastPageBehavior

	/**
	 * Returns the GotoLastPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoLastPageBehavior

	/**
	 * Returns the GotoLastPageBehaviors within the specified range.
	 * @param from The GotoLastPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoLastPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoLastPageBehavior | number | string, to: GotoLastPageBehavior | number | string): GotoLastPageBehavior[]

	/**
	 * Returns the last GotoLastPageBehavior in the collection.
	 */
	lastItem(): GotoLastPageBehavior

	/**
	 * Returns the middle GotoLastPageBehavior in the collection.
	 */
	middleItem(): GotoLastPageBehavior

	/**
	 * Returns the GotoLastPageBehavior whose index follows the specified GotoLastPageBehavior in the collection.
	 * @param obj The GotoLastPageBehavior whose index comes before the desired GotoLastPageBehavior.
	 */
	nextItem(obj: GotoLastPageBehavior): GotoLastPageBehavior

	/**
	 * Returns the GotoLastPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoLastPageBehavior that follows the desired GotoLastPageBehavior.
	 */
	previousItem(obj: GotoLastPageBehavior): GotoLastPageBehavior

	/**
	 * Generates a string which, if executed, will return the GotoLastPageBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that jumps to the next page in the document.
 */
declare class GotoNextPageBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions

}

/**
 * A collection of goto next page behavior objects.
 */
declare class GotoNextPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoNextPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoNextPageBehavior

	/**
	 * Creates a new GotoNextPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoNextPageBehavior
	 */
	add(withProperties: object): GotoNextPageBehavior

	/**
	 * Returns any GotoNextPageBehavior in the collection.
	 */
	anyItem(): GotoNextPageBehavior

	/**
	 * Displays the number of elements in the GotoNextPageBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoNextPageBehavior in the collection.
	 */
	everyItem(): GotoNextPageBehavior[]

	/**
	 * Returns the first GotoNextPageBehavior in the collection.
	 */
	firstItem(): GotoNextPageBehavior

	/**
	 * Returns the GotoNextPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoNextPageBehavior

	/**
	 * Returns the GotoNextPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoNextPageBehavior

	/**
	 * Returns the GotoNextPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoNextPageBehavior

	/**
	 * Returns the GotoNextPageBehaviors within the specified range.
	 * @param from The GotoNextPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoNextPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoNextPageBehavior | number | string, to: GotoNextPageBehavior | number | string): GotoNextPageBehavior[]

	/**
	 * Returns the last GotoNextPageBehavior in the collection.
	 */
	lastItem(): GotoNextPageBehavior

	/**
	 * Returns the middle GotoNextPageBehavior in the collection.
	 */
	middleItem(): GotoNextPageBehavior

	/**
	 * Returns the GotoNextPageBehavior whose index follows the specified GotoNextPageBehavior in the collection.
	 * @param obj The GotoNextPageBehavior whose index comes before the desired GotoNextPageBehavior.
	 */
	nextItem(obj: GotoNextPageBehavior): GotoNextPageBehavior

	/**
	 * Returns the GotoNextPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoNextPageBehavior that follows the desired GotoNextPageBehavior.
	 */
	previousItem(obj: GotoNextPageBehavior): GotoNextPageBehavior

	/**
	 * Generates a string which, if executed, will return the GotoNextPageBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that jumps to the previous page in the document.
 */
declare class GotoPreviousPageBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions

}

/**
 * A collection of goto previous page behavior objects.
 */
declare class GotoPreviousPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoPreviousPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoPreviousPageBehavior

	/**
	 * Creates a new GotoPreviousPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoPreviousPageBehavior
	 */
	add(withProperties: object): GotoPreviousPageBehavior

	/**
	 * Returns any GotoPreviousPageBehavior in the collection.
	 */
	anyItem(): GotoPreviousPageBehavior

	/**
	 * Displays the number of elements in the GotoPreviousPageBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoPreviousPageBehavior in the collection.
	 */
	everyItem(): GotoPreviousPageBehavior[]

	/**
	 * Returns the first GotoPreviousPageBehavior in the collection.
	 */
	firstItem(): GotoPreviousPageBehavior

	/**
	 * Returns the GotoPreviousPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoPreviousPageBehavior

	/**
	 * Returns the GotoPreviousPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoPreviousPageBehavior

	/**
	 * Returns the GotoPreviousPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoPreviousPageBehavior

	/**
	 * Returns the GotoPreviousPageBehaviors within the specified range.
	 * @param from The GotoPreviousPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoPreviousPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoPreviousPageBehavior | number | string, to: GotoPreviousPageBehavior | number | string): GotoPreviousPageBehavior[]

	/**
	 * Returns the last GotoPreviousPageBehavior in the collection.
	 */
	lastItem(): GotoPreviousPageBehavior

	/**
	 * Returns the middle GotoPreviousPageBehavior in the collection.
	 */
	middleItem(): GotoPreviousPageBehavior

	/**
	 * Returns the GotoPreviousPageBehavior whose index follows the specified GotoPreviousPageBehavior in the collection.
	 * @param obj The GotoPreviousPageBehavior whose index comes before the desired GotoPreviousPageBehavior.
	 */
	nextItem(obj: GotoPreviousPageBehavior): GotoPreviousPageBehavior

	/**
	 * Returns the GotoPreviousPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoPreviousPageBehavior that follows the desired GotoPreviousPageBehavior.
	 */
	previousItem(obj: GotoPreviousPageBehavior): GotoPreviousPageBehavior

	/**
	 * Generates a string which, if executed, will return the GotoPreviousPageBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that jumps to the next view.
 */
declare class GotoNextViewBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions

}

/**
 * A collection of goto next view behavior objects.
 */
declare class GotoNextViewBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoNextViewBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoNextViewBehavior

	/**
	 * Creates a new GotoNextViewBehavior.
	 * @param withProperties Initial values for properties of the new GotoNextViewBehavior
	 */
	add(withProperties: object): GotoNextViewBehavior

	/**
	 * Returns any GotoNextViewBehavior in the collection.
	 */
	anyItem(): GotoNextViewBehavior

	/**
	 * Displays the number of elements in the GotoNextViewBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoNextViewBehavior in the collection.
	 */
	everyItem(): GotoNextViewBehavior[]

	/**
	 * Returns the first GotoNextViewBehavior in the collection.
	 */
	firstItem(): GotoNextViewBehavior

	/**
	 * Returns the GotoNextViewBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoNextViewBehavior

	/**
	 * Returns the GotoNextViewBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoNextViewBehavior

	/**
	 * Returns the GotoNextViewBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoNextViewBehavior

	/**
	 * Returns the GotoNextViewBehaviors within the specified range.
	 * @param from The GotoNextViewBehavior, index, or name at the beginning of the range.
	 * @param to The GotoNextViewBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoNextViewBehavior | number | string, to: GotoNextViewBehavior | number | string): GotoNextViewBehavior[]

	/**
	 * Returns the last GotoNextViewBehavior in the collection.
	 */
	lastItem(): GotoNextViewBehavior

	/**
	 * Returns the middle GotoNextViewBehavior in the collection.
	 */
	middleItem(): GotoNextViewBehavior

	/**
	 * Returns the GotoNextViewBehavior whose index follows the specified GotoNextViewBehavior in the collection.
	 * @param obj The GotoNextViewBehavior whose index comes before the desired GotoNextViewBehavior.
	 */
	nextItem(obj: GotoNextViewBehavior): GotoNextViewBehavior

	/**
	 * Returns the GotoNextViewBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoNextViewBehavior that follows the desired GotoNextViewBehavior.
	 */
	previousItem(obj: GotoNextViewBehavior): GotoNextViewBehavior

	/**
	 * Generates a string which, if executed, will return the GotoNextViewBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that jumps to the previous view.
 */
declare class GotoPreviousViewBehavior extends Behavior {
	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions

}

/**
 * A collection of goto previous view behavior objects.
 */
declare class GotoPreviousViewBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoPreviousViewBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoPreviousViewBehavior

	/**
	 * Creates a new GotoPreviousViewBehavior.
	 * @param withProperties Initial values for properties of the new GotoPreviousViewBehavior
	 */
	add(withProperties: object): GotoPreviousViewBehavior

	/**
	 * Returns any GotoPreviousViewBehavior in the collection.
	 */
	anyItem(): GotoPreviousViewBehavior

	/**
	 * Displays the number of elements in the GotoPreviousViewBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoPreviousViewBehavior in the collection.
	 */
	everyItem(): GotoPreviousViewBehavior[]

	/**
	 * Returns the first GotoPreviousViewBehavior in the collection.
	 */
	firstItem(): GotoPreviousViewBehavior

	/**
	 * Returns the GotoPreviousViewBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoPreviousViewBehavior

	/**
	 * Returns the GotoPreviousViewBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoPreviousViewBehavior

	/**
	 * Returns the GotoPreviousViewBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoPreviousViewBehavior

	/**
	 * Returns the GotoPreviousViewBehaviors within the specified range.
	 * @param from The GotoPreviousViewBehavior, index, or name at the beginning of the range.
	 * @param to The GotoPreviousViewBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoPreviousViewBehavior | number | string, to: GotoPreviousViewBehavior | number | string): GotoPreviousViewBehavior[]

	/**
	 * Returns the last GotoPreviousViewBehavior in the collection.
	 */
	lastItem(): GotoPreviousViewBehavior

	/**
	 * Returns the middle GotoPreviousViewBehavior in the collection.
	 */
	middleItem(): GotoPreviousViewBehavior

	/**
	 * Returns the GotoPreviousViewBehavior whose index follows the specified GotoPreviousViewBehavior in the collection.
	 * @param obj The GotoPreviousViewBehavior whose index comes before the desired GotoPreviousViewBehavior.
	 */
	nextItem(obj: GotoPreviousViewBehavior): GotoPreviousViewBehavior

	/**
	 * Returns the GotoPreviousViewBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoPreviousViewBehavior that follows the desired GotoPreviousViewBehavior.
	 */
	previousItem(obj: GotoPreviousViewBehavior): GotoPreviousViewBehavior

	/**
	 * Generates a string which, if executed, will return the GotoPreviousViewBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that jumps to a URL.
 */
declare class GotoURLBehavior extends Behavior {
	/**
	 * The URL.
	 */
	url: string

}

/**
 * A collection of goto URL behavior objects.
 */
declare class GotoURLBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoURLBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoURLBehavior

	/**
	 * Creates a new GotoURLBehavior.
	 * @param withProperties Initial values for properties of the new GotoURLBehavior
	 */
	add(withProperties: object): GotoURLBehavior

	/**
	 * Returns any GotoURLBehavior in the collection.
	 */
	anyItem(): GotoURLBehavior

	/**
	 * Displays the number of elements in the GotoURLBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoURLBehavior in the collection.
	 */
	everyItem(): GotoURLBehavior[]

	/**
	 * Returns the first GotoURLBehavior in the collection.
	 */
	firstItem(): GotoURLBehavior

	/**
	 * Returns the GotoURLBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoURLBehavior

	/**
	 * Returns the GotoURLBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoURLBehavior

	/**
	 * Returns the GotoURLBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoURLBehavior

	/**
	 * Returns the GotoURLBehaviors within the specified range.
	 * @param from The GotoURLBehavior, index, or name at the beginning of the range.
	 * @param to The GotoURLBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoURLBehavior | number | string, to: GotoURLBehavior | number | string): GotoURLBehavior[]

	/**
	 * Returns the last GotoURLBehavior in the collection.
	 */
	lastItem(): GotoURLBehavior

	/**
	 * Returns the middle GotoURLBehavior in the collection.
	 */
	middleItem(): GotoURLBehavior

	/**
	 * Returns the GotoURLBehavior whose index follows the specified GotoURLBehavior in the collection.
	 * @param obj The GotoURLBehavior whose index comes before the desired GotoURLBehavior.
	 */
	nextItem(obj: GotoURLBehavior): GotoURLBehavior

	/**
	 * Returns the GotoURLBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoURLBehavior that follows the desired GotoURLBehavior.
	 */
	previousItem(obj: GotoURLBehavior): GotoURLBehavior

	/**
	 * Generates a string which, if executed, will return the GotoURLBehavior.
	 */
	toSource(): string

}

/**
 * A movie behavior object.
 */
declare class MovieBehavior extends Behavior {
	/**
	 * The movie page item.
	 */
	movieItem: Movie

	/**
	 * The id of the navigation point to play from. This property is ignored for all operations other than Play From Navigation Point.
	 */
	navigationPointID: number

	/**
	 * The playback mode.
	 */
	operation: MoviePlayOperations

}

/**
 * A collection of movie behavior objects.
 */
declare class MovieBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MovieBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: MovieBehavior

	/**
	 * Creates a new MovieBehavior.
	 * @param withProperties Initial values for properties of the new MovieBehavior
	 */
	add(withProperties: object): MovieBehavior

	/**
	 * Returns any MovieBehavior in the collection.
	 */
	anyItem(): MovieBehavior

	/**
	 * Displays the number of elements in the MovieBehavior.
	 */
	count(): number

	/**
	 * Returns every MovieBehavior in the collection.
	 */
	everyItem(): MovieBehavior[]

	/**
	 * Returns the first MovieBehavior in the collection.
	 */
	firstItem(): MovieBehavior

	/**
	 * Returns the MovieBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MovieBehavior

	/**
	 * Returns the MovieBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MovieBehavior

	/**
	 * Returns the MovieBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MovieBehavior

	/**
	 * Returns the MovieBehaviors within the specified range.
	 * @param from The MovieBehavior, index, or name at the beginning of the range.
	 * @param to The MovieBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: MovieBehavior | number | string, to: MovieBehavior | number | string): MovieBehavior[]

	/**
	 * Returns the last MovieBehavior in the collection.
	 */
	lastItem(): MovieBehavior

	/**
	 * Returns the middle MovieBehavior in the collection.
	 */
	middleItem(): MovieBehavior

	/**
	 * Returns the MovieBehavior whose index follows the specified MovieBehavior in the collection.
	 * @param obj The MovieBehavior whose index comes before the desired MovieBehavior.
	 */
	nextItem(obj: MovieBehavior): MovieBehavior

	/**
	 * Returns the MovieBehavior with the index previous to the specified index.
	 * @param obj The index of the MovieBehavior that follows the desired MovieBehavior.
	 */
	previousItem(obj: MovieBehavior): MovieBehavior

	/**
	 * Generates a string which, if executed, will return the MovieBehavior.
	 */
	toSource(): string

}

/**
 * A show/hide fields behavior object.
 */
declare class ShowHideFieldsBehavior extends Behavior {
	/**
	 * The hidden interactive objects.
	 */
	fieldsToHide: Button[] | CheckBoxes | ComboBoxes | ListBoxes | RadioButtons | TextBoxes | SignatureFields

	/**
	 * The visible interactive objects.
	 */
	fieldsToShow: Button[] | CheckBoxes | ComboBoxes | ListBoxes | RadioButtons | TextBoxes | SignatureFields

}

/**
 * A collection of show/hide fields behavior objects.
 */
declare class ShowHideFieldsBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ShowHideFieldsBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: ShowHideFieldsBehavior

	/**
	 * Creates a new ShowHideFieldsBehavior.
	 * @param withProperties Initial values for properties of the new ShowHideFieldsBehavior
	 */
	add(withProperties: object): ShowHideFieldsBehavior

	/**
	 * Returns any ShowHideFieldsBehavior in the collection.
	 */
	anyItem(): ShowHideFieldsBehavior

	/**
	 * Displays the number of elements in the ShowHideFieldsBehavior.
	 */
	count(): number

	/**
	 * Returns every ShowHideFieldsBehavior in the collection.
	 */
	everyItem(): ShowHideFieldsBehavior[]

	/**
	 * Returns the first ShowHideFieldsBehavior in the collection.
	 */
	firstItem(): ShowHideFieldsBehavior

	/**
	 * Returns the ShowHideFieldsBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ShowHideFieldsBehavior

	/**
	 * Returns the ShowHideFieldsBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ShowHideFieldsBehavior

	/**
	 * Returns the ShowHideFieldsBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ShowHideFieldsBehavior

	/**
	 * Returns the ShowHideFieldsBehaviors within the specified range.
	 * @param from The ShowHideFieldsBehavior, index, or name at the beginning of the range.
	 * @param to The ShowHideFieldsBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: ShowHideFieldsBehavior | number | string, to: ShowHideFieldsBehavior | number | string): ShowHideFieldsBehavior[]

	/**
	 * Returns the last ShowHideFieldsBehavior in the collection.
	 */
	lastItem(): ShowHideFieldsBehavior

	/**
	 * Returns the middle ShowHideFieldsBehavior in the collection.
	 */
	middleItem(): ShowHideFieldsBehavior

	/**
	 * Returns the ShowHideFieldsBehavior whose index follows the specified ShowHideFieldsBehavior in the collection.
	 * @param obj The ShowHideFieldsBehavior whose index comes before the desired ShowHideFieldsBehavior.
	 */
	nextItem(obj: ShowHideFieldsBehavior): ShowHideFieldsBehavior

	/**
	 * Returns the ShowHideFieldsBehavior with the index previous to the specified index.
	 * @param obj The index of the ShowHideFieldsBehavior that follows the desired ShowHideFieldsBehavior.
	 */
	previousItem(obj: ShowHideFieldsBehavior): ShowHideFieldsBehavior

	/**
	 * Generates a string which, if executed, will return the ShowHideFieldsBehavior.
	 */
	toSource(): string

}

/**
 * A animation behavior.
 */
declare class AnimationBehavior extends Behavior {
	/**
	 * The animation page item.
	 */
	animatedPageItem: PageItem

	/**
	 * If true, will automatically play the animation in reverse on roll off of the rollover event.
	 */
	autoReverseOnRollOff: boolean

	/**
	 * The playback mode.
	 */
	operation: AnimationPlayOperations

}

/**
 * A collection of animation behaviors.
 */
declare class AnimationBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the AnimationBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: AnimationBehavior

	/**
	 * Creates a new AnimationBehavior.
	 * @param withProperties Initial values for properties of the new AnimationBehavior
	 */
	add(withProperties: object): AnimationBehavior

	/**
	 * Returns any AnimationBehavior in the collection.
	 */
	anyItem(): AnimationBehavior

	/**
	 * Displays the number of elements in the AnimationBehavior.
	 */
	count(): number

	/**
	 * Returns every AnimationBehavior in the collection.
	 */
	everyItem(): AnimationBehavior[]

	/**
	 * Returns the first AnimationBehavior in the collection.
	 */
	firstItem(): AnimationBehavior

	/**
	 * Returns the AnimationBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AnimationBehavior

	/**
	 * Returns the AnimationBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): AnimationBehavior

	/**
	 * Returns the AnimationBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): AnimationBehavior

	/**
	 * Returns the AnimationBehaviors within the specified range.
	 * @param from The AnimationBehavior, index, or name at the beginning of the range.
	 * @param to The AnimationBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: AnimationBehavior | number | string, to: AnimationBehavior | number | string): AnimationBehavior[]

	/**
	 * Returns the last AnimationBehavior in the collection.
	 */
	lastItem(): AnimationBehavior

	/**
	 * Returns the middle AnimationBehavior in the collection.
	 */
	middleItem(): AnimationBehavior

	/**
	 * Returns the AnimationBehavior whose index follows the specified AnimationBehavior in the collection.
	 * @param obj The AnimationBehavior whose index comes before the desired AnimationBehavior.
	 */
	nextItem(obj: AnimationBehavior): AnimationBehavior

	/**
	 * Returns the AnimationBehavior with the index previous to the specified index.
	 * @param obj The index of the AnimationBehavior that follows the desired AnimationBehavior.
	 */
	previousItem(obj: AnimationBehavior): AnimationBehavior

	/**
	 * Generates a string which, if executed, will return the AnimationBehavior.
	 */
	toSource(): string

}

/**
 * An open file behavior object.
 */
declare class OpenFileBehavior extends Behavior {
	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File

}

/**
 * A collection of open file behavior objects.
 */
declare class OpenFileBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the OpenFileBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: OpenFileBehavior

	/**
	 * Creates a new OpenFileBehavior.
	 * @param withProperties Initial values for properties of the new OpenFileBehavior
	 */
	add(withProperties: object): OpenFileBehavior

	/**
	 * Returns any OpenFileBehavior in the collection.
	 */
	anyItem(): OpenFileBehavior

	/**
	 * Displays the number of elements in the OpenFileBehavior.
	 */
	count(): number

	/**
	 * Returns every OpenFileBehavior in the collection.
	 */
	everyItem(): OpenFileBehavior[]

	/**
	 * Returns the first OpenFileBehavior in the collection.
	 */
	firstItem(): OpenFileBehavior

	/**
	 * Returns the OpenFileBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): OpenFileBehavior

	/**
	 * Returns the OpenFileBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): OpenFileBehavior

	/**
	 * Returns the OpenFileBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): OpenFileBehavior

	/**
	 * Returns the OpenFileBehaviors within the specified range.
	 * @param from The OpenFileBehavior, index, or name at the beginning of the range.
	 * @param to The OpenFileBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: OpenFileBehavior | number | string, to: OpenFileBehavior | number | string): OpenFileBehavior[]

	/**
	 * Returns the last OpenFileBehavior in the collection.
	 */
	lastItem(): OpenFileBehavior

	/**
	 * Returns the middle OpenFileBehavior in the collection.
	 */
	middleItem(): OpenFileBehavior

	/**
	 * Returns the OpenFileBehavior whose index follows the specified OpenFileBehavior in the collection.
	 * @param obj The OpenFileBehavior whose index comes before the desired OpenFileBehavior.
	 */
	nextItem(obj: OpenFileBehavior): OpenFileBehavior

	/**
	 * Returns the OpenFileBehavior with the index previous to the specified index.
	 * @param obj The index of the OpenFileBehavior that follows the desired OpenFileBehavior.
	 */
	previousItem(obj: OpenFileBehavior): OpenFileBehavior

	/**
	 * Generates a string which, if executed, will return the OpenFileBehavior.
	 */
	toSource(): string

}

/**
 * A goto next state behavior.
 */
declare class GotoNextStateBehavior extends Behavior {
	/**
	 * The associated multi-state object page item.
	 */
	associatedMultiStateObject: MultiStateObject

	/**
	 * If true, will loop to the next or previous state.
	 */
	loopsToNextOrPrevious: boolean

}

/**
 * A collection of goto next state behaviors.
 */
declare class GotoNextStateBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoNextStateBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoNextStateBehavior

	/**
	 * Creates a new GotoNextStateBehavior.
	 * @param withProperties Initial values for properties of the new GotoNextStateBehavior
	 */
	add(withProperties: object): GotoNextStateBehavior

	/**
	 * Returns any GotoNextStateBehavior in the collection.
	 */
	anyItem(): GotoNextStateBehavior

	/**
	 * Displays the number of elements in the GotoNextStateBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoNextStateBehavior in the collection.
	 */
	everyItem(): GotoNextStateBehavior[]

	/**
	 * Returns the first GotoNextStateBehavior in the collection.
	 */
	firstItem(): GotoNextStateBehavior

	/**
	 * Returns the GotoNextStateBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoNextStateBehavior

	/**
	 * Returns the GotoNextStateBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoNextStateBehavior

	/**
	 * Returns the GotoNextStateBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoNextStateBehavior

	/**
	 * Returns the GotoNextStateBehaviors within the specified range.
	 * @param from The GotoNextStateBehavior, index, or name at the beginning of the range.
	 * @param to The GotoNextStateBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoNextStateBehavior | number | string, to: GotoNextStateBehavior | number | string): GotoNextStateBehavior[]

	/**
	 * Returns the last GotoNextStateBehavior in the collection.
	 */
	lastItem(): GotoNextStateBehavior

	/**
	 * Returns the middle GotoNextStateBehavior in the collection.
	 */
	middleItem(): GotoNextStateBehavior

	/**
	 * Returns the GotoNextStateBehavior whose index follows the specified GotoNextStateBehavior in the collection.
	 * @param obj The GotoNextStateBehavior whose index comes before the desired GotoNextStateBehavior.
	 */
	nextItem(obj: GotoNextStateBehavior): GotoNextStateBehavior

	/**
	 * Returns the GotoNextStateBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoNextStateBehavior that follows the desired GotoNextStateBehavior.
	 */
	previousItem(obj: GotoNextStateBehavior): GotoNextStateBehavior

	/**
	 * Generates a string which, if executed, will return the GotoNextStateBehavior.
	 */
	toSource(): string

}

/**
 * A goto previous state behavior.
 */
declare class GotoPreviousStateBehavior extends Behavior {
	/**
	 * The associated multi-state object page item.
	 */
	associatedMultiStateObject: MultiStateObject

	/**
	 * If true, will loop to the next or previous state.
	 */
	loopsToNextOrPrevious: boolean

}

/**
 * A collection of goto previous state behaviors.
 */
declare class GotoPreviousStateBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoPreviousStateBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoPreviousStateBehavior

	/**
	 * Creates a new GotoPreviousStateBehavior.
	 * @param withProperties Initial values for properties of the new GotoPreviousStateBehavior
	 */
	add(withProperties: object): GotoPreviousStateBehavior

	/**
	 * Returns any GotoPreviousStateBehavior in the collection.
	 */
	anyItem(): GotoPreviousStateBehavior

	/**
	 * Displays the number of elements in the GotoPreviousStateBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoPreviousStateBehavior in the collection.
	 */
	everyItem(): GotoPreviousStateBehavior[]

	/**
	 * Returns the first GotoPreviousStateBehavior in the collection.
	 */
	firstItem(): GotoPreviousStateBehavior

	/**
	 * Returns the GotoPreviousStateBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoPreviousStateBehavior

	/**
	 * Returns the GotoPreviousStateBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoPreviousStateBehavior

	/**
	 * Returns the GotoPreviousStateBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoPreviousStateBehavior

	/**
	 * Returns the GotoPreviousStateBehaviors within the specified range.
	 * @param from The GotoPreviousStateBehavior, index, or name at the beginning of the range.
	 * @param to The GotoPreviousStateBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoPreviousStateBehavior | number | string, to: GotoPreviousStateBehavior | number | string): GotoPreviousStateBehavior[]

	/**
	 * Returns the last GotoPreviousStateBehavior in the collection.
	 */
	lastItem(): GotoPreviousStateBehavior

	/**
	 * Returns the middle GotoPreviousStateBehavior in the collection.
	 */
	middleItem(): GotoPreviousStateBehavior

	/**
	 * Returns the GotoPreviousStateBehavior whose index follows the specified GotoPreviousStateBehavior in the collection.
	 * @param obj The GotoPreviousStateBehavior whose index comes before the desired GotoPreviousStateBehavior.
	 */
	nextItem(obj: GotoPreviousStateBehavior): GotoPreviousStateBehavior

	/**
	 * Returns the GotoPreviousStateBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoPreviousStateBehavior that follows the desired GotoPreviousStateBehavior.
	 */
	previousItem(obj: GotoPreviousStateBehavior): GotoPreviousStateBehavior

	/**
	 * Generates a string which, if executed, will return the GotoPreviousStateBehavior.
	 */
	toSource(): string

}

/**
 * A goto state behavior.
 */
declare class GotoStateBehavior extends Behavior {
	/**
	 * The associated multi-state object page item.
	 */
	associatedMultiStateObject: MultiStateObject

	/**
	 * If true, will automatically go back to the prior state on roll off of the rollover event.
	 */
	goBackOnRollOff: boolean

	/**
	 * The name of the state in the associated multi-state object.
	 */
	stateName: string

}

/**
 * A collection of goto state behaviors.
 */
declare class GotoStateBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoStateBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoStateBehavior

	/**
	 * Creates a new GotoStateBehavior.
	 * @param withProperties Initial values for properties of the new GotoStateBehavior
	 */
	add(withProperties: object): GotoStateBehavior

	/**
	 * Returns any GotoStateBehavior in the collection.
	 */
	anyItem(): GotoStateBehavior

	/**
	 * Displays the number of elements in the GotoStateBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoStateBehavior in the collection.
	 */
	everyItem(): GotoStateBehavior[]

	/**
	 * Returns the first GotoStateBehavior in the collection.
	 */
	firstItem(): GotoStateBehavior

	/**
	 * Returns the GotoStateBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoStateBehavior

	/**
	 * Returns the GotoStateBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoStateBehavior

	/**
	 * Returns the GotoStateBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoStateBehavior

	/**
	 * Returns the GotoStateBehaviors within the specified range.
	 * @param from The GotoStateBehavior, index, or name at the beginning of the range.
	 * @param to The GotoStateBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoStateBehavior | number | string, to: GotoStateBehavior | number | string): GotoStateBehavior[]

	/**
	 * Returns the last GotoStateBehavior in the collection.
	 */
	lastItem(): GotoStateBehavior

	/**
	 * Returns the middle GotoStateBehavior in the collection.
	 */
	middleItem(): GotoStateBehavior

	/**
	 * Returns the GotoStateBehavior whose index follows the specified GotoStateBehavior in the collection.
	 * @param obj The GotoStateBehavior whose index comes before the desired GotoStateBehavior.
	 */
	nextItem(obj: GotoStateBehavior): GotoStateBehavior

	/**
	 * Returns the GotoStateBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoStateBehavior that follows the desired GotoStateBehavior.
	 */
	previousItem(obj: GotoStateBehavior): GotoStateBehavior

	/**
	 * Generates a string which, if executed, will return the GotoStateBehavior.
	 */
	toSource(): string

}

/**
 * A view zoom behavior object.
 */
declare class ViewZoomBehavior extends Behavior {
	/**
	 * The view zoom style.
	 */
	viewZoomStyle: ViewZoomStyle

}

/**
 * A collection of view zoom behavior objects.
 */
declare class ViewZoomBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ViewZoomBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: ViewZoomBehavior

	/**
	 * Creates a new ViewZoomBehavior.
	 * @param withProperties Initial values for properties of the new ViewZoomBehavior
	 */
	add(withProperties: object): ViewZoomBehavior

	/**
	 * Returns any ViewZoomBehavior in the collection.
	 */
	anyItem(): ViewZoomBehavior

	/**
	 * Displays the number of elements in the ViewZoomBehavior.
	 */
	count(): number

	/**
	 * Returns every ViewZoomBehavior in the collection.
	 */
	everyItem(): ViewZoomBehavior[]

	/**
	 * Returns the first ViewZoomBehavior in the collection.
	 */
	firstItem(): ViewZoomBehavior

	/**
	 * Returns the ViewZoomBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ViewZoomBehavior

	/**
	 * Returns the ViewZoomBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ViewZoomBehavior

	/**
	 * Returns the ViewZoomBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ViewZoomBehavior

	/**
	 * Returns the ViewZoomBehaviors within the specified range.
	 * @param from The ViewZoomBehavior, index, or name at the beginning of the range.
	 * @param to The ViewZoomBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: ViewZoomBehavior | number | string, to: ViewZoomBehavior | number | string): ViewZoomBehavior[]

	/**
	 * Returns the last ViewZoomBehavior in the collection.
	 */
	lastItem(): ViewZoomBehavior

	/**
	 * Returns the middle ViewZoomBehavior in the collection.
	 */
	middleItem(): ViewZoomBehavior

	/**
	 * Returns the ViewZoomBehavior whose index follows the specified ViewZoomBehavior in the collection.
	 * @param obj The ViewZoomBehavior whose index comes before the desired ViewZoomBehavior.
	 */
	nextItem(obj: ViewZoomBehavior): ViewZoomBehavior

	/**
	 * Returns the ViewZoomBehavior with the index previous to the specified index.
	 * @param obj The index of the ViewZoomBehavior that follows the desired ViewZoomBehavior.
	 */
	previousItem(obj: ViewZoomBehavior): ViewZoomBehavior

	/**
	 * Generates a string which, if executed, will return the ViewZoomBehavior.
	 */
	toSource(): string

}

/**
 * A sound behavior object.
 */
declare class SoundBehavior extends Behavior {
	/**
	 * The playback mode.
	 */
	operation: PlayOperations

	/**
	 * The sound page item.
	 */
	soundItem: Sound

}

/**
 * A collection of sound behavior objects.
 */
declare class SoundBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the SoundBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: SoundBehavior

	/**
	 * Creates a new SoundBehavior.
	 * @param withProperties Initial values for properties of the new SoundBehavior
	 */
	add(withProperties: object): SoundBehavior

	/**
	 * Returns any SoundBehavior in the collection.
	 */
	anyItem(): SoundBehavior

	/**
	 * Displays the number of elements in the SoundBehavior.
	 */
	count(): number

	/**
	 * Returns every SoundBehavior in the collection.
	 */
	everyItem(): SoundBehavior[]

	/**
	 * Returns the first SoundBehavior in the collection.
	 */
	firstItem(): SoundBehavior

	/**
	 * Returns the SoundBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): SoundBehavior

	/**
	 * Returns the SoundBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): SoundBehavior

	/**
	 * Returns the SoundBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): SoundBehavior

	/**
	 * Returns the SoundBehaviors within the specified range.
	 * @param from The SoundBehavior, index, or name at the beginning of the range.
	 * @param to The SoundBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: SoundBehavior | number | string, to: SoundBehavior | number | string): SoundBehavior[]

	/**
	 * Returns the last SoundBehavior in the collection.
	 */
	lastItem(): SoundBehavior

	/**
	 * Returns the middle SoundBehavior in the collection.
	 */
	middleItem(): SoundBehavior

	/**
	 * Returns the SoundBehavior whose index follows the specified SoundBehavior in the collection.
	 * @param obj The SoundBehavior whose index comes before the desired SoundBehavior.
	 */
	nextItem(obj: SoundBehavior): SoundBehavior

	/**
	 * Returns the SoundBehavior with the index previous to the specified index.
	 * @param obj The index of the SoundBehavior that follows the desired SoundBehavior.
	 */
	previousItem(obj: SoundBehavior): SoundBehavior

	/**
	 * Generates a string which, if executed, will return the SoundBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that jumps to an anchor.
 */
declare class GotoAnchorBehavior extends Behavior {
	/**
	 * The anchor item, specified as a bookmark or a hyperlink text or page destination.
	 */
	anchorItem: Bookmark | HyperlinkTextDestination | HyperlinkPageDestination

	/**
	 * The anchor name.
	 */
	anchorName: string

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File

	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions

}

/**
 * A collection of goto anchor behavior objects.
 */
declare class GotoAnchorBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoAnchorBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoAnchorBehavior

	/**
	 * Creates a new GotoAnchorBehavior.
	 * @param withProperties Initial values for properties of the new GotoAnchorBehavior
	 */
	add(withProperties: object): GotoAnchorBehavior

	/**
	 * Returns any GotoAnchorBehavior in the collection.
	 */
	anyItem(): GotoAnchorBehavior

	/**
	 * Displays the number of elements in the GotoAnchorBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoAnchorBehavior in the collection.
	 */
	everyItem(): GotoAnchorBehavior[]

	/**
	 * Returns the first GotoAnchorBehavior in the collection.
	 */
	firstItem(): GotoAnchorBehavior

	/**
	 * Returns the GotoAnchorBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoAnchorBehavior

	/**
	 * Returns the GotoAnchorBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoAnchorBehavior

	/**
	 * Returns the GotoAnchorBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoAnchorBehavior

	/**
	 * Returns the GotoAnchorBehaviors within the specified range.
	 * @param from The GotoAnchorBehavior, index, or name at the beginning of the range.
	 * @param to The GotoAnchorBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoAnchorBehavior | number | string, to: GotoAnchorBehavior | number | string): GotoAnchorBehavior[]

	/**
	 * Returns the last GotoAnchorBehavior in the collection.
	 */
	lastItem(): GotoAnchorBehavior

	/**
	 * Returns the middle GotoAnchorBehavior in the collection.
	 */
	middleItem(): GotoAnchorBehavior

	/**
	 * Returns the GotoAnchorBehavior whose index follows the specified GotoAnchorBehavior in the collection.
	 * @param obj The GotoAnchorBehavior whose index comes before the desired GotoAnchorBehavior.
	 */
	nextItem(obj: GotoAnchorBehavior): GotoAnchorBehavior

	/**
	 * Returns the GotoAnchorBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoAnchorBehavior that follows the desired GotoAnchorBehavior.
	 */
	previousItem(obj: GotoAnchorBehavior): GotoAnchorBehavior

	/**
	 * Generates a string which, if executed, will return the GotoAnchorBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that jumps to a specific page of the document.
 */
declare class GotoPageBehavior extends Behavior {
	/**
	 * The page number to go to expressed as an index where 1 is the first page.
	 */
	pageNumber: number

	/**
	 * The zoom setting.
	 */
	zoomSetting: GoToZoomOptions

}

/**
 * A collection of go to page behavior objects.
 */
declare class GotoPageBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GotoPageBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: GotoPageBehavior

	/**
	 * Creates a new GotoPageBehavior.
	 * @param withProperties Initial values for properties of the new GotoPageBehavior
	 */
	add(withProperties: object): GotoPageBehavior

	/**
	 * Returns any GotoPageBehavior in the collection.
	 */
	anyItem(): GotoPageBehavior

	/**
	 * Displays the number of elements in the GotoPageBehavior.
	 */
	count(): number

	/**
	 * Returns every GotoPageBehavior in the collection.
	 */
	everyItem(): GotoPageBehavior[]

	/**
	 * Returns the first GotoPageBehavior in the collection.
	 */
	firstItem(): GotoPageBehavior

	/**
	 * Returns the GotoPageBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GotoPageBehavior

	/**
	 * Returns the GotoPageBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GotoPageBehavior

	/**
	 * Returns the GotoPageBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GotoPageBehavior

	/**
	 * Returns the GotoPageBehaviors within the specified range.
	 * @param from The GotoPageBehavior, index, or name at the beginning of the range.
	 * @param to The GotoPageBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: GotoPageBehavior | number | string, to: GotoPageBehavior | number | string): GotoPageBehavior[]

	/**
	 * Returns the last GotoPageBehavior in the collection.
	 */
	lastItem(): GotoPageBehavior

	/**
	 * Returns the middle GotoPageBehavior in the collection.
	 */
	middleItem(): GotoPageBehavior

	/**
	 * Returns the GotoPageBehavior whose index follows the specified GotoPageBehavior in the collection.
	 * @param obj The GotoPageBehavior whose index comes before the desired GotoPageBehavior.
	 */
	nextItem(obj: GotoPageBehavior): GotoPageBehavior

	/**
	 * Returns the GotoPageBehavior with the index previous to the specified index.
	 * @param obj The index of the GotoPageBehavior that follows the desired GotoPageBehavior.
	 */
	previousItem(obj: GotoPageBehavior): GotoPageBehavior

	/**
	 * Generates a string which, if executed, will return the GotoPageBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that clears the form fields in the document.
 */
declare class ClearFormBehavior extends Behavior {
}

/**
 * A collection of clear form behavior objects.
 */
declare class ClearFormBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ClearFormBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: ClearFormBehavior

	/**
	 * Creates a new ClearFormBehavior.
	 * @param withProperties Initial values for properties of the new ClearFormBehavior
	 */
	add(withProperties: object): ClearFormBehavior

	/**
	 * Returns any ClearFormBehavior in the collection.
	 */
	anyItem(): ClearFormBehavior

	/**
	 * Displays the number of elements in the ClearFormBehavior.
	 */
	count(): number

	/**
	 * Returns every ClearFormBehavior in the collection.
	 */
	everyItem(): ClearFormBehavior[]

	/**
	 * Returns the first ClearFormBehavior in the collection.
	 */
	firstItem(): ClearFormBehavior

	/**
	 * Returns the ClearFormBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ClearFormBehavior

	/**
	 * Returns the ClearFormBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ClearFormBehavior

	/**
	 * Returns the ClearFormBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ClearFormBehavior

	/**
	 * Returns the ClearFormBehaviors within the specified range.
	 * @param from The ClearFormBehavior, index, or name at the beginning of the range.
	 * @param to The ClearFormBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: ClearFormBehavior | number | string, to: ClearFormBehavior | number | string): ClearFormBehavior[]

	/**
	 * Returns the last ClearFormBehavior in the collection.
	 */
	lastItem(): ClearFormBehavior

	/**
	 * Returns the middle ClearFormBehavior in the collection.
	 */
	middleItem(): ClearFormBehavior

	/**
	 * Returns the ClearFormBehavior whose index follows the specified ClearFormBehavior in the collection.
	 * @param obj The ClearFormBehavior whose index comes before the desired ClearFormBehavior.
	 */
	nextItem(obj: ClearFormBehavior): ClearFormBehavior

	/**
	 * Returns the ClearFormBehavior with the index previous to the specified index.
	 * @param obj The index of the ClearFormBehavior that follows the desired ClearFormBehavior.
	 */
	previousItem(obj: ClearFormBehavior): ClearFormBehavior

	/**
	 * Generates a string which, if executed, will return the ClearFormBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that triggers print for the document.
 */
declare class PrintFormBehavior extends Behavior {
}

/**
 * A collection of print form behavior objects.
 */
declare class PrintFormBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PrintFormBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: PrintFormBehavior

	/**
	 * Creates a new PrintFormBehavior.
	 * @param withProperties Initial values for properties of the new PrintFormBehavior
	 */
	add(withProperties: object): PrintFormBehavior

	/**
	 * Returns any PrintFormBehavior in the collection.
	 */
	anyItem(): PrintFormBehavior

	/**
	 * Displays the number of elements in the PrintFormBehavior.
	 */
	count(): number

	/**
	 * Returns every PrintFormBehavior in the collection.
	 */
	everyItem(): PrintFormBehavior[]

	/**
	 * Returns the first PrintFormBehavior in the collection.
	 */
	firstItem(): PrintFormBehavior

	/**
	 * Returns the PrintFormBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PrintFormBehavior

	/**
	 * Returns the PrintFormBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PrintFormBehavior

	/**
	 * Returns the PrintFormBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PrintFormBehavior

	/**
	 * Returns the PrintFormBehaviors within the specified range.
	 * @param from The PrintFormBehavior, index, or name at the beginning of the range.
	 * @param to The PrintFormBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: PrintFormBehavior | number | string, to: PrintFormBehavior | number | string): PrintFormBehavior[]

	/**
	 * Returns the last PrintFormBehavior in the collection.
	 */
	lastItem(): PrintFormBehavior

	/**
	 * Returns the middle PrintFormBehavior in the collection.
	 */
	middleItem(): PrintFormBehavior

	/**
	 * Returns the PrintFormBehavior whose index follows the specified PrintFormBehavior in the collection.
	 * @param obj The PrintFormBehavior whose index comes before the desired PrintFormBehavior.
	 */
	nextItem(obj: PrintFormBehavior): PrintFormBehavior

	/**
	 * Returns the PrintFormBehavior with the index previous to the specified index.
	 * @param obj The index of the PrintFormBehavior that follows the desired PrintFormBehavior.
	 */
	previousItem(obj: PrintFormBehavior): PrintFormBehavior

	/**
	 * Generates a string which, if executed, will return the PrintFormBehavior.
	 */
	toSource(): string

}

/**
 * A behavior object that submits the document.
 */
declare class SubmitFormBehavior extends Behavior {
	/**
	 * The URL.
	 */
	url: string

}

/**
 * A collection of submit form behavior objects.
 */
declare class SubmitFormBehaviors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the SubmitFormBehavior with the specified index.
	 * @param index The index.
	 */
	[index: number]: SubmitFormBehavior

	/**
	 * Creates a new SubmitFormBehavior.
	 * @param withProperties Initial values for properties of the new SubmitFormBehavior
	 */
	add(withProperties: object): SubmitFormBehavior

	/**
	 * Returns any SubmitFormBehavior in the collection.
	 */
	anyItem(): SubmitFormBehavior

	/**
	 * Displays the number of elements in the SubmitFormBehavior.
	 */
	count(): number

	/**
	 * Returns every SubmitFormBehavior in the collection.
	 */
	everyItem(): SubmitFormBehavior[]

	/**
	 * Returns the first SubmitFormBehavior in the collection.
	 */
	firstItem(): SubmitFormBehavior

	/**
	 * Returns the SubmitFormBehavior with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): SubmitFormBehavior

	/**
	 * Returns the SubmitFormBehavior with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): SubmitFormBehavior

	/**
	 * Returns the SubmitFormBehavior with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): SubmitFormBehavior

	/**
	 * Returns the SubmitFormBehaviors within the specified range.
	 * @param from The SubmitFormBehavior, index, or name at the beginning of the range.
	 * @param to The SubmitFormBehavior, index, or name at the end of the range.
	 */
	itemByRange(from: SubmitFormBehavior | number | string, to: SubmitFormBehavior | number | string): SubmitFormBehavior[]

	/**
	 * Returns the last SubmitFormBehavior in the collection.
	 */
	lastItem(): SubmitFormBehavior

	/**
	 * Returns the middle SubmitFormBehavior in the collection.
	 */
	middleItem(): SubmitFormBehavior

	/**
	 * Returns the SubmitFormBehavior whose index follows the specified SubmitFormBehavior in the collection.
	 * @param obj The SubmitFormBehavior whose index comes before the desired SubmitFormBehavior.
	 */
	nextItem(obj: SubmitFormBehavior): SubmitFormBehavior

	/**
	 * Returns the SubmitFormBehavior with the index previous to the specified index.
	 * @param obj The index of the SubmitFormBehavior that follows the desired SubmitFormBehavior.
	 */
	previousItem(obj: SubmitFormBehavior): SubmitFormBehavior

	/**
	 * Generates a string which, if executed, will return the SubmitFormBehavior.
	 */
	toSource(): string

}

/**
 * Timing settings.
 */
declare class TimingSetting extends Preference {
	/**
	 * A collection of timing lists.
	 */
	timingLists: TimingLists

	/**
	 * Dynamic targets on the spread that are not assigned.
	 */
	unassignedDynamicTargets: object[]

}

/**
 * a timing list.
 */
declare class TimingList {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the TimingList within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the TimingList (a TimingSetting).
	 */
	parent: TimingSetting

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of timing data objects.
	 */
	timingGroups: TimingGroups

	/**
	 * trigger event.
	 */
	triggerEvent: DynamicTriggerEvents

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TimingList[]

	/**
	 * Deletes the TimingList.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TimingList.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of timing lists.
 */
declare class TimingLists {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TimingList with the specified index.
	 * @param index The index.
	 */
	[index: number]: TimingList

	/**
	 * Adds a new event-triggered timing list object.
	 * @param triggerEvent Trigger Event
	 * @param withProperties Initial values for properties of the new TimingList
	 */
	add(triggerEvent: DynamicTriggerEvents, withProperties: object): TimingList

	/**
	 * Returns any TimingList in the collection.
	 */
	anyItem(): TimingList

	/**
	 * Displays the number of elements in the TimingList.
	 */
	count(): number

	/**
	 * Returns every TimingList in the collection.
	 */
	everyItem(): TimingList[]

	/**
	 * Returns the first TimingList in the collection.
	 */
	firstItem(): TimingList

	/**
	 * Returns the TimingList with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TimingList

	/**
	 * Returns the TimingLists within the specified range.
	 * @param from The TimingList, index, or name at the beginning of the range.
	 * @param to The TimingList, index, or name at the end of the range.
	 */
	itemByRange(from: TimingList | number | string, to: TimingList | number | string): TimingList[]

	/**
	 * Returns the last TimingList in the collection.
	 */
	lastItem(): TimingList

	/**
	 * Returns the middle TimingList in the collection.
	 */
	middleItem(): TimingList

	/**
	 * Returns the TimingList whose index follows the specified TimingList in the collection.
	 * @param obj The TimingList whose index comes before the desired TimingList.
	 */
	nextItem(obj: TimingList): TimingList

	/**
	 * Returns the TimingList with the index previous to the specified index.
	 * @param obj The index of the TimingList that follows the desired TimingList.
	 */
	previousItem(obj: TimingList): TimingList

	/**
	 * Generates a string which, if executed, will return the TimingList.
	 */
	toSource(): string

}

/**
 * a timing group.
 */
declare class TimingGroup {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the TimingGroup within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the TimingGroup (a TimingList).
	 */
	parent: TimingList

	/**
	 * The placement of the timing group in the timing list.
	 */
	placement: number

	/**
	 * The number of times this timing group plays.
	 */
	plays: number

	/**
	 * Set to true if timing group loops.
	 */
	playsLoop: boolean

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of timing target.
	 */
	timingTargets: TimingTargets

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TimingGroup[]

	/**
	 * Moves the timing group or target to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: TimingGroup | TimingTarget | TimingList): TimingGroup

	/**
	 * Deletes the TimingGroup.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TimingGroup.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Unlink all targets in the group into separate groups in this timing list.
	 */
	unlink(): void

}

/**
 * A collection of timing data objects.
 */
declare class TimingGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TimingGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: TimingGroup

	/**
	 * Adds a new timing group.
	 * @param dynamicTarget A page item target that is an animation, media, or mso.
	 * @param delaySeconds The time delay in seconds for a target.
	 * @param withProperties Initial values for properties of the new TimingGroup
	 */
	add(dynamicTarget: PageItem | Graphic | Behavior | MediaItem, delaySeconds?: number, withProperties?: object): TimingGroup

	/**
	 * Returns any TimingGroup in the collection.
	 */
	anyItem(): TimingGroup

	/**
	 * Displays the number of elements in the TimingGroup.
	 */
	count(): number

	/**
	 * Returns every TimingGroup in the collection.
	 */
	everyItem(): TimingGroup[]

	/**
	 * Returns the first TimingGroup in the collection.
	 */
	firstItem(): TimingGroup

	/**
	 * Returns the TimingGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TimingGroup

	/**
	 * Returns the TimingGroups within the specified range.
	 * @param from The TimingGroup, index, or name at the beginning of the range.
	 * @param to The TimingGroup, index, or name at the end of the range.
	 */
	itemByRange(from: TimingGroup | number | string, to: TimingGroup | number | string): TimingGroup[]

	/**
	 * Returns the last TimingGroup in the collection.
	 */
	lastItem(): TimingGroup

	/**
	 * Returns the middle TimingGroup in the collection.
	 */
	middleItem(): TimingGroup

	/**
	 * Returns the TimingGroup whose index follows the specified TimingGroup in the collection.
	 * @param obj The TimingGroup whose index comes before the desired TimingGroup.
	 */
	nextItem(obj: TimingGroup): TimingGroup

	/**
	 * Returns the TimingGroup with the index previous to the specified index.
	 * @param obj The index of the TimingGroup that follows the desired TimingGroup.
	 */
	previousItem(obj: TimingGroup): TimingGroup

	/**
	 * Generates a string which, if executed, will return the TimingGroup.
	 */
	toSource(): string

}

/**
 * a timing target.
 */
declare class TimingTarget {
	/**
	 * The time delay in seconds for a single target or a group of targets after the previoius group has finished.
	 */
	delaySeconds: number

	/**
	 * A page item target that is an animation, media, or mso.
	 */
	dynamicTarget: PageItem | Graphic | Behavior | MediaItem

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the TimingTarget within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the TimingTarget (a TimingGroup).
	 */
	parent: TimingGroup

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Set to true if reversing animation on rolloff. Valid only for self rolloff trigger event.
	 */
	reverseAnimation: boolean

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TimingTarget[]

	/**
	 * Moves the timing group or target to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: TimingGroup | TimingTarget | TimingList): TimingTarget

	/**
	 * Deletes the TimingTarget.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TimingTarget.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Unlink target from this group and append to the end of this timing list.
	 */
	unlink(): void

}

/**
 * A collection of timing target.
 */
declare class TimingTargets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TimingTarget with the specified index.
	 * @param index The index.
	 */
	[index: number]: TimingTarget

	/**
	 * Adds a new target item.
	 * @param dynamicTarget A page item target that is an animation, media, or mso.
	 * @param delaySeconds The time delay in seconds for a target.
	 * @param withProperties Initial values for properties of the new TimingTarget
	 */
	add(dynamicTarget: PageItem | Graphic | Behavior | MediaItem, delaySeconds?: number, withProperties?: object): TimingTarget

	/**
	 * Returns any TimingTarget in the collection.
	 */
	anyItem(): TimingTarget

	/**
	 * Displays the number of elements in the TimingTarget.
	 */
	count(): number

	/**
	 * Returns every TimingTarget in the collection.
	 */
	everyItem(): TimingTarget[]

	/**
	 * Returns the first TimingTarget in the collection.
	 */
	firstItem(): TimingTarget

	/**
	 * Returns the TimingTarget with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TimingTarget

	/**
	 * Returns the TimingTargets within the specified range.
	 * @param from The TimingTarget, index, or name at the beginning of the range.
	 * @param to The TimingTarget, index, or name at the end of the range.
	 */
	itemByRange(from: TimingTarget | number | string, to: TimingTarget | number | string): TimingTarget[]

	/**
	 * Returns the last TimingTarget in the collection.
	 */
	lastItem(): TimingTarget

	/**
	 * Returns the middle TimingTarget in the collection.
	 */
	middleItem(): TimingTarget

	/**
	 * Returns the TimingTarget whose index follows the specified TimingTarget in the collection.
	 * @param obj The TimingTarget whose index comes before the desired TimingTarget.
	 */
	nextItem(obj: TimingTarget): TimingTarget

	/**
	 * Returns the TimingTarget with the index previous to the specified index.
	 * @param obj The index of the TimingTarget that follows the desired TimingTarget.
	 */
	previousItem(obj: TimingTarget): TimingTarget

	/**
	 * Generates a string which, if executed, will return the TimingTarget.
	 */
	toSource(): string

}

/**
 * A layer.
 */
declare class Layer {
	/**
	 * Lists all graphics contained by the Layer.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the Layer.
	 */
	allPageItems: PageItem[]

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of guides.
	 */
	guides: Guides

	/**
	 * The unique ID of the Layer.
	 */
	id: number

	/**
	 * If true, text wrap settings applied to objects on the layer will not affect text on other layers when the layer is hidden.
	 */
	ignoreWrap: boolean

	/**
	 * The index of the Layer within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The color of the layer, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	layerColor: [number, number, number] | UIColors

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * If true, the guide positions on the layer are locked.
	 */
	lockGuides: boolean

	/**
	 * If true, the Layer is locked.
	 */
	locked: boolean

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The name of the Layer.
	 */
	name: string

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * The parent of the Layer (a Document).
	 */
	parent: Document

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * If true, the layer will print.
	 */
	printable: boolean

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, guides are visible on the layer.
	 */
	showGuides: boolean

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * If true, the Layer is visible.
	 */
	visible: boolean

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the Layer.
	 */
	duplicate(): Layer

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Layer[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Merges the layer with other layer(s).
	 * @param with_ The layer(s) with which to merge.
	 */
	merge(with_: Layer[]): Layer

	/**
	 * Moves the Layer to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	move(to: LocationOptions, reference: Layer): Layer

	/**
	 * Deletes the Layer.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Layer.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of layers.
 */
declare class Layers {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Layer with the specified index.
	 * @param index The index.
	 */
	[index: number]: Layer

	/**
	 * Creates a new Layer.
	 * @param withProperties Initial values for properties of the new Layer
	 */
	add(withProperties: object): Layer

	/**
	 * Returns any Layer in the collection.
	 */
	anyItem(): Layer

	/**
	 * Displays the number of elements in the Layer.
	 */
	count(): number

	/**
	 * Returns every Layer in the collection.
	 */
	everyItem(): Layer[]

	/**
	 * Returns the first Layer in the collection.
	 */
	firstItem(): Layer

	/**
	 * Returns the Layer with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Layer

	/**
	 * Returns the Layer with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Layer

	/**
	 * Returns the Layer with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Layer

	/**
	 * Returns the Layers within the specified range.
	 * @param from The Layer, index, or name at the beginning of the range.
	 * @param to The Layer, index, or name at the end of the range.
	 */
	itemByRange(from: Layer | number | string, to: Layer | number | string): Layer[]

	/**
	 * Returns the last Layer in the collection.
	 */
	lastItem(): Layer

	/**
	 * Returns the middle Layer in the collection.
	 */
	middleItem(): Layer

	/**
	 * Returns the Layer whose index follows the specified Layer in the collection.
	 * @param obj The Layer whose index comes before the desired Layer.
	 */
	nextItem(obj: Layer): Layer

	/**
	 * Returns the Layer with the index previous to the specified index.
	 * @param obj The index of the Layer that follows the desired Layer.
	 */
	previousItem(obj: Layer): Layer

	/**
	 * Generates a string which, if executed, will return the Layer.
	 */
	toSource(): string

}

/**
 * A spread.
 */
declare class Spread {
	/**
	 * Lists all graphics contained by the Spread.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the Spread.
	 */
	allPageItems: PageItem[]

	/**
	 * If true, guarantees that when pages are added to a spread it will contain a maximum of two pages. If false, allows pages to be added or moved into existing spreads. For override information, see preserve layout when shuffling.
	 */
	allowPageShuffle: boolean

	/**
	 * The master spread applied to the Spread.
	 */
	appliedMaster: MasterSpread | NothingEnum

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The transparency flattener preferences override for the spread.
	 */
	flattenerOverride: SpreadFlattenerLevel

	/**
	 * Flattener preference settings.
	 */
	flattenerPreferences: FlattenerPreference

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of guides.
	 */
	guides: Guides

	/**
	 * The unique ID of the Spread.
	 */
	id: number

	/**
	 * The IDML component name of the Spread.
	 */
	idmlComponentName: string

	/**
	 * The index of the Spread within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The name of the Spread; this is an alias to the Spread's label property.
	 */
	name: string

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * The direction of the page transition.
	 */
	pageTransitionDirection: PageTransitionDirectionOptions

	/**
	 * The duration of the page transition.
	 */
	pageTransitionDuration: PageTransitionDurationOptions

	/**
	 * The type of page transition.
	 */
	pageTransitionType: PageTransitionTypeOptions

	/**
	 * A collection of pages.
	 */
	pages: Pages

	/**
	 * The parent of the Spread (a Document).
	 */
	parent: Document

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, displays master page items on document pages in the spread.
	 */
	showMasterItems: boolean

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * The object timing settings.
	 */
	timingSettings: TimingSetting

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicate an object and place it into the target.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	contentPlace(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, placePoint?: (number | string)[], destinationLayer?: Layer, showingOptions?: boolean): any[]

	/**
	 * Creates multiple guides on all pages of the spread.
	 * @param numberOfRows The number of rows to create on each page.
	 * @param numberOfColumns The number of columns to create on each page.
	 * @param rowGutter The height of the gutter between rows.
	 * @param columnGutter The width of the gutter between columns.
	 * @param guideColor The color to make the guides, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 * @param fitMargins If true, the row height and column width are calculated based on the space within the page margins. If false, row height and column width are calculated based on the full page.
	 * @param removeExisting If true, removes existing guides when creating new ones.
	 * @param layer The layer on which to create the guides.
	 */
	createGuides(numberOfRows?: number, numberOfColumns?: number, rowGutter?: number | string, columnGutter?: number | string, guideColor?: [number, number, number] | UIColors, fitMargins?: boolean, removeExisting?: boolean, layer?: Layer): void

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void

	/**
	 * Duplicates the spread.
	 * @param to The location of the spread relative to the reference object or within the document.
	 * @param reference The reference object. Note: Required only when the to parameter specifies before or after.
	 */
	duplicate(to?: LocationOptions, reference?: Spread | Document | MasterSpread): any

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Spread[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the spread.
	 * @param to The location of the spread relative to the reference object or within the document.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to?: LocationOptions, reference?: Spread | Page | Document): Spread

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param autoflowing Whether to autoflow placed text
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean, autoflowing?: boolean, withProperties?: object): any[]

	/**
	 * Deprecated: Use contentPlace method. Original Description: Create a linked story and place it into the target.
	 * @param parentStory The story to place and link from.
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean): Story

	/**
	 * Places the XML element onto a page. If the place point is above an existing page item, place the XML element into the page item.
	 * @param using The XML element to place.
	 * @param placePoint The point at which to place the object, specified in the format [x, y].
	 * @param autoflowing If true, autoflows placed text.
	 */
	placeXML(using: XMLElement, placePoint: (number | string)[], autoflowing?: boolean): PageItem

	/**
	 * Deletes the Spread.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Spread in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Replaces the content of XML element with content imported from a file.
	 * @param using The file path to the import file.
	 * @param relativeBasePath Base path used to resolve relative paths.
	 */
	setContent(using: string, relativeBasePath: string): PageItem

	/**
	 * Generates a string which, if executed, will return the Spread.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Transform the page item.
	 * @param in_ The coordinate space to use
	 * @param from The temporary origin during the transformation. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param withMatrix Transform matrix.
	 * @param replacingCurrent Transform components to consider; providing this optional parameter causes the target's existing transform components to be replaced with new values.Without this parameter, the given matrix is concatenated onto the target's existing transform combining the effect of the two.
	 * @param consideringRulerUnits If true then a ruler based origin is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	transform(in_: CoordinateSpaces, from: any, withMatrix: [number, number, number, number, number, number] | TransformationMatrix, replacingCurrent: MatrixContent | MatrixContent[] | number, consideringRulerUnits?: boolean): void

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[]

}

/**
 * A collection of spreads.
 */
declare class Spreads {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Spread with the specified index.
	 * @param index The index.
	 */
	[index: number]: Spread

	/**
	 * Creates a new spread.
	 * @param at The location of the spread relative to the reference object or within the document.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new Spread
	 */
	add(at?: LocationOptions, reference?: Spread | Document, withProperties?: object): Spread

	/**
	 * Returns any Spread in the collection.
	 */
	anyItem(): Spread

	/**
	 * Displays the number of elements in the Spread.
	 */
	count(): number

	/**
	 * Returns every Spread in the collection.
	 */
	everyItem(): Spread[]

	/**
	 * Returns the first Spread in the collection.
	 */
	firstItem(): Spread

	/**
	 * Returns the Spread with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Spread

	/**
	 * Returns the Spread with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Spread

	/**
	 * Returns the Spread with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Spread

	/**
	 * Returns the Spreads within the specified range.
	 * @param from The Spread, index, or name at the beginning of the range.
	 * @param to The Spread, index, or name at the end of the range.
	 */
	itemByRange(from: Spread | number | string, to: Spread | number | string): Spread[]

	/**
	 * Returns the last Spread in the collection.
	 */
	lastItem(): Spread

	/**
	 * Returns the middle Spread in the collection.
	 */
	middleItem(): Spread

	/**
	 * Returns the Spread whose index follows the specified Spread in the collection.
	 * @param obj The Spread whose index comes before the desired Spread.
	 */
	nextItem(obj: Spread): Spread

	/**
	 * Returns the Spread with the index previous to the specified index.
	 * @param obj The index of the Spread that follows the desired Spread.
	 */
	previousItem(obj: Spread): Spread

	/**
	 * Generates a string which, if executed, will return the Spread.
	 */
	toSource(): string

}

/**
 * A page.
 */
declare class Page {
	/**
	 * Lists all graphics contained by the Page.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the Page.
	 */
	allPageItems: PageItem[]

	/**
	 * The alternate layout section to which the page belongs.
	 */
	appliedAlternateLayout: Section

	/**
	 * The master spread applied to the Page.
	 */
	appliedMaster: MasterSpread | NothingEnum

	/**
	 * The section to which the page belongs.
	 */
	appliedSection: Section

	/**
	 * The trap preset applied to the page.
	 */
	appliedTrapPreset: TrapPreset | string

	/**
	 * The bounds of the Page, in the format [y1, x1, y2, x2].
	 */
	bounds: (number | string)[]

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * The sequential number of the page within the document.
	 */
	documentOffset: number

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * Default grid properties. Note: Applies to named, layout, and frame (story) grids.
	 */
	gridData: GridDataInformation

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of guides.
	 */
	guides: Guides

	/**
	 * The unique ID of the Page.
	 */
	id: number

	/**
	 * The index of the Page within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * layout rule
	 */
	layoutRule: LayoutRuleOptions

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * Margin preference settings.
	 */
	marginPreferences: MarginPreference

	/**
	 * The items on a specified document page that originated on the applied master page and have not been overridden or detached.
	 */
	masterPageItems: PageItem[] | Guides | Graphics | Movies | Sounds

	/**
	 * The transform applied to the master page before it is applied to Page.
	 */
	masterPageTransform: TransformationMatrix

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The name of the Page.
	 */
	name: string

	/**
	 * optional page for HTML5 pagination. Obsolete after CS6
	 */
	optionalPage: boolean

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The color label of the Page, specified either asan array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	pageColor: [number, number, number] | UIColors | PageColorOptions

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * The parent of the Page (a Spread or MasterSpread).
	 */
	parent: any

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * The side of the binding spine on which to place the page within the spread.
	 */
	side: PageSideOptions

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * snapshot blending mode
	 */
	snapshotBlendingMode: SnapshotBlendingModes

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * The order in which the focus moves to different form fields in the PDF when the tab key is pressed.
	 */
	tabOrder: Button[] | CheckBoxes | ComboBoxes | ListBoxes | RadioButtons | TextBoxes | SignatureFields

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Adjust the existing layout according to new page size, bleed and margin values. The first parameter is a plain object with key value pairs for properties affected. Permissible keys are width, height, bleedInside, bleedTop, bleedOutside, bleedBottom, leftMargin, topMargin, rightMargin, bottomMargin. The values can be specified as decimal numbers in units of Pt or as a string having a measurement value such as '1 in'. Not all properties need to be specified, only the values that need updation. Notice that when dealing with individual pages rather than the whole document, bleed changes has no effect. E.g. - app.activeDocument.adjustLayout({width:'600px', leftMargin: '1in'}), app.activeDocument.adjustLayout({rightMargin:'1in'}, app.activeDocument.spreads[0].pages), app.activeDocument.spreads[0].pages[0].adjustLayout({width:'400px', leftMargin: '10px'})
	 * @param adoptTo Change values - see functin definition for details
	 * @param affectedPages The collection of Page objects to affect . Has no effect if function is called from Page (Optional)
	 */
	adjustLayout(adoptTo: object, affectedPages: Page[]): void

	/**
	 * Duplicate an object and place it into the target.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	contentPlace(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, placePoint?: (number | string)[], destinationLayer?: Layer, showingOptions?: boolean): any[]

	/**
	 * Delete all layout snapshots for this Page.
	 */
	deleteAllLayoutSnapshots(): void

	/**
	 * Delete the snapshot of the layout for the current Page size and shape.
	 */
	deleteLayoutSnapshot(): void

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void

	/**
	 * Duplicates the page.
	 * @param to The location at which to place the duplicate page relative to the reference object or within the document or spread.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	duplicate(to?: LocationOptions, reference?: Page | Spread): Page

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Page[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the page.
	 * @param to The new location of the page relative to the reference object or within the document or spread.
	 * @param reference The reference object. Note: Required when the to parameter value specifies before or after.
	 * @param binding The location of the binding spine in spreads.
	 */
	move(to?: LocationOptions, reference?: Page | Spread, binding?: BindingOptions): Page

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param autoflowing Whether to autoflow placed text
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean, autoflowing?: boolean, withProperties?: object): any[]

	/**
	 * Deprecated: Use contentPlace method. Original Description: Create a linked story and place it into the target.
	 * @param parentStory The story to place and link from.
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean): Story

	/**
	 * Places the XML element onto a page. If the place point is above an existing page item, place the XML element into the page item.
	 * @param using The XML element to place.
	 * @param placePoint The point at which to place the object, specified in the format [x, y].
	 * @param autoflowing If true, autoflows placed text.
	 */
	placeXML(using: XMLElement, placePoint: (number | string)[], autoflowing?: boolean): PageItem

	/**
	 * Move the bounding box of the page item
	 * @param in_ The bounding box to resize. Can accept: CoordinateSpaces enumerator or Ordered array containing coordinateSpace:CoordinateSpaces enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param opposingCorners Opposing corners of new bounding box in the given coordinate space
	 */
	reframe(in_: any, opposingCorners: any[]): void

	/**
	 * Deletes the Page.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void

	/**
	 * Resize the page item.
	 * @param in_ The bounding box to resize. Can accept: CoordinateSpaces enumerator, BoundingBoxLimits enumerator or Ordered array containing coordinateSpace:CoordinateSpaces enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param from The transform origin. Legal specifications: relative to bounding box: anchor | {anchor | {x,y}, bounds kind [, coordinate space]}; relative to coordinate space: {x,y} | {{x,y}[, coordinate space]}; relative to layout window ruler: {{x,y}, page index | bounds kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param by How the current dimensions are affected by the given values
	 * @param values The width and height values. Legal dimensions specifications: {x, y [, coordinate space]}, {x, resize constraint [, coordinate space]}, or {resize constraint, y [, coordinate space]}; where x and y are real numbers and coordinate space is used to determine _only_ the unit of length for x and y; coordinate space is ignored for the 'current dimensions times' resize method).
	 * @param resizeIndividually If false and multiple page items are targeted, the new dimensions are attained only by moving the individual items rather than resizing them.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resize(in_: any, from: any, by: ResizeMethods, values: number[] | ResizeConstraints | CoordinateSpaces, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Page in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Replaces the content of XML element with content imported from a file.
	 * @param using The file path to the import file.
	 * @param relativeBasePath Base path used to resolve relative paths.
	 */
	setContent(using: string, relativeBasePath: string): PageItem

	/**
	 * Create a snapshot of the layout for the current Page size and shape.
	 */
	snapshotCurrentLayout(): void

	/**
	 * Generates a string which, if executed, will return the Page.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Transform the page item.
	 * @param in_ The coordinate space to use
	 * @param from The temporary origin during the transformation. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param withMatrix Transform matrix.
	 * @param replacingCurrent Transform components to consider; providing this optional parameter causes the target's existing transform components to be replaced with new values.Without this parameter, the given matrix is concatenated onto the target's existing transform combining the effect of the two.
	 * @param consideringRulerUnits If true then a ruler based origin is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	transform(in_: CoordinateSpaces, from: any, withMatrix: [number, number, number, number, number, number] | TransformationMatrix, replacingCurrent: MatrixContent | MatrixContent[] | number, consideringRulerUnits?: boolean): void

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[]

}

/**
 * A collection of pages.
 */
declare class Pages {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Page with the specified index.
	 * @param index The index.
	 */
	[index: number]: Page

	/**
	 * Creates a new page.
	 * @param at The location of the new page relative to the reference object or within the document or spread.
	 * @param reference The reference object. Note: Required when the at parameter value specifies before or after.
	 * @param withProperties Initial values for properties of the new Page
	 */
	add(at?: LocationOptions, reference?: Page | Spread | MasterSpread | Document, withProperties?: object): Page

	/**
	 * Returns any Page in the collection.
	 */
	anyItem(): Page

	/**
	 * Displays the number of elements in the Page.
	 */
	count(): number

	/**
	 * Returns every Page in the collection.
	 */
	everyItem(): Page[]

	/**
	 * Returns the first Page in the collection.
	 */
	firstItem(): Page

	/**
	 * Returns the Page with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Page

	/**
	 * Returns the Page with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Page

	/**
	 * Returns the Page with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Page

	/**
	 * Returns the Pages within the specified range.
	 * @param from The Page, index, or name at the beginning of the range.
	 * @param to The Page, index, or name at the end of the range.
	 */
	itemByRange(from: Page | number | string, to: Page | number | string): Page[]

	/**
	 * Returns the last Page in the collection.
	 */
	lastItem(): Page

	/**
	 * Returns the middle Page in the collection.
	 */
	middleItem(): Page

	/**
	 * Returns the Page whose index follows the specified Page in the collection.
	 * @param obj The Page whose index comes before the desired Page.
	 */
	nextItem(obj: Page): Page

	/**
	 * Returns the Page with the index previous to the specified index.
	 * @param obj The index of the Page that follows the desired Page.
	 */
	previousItem(obj: Page): Page

	/**
	 * Generates a string which, if executed, will return the Page.
	 */
	toSource(): string

}

/**
 * A master spread.
 */
declare class MasterSpread {
	/**
	 * Lists all graphics contained by the MasterSpread.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the MasterSpread.
	 */
	allPageItems: PageItem[]

	/**
	 * The master spread applied to the MasterSpread.
	 */
	appliedMaster: MasterSpread | NothingEnum

	/**
	 * The name of the master spread.
	 */
	baseName: string

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of guides.
	 */
	guides: Guides

	/**
	 * The unique ID of the MasterSpread.
	 */
	id: number

	/**
	 * The IDML component name of the MasterSpread.
	 */
	idmlComponentName: string

	/**
	 * The index of the MasterSpread within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The name of the MasterSpread.
	 */
	name: string

	/**
	 * The prefix of the master spread name.
	 */
	namePrefix: string

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The color label of the MasterSpread, specified either asan array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	pageColor: [number, number, number] | UIColors | PageColorOptions

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of pages.
	 */
	pages: Pages

	/**
	 * The parent of the MasterSpread (a Document).
	 */
	parent: Document

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * The primary text frame through which text flows on the MasterSpread. Must be a text frame or a type on a path spline.
	 */
	primaryTextFrame: PageItem | NothingEnum

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, displays master page items on document pages in the spread.
	 */
	showMasterItems: boolean

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * The object timing settings.
	 */
	timingSettings: TimingSetting

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicate an object and place it into the target.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	contentPlace(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, placePoint?: (number | string)[], destinationLayer?: Layer, showingOptions?: boolean): any[]

	/**
	 * Creates multiple guides on all pages of the spread.
	 * @param numberOfRows The number of rows to create on each page.
	 * @param numberOfColumns The number of columns to create on each page.
	 * @param rowGutter The height of the gutter between rows.
	 * @param columnGutter The width of the gutter between columns.
	 * @param guideColor The color to make the guides, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 * @param fitMargins If true, the row height and column width are calculated based on the space within the page margins. If false, row height and column width are calculated based on the full page.
	 * @param removeExisting If true, removes existing guides when creating new ones.
	 * @param layer The layer on which to create the guides.
	 */
	createGuides(numberOfRows?: number, numberOfColumns?: number, rowGutter?: number | string, columnGutter?: number | string, guideColor?: [number, number, number] | UIColors, fitMargins?: boolean, removeExisting?: boolean, layer?: Layer): void

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void

	/**
	 * Duplicates the spread.
	 * @param to The location of the spread relative to the reference object or within the document.
	 * @param reference The reference object. Note: Required only when the to parameter specifies before or after.
	 */
	duplicate(to?: LocationOptions, reference?: MasterSpread | Document): any

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MasterSpread[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param autoflowing Whether to autoflow placed text
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean, autoflowing?: boolean, withProperties?: object): any[]

	/**
	 * Deprecated: Use contentPlace method. Original Description: Create a linked story and place it into the target.
	 * @param parentStory The story to place and link from.
	 * @param placePoint The point at which to place
	 * @param destinationLayer The layer on which to place
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, placePoint: (number | string)[], destinationLayer: Layer, showingOptions?: boolean): Story

	/**
	 * Deletes the MasterSpread.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the MasterSpread in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Generates a string which, if executed, will return the MasterSpread.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Transform the page item.
	 * @param in_ The coordinate space to use
	 * @param from The temporary origin during the transformation. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param withMatrix Transform matrix.
	 * @param replacingCurrent Transform components to consider; providing this optional parameter causes the target's existing transform components to be replaced with new values.Without this parameter, the given matrix is concatenated onto the target's existing transform combining the effect of the two.
	 * @param consideringRulerUnits If true then a ruler based origin is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	transform(in_: CoordinateSpaces, from: any, withMatrix: [number, number, number, number, number, number] | TransformationMatrix, replacingCurrent: MatrixContent | MatrixContent[] | number, consideringRulerUnits?: boolean): void

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[]

}

/**
 * A collection of master spreads.
 */
declare class MasterSpreads {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MasterSpread with the specified index.
	 * @param index The index.
	 */
	[index: number]: MasterSpread

	/**
	 * Creates a new master spread.
	 * @param pagesPerSpread The number of pages to include in the master spread.
	 * @param withProperties Initial values for properties of the new MasterSpread
	 */
	add(pagesPerSpread: number, withProperties: object): MasterSpread

	/**
	 * Returns any MasterSpread in the collection.
	 */
	anyItem(): MasterSpread

	/**
	 * Displays the number of elements in the MasterSpread.
	 */
	count(): number

	/**
	 * Returns every MasterSpread in the collection.
	 */
	everyItem(): MasterSpread[]

	/**
	 * Returns the first MasterSpread in the collection.
	 */
	firstItem(): MasterSpread

	/**
	 * Returns the MasterSpread with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MasterSpread

	/**
	 * Returns the MasterSpread with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MasterSpread

	/**
	 * Returns the MasterSpread with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MasterSpread

	/**
	 * Returns the MasterSpreads within the specified range.
	 * @param from The MasterSpread, index, or name at the beginning of the range.
	 * @param to The MasterSpread, index, or name at the end of the range.
	 */
	itemByRange(from: MasterSpread | number | string, to: MasterSpread | number | string): MasterSpread[]

	/**
	 * Returns the last MasterSpread in the collection.
	 */
	lastItem(): MasterSpread

	/**
	 * Returns the middle MasterSpread in the collection.
	 */
	middleItem(): MasterSpread

	/**
	 * Returns the MasterSpread whose index follows the specified MasterSpread in the collection.
	 * @param obj The MasterSpread whose index comes before the desired MasterSpread.
	 */
	nextItem(obj: MasterSpread): MasterSpread

	/**
	 * Returns the MasterSpread with the index previous to the specified index.
	 * @param obj The index of the MasterSpread that follows the desired MasterSpread.
	 */
	previousItem(obj: MasterSpread): MasterSpread

	/**
	 * Generates a string which, if executed, will return the MasterSpread.
	 */
	toSource(): string

}

/**
 * PDF attributes.
 */
declare class PDFAttribute extends Preference {
	/**
	 * The page number of the PDF document page to place.
	 */
	pageNumber: number

	/**
	 * The type of cropping to apply.
	 */
	pdfCrop: PDFCrop

	/**
	 * If true, the background of the PDF is transparent.
	 */
	transparentBackground: boolean

}

/**
 * An item on a page, including rectangles, ellipses, graphic lines, polygons, groups, text frames, and buttons.
 */
declare class PageItem {
	/**
	 * Dispatched after a PageItem is placed. This event bubbles. This event is not cancelable.
	 */
	AFTER_PLACE: string

	/**
	 * Dispatched before a PageItem is placed. This event bubbles. This event is cancelable.
	 */
	BEFORE_PLACE: string

	/**
	 * Indicates whether the PageItem has been flipped independently of its parent object and, if yes, the direction in which the PageItem was flipped.
	 */
	absoluteFlip: Flip

	/**
	 * The horizontal scale of the PageItem relative to its containing object.
	 */
	absoluteHorizontalScale: number

	/**
	 * The rotation angle of the PageItem relative to its containing object. (Range: -360 to 360)
	 */
	absoluteRotationAngle: number

	/**
	 * The skewing angle of the PageItem relative to its containing object. (Range: -360 to 360)
	 */
	absoluteShearAngle: number

	/**
	 * The vertical scale of the PageItem relative to its containing object.
	 */
	absoluteVerticalScale: number

	/**
	 * The list of all articles this page item is part of
	 */
	allArticles: Article[]

	/**
	 * Lists all graphics contained by the PageItem.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the PageItem.
	 */
	allPageItems: PageItem[]

	/**
	 * If true, the master page item can be overridden.
	 */
	allowOverrides: boolean

	/**
	 * The page item animation settings.
	 */
	animationSettings: AnimationSetting

	/**
	 * The object style applied to the PageItem.
	 */
	appliedObjectStyle: ObjectStyle

	/**
	 * The arrowhead alignment applied to the PageItem.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum

	/**
	 * The XML element associated with the PageItem.
	 */
	associatedXMLElement: XMLItem

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number | string

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number | string

	/**
	 * Transparency settings for the content of the PageItem.
	 */
	contentTransparencySettings: ContentTransparencySetting

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap

	/**
	 * The corner join applied to the PageItem.
	 */
	endJoin: EndJoin

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the PageItem. .
	 */
	fillColor: Swatch | string

	/**
	 * The percent of tint to use in the PageItem's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number

	/**
	 * Transparency settings for the fill applied to the PageItem.
	 */
	fillTransparencySettings: FillTransparencySetting

	/**
	 * The direction in which to flip the printed image.
	 */
	flip: Flip

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	gapTint: number

	/**
	 * The bounds of the PageItem excluding the stroke width, in the format [y1, x1, y2, x2], which give the coordinates of the top-left and bottom-right corners of the bounding box.
	 */
	geometricBounds: (number | string)[]

	/**
	 * The angle of a linear gradient applied to the fill of the PageItem. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the PageItem.
	 */
	gradientFillLength: number | string

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the PageItem, in the format [x, y].
	 */
	gradientFillStart: (number | string)[]

	/**
	 * The angle of a linear gradient applied to the stroke of the PageItem. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the PageItem.
	 */
	gradientStrokeLength: number | string

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the PageItem, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[]

	/**
	 * The left margin, width, and right margin constraints this item is subject to when using the object-based layout rule.
	 */
	horizontalLayoutConstraints: DimensionsConstraints[]

	/**
	 * The horizontal scaling applied to the PageItem.
	 */
	horizontalScale: number

	/**
	 * The unique ID of the PageItem.
	 */
	id: number

	/**
	 * The index of the PageItem within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The layer that the PageItem is on.
	 */
	itemLayer: Layer

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number

	/**
	 * The arrowhead applied to the start of the path.
	 */
	leftLineEnd: ArrowHead

	/**
	 * Linked Page Item options
	 */
	linkedPageItemOptions: LinkedPageItemOption

	/**
	 * Display performance options for the PageItem.
	 */
	localDisplaySetting: DisplaySettingOptions

	/**
	 * If true, the PageItem is locked.
	 */
	locked: boolean

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number

	/**
	 * The name of the PageItem.
	 */
	name: string

	/**
	 * If true, the PageItem does not print.
	 */
	nonprinting: boolean

	/**
	 * If true, the PageItem's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean

	/**
	 * If true, the PageItem's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean

	/**
	 * If true, the object originated on a master spread and was overridden. If false, the object either originated on a master spread and was not overridden, or the object did not originate on a master page.
	 */
	overridden: boolean

	/**
	 * An object that originated on a master page and has been overridden.
	 */
	overriddenMasterPageItem: PageItem | Guide | Graphic | Movie | Sound

	/**
	 * The parent of the PageItem (a XMLElement, ComboBox, ListBox, TextBox, SignatureField, Spread, MasterSpread, Polygon, GraphicLine, Rectangle, Oval, SplineItem, Group, State, Cell, Character, Sound, PlaceGun, Movie or Snippet).
	 */
	parent: any

	/**
	 * The page on which this page item appears.
	 */
	parentPage: Page

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead

	/**
	 * The rotatation angle of the PageItem. (Range: -360 to 360)
	 */
	rotationAngle: number

	/**
	 * The skewing angle applied to the PageItem. (Range: -360 to 360)
	 */
	shearAngle: number

	/**
	 * The stroke alignment applied to the PageItem.
	 */
	strokeAlignment: StrokeAlignment

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the PageItem.
	 */
	strokeColor: Swatch | string

	/**
	 * The corner adjustment applied to the PageItem.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment

	/**
	 * The dash and gap measurements that define the pattern of a custom dashed line. Define up to six values (in points) in the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: (number | string)[]

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number

	/**
	 * Transparency settings for the stroke.
	 */
	strokeTransparencySettings: StrokeTransparencySetting

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | string

	/**
	 * The weight (in points) to apply to the PageItem's stroke.
	 */
	strokeWeight: number | string

	/**
	 * The text wrap preference properties that define the default formatting for wrapping text around objects.
	 */
	textWrapPreferences: TextWrapPreference

	/**
	 * The object timing settings.
	 */
	timingSettings: TimingSetting

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	topLeftCornerRadius: number | string

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	topRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number | string

	/**
	 * Transparency settings.
	 */
	transparencySettings: TransparencySetting

	/**
	 * The top margin, height, and bottom margin constraints this item is subject to when using the object-based layout rule.
	 */
	verticalLayoutConstraints: DimensionsConstraints[]

	/**
	 * The vertical scaling applied to the PageItem.
	 */
	verticalScale: number

	/**
	 * If true, the PageItem is visible.
	 */
	visible: boolean

	/**
	 * The bounds of the PageItem including the stroke width, in the format [y1, x1, y2, x2], which give the coordinates of the top-left and bottom-right corners of the bounding box.
	 */
	visibleBounds: (number | string)[]

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Applies the specified object style.
	 * @param using The object style to apply.
	 * @param clearingOverrides If true, clears the PageItem's existing attributes before applying the style.
	 * @param clearingOverridesThroughRootObjectStyle If true, clears attributes and formatting applied to the PageItem that are not defined in the object style.
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void

	/**
	 * asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void

	/**
	 * Finds objects that match the find what value and replace the objects with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeObject(reverseOrder: boolean): PageItem[]

	/**
	 * Clear overrides for object style
	 */
	clearObjectStyleOverrides(): void

	/**
	 * Clears transformations from the PageItem. Transformations include rotation, scaling, flipping, fitting, and shearing.
	 */
	clearTransformations(): void

	/**
	 * Duplicate an object and place it into the target page item.
	 * @param pageItems One or more page items to place or load
	 * @param linkPageItems Whether to link pageItems in content placer (if true it will override link stories value)
	 * @param linkStories Whether to link stories in content placer (only applicable for single story, pageItem links will also be created in case of more than one item)
	 * @param mapStyles Whether to map styles in content placer
	 * @param showingOptions Whether to display the link options dialog
	 */
	contentPlace(pageItems: PageItem[], linkPageItems?: boolean, linkStories?: boolean, mapStyles?: boolean, showingOptions?: boolean): any[]

	/**
	 * Converts the PageItem to a different shape.
	 * @param given The PageItem's new shape.
	 * @param numberOfSides The number of sides for the resulting polygon. (Range: 3 to 100)
	 * @param insetPercentage The star inset percentage for the resulting polygon. (Range: 0.0 to 100.0)
	 * @param cornerRadius The corner radius of the resulting rectangle.
	 */
	convertShape(given: ConvertShapeOptions, numberOfSides: number, insetPercentage: number, cornerRadius: number | string): void

	/**
	 * Create Email QR Code on the page item or document
	 * @param emailAddress QR code Email Address
	 * @param subject QR code Email Subject
	 * @param body QR code Email Body Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param urlLink QR code Hyperlink URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create Plain Text QR Code on the page item
	 * @param plainText QR code Plain Text
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param cellNumber QR code Text Phone Number
	 * @param textMessage QR code Text Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create Business Card QR Code on the page item or load on document's placegun
	 * @param firstName QR code Business Card First Name
	 * @param lastName QR code Business Card Last Name
	 * @param jobTitle QR code Business Card Title
	 * @param cellPhone QR code Business Card Cell Phone Number
	 * @param phone QR code Business Card Phone Number
	 * @param email QR code Business Card Email Address
	 * @param organisation QR code Business Card Organisation
	 * @param streetAddress QR code Business Card Street Address
	 * @param city QR code Business Card City
	 * @param adrState QR code Business Card State
	 * @param country QR code Business Card Country
	 * @param postalCode QR code Business Card Postal Code
	 * @param website QR code Business Card URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new PageItem. Above parameters can also be passed as properties
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void

	/**
	 * Duplicates the PageItem at the specified location or offset.
	 * @param to The location of the new PageItem, specified in coordinates in the format [x, y].
	 * @param by Amount by which to offset the new PageItem from the original PageItem's position.
	 */
	duplicate(to: [number | string, number | string] | Spread | Page | Layer, by: (number | string)[]): PageItem

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Finds objects that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findObject(reverseOrder: boolean): PageItem[]

	/**
	 * Applies the specified fit option to content in a frame.
	 * @param given The fit option to use.
	 */
	fit(given: FitOptions): void

	/**
	 * Flips the PageItem.
	 * @param given The axis around which to flip the PageItem.
	 * @param around The point around which to flip the PageItem.
	 */
	flipItem(given: Flip, around: [number | string, number | string] | AnchorPoint): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PageItem[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Associates the page item with the specified XML element while preserving existing content.
	 * @param using The XML element.
	 */
	markup(using: XMLElement): void

	/**
	 * Moves the PageItem to a new location. Note: Either the 'to' or 'by' parameter is required; if both parameters are defined, only the to value is used.
	 * @param to The new location of the PageItem,in the format (x, y).
	 * @param by The amount (in measurement units) to move the PageItem relative to its current position, in the format (x, y).
	 */
	move(to: [number | string, number | string] | Spread | Page | Layer, by: (number | string)[]): void

	/**
	 * Overrides a master page item and places the item on the document page as a new object.
	 * @param destinationPage The document page that contains the master page item to override.
	 */
	override(destinationPage: Page): any

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: object): any[]

	/**
	 * Places XML content into the specified object. Note: Replaces any existing content.
	 * @param using The XML element whose content you want to place.
	 */
	placeXML(using: XMLElement): void

	/**
	 * Apply an item's scaling to its content if possible.
	 * @param to The scale factors to be left on the item.The default is {1.0, 1.0}.
	 */
	redefineScaling(to: number[]): void

	/**
	 * Move the bounding box of the page item
	 * @param in_ The bounding box to resize. Can accept: CoordinateSpaces enumerator or Ordered array containing coordinateSpace:CoordinateSpaces enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param opposingCorners Opposing corners of new bounding box in the given coordinate space
	 */
	reframe(in_: any, opposingCorners: any[]): void

	/**
	 * Deletes the PageItem.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void

	/**
	 * Resize the page item.
	 * @param in_ The bounding box to resize. Can accept: CoordinateSpaces enumerator, BoundingBoxLimits enumerator or Ordered array containing coordinateSpace:CoordinateSpaces enumerator, boundsKind:BoundingBoxLimits enumerator.
	 * @param from The transform origin. Legal specifications: relative to bounding box: anchor | {anchor | {x,y}, bounds kind [, coordinate space]}; relative to coordinate space: {x,y} | {{x,y}[, coordinate space]}; relative to layout window ruler: {{x,y}, page index | bounds kind}. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param by How the current dimensions are affected by the given values
	 * @param values The width and height values. Legal dimensions specifications: {x, y [, coordinate space]}, {x, resize constraint [, coordinate space]}, or {resize constraint, y [, coordinate space]}; where x and y are real numbers and coordinate space is used to determine _only_ the unit of length for x and y; coordinate space is ignored for the 'current dimensions times' resize method).
	 * @param resizeIndividually If false and multiple page items are targeted, the new dimensions are attained only by moving the individual items rather than resizing them.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resize(in_: any, from: any, by: ResizeMethods, values: number[] | ResizeConstraints | CoordinateSpaces, resizeIndividually?: boolean, consideringRulerUnits?: boolean): void

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the PageItem in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Stores the object in the specified library.
	 * @param using The library in which to store the object.
	 * @param withProperties Initial values for properties of the new PageItem
	 */
	store(using: Library, withProperties: object): Asset

	/**
	 * Generates a string which, if executed, will return the PageItem.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Transform the page item.
	 * @param in_ The coordinate space to use
	 * @param from The temporary origin during the transformation. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param withMatrix Transform matrix.
	 * @param replacingCurrent Transform components to consider; providing this optional parameter causes the target's existing transform components to be replaced with new values.Without this parameter, the given matrix is concatenated onto the target's existing transform combining the effect of the two.
	 * @param consideringRulerUnits If true then a ruler based origin is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	transform(in_: CoordinateSpaces, from: any, withMatrix: [number, number, number, number, number, number] | TransformationMatrix, replacingCurrent: MatrixContent | MatrixContent[] | number, consideringRulerUnits?: boolean): void

	/**
	 * Transforms the PageItem using the last transformation performed on any object. Transformations include moving, rotating, shearing, scaling, and flipping.
	 */
	transformAgain(): string[]

	/**
	 * Transforms the PageItem using the last transformation performed on any PageItem. Transformations include moving, rotating, shearing, scaling, and flipping.
	 */
	transformAgainIndividually(): string[]

	/**
	 * Transforms the PageItem using the last sequence of transform operations performed on any single object or performed at the same time on any group of objects. Transformations include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgain(): string[]

	/**
	 * Transforms the PageItem using the last sequence of transformations performed on any single object or performed at the same time on any group of objects. Transformations include moving, rotating, shearing, scaling, and flipping.
	 */
	transformSequenceAgainIndividually(): string[]

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[]

}

/**
 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
 */
declare class PageItems {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PageItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: PageItem

	/**
	 * Returns any PageItem in the collection.
	 */
	anyItem(): PageItem

	/**
	 * Displays the number of elements in the PageItem.
	 */
	count(): number

	/**
	 * Returns every PageItem in the collection.
	 */
	everyItem(): PageItem[]

	/**
	 * Returns the first PageItem in the collection.
	 */
	firstItem(): PageItem

	/**
	 * Returns the PageItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PageItem

	/**
	 * Returns the PageItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PageItem

	/**
	 * Returns the PageItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PageItem

	/**
	 * Returns the PageItems within the specified range.
	 * @param from The PageItem, index, or name at the beginning of the range.
	 * @param to The PageItem, index, or name at the end of the range.
	 */
	itemByRange(from: PageItem | number | string, to: PageItem | number | string): PageItem[]

	/**
	 * Returns the last PageItem in the collection.
	 */
	lastItem(): PageItem

	/**
	 * Returns the middle PageItem in the collection.
	 */
	middleItem(): PageItem

	/**
	 * Returns the PageItem whose index follows the specified PageItem in the collection.
	 * @param obj The PageItem whose index comes before the desired PageItem.
	 */
	nextItem(obj: PageItem): PageItem

	/**
	 * Returns the PageItem with the index previous to the specified index.
	 * @param obj The index of the PageItem that follows the desired PageItem.
	 */
	previousItem(obj: PageItem): PageItem

	/**
	 * Generates a string which, if executed, will return the PageItem.
	 */
	toSource(): string

}

/**
 * An ellipse.
 */
declare class Oval extends SplineItem {
	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	frameFittingOptions: FrameFittingOption

	/**
	 * Export options for InCopy INCX document format.
	 */
	incopyExportOptions: InCopyExportOption

	/**
	 * Title for this InCopy story.
	 */
	storyTitle: string

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void

}

/**
 * A collection of ellipses.
 */
declare class Ovals {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Oval with the specified index.
	 * @param index The index.
	 */
	[index: number]: Oval

	/**
	 * Creates a new Oval
	 * @param layer The layer on which to create the Oval.
	 * @param at The location at which to insert the Oval relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Oval
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Oval

	/**
	 * Returns any Oval in the collection.
	 */
	anyItem(): Oval

	/**
	 * Displays the number of elements in the Oval.
	 */
	count(): number

	/**
	 * Returns every Oval in the collection.
	 */
	everyItem(): Oval[]

	/**
	 * Returns the first Oval in the collection.
	 */
	firstItem(): Oval

	/**
	 * Returns the Oval with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Oval

	/**
	 * Returns the Oval with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Oval

	/**
	 * Returns the Oval with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Oval

	/**
	 * Returns the Ovals within the specified range.
	 * @param from The Oval, index, or name at the beginning of the range.
	 * @param to The Oval, index, or name at the end of the range.
	 */
	itemByRange(from: Oval | number | string, to: Oval | number | string): Oval[]

	/**
	 * Returns the last Oval in the collection.
	 */
	lastItem(): Oval

	/**
	 * Returns the middle Oval in the collection.
	 */
	middleItem(): Oval

	/**
	 * Returns the Oval whose index follows the specified Oval in the collection.
	 * @param obj The Oval whose index comes before the desired Oval.
	 */
	nextItem(obj: Oval): Oval

	/**
	 * Returns the Oval with the index previous to the specified index.
	 * @param obj The index of the Oval that follows the desired Oval.
	 */
	previousItem(obj: Oval): Oval

	/**
	 * Generates a string which, if executed, will return the Oval.
	 */
	toSource(): string

}

/**
 * A rectangle.
 */
declare class Rectangle extends SplineItem {
	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	frameFittingOptions: FrameFittingOption

	/**
	 * Export options for InCopy INCX document format.
	 */
	incopyExportOptions: InCopyExportOption

	/**
	 * Title for this InCopy story.
	 */
	storyTitle: string

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void

}

/**
 * A collection of rectangles.
 */
declare class Rectangles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Rectangle with the specified index.
	 * @param index The index.
	 */
	[index: number]: Rectangle

	/**
	 * Creates a new Rectangle
	 * @param layer The layer on which to create the Rectangle.
	 * @param at The location at which to insert the Rectangle relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Rectangle
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Rectangle

	/**
	 * Returns any Rectangle in the collection.
	 */
	anyItem(): Rectangle

	/**
	 * Displays the number of elements in the Rectangle.
	 */
	count(): number

	/**
	 * Returns every Rectangle in the collection.
	 */
	everyItem(): Rectangle[]

	/**
	 * Returns the first Rectangle in the collection.
	 */
	firstItem(): Rectangle

	/**
	 * Returns the Rectangle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Rectangle

	/**
	 * Returns the Rectangle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Rectangle

	/**
	 * Returns the Rectangle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Rectangle

	/**
	 * Returns the Rectangles within the specified range.
	 * @param from The Rectangle, index, or name at the beginning of the range.
	 * @param to The Rectangle, index, or name at the end of the range.
	 */
	itemByRange(from: Rectangle | number | string, to: Rectangle | number | string): Rectangle[]

	/**
	 * Returns the last Rectangle in the collection.
	 */
	lastItem(): Rectangle

	/**
	 * Returns the middle Rectangle in the collection.
	 */
	middleItem(): Rectangle

	/**
	 * Returns the Rectangle whose index follows the specified Rectangle in the collection.
	 * @param obj The Rectangle whose index comes before the desired Rectangle.
	 */
	nextItem(obj: Rectangle): Rectangle

	/**
	 * Returns the Rectangle with the index previous to the specified index.
	 * @param obj The index of the Rectangle that follows the desired Rectangle.
	 */
	previousItem(obj: Rectangle): Rectangle

	/**
	 * Generates a string which, if executed, will return the Rectangle.
	 */
	toSource(): string

}

/**
 * A straight line consisting of two points.
 */
declare class GraphicLine extends SplineItem {
}

/**
 * A collection of graphic lines.
 */
declare class GraphicLines {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GraphicLine with the specified index.
	 * @param index The index.
	 */
	[index: number]: GraphicLine

	/**
	 * Creates a new GraphicLine
	 * @param layer The layer on which to create the GraphicLine.
	 * @param at The location at which to insert the GraphicLine relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new GraphicLine
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): GraphicLine

	/**
	 * Returns any GraphicLine in the collection.
	 */
	anyItem(): GraphicLine

	/**
	 * Displays the number of elements in the GraphicLine.
	 */
	count(): number

	/**
	 * Returns every GraphicLine in the collection.
	 */
	everyItem(): GraphicLine[]

	/**
	 * Returns the first GraphicLine in the collection.
	 */
	firstItem(): GraphicLine

	/**
	 * Returns the GraphicLine with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GraphicLine

	/**
	 * Returns the GraphicLine with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GraphicLine

	/**
	 * Returns the GraphicLine with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GraphicLine

	/**
	 * Returns the GraphicLines within the specified range.
	 * @param from The GraphicLine, index, or name at the beginning of the range.
	 * @param to The GraphicLine, index, or name at the end of the range.
	 */
	itemByRange(from: GraphicLine | number | string, to: GraphicLine | number | string): GraphicLine[]

	/**
	 * Returns the last GraphicLine in the collection.
	 */
	lastItem(): GraphicLine

	/**
	 * Returns the middle GraphicLine in the collection.
	 */
	middleItem(): GraphicLine

	/**
	 * Returns the GraphicLine whose index follows the specified GraphicLine in the collection.
	 * @param obj The GraphicLine whose index comes before the desired GraphicLine.
	 */
	nextItem(obj: GraphicLine): GraphicLine

	/**
	 * Returns the GraphicLine with the index previous to the specified index.
	 * @param obj The index of the GraphicLine that follows the desired GraphicLine.
	 */
	previousItem(obj: GraphicLine): GraphicLine

	/**
	 * Generates a string which, if executed, will return the GraphicLine.
	 */
	toSource(): string

}

/**
 * A polygon. Any shape that is not a rectangle, ellipse, or graphic line. When you add a polygon, InDesign creates a regular polygon based on the current polygon preferences settings.
 */
declare class Polygon extends SplineItem {
	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	frameFittingOptions: FrameFittingOption

	/**
	 * Export options for InCopy INCX document format.
	 */
	incopyExportOptions: InCopyExportOption

	/**
	 * Title for this InCopy story.
	 */
	storyTitle: string

	/**
	 * Removes the frame fittings options and resets it to the initial state.
	 */
	clearFrameFittingOptions(): void

}

/**
 * A collection of polygons.
 */
declare class Polygons {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Polygon with the specified index.
	 * @param index The index.
	 */
	[index: number]: Polygon

	/**
	 * Creates a new Polygon.
	 * @param layer The layer on which to create the Polygon.
	 * @param numberOfSides The number of sides to give the Polygon. (Range: 3 to 100)
	 * @param insetPercentage The star inset percentage applied to the Polygon.
	 * @param at The location at which to insert the Polygon relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Polygon
	 */
	add(layer: Layer, numberOfSides: number, insetPercentage: number, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Polygon

	/**
	 * Returns any Polygon in the collection.
	 */
	anyItem(): Polygon

	/**
	 * Displays the number of elements in the Polygon.
	 */
	count(): number

	/**
	 * Returns every Polygon in the collection.
	 */
	everyItem(): Polygon[]

	/**
	 * Returns the first Polygon in the collection.
	 */
	firstItem(): Polygon

	/**
	 * Returns the Polygon with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Polygon

	/**
	 * Returns the Polygon with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Polygon

	/**
	 * Returns the Polygon with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Polygon

	/**
	 * Returns the Polygons within the specified range.
	 * @param from The Polygon, index, or name at the beginning of the range.
	 * @param to The Polygon, index, or name at the end of the range.
	 */
	itemByRange(from: Polygon | number | string, to: Polygon | number | string): Polygon[]

	/**
	 * Returns the last Polygon in the collection.
	 */
	lastItem(): Polygon

	/**
	 * Returns the middle Polygon in the collection.
	 */
	middleItem(): Polygon

	/**
	 * Returns the Polygon whose index follows the specified Polygon in the collection.
	 * @param obj The Polygon whose index comes before the desired Polygon.
	 */
	nextItem(obj: Polygon): Polygon

	/**
	 * Returns the Polygon with the index previous to the specified index.
	 * @param obj The index of the Polygon that follows the desired Polygon.
	 */
	previousItem(obj: Polygon): Polygon

	/**
	 * Generates a string which, if executed, will return the Polygon.
	 */
	toSource(): string

}

/**
 * A group.
 */
declare class Group extends PageItem {
	/**
	 * Anchored object settings.
	 */
	anchoredObjectSettings: AnchoredObjectSetting

	/**
	 * A collection of group items that are also part of an article.
	 */
	articleChildren: ArticleChildren

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * Export options for the object
	 */
	objectExportOptions: ObjectExportOption

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * Brings the Group forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the Group to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Sends the Group back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the Group to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

	/**
	 * Ungroups the group.
	 */
	ungroup(): void

}

/**
 * A collection of groups.
 */
declare class Groups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Group with the specified index.
	 * @param index The index.
	 */
	[index: number]: Group

	/**
	 * Creates a new Group.
	 * @param groupItems The objects to group.
	 * @param layer The layer on which to create the Group.
	 * @param at The location at which to insert the Group relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new Group
	 */
	add(groupItems: PageItem[], layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): Group

	/**
	 * Returns any Group in the collection.
	 */
	anyItem(): Group

	/**
	 * Displays the number of elements in the Group.
	 */
	count(): number

	/**
	 * Returns every Group in the collection.
	 */
	everyItem(): Group[]

	/**
	 * Returns the first Group in the collection.
	 */
	firstItem(): Group

	/**
	 * Returns the Group with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Group

	/**
	 * Returns the Group with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Group

	/**
	 * Returns the Group with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Group

	/**
	 * Returns the Groups within the specified range.
	 * @param from The Group, index, or name at the beginning of the range.
	 * @param to The Group, index, or name at the end of the range.
	 */
	itemByRange(from: Group | number | string, to: Group | number | string): Group[]

	/**
	 * Returns the last Group in the collection.
	 */
	lastItem(): Group

	/**
	 * Returns the middle Group in the collection.
	 */
	middleItem(): Group

	/**
	 * Returns the Group whose index follows the specified Group in the collection.
	 * @param obj The Group whose index comes before the desired Group.
	 */
	nextItem(obj: Group): Group

	/**
	 * Returns the Group with the index previous to the specified index.
	 * @param obj The index of the Group that follows the desired Group.
	 */
	previousItem(obj: Group): Group

	/**
	 * Generates a string which, if executed, will return the Group.
	 */
	toSource(): string

}

/**
 * An imported bitmap image in any bitmap file format (including TIFF, JPEG, or GIF).
 */
declare class Image extends Graphic {
	/**
	 * The native resolution of a placed graphic.
	 */
	actualPpi: number[]

	/**
	 * Clipping path settings.
	 */
	clippingPath: ClippingPathSettings

	/**
	 * The resolution of a graphic after it has been resized.
	 */
	effectivePpi: number[]

	/**
	 * Graphic layer option settings.
	 */
	graphicLayerOptions: GraphicLayerOption

	/**
	 * The image I/O preference properties that define preferences for importing images.
	 */
	imageIOPreferences: ImageIOPreference

	/**
	 * The rendering intent override applied to the image.
	 */
	imageRenderingIntent: RenderingIntent

	/**
	 * The color profile.
	 */
	profile: Profile | string

	/**
	 * A list of valid RGB profiles.
	 */
	profileList: string[]

	/**
	 * The color space.
	 */
	space: string

}

/**
 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
 */
declare class Images {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Image with the specified index.
	 * @param index The index.
	 */
	[index: number]: Image

	/**
	 * Returns any Image in the collection.
	 */
	anyItem(): Image

	/**
	 * Displays the number of elements in the Image.
	 */
	count(): number

	/**
	 * Returns every Image in the collection.
	 */
	everyItem(): Image[]

	/**
	 * Returns the first Image in the collection.
	 */
	firstItem(): Image

	/**
	 * Returns the Image with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Image

	/**
	 * Returns the Image with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Image

	/**
	 * Returns the Image with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Image

	/**
	 * Returns the Images within the specified range.
	 * @param from The Image, index, or name at the beginning of the range.
	 * @param to The Image, index, or name at the end of the range.
	 */
	itemByRange(from: Image | number | string, to: Image | number | string): Image[]

	/**
	 * Returns the last Image in the collection.
	 */
	lastItem(): Image

	/**
	 * Returns the middle Image in the collection.
	 */
	middleItem(): Image

	/**
	 * Returns the Image whose index follows the specified Image in the collection.
	 * @param obj The Image whose index comes before the desired Image.
	 */
	nextItem(obj: Image): Image

	/**
	 * Returns the Image with the index previous to the specified index.
	 * @param obj The index of the Image that follows the desired Image.
	 */
	previousItem(obj: Image): Image

	/**
	 * Generates a string which, if executed, will return the Image.
	 */
	toSource(): string

}

/**
 * A placed EPS file.
 */
declare class EPS extends Graphic {
	/**
	 * The native resolution of a placed graphic.
	 */
	actualPpi: number[]

	/**
	 * Clipping path settings.
	 */
	clippingPath: ClippingPathSettings

	/**
	 * The color profile policy for CMYK content in a placed vector.
	 */
	cmykVectorPolicy: PlacedVectorProfilePolicy

	/**
	 * The resolution of a graphic after it has been resized.
	 */
	effectivePpi: number[]

	/**
	 * The color profile policy for grayscale content in a placed vector.
	 */
	grayVectorPolicy: PlacedVectorProfilePolicy

	/**
	 * The color profile policy for RGB content in a placed vector.
	 */
	rgbVectorPolicy: PlacedVectorProfilePolicy

	/**
	 * The color space.
	 */
	space: string

}

/**
 * A collection of EPS files.
 */
declare class EPSs {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the EPS with the specified index.
	 * @param index The index.
	 */
	[index: number]: EPS

	/**
	 * Returns any EPS in the collection.
	 */
	anyItem(): EPS

	/**
	 * Displays the number of elements in the EPS.
	 */
	count(): number

	/**
	 * Returns every EPS in the collection.
	 */
	everyItem(): EPS[]

	/**
	 * Returns the first EPS in the collection.
	 */
	firstItem(): EPS

	/**
	 * Returns the EPS with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EPS

	/**
	 * Returns the EPS with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EPS

	/**
	 * Returns the EPS with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EPS

	/**
	 * Returns the EPSs within the specified range.
	 * @param from The EPS, index, or name at the beginning of the range.
	 * @param to The EPS, index, or name at the end of the range.
	 */
	itemByRange(from: EPS | number | string, to: EPS | number | string): EPS[]

	/**
	 * Returns the last EPS in the collection.
	 */
	lastItem(): EPS

	/**
	 * Returns the middle EPS in the collection.
	 */
	middleItem(): EPS

	/**
	 * Returns the EPS whose index follows the specified EPS in the collection.
	 * @param obj The EPS whose index comes before the desired EPS.
	 */
	nextItem(obj: EPS): EPS

	/**
	 * Returns the EPS with the index previous to the specified index.
	 * @param obj The index of the EPS that follows the desired EPS.
	 */
	previousItem(obj: EPS): EPS

	/**
	 * Generates a string which, if executed, will return the EPS.
	 */
	toSource(): string

}

/**
 * A placed PDF file.
 */
declare class PDF extends Graphic {
	/**
	 * Clipping path settings.
	 */
	clippingPath: ClippingPathSettings

	/**
	 * The color profile policy for CMYK content in a placed vector.
	 */
	cmykVectorPolicy: PlacedVectorProfilePolicy

	/**
	 * Graphic layer option settings.
	 */
	graphicLayerOptions: GraphicLayerOption

	/**
	 * The color profile policy for grayscale content in a placed vector.
	 */
	grayVectorPolicy: PlacedVectorProfilePolicy

	/**
	 * PDF attribute settings.
	 */
	pdfAttributes: PDFAttribute

	/**
	 * The color profile policy for RGB content in a placed vector.
	 */
	rgbVectorPolicy: PlacedVectorProfilePolicy

}

/**
 * A collection of PDF files.
 */
declare class PDFs {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PDF with the specified index.
	 * @param index The index.
	 */
	[index: number]: PDF

	/**
	 * Returns any PDF in the collection.
	 */
	anyItem(): PDF

	/**
	 * Displays the number of elements in the PDF.
	 */
	count(): number

	/**
	 * Returns every PDF in the collection.
	 */
	everyItem(): PDF[]

	/**
	 * Returns the first PDF in the collection.
	 */
	firstItem(): PDF

	/**
	 * Returns the PDF with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PDF

	/**
	 * Returns the PDF with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PDF

	/**
	 * Returns the PDF with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PDF

	/**
	 * Returns the PDFs within the specified range.
	 * @param from The PDF, index, or name at the beginning of the range.
	 * @param to The PDF, index, or name at the end of the range.
	 */
	itemByRange(from: PDF | number | string, to: PDF | number | string): PDF[]

	/**
	 * Returns the last PDF in the collection.
	 */
	lastItem(): PDF

	/**
	 * Returns the middle PDF in the collection.
	 */
	middleItem(): PDF

	/**
	 * Returns the PDF whose index follows the specified PDF in the collection.
	 * @param obj The PDF whose index comes before the desired PDF.
	 */
	nextItem(obj: PDF): PDF

	/**
	 * Returns the PDF with the index previous to the specified index.
	 * @param obj The index of the PDF that follows the desired PDF.
	 */
	previousItem(obj: PDF): PDF

	/**
	 * Generates a string which, if executed, will return the PDF.
	 */
	toSource(): string

}

/**
 * A placed WMF graphic.
 */
declare class WMF extends Graphic {
	/**
	 * Clipping path settings.
	 */
	clippingPath: ClippingPathSettings

}

/**
 * A collection of WMF graphics.
 */
declare class WMFs {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the WMF with the specified index.
	 * @param index The index.
	 */
	[index: number]: WMF

	/**
	 * Returns any WMF in the collection.
	 */
	anyItem(): WMF

	/**
	 * Displays the number of elements in the WMF.
	 */
	count(): number

	/**
	 * Returns every WMF in the collection.
	 */
	everyItem(): WMF[]

	/**
	 * Returns the first WMF in the collection.
	 */
	firstItem(): WMF

	/**
	 * Returns the WMF with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): WMF

	/**
	 * Returns the WMF with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): WMF

	/**
	 * Returns the WMF with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): WMF

	/**
	 * Returns the WMFs within the specified range.
	 * @param from The WMF, index, or name at the beginning of the range.
	 * @param to The WMF, index, or name at the end of the range.
	 */
	itemByRange(from: WMF | number | string, to: WMF | number | string): WMF[]

	/**
	 * Returns the last WMF in the collection.
	 */
	lastItem(): WMF

	/**
	 * Returns the middle WMF in the collection.
	 */
	middleItem(): WMF

	/**
	 * Returns the WMF whose index follows the specified WMF in the collection.
	 * @param obj The WMF whose index comes before the desired WMF.
	 */
	nextItem(obj: WMF): WMF

	/**
	 * Returns the WMF with the index previous to the specified index.
	 * @param obj The index of the WMF that follows the desired WMF.
	 */
	previousItem(obj: WMF): WMF

	/**
	 * Generates a string which, if executed, will return the WMF.
	 */
	toSource(): string

}

/**
 * A placed PICT graphic.
 */
declare class PICT extends Graphic {
	/**
	 * Clipping path settings.
	 */
	clippingPath: ClippingPathSettings

}

/**
 * A collection of PICT graphics.
 */
declare class PICTs {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PICT with the specified index.
	 * @param index The index.
	 */
	[index: number]: PICT

	/**
	 * Returns any PICT in the collection.
	 */
	anyItem(): PICT

	/**
	 * Displays the number of elements in the PICT.
	 */
	count(): number

	/**
	 * Returns every PICT in the collection.
	 */
	everyItem(): PICT[]

	/**
	 * Returns the first PICT in the collection.
	 */
	firstItem(): PICT

	/**
	 * Returns the PICT with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PICT

	/**
	 * Returns the PICT with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PICT

	/**
	 * Returns the PICT with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PICT

	/**
	 * Returns the PICTs within the specified range.
	 * @param from The PICT, index, or name at the beginning of the range.
	 * @param to The PICT, index, or name at the end of the range.
	 */
	itemByRange(from: PICT | number | string, to: PICT | number | string): PICT[]

	/**
	 * Returns the last PICT in the collection.
	 */
	lastItem(): PICT

	/**
	 * Returns the middle PICT in the collection.
	 */
	middleItem(): PICT

	/**
	 * Returns the PICT whose index follows the specified PICT in the collection.
	 * @param obj The PICT whose index comes before the desired PICT.
	 */
	nextItem(obj: PICT): PICT

	/**
	 * Returns the PICT with the index previous to the specified index.
	 * @param obj The index of the PICT that follows the desired PICT.
	 */
	previousItem(obj: PICT): PICT

	/**
	 * Generates a string which, if executed, will return the PICT.
	 */
	toSource(): string

}

/**
 * An imported graphic in any graphic file format (including vector, metafile, and bitmap formats).
 */
declare class Graphic extends PageItem {
	/**
	 * The type of the image.
	 */
	imageTypeName: string

	/**
	 * The source file of the link.
	 */
	itemLink: Link

	/**
	 * Exports the Graphic for the web.
	 * @param to The full path name of the exported file.
	 */
	exportForWeb(to: File): string[]

}

/**
 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
 */
declare class Graphics {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Graphic with the specified index.
	 * @param index The index.
	 */
	[index: number]: Graphic

	/**
	 * Returns any Graphic in the collection.
	 */
	anyItem(): Graphic

	/**
	 * Displays the number of elements in the Graphic.
	 */
	count(): number

	/**
	 * Returns every Graphic in the collection.
	 */
	everyItem(): Graphic[]

	/**
	 * Returns the first Graphic in the collection.
	 */
	firstItem(): Graphic

	/**
	 * Returns the Graphic with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Graphic

	/**
	 * Returns the Graphic with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Graphic

	/**
	 * Returns the Graphic with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Graphic

	/**
	 * Returns the Graphics within the specified range.
	 * @param from The Graphic, index, or name at the beginning of the range.
	 * @param to The Graphic, index, or name at the end of the range.
	 */
	itemByRange(from: Graphic | number | string, to: Graphic | number | string): Graphic[]

	/**
	 * Returns the last Graphic in the collection.
	 */
	lastItem(): Graphic

	/**
	 * Returns the middle Graphic in the collection.
	 */
	middleItem(): Graphic

	/**
	 * Returns the Graphic whose index follows the specified Graphic in the collection.
	 * @param obj The Graphic whose index comes before the desired Graphic.
	 */
	nextItem(obj: Graphic): Graphic

	/**
	 * Returns the Graphic with the index previous to the specified index.
	 * @param obj The index of the Graphic that follows the desired Graphic.
	 */
	previousItem(obj: Graphic): Graphic

	/**
	 * Generates a string which, if executed, will return the Graphic.
	 */
	toSource(): string

}

/**
 * A transformation matrix.
 */
declare class TransformationMatrix {
	/**
	 * The shear angle of the transformation matrix.
	 */
	clockwiseShearAngle: number

	/**
	 * The rotation angle of the transformation matrix.
	 */
	counterclockwiseRotationAngle: number

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The horizontal scale factor of the transformation matrix.
	 */
	horizontalScaleFactor: number

	/**
	 * The horizontal translation of the transformation matrix.
	 */
	horizontalTranslation: number

	/**
	 * The index of the TransformationMatrix within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The mapping the transformation matrix performs on the unit triangle. Can return: Array of Array of 2 Arrays of 2 Reals.
	 */
	matrixMapping: any[]

	/**
	 * The values of the transformation matrix.
	 */
	matrixValues: number[]

	/**
	 * The name of the TransformationMatrix.
	 */
	name: string

	/**
	 * The parent of the TransformationMatrix (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The vertical scale factor of the transformation matrix.
	 */
	verticalScaleFactor: number

	/**
	 * The vertical translation of the transformation matrix.
	 */
	verticalTranslation: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Multiply the transformation matrix by another.
	 * @param withMatrix The right hand matrix factor
	 */
	catenateMatrix(withMatrix: TransformationMatrix): TransformationMatrix

	/**
	 * Multiply the point by the matrix.
	 * @param point The point to transform
	 */
	changeCoordinates(point: number[]): number[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TransformationMatrix[]

	/**
	 * Invert the transformation matrix.
	 */
	invertMatrix(): TransformationMatrix

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Rotate the transformation matrix.
	 * @param byAngle The counterclockwise rotation angle
	 * @param byCosine The cosine of the desired rotation
	 * @param bySine The sine of the desired rotation
	 */
	rotateMatrix(byAngle: number, byCosine: number, bySine: number): TransformationMatrix

	/**
	 * Scale the transformation matrix.
	 * @param horizontallyBy The horizontal scale factor
	 * @param verticallyBy The vertical scale factor
	 */
	scaleMatrix(horizontallyBy: number, verticallyBy: number): TransformationMatrix

	/**
	 * Shear the transformation matrix.
	 * @param byAngle The horizontal shear angle
	 * @param bySlope The horizontal shear slope
	 */
	shearMatrix(byAngle: number, bySlope: number): TransformationMatrix

	/**
	 * Generates a string which, if executed, will return the TransformationMatrix.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Translate the transformation matrix.
	 * @param horizontallyBy The horizontal translation distance
	 * @param verticallyBy The vertical translation distance
	 */
	translateMatrix(horizontallyBy: number, verticallyBy: number): TransformationMatrix

}

/**
 * A collection of transformation matrices.
 */
declare class TransformationMatrices {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TransformationMatrix with the specified index.
	 * @param index The index.
	 */
	[index: number]: TransformationMatrix

	/**
	 * Create a new TransformationMatrix.
	 * @param horizontalScaleFactor The horizontal scale factor of the transformation matrix
	 * @param verticalScaleFactor The vertical scale factor of the transformation matrix
	 * @param clockwiseShearAngle The shear angle of the transformation matrix
	 * @param counterclockwiseRotationAngle The rotation angle of the transformation matrix
	 * @param horizontalTranslation The horizontal translation of the transformation matrix
	 * @param verticalTranslation The vertical translation of the transformation matrix
	 * @param matrixValues The values of the transformation matrix
	 * @param matrixMapping The mapping the transformation matrix performs on the unit triangle. Can accept: Array of Array of 2 Arrays of 2 Reals.
	 * @param withProperties Initial values for properties of the new TransformationMatrix
	 */
	add(horizontalScaleFactor: number, verticalScaleFactor: number, clockwiseShearAngle: number, counterclockwiseRotationAngle: number, horizontalTranslation: number, verticalTranslation: number, matrixValues: number[], matrixMapping: any[], withProperties: object): TransformationMatrix

	/**
	 * Returns any TransformationMatrix in the collection.
	 */
	anyItem(): TransformationMatrix

	/**
	 * Displays the number of elements in the TransformationMatrix.
	 */
	count(): number

	/**
	 * Returns every TransformationMatrix in the collection.
	 */
	everyItem(): TransformationMatrix[]

	/**
	 * Returns the first TransformationMatrix in the collection.
	 */
	firstItem(): TransformationMatrix

	/**
	 * Returns the TransformationMatrix with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TransformationMatrix

	/**
	 * Returns the TransformationMatrix with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TransformationMatrix

	/**
	 * Returns the TransformationMatrices within the specified range.
	 * @param from The TransformationMatrix, index, or name at the beginning of the range.
	 * @param to The TransformationMatrix, index, or name at the end of the range.
	 */
	itemByRange(from: TransformationMatrix | number | string, to: TransformationMatrix | number | string): TransformationMatrix[]

	/**
	 * Returns the last TransformationMatrix in the collection.
	 */
	lastItem(): TransformationMatrix

	/**
	 * Returns the middle TransformationMatrix in the collection.
	 */
	middleItem(): TransformationMatrix

	/**
	 * Returns the TransformationMatrix whose index follows the specified TransformationMatrix in the collection.
	 * @param obj The TransformationMatrix whose index comes before the desired TransformationMatrix.
	 */
	nextItem(obj: TransformationMatrix): TransformationMatrix

	/**
	 * Returns the TransformationMatrix with the index previous to the specified index.
	 * @param obj The index of the TransformationMatrix that follows the desired TransformationMatrix.
	 */
	previousItem(obj: TransformationMatrix): TransformationMatrix

	/**
	 * Generates a string which, if executed, will return the TransformationMatrix.
	 */
	toSource(): string

}

/**
 * Options for fitting placed or pasted content in a frame.
 */
declare class FrameFittingOption extends Preference {
	/**
	 * If true, the last saved fitting options will be applied to the contents of a frame when it is resized.
	 */
	autoFit: boolean

	/**
	 * The amount in measurement units to crop the bottom edge of a graphic.
	 */
	bottomCrop: number | string

	/**
	 * The point with which to align the image empty when fitting in a frame. For information, see frame fitting options.
	 */
	fittingAlignment: AnchorPoint

	/**
	 * The frame fitting option to apply to placed or pasted content if the frame is empty. Can be applied to a frame, object style, or document or to the application.
	 */
	fittingOnEmptyFrame: EmptyFrameFittingOptions

	/**
	 * The amount in measurement units to crop the left edge of a graphic.
	 */
	leftCrop: number | string

	/**
	 * The amount in measurement units to crop the right edge of a graphic.
	 */
	rightCrop: number | string

	/**
	 * The amount in measurement units to crop the top edge of a graphic.
	 */
	topCrop: number | string

}

/**
 * A guide.
 */
declare class Guide {
	/**
	 * Dispatched after a Guide is placed. This event bubbles. This event is not cancelable.
	 */
	AFTER_PLACE: string

	/**
	 * If true, the master page item can be overridden.
	 */
	allowOverrides: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, horizontal orientation guides stop at the edges of the specified page. If false, the guides extends across the width of the spread and into the pasteboard area.
	 */
	fitToPage: boolean

	/**
	 * The color of the guide, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	guideColor: [number, number, number] | UIColors

	/**
	 * The type of the guide.
	 */
	guideType: GuideTypeOptions

	/**
	 * The zone of the guide.
	 */
	guideZone: number | string

	/**
	 * The unique ID of the Guide.
	 */
	id: number

	/**
	 * The index of the Guide within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The layer that the Guide is on.
	 */
	itemLayer: Layer

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The location at which to place the guide relative to the current ruler zero point.
	 */
	location: number | string

	/**
	 * If true, the Guide is locked.
	 */
	locked: boolean

	/**
	 * The name of the Guide; this is an alias to the Guide's label property.
	 */
	name: string

	/**
	 * The orientation of the guide.
	 */
	orientation: HorizontalOrVertical

	/**
	 * If true, the object originated on a master spread and was overridden. If false, the object either originated on a master spread and was not overridden, or the object did not originate on a master page.
	 */
	overridden: boolean

	/**
	 * An object that originated on a master page and has been overridden.
	 */
	overriddenMasterPageItem: PageItem | Guide | Graphic | Movie | Sound

	/**
	 * The parent of the Guide (a Spread or MasterSpread).
	 */
	parent: any

	/**
	 * The page on which this page item appears.
	 */
	parentPage: Page

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The view magnification as a percentage below which guides are no longer displayed. (Range: 5.0 to 4000.0)
	 */
	viewThreshold: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Detaches an overridden master page item from the master page.
	 */
	detach(): void

	/**
	 * Duplicates the Guide.
	 */
	duplicate(): Guide

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Guide[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the guide to a new location. Note: Either the to or the by parameter is required; if both parameters are defined, only the to value is used.
	 * @param to The new location of the guide, in the format [x, y].
	 * @param by The amount to move the guide relative to its current position, in the format [x, y].
	 */
	move(to: (number | string)[], by: (number | string)[]): void

	/**
	 * Overrides a master page item and places the item on the document page as a new object.
	 * @param destinationPage The document page that contains the master page item to override.
	 */
	override(destinationPage: Page): any

	/**
	 * Deletes the Guide.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Removes the override from a previously overridden master page item.
	 */
	removeOverride(): void

	/**
	 * Get the coordinates of the given location in the specified coordinate system.
	 * @param location The location requested. Can accept: Array of 2 Reals, AnchorPoint enumerator or Array of Arrays of 2 Reals, CoordinateSpaces enumerators, AnchorPoint enumerators, BoundingBoxLimits enumerators or Long Integers.
	 * @param in_ The coordinate space to use.
	 * @param consideringRulerUnits If true then a ruler location is interpreted using ruler units rather than points. The default value is false. This parameter has no effect unless the reference point is specified relative to a page.
	 */
	resolve(location: any, in_: CoordinateSpaces, consideringRulerUnits?: boolean): any

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Guide in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Generates a string which, if executed, will return the Guide.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Get the transformation values of the page item.
	 * @param in_ The coordinate space to use
	 */
	transformValuesOf(in_: CoordinateSpaces): TransformationMatrix[]

}

/**
 * A collection of guides.
 */
declare class Guides {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Guide with the specified index.
	 * @param index The index.
	 */
	[index: number]: Guide

	/**
	 * Creates a new guide.
	 * @param layer The layer on which to create the guide.
	 * @param withProperties Initial values for properties of the new Guide
	 */
	add(layer: Layer, withProperties: object): Guide

	/**
	 * Returns any Guide in the collection.
	 */
	anyItem(): Guide

	/**
	 * Displays the number of elements in the Guide.
	 */
	count(): number

	/**
	 * Returns every Guide in the collection.
	 */
	everyItem(): Guide[]

	/**
	 * Returns the first Guide in the collection.
	 */
	firstItem(): Guide

	/**
	 * Returns the Guide with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Guide

	/**
	 * Returns the Guide with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Guide

	/**
	 * Returns the Guide with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Guide

	/**
	 * Returns the Guides within the specified range.
	 * @param from The Guide, index, or name at the beginning of the range.
	 * @param to The Guide, index, or name at the end of the range.
	 */
	itemByRange(from: Guide | number | string, to: Guide | number | string): Guide[]

	/**
	 * Returns the last Guide in the collection.
	 */
	lastItem(): Guide

	/**
	 * Returns the middle Guide in the collection.
	 */
	middleItem(): Guide

	/**
	 * Returns the Guide whose index follows the specified Guide in the collection.
	 * @param obj The Guide whose index comes before the desired Guide.
	 */
	nextItem(obj: Guide): Guide

	/**
	 * Returns the Guide with the index previous to the specified index.
	 * @param obj The index of the Guide that follows the desired Guide.
	 */
	previousItem(obj: Guide): Guide

	/**
	 * Generates a string which, if executed, will return the Guide.
	 */
	toSource(): string

}

/**
 * Text wrap preferences.
 */
declare class TextWrapPreference extends Preference {
	/**
	 * If true, text wraps on the master spread apply to that spread only, and not to any pages the master spread has been applied to.
	 */
	applyToMasterPageOnly: boolean

	/**
	 * The contour of the text wrap. Valid only when when text wrap type is contour.
	 */
	contourOptions: ContourOption

	/**
	 * If true, inverts the text wrap.
	 */
	inverse: boolean

	/**
	 * A collection of paths.
	 */
	paths: Paths

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * The text wrap mode.
	 */
	textWrapMode: TextWrapModes

	/**
	 * The minimum space between text and the edges of the wrapped object. The format for defining text wrap offset values depends on the text wrap type. If text wrap type is jump object text wrap, specify 2 values in the format [top, bottom]. If text wrap type is next column text wrap or contour, specify a single value. For bounding box text wrap, specify 4 values in the format in the format [top, left, bottom, right]. .
	 */
	textWrapOffset: number | number[] | NothingEnum

	/**
	 * Text wrap side options.
	 */
	textWrapSide: TextWrapSideOptions

	/**
	 * If true, the text wrap path has been explicitly modified by the user.
	 */
	userModifiedWrap: boolean

}

/**
 * A contour option.
 */
declare class ContourOption extends Preference {
	/**
	 * A list of the alpha channels stored in the graphic.
	 */
	alphaChannelPathNames: string[]

	/**
	 * The alpha channel or Photoshop path to use for the contour option. Valid only when the contour options is photoshop path or alpha channel.
	 */
	contourPathName: string

	/**
	 * The contour type.
	 */
	contourType: ContourOptionsTypes

	/**
	 * If true, creates interior clipping paths within the surrounding clipping path. Note: Valid only when clipping type is alpha channel or detect edges.
	 */
	includeInsideEdges: boolean

	/**
	 * A list of the clipping paths stored in the graphic.
	 */
	photoshopPathNames: string[]

}

/**
 * A section.
 */
declare class Section {
	/**
	 * The alternate layout name for a set of pages.
	 */
	alternateLayout: string

	/**
	 * The number of pages in the alternate layout section.
	 */
	alternateLayoutLength: number

	/**
	 * If true, continues page numbers sequentially from the previous section.
	 */
	continueNumbering: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Section.
	 */
	id: number

	/**
	 * If true, places the specified prefix before page numbers on all pages in the section.
	 */
	includeSectionPrefix: boolean

	/**
	 * The index of the Section within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The number of pages in the section.
	 */
	length: number

	/**
	 * The section marker.
	 */
	marker: string

	/**
	 * The name of the Section.
	 */
	name: string

	/**
	 * The page number assigned to the first page in the section. Note: Valid only when continue numbering is false.
	 */
	pageNumberStart: number

	/**
	 * The page number style.
	 */
	pageNumberStyle: PageNumberStyle | string

	/**
	 * The start page for the section.
	 */
	pageStart: Page

	/**
	 * The parent of the Section (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The prefix to place before page numbers on pages in the section. May include up to 8 characters. Note: Valid only when include section prefix is true.
	 */
	sectionPrefix: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Section[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the Section.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Section.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of sections.
 */
declare class Sections {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Section with the specified index.
	 * @param index The index.
	 */
	[index: number]: Section

	/**
	 * Creates a new section.
	 * @param reference The page on which the section begins.
	 * @param withProperties Initial values for properties of the new Section
	 */
	add(reference: Page, withProperties: object): Section

	/**
	 * Returns any Section in the collection.
	 */
	anyItem(): Section

	/**
	 * Displays the number of elements in the Section.
	 */
	count(): number

	/**
	 * Returns every Section in the collection.
	 */
	everyItem(): Section[]

	/**
	 * Returns the first Section in the collection.
	 */
	firstItem(): Section

	/**
	 * Returns the Section with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Section

	/**
	 * Returns the Section with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Section

	/**
	 * Returns the Section with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Section

	/**
	 * Returns the Sections within the specified range.
	 * @param from The Section, index, or name at the beginning of the range.
	 * @param to The Section, index, or name at the end of the range.
	 */
	itemByRange(from: Section | number | string, to: Section | number | string): Section[]

	/**
	 * Returns the last Section in the collection.
	 */
	lastItem(): Section

	/**
	 * Returns the middle Section in the collection.
	 */
	middleItem(): Section

	/**
	 * Returns the Section whose index follows the specified Section in the collection.
	 * @param obj The Section whose index comes before the desired Section.
	 */
	nextItem(obj: Section): Section

	/**
	 * Returns the Section with the index previous to the specified index.
	 * @param obj The index of the Section that follows the desired Section.
	 */
	previousItem(obj: Section): Section

	/**
	 * Generates a string which, if executed, will return the Section.
	 */
	toSource(): string

}

/**
 * A path.
 */
declare class Path {
	/**
	 * A list of the coordinates of all of the path points on the path, including anchor points and left- and right-direction points. When creating a path using this property, supply either a list of anchor point coordinates ([[x1, y1], [x2, y2], ...]) or a list of anchor point, left-direction point, and right-direction point coordinates ([[[x1, y1], [x2, y2], [x3, y3]], [[x4, y4], [x5, y5], [x6, y6]], ...]). Note: Providing only anchor points results in a path on which all of the path points are connected with straight line segments; supplying the positions of left- and right-direction points specifies curved line segments. Can return: Array of Arrays of 2 Units.
	 */
	entirePath: any[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the Path within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the Path (a SplineItem, Polygon, GraphicLine, Rectangle, Oval, TextFrame, EndnoteTextFrame, MediaItem, Sound, Movie, Button, MultiStateObject, ClippingPathSettings or TextWrapPreference).
	 */
	parent: any

	/**
	 * A collection of path points.
	 */
	pathPoints: PathPoints

	/**
	 * The path type.
	 */
	pathType: PathType

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Path[]

	/**
	 * Deletes the Path.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Reverses the path.
	 */
	reverse(): void

	/**
	 * Generates a string which, if executed, will return the Path.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of paths.
 */
declare class Paths {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Path with the specified index.
	 * @param index The index.
	 */
	[index: number]: Path

	/**
	 * Creates a new Path.
	 * @param withProperties Initial values for properties of the new Path
	 */
	add(withProperties: object): Path

	/**
	 * Returns any Path in the collection.
	 */
	anyItem(): Path

	/**
	 * Displays the number of elements in the Path.
	 */
	count(): number

	/**
	 * Returns every Path in the collection.
	 */
	everyItem(): Path[]

	/**
	 * Returns the first Path in the collection.
	 */
	firstItem(): Path

	/**
	 * Returns the Path with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Path

	/**
	 * Returns the Paths within the specified range.
	 * @param from The Path, index, or name at the beginning of the range.
	 * @param to The Path, index, or name at the end of the range.
	 */
	itemByRange(from: Path | number | string, to: Path | number | string): Path[]

	/**
	 * Returns the last Path in the collection.
	 */
	lastItem(): Path

	/**
	 * Returns the middle Path in the collection.
	 */
	middleItem(): Path

	/**
	 * Returns the Path whose index follows the specified Path in the collection.
	 * @param obj The Path whose index comes before the desired Path.
	 */
	nextItem(obj: Path): Path

	/**
	 * Returns the Path with the index previous to the specified index.
	 * @param obj The index of the Path that follows the desired Path.
	 */
	previousItem(obj: Path): Path

	/**
	 * Generates a string which, if executed, will return the Path.
	 */
	toSource(): string

}

/**
 * A path point of a path.
 */
declare class PathPoint {
	/**
	 * The location of the path point on the page, in the format [x, y].
	 */
	anchor: (number | string)[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the PathPoint within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The left-direction point, which controls the curve of the line segment preceding the path point on the path, in the format [x, y].
	 */
	leftDirection: (number | string)[]

	/**
	 * The parent of the PathPoint (a Path).
	 */
	parent: Path

	/**
	 * The path point type.
	 */
	pointType: PointType

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The right-direction point, which controls the curve of the line segment following the path point on the path, in the format [x, y].
	 */
	rightDirection: (number | string)[]

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PathPoint[]

	/**
	 * Join this path point to another path point. The two points must be end points and their paths combined into a single path on a single page item.
	 * @param reference The reference object. The path point to join to
	 * @param given The join option to use.
	 */
	join(reference: PathPoint, given: JoinOptions): void

	/**
	 * Deletes the PathPoint.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the PathPoint.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of path points.
 */
declare class PathPoints {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PathPoint with the specified index.
	 * @param index The index.
	 */
	[index: number]: PathPoint

	/**
	 * Creates a new PathPoint.
	 * @param withProperties Initial values for properties of the new PathPoint
	 */
	add(withProperties: object): PathPoint

	/**
	 * Returns any PathPoint in the collection.
	 */
	anyItem(): PathPoint

	/**
	 * Displays the number of elements in the PathPoint.
	 */
	count(): number

	/**
	 * Returns every PathPoint in the collection.
	 */
	everyItem(): PathPoint[]

	/**
	 * Returns the first PathPoint in the collection.
	 */
	firstItem(): PathPoint

	/**
	 * Returns the PathPoint with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PathPoint

	/**
	 * Returns the PathPoints within the specified range.
	 * @param from The PathPoint, index, or name at the beginning of the range.
	 * @param to The PathPoint, index, or name at the end of the range.
	 */
	itemByRange(from: PathPoint | number | string, to: PathPoint | number | string): PathPoint[]

	/**
	 * Returns the last PathPoint in the collection.
	 */
	lastItem(): PathPoint

	/**
	 * Returns the middle PathPoint in the collection.
	 */
	middleItem(): PathPoint

	/**
	 * Returns the PathPoint whose index follows the specified PathPoint in the collection.
	 * @param obj The PathPoint whose index comes before the desired PathPoint.
	 */
	nextItem(obj: PathPoint): PathPoint

	/**
	 * Returns the PathPoint with the index previous to the specified index.
	 * @param obj The index of the PathPoint that follows the desired PathPoint.
	 */
	previousItem(obj: PathPoint): PathPoint

	/**
	 * Generates a string which, if executed, will return the PathPoint.
	 */
	toSource(): string

}

/**
 * A path-based page item, such as a rectangle, oval, polygon, or graphic line.
 */
declare class SplineItem extends PageItem {
	/**
	 * Anchored object settings.
	 */
	anchoredObjectSettings: AnchoredObjectSetting

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * The type of content that a frame can contain.
	 */
	contentType: ContentType

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of embedded HTML page items.
	 */
	htmlItems: HtmlItems

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * Imported InDesign pages.
	 */
	importedPages: ImportedPages

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * The lock state.
	 */
	lockState: LockStateValues

	/**
	 * The media items collection.
	 */
	mediaItems: MediaItems

	/**
	 * A collection of movies.
	 */
	movies: Movies

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * Export options for the object
	 */
	objectExportOptions: ObjectExportOption

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of paths.
	 */
	paths: Paths

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * A collection of sound clips.
	 */
	sounds: Sounds

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of text paths.
	 */
	textPaths: TextPaths

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Creates a new page item by combining the SplineItem with other objects. Deletes the objects if they do not intersect.
	 * @param with_ The object(s) to add.
	 */
	addPath(with_: PageItem[]): PageItem

	/**
	 * Brings the SplineItem forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the SplineItem to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Checks in the story or stories.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean

	/**
	 * Checks out the story.
	 */
	checkOut(): boolean

	/**
	 * Creates a new page item by excluding the overlapping areas of the SplineItem and other objects.
	 * @param with_ The object(s) to exclude.
	 */
	excludeOverlapPath(with_: PageItem[]): PageItem

	/**
	 * Creates a new page item by intersecting the SplineItem with other objects. Returns an error if the objects do not intersect.
	 * @param with_ The object(s) with which to intersect.
	 */
	intersectPath(with_: PageItem[]): PageItem

	/**
	 * Creates a compound path by combining the path(s) of the SplineItem with the paths of other objects.
	 * @param with_ The other objects whose paths to include in the new compound path.
	 */
	makeCompoundPath(with_: PageItem[]): PageItem

	/**
	 * Creates a new page item by reverse subtracting the overlapping areas of the SplineItem and other objects.
	 * @param with_ The object(s) to reverse subtract.
	 */
	minusBack(with_: PageItem[]): PageItem

	/**
	 * Releases a compound path.
	 */
	releaseCompoundPath(): PageItem[]

	/**
	 * Reverts the document to its state at the last save operation.
	 */
	revert(): boolean

	/**
	 * Sends the SplineItem back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the SplineItem to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

	/**
	 * Creates a new page item by subtracting the overlapping areas of the SplineItem and other objects.
	 * @param with_ The object(s) to subtract.
	 */
	subtractPath(with_: PageItem[]): PageItem

}

/**
 * The spline items collection.
 */
declare class SplineItems {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the SplineItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: SplineItem

	/**
	 * Returns any SplineItem in the collection.
	 */
	anyItem(): SplineItem

	/**
	 * Displays the number of elements in the SplineItem.
	 */
	count(): number

	/**
	 * Returns every SplineItem in the collection.
	 */
	everyItem(): SplineItem[]

	/**
	 * Returns the first SplineItem in the collection.
	 */
	firstItem(): SplineItem

	/**
	 * Returns the SplineItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): SplineItem

	/**
	 * Returns the SplineItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): SplineItem

	/**
	 * Returns the SplineItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): SplineItem

	/**
	 * Returns the SplineItems within the specified range.
	 * @param from The SplineItem, index, or name at the beginning of the range.
	 * @param to The SplineItem, index, or name at the end of the range.
	 */
	itemByRange(from: SplineItem | number | string, to: SplineItem | number | string): SplineItem[]

	/**
	 * Returns the last SplineItem in the collection.
	 */
	lastItem(): SplineItem

	/**
	 * Returns the middle SplineItem in the collection.
	 */
	middleItem(): SplineItem

	/**
	 * Returns the SplineItem whose index follows the specified SplineItem in the collection.
	 * @param obj The SplineItem whose index comes before the desired SplineItem.
	 */
	nextItem(obj: SplineItem): SplineItem

	/**
	 * Returns the SplineItem with the index previous to the specified index.
	 * @param obj The index of the SplineItem that follows the desired SplineItem.
	 */
	previousItem(obj: SplineItem): SplineItem

	/**
	 * Generates a string which, if executed, will return the SplineItem.
	 */
	toSource(): string

}

/**
 * EPSText.
 */
declare class EPSText extends PageItem {
	/**
	 * Anchored object settings.
	 */
	anchoredObjectSettings: AnchoredObjectSetting

	/**
	 * A collection of text paths.
	 */
	textPaths: TextPaths

	/**
	 * Brings the EPSText forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the EPSText to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Sends the EPSText back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the EPSText to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

}

/**
 * EPSTexts
 */
declare class EPSTexts {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the EPSText with the specified index.
	 * @param index The index.
	 */
	[index: number]: EPSText

	/**
	 * Returns any EPSText in the collection.
	 */
	anyItem(): EPSText

	/**
	 * Displays the number of elements in the EPSText.
	 */
	count(): number

	/**
	 * Returns every EPSText in the collection.
	 */
	everyItem(): EPSText[]

	/**
	 * Returns the first EPSText in the collection.
	 */
	firstItem(): EPSText

	/**
	 * Returns the EPSText with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EPSText

	/**
	 * Returns the EPSText with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EPSText

	/**
	 * Returns the EPSText with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EPSText

	/**
	 * Returns the EPSTexts within the specified range.
	 * @param from The EPSText, index, or name at the beginning of the range.
	 * @param to The EPSText, index, or name at the end of the range.
	 */
	itemByRange(from: EPSText | number | string, to: EPSText | number | string): EPSText[]

	/**
	 * Returns the last EPSText in the collection.
	 */
	lastItem(): EPSText

	/**
	 * Returns the middle EPSText in the collection.
	 */
	middleItem(): EPSText

	/**
	 * Returns the EPSText whose index follows the specified EPSText in the collection.
	 * @param obj The EPSText whose index comes before the desired EPSText.
	 */
	nextItem(obj: EPSText): EPSText

	/**
	 * Returns the EPSText with the index previous to the specified index.
	 * @param obj The index of the EPSText that follows the desired EPSText.
	 */
	previousItem(obj: EPSText): EPSText

	/**
	 * Generates a string which, if executed, will return the EPSText.
	 */
	toSource(): string

}

/**
 * An imported InDesign page.
 */
declare class ImportedPage extends Graphic {
	/**
	 * Clipping path settings.
	 */
	clippingPath: ClippingPathSettings

	/**
	 * Graphic layer option settings.
	 */
	graphicLayerOptions: GraphicLayerOption

	/**
	 * Specifies the cropping of the imported InDesign page. Read only for page items.
	 */
	importedPageCrop: ImportedPageCropOptions

	/**
	 * Which page of the InDesign document should be imported. Read only for page items.
	 */
	pageNumber: number

	/**
	 * PDF attribute settings.
	 */
	pdfAttributes: PDFAttribute

}

/**
 * Imported InDesign pages.
 */
declare class ImportedPages {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ImportedPage with the specified index.
	 * @param index The index.
	 */
	[index: number]: ImportedPage

	/**
	 * Creates a new ImportedPage.
	 * @param withProperties Initial values for properties of the new ImportedPage
	 */
	add(withProperties: object): ImportedPage

	/**
	 * Returns any ImportedPage in the collection.
	 */
	anyItem(): ImportedPage

	/**
	 * Displays the number of elements in the ImportedPage.
	 */
	count(): number

	/**
	 * Returns every ImportedPage in the collection.
	 */
	everyItem(): ImportedPage[]

	/**
	 * Returns the first ImportedPage in the collection.
	 */
	firstItem(): ImportedPage

	/**
	 * Returns the ImportedPage with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ImportedPage

	/**
	 * Returns the ImportedPage with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ImportedPage

	/**
	 * Returns the ImportedPage with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ImportedPage

	/**
	 * Returns the ImportedPages within the specified range.
	 * @param from The ImportedPage, index, or name at the beginning of the range.
	 * @param to The ImportedPage, index, or name at the end of the range.
	 */
	itemByRange(from: ImportedPage | number | string, to: ImportedPage | number | string): ImportedPage[]

	/**
	 * Returns the last ImportedPage in the collection.
	 */
	lastItem(): ImportedPage

	/**
	 * Returns the middle ImportedPage in the collection.
	 */
	middleItem(): ImportedPage

	/**
	 * Returns the ImportedPage whose index follows the specified ImportedPage in the collection.
	 * @param obj The ImportedPage whose index comes before the desired ImportedPage.
	 */
	nextItem(obj: ImportedPage): ImportedPage

	/**
	 * Returns the ImportedPage with the index previous to the specified index.
	 * @param obj The index of the ImportedPage that follows the desired ImportedPage.
	 */
	previousItem(obj: ImportedPage): ImportedPage

	/**
	 * Generates a string which, if executed, will return the ImportedPage.
	 */
	toSource(): string

}

/**
 * An sound or movie page item.
 */
declare class MediaItem extends PageItem {
	/**
	 * Dispatched when the value of a property changes on this MediaItem. This event bubbles. This event is not cancelable.
	 */
	AFTER_ATTRIBUTE_CHANGED: string

	/**
	 * A collection of paths.
	 */
	paths: Paths

}

/**
 * The media items collection.
 */
declare class MediaItems {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MediaItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: MediaItem

	/**
	 * Returns any MediaItem in the collection.
	 */
	anyItem(): MediaItem

	/**
	 * Displays the number of elements in the MediaItem.
	 */
	count(): number

	/**
	 * Returns every MediaItem in the collection.
	 */
	everyItem(): MediaItem[]

	/**
	 * Returns the first MediaItem in the collection.
	 */
	firstItem(): MediaItem

	/**
	 * Returns the MediaItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MediaItem

	/**
	 * Returns the MediaItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MediaItem

	/**
	 * Returns the MediaItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MediaItem

	/**
	 * Returns the MediaItems within the specified range.
	 * @param from The MediaItem, index, or name at the beginning of the range.
	 * @param to The MediaItem, index, or name at the end of the range.
	 */
	itemByRange(from: MediaItem | number | string, to: MediaItem | number | string): MediaItem[]

	/**
	 * Returns the last MediaItem in the collection.
	 */
	lastItem(): MediaItem

	/**
	 * Returns the middle MediaItem in the collection.
	 */
	middleItem(): MediaItem

	/**
	 * Returns the MediaItem whose index follows the specified MediaItem in the collection.
	 * @param obj The MediaItem whose index comes before the desired MediaItem.
	 */
	nextItem(obj: MediaItem): MediaItem

	/**
	 * Returns the MediaItem with the index previous to the specified index.
	 * @param obj The index of the MediaItem that follows the desired MediaItem.
	 */
	previousItem(obj: MediaItem): MediaItem

	/**
	 * Generates a string which, if executed, will return the MediaItem.
	 */
	toSource(): string

}

/**
 * An IDML snippet.
 */
declare class Snippet {
	/**
	 * Dispatched before a Snippet is placed. This event bubbles. This event is cancelable.
	 */
	BEFORE_PLACE: string

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * The unique ID of the Snippet.
	 */
	id: number

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * The index of the Snippet within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The name of the Snippet; this is an alias to the Snippet's label property.
	 */
	name: string

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * The parent of the Snippet (a PlaceGun).
	 */
	parent: PlaceGun

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Snippet[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the Snippet.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Snippet.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of IDML snippets.
 */
declare class Snippets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Snippet with the specified index.
	 * @param index The index.
	 */
	[index: number]: Snippet

	/**
	 * Returns any Snippet in the collection.
	 */
	anyItem(): Snippet

	/**
	 * Displays the number of elements in the Snippet.
	 */
	count(): number

	/**
	 * Returns every Snippet in the collection.
	 */
	everyItem(): Snippet[]

	/**
	 * Returns the first Snippet in the collection.
	 */
	firstItem(): Snippet

	/**
	 * Returns the Snippet with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Snippet

	/**
	 * Returns the Snippet with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Snippet

	/**
	 * Returns the Snippet with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Snippet

	/**
	 * Returns the Snippets within the specified range.
	 * @param from The Snippet, index, or name at the beginning of the range.
	 * @param to The Snippet, index, or name at the end of the range.
	 */
	itemByRange(from: Snippet | number | string, to: Snippet | number | string): Snippet[]

	/**
	 * Returns the last Snippet in the collection.
	 */
	lastItem(): Snippet

	/**
	 * Returns the middle Snippet in the collection.
	 */
	middleItem(): Snippet

	/**
	 * Returns the Snippet whose index follows the specified Snippet in the collection.
	 * @param obj The Snippet whose index comes before the desired Snippet.
	 */
	nextItem(obj: Snippet): Snippet

	/**
	 * Returns the Snippet with the index previous to the specified index.
	 * @param obj The index of the Snippet that follows the desired Snippet.
	 */
	previousItem(obj: Snippet): Snippet

	/**
	 * Generates a string which, if executed, will return the Snippet.
	 */
	toSource(): string

}

/**
 * Options for applying layout attributes to any page item.
 */
declare class TransformAttributeOption extends Preference {
	/**
	 * The height of the object, defined by the object style.
	 */
	transformAttrHeight: number | string

	/**
	 * The reference point to be used while setting the X attribute of object style.
	 */
	transformAttrLeftReference: TransformPositionReference

	/**
	 * Option to specify the achor point to be used by the style for anchoring the object while applying the position.
	 */
	transformAttrRefAnchorPoint: AnchorPoint

	/**
	 * The reference point to be used while setting the Y attribute of object style.
	 */
	transformAttrTopReference: TransformPositionReference

	/**
	 * The width of the object, defined by the object style.
	 */
	transformAttrWidth: number | string

	/**
	 * The left position of the object, defined by the object style.
	 */
	transformAttrX: number | string

	/**
	 * The top position of the object, defined by the object style.
	 */
	transformAttrY: number | string

}

/**
 * A Motion preset Object.
 */
declare class MotionPreset {
	/**
	 * Motion preset raw data
	 */
	contents: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the MotionPreset.
	 */
	id: number

	/**
	 * The index of the MotionPreset within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the MotionPreset.
	 */
	name: string

	/**
	 * The parent of the MotionPreset (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the motion preset.
	 * @param name The name for the duplicated motion preset.
	 */
	duplicate(name: string): MotionPreset

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MotionPreset[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the MotionPreset.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Save a copy of this motion preset to a InDesign motion preset file.
	 * @param to The Flash motion preset file to export to.
	 */
	saveACopy(to: File): void

	/**
	 * Generates a string which, if executed, will return the MotionPreset.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of Motion presets.
 */
declare class MotionPresets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MotionPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: MotionPreset

	/**
	 * Creates a new MotionPreset.
	 * @param withProperties Initial values for properties of the new MotionPreset
	 */
	add(withProperties: object): MotionPreset

	/**
	 * Returns any MotionPreset in the collection.
	 */
	anyItem(): MotionPreset

	/**
	 * Displays the number of elements in the MotionPreset.
	 */
	count(): number

	/**
	 * Returns every MotionPreset in the collection.
	 */
	everyItem(): MotionPreset[]

	/**
	 * Returns the first MotionPreset in the collection.
	 */
	firstItem(): MotionPreset

	/**
	 * Returns the MotionPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MotionPreset

	/**
	 * Returns the MotionPreset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MotionPreset

	/**
	 * Returns the MotionPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MotionPreset

	/**
	 * Returns the MotionPresets within the specified range.
	 * @param from The MotionPreset, index, or name at the beginning of the range.
	 * @param to The MotionPreset, index, or name at the end of the range.
	 */
	itemByRange(from: MotionPreset | number | string, to: MotionPreset | number | string): MotionPreset[]

	/**
	 * Returns the last MotionPreset in the collection.
	 */
	lastItem(): MotionPreset

	/**
	 * Returns the middle MotionPreset in the collection.
	 */
	middleItem(): MotionPreset

	/**
	 * Returns the MotionPreset whose index follows the specified MotionPreset in the collection.
	 * @param obj The MotionPreset whose index comes before the desired MotionPreset.
	 */
	nextItem(obj: MotionPreset): MotionPreset

	/**
	 * Returns the MotionPreset with the index previous to the specified index.
	 * @param obj The index of the MotionPreset that follows the desired MotionPreset.
	 */
	previousItem(obj: MotionPreset): MotionPreset

	/**
	 * Generates a string which, if executed, will return the MotionPreset.
	 */
	toSource(): string

}

/**
 * An article
 */
declare class Article {
	/**
	 * The export status of the Article
	 */
	articleExportStatus: boolean

	/**
	 * A collection of article members.
	 */
	articleMembers: ArticleMembers

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Article.
	 */
	id: number

	/**
	 * The index of the Article within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Article.
	 */
	name: string

	/**
	 * The parent of the Article (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Populates the article with all page items in the document.
	 */
	addDocumentContent(): void

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Article[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the Article to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	move(to: LocationOptions, reference: Article): Article

	/**
	 * Deletes the Article.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Article.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of articles.
 */
declare class Articles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Article with the specified index.
	 * @param index The index.
	 */
	[index: number]: Article

	/**
	 * Creates a new Article
	 * @param name The article name
	 * @param articleExportStatus The article's export status
	 * @param at The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 * @param withProperties Initial values for properties of the new Article
	 */
	add(name: string, articleExportStatus: boolean, at?: LocationOptions, reference?: Article, withProperties?: object): Article

	/**
	 * Returns any Article in the collection.
	 */
	anyItem(): Article

	/**
	 * Displays the number of elements in the Article.
	 */
	count(): number

	/**
	 * Returns every Article in the collection.
	 */
	everyItem(): Article[]

	/**
	 * Returns the first Article in the collection.
	 */
	firstItem(): Article

	/**
	 * Returns the Article with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Article

	/**
	 * Returns the Article with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Article

	/**
	 * Returns the Article with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Article

	/**
	 * Returns the Articles within the specified range.
	 * @param from The Article, index, or name at the beginning of the range.
	 * @param to The Article, index, or name at the end of the range.
	 */
	itemByRange(from: Article | number | string, to: Article | number | string): Article[]

	/**
	 * Returns the last Article in the collection.
	 */
	lastItem(): Article

	/**
	 * Returns the middle Article in the collection.
	 */
	middleItem(): Article

	/**
	 * Returns the Article whose index follows the specified Article in the collection.
	 * @param obj The Article whose index comes before the desired Article.
	 */
	nextItem(obj: Article): Article

	/**
	 * Returns the Article with the index previous to the specified index.
	 * @param obj The index of the Article that follows the desired Article.
	 */
	previousItem(obj: Article): Article

	/**
	 * Generates a string which, if executed, will return the Article.
	 */
	toSource(): string

}

/**
 * An article member.
 */
declare class ArticleMember {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the ArticleMember.
	 */
	id: number

	/**
	 * The index of the ArticleMember within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The underlying page item
	 */
	itemRef: PageItem

	/**
	 * The parent of the ArticleMember (a Article).
	 */
	parent: Article

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ArticleMember[]

	/**
	 * Moves the ArticleMember to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	move(to: LocationOptions, reference: ArticleMember): ArticleMember

	/**
	 * Deletes the ArticleMember.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ArticleMember.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of article members.
 */
declare class ArticleMembers {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ArticleMember with the specified index.
	 * @param index The index.
	 */
	[index: number]: ArticleMember

	/**
	 * Adds a new member.
	 * @param itemRef page item to be added to article
	 * @param at The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 * @param withProperties Initial values for properties of the new ArticleMember
	 */
	add(itemRef: PageItem, at?: LocationOptions, reference?: ArticleMember, withProperties?: object): ArticleMember

	/**
	 * Returns any ArticleMember in the collection.
	 */
	anyItem(): ArticleMember

	/**
	 * Displays the number of elements in the ArticleMember.
	 */
	count(): number

	/**
	 * Returns every ArticleMember in the collection.
	 */
	everyItem(): ArticleMember[]

	/**
	 * Returns the first ArticleMember in the collection.
	 */
	firstItem(): ArticleMember

	/**
	 * Returns the ArticleMember with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ArticleMember

	/**
	 * Returns the ArticleMember with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ArticleMember

	/**
	 * Returns the ArticleMembers within the specified range.
	 * @param from The ArticleMember, index, or name at the beginning of the range.
	 * @param to The ArticleMember, index, or name at the end of the range.
	 */
	itemByRange(from: ArticleMember | number | string, to: ArticleMember | number | string): ArticleMember[]

	/**
	 * Returns the last ArticleMember in the collection.
	 */
	lastItem(): ArticleMember

	/**
	 * Returns the middle ArticleMember in the collection.
	 */
	middleItem(): ArticleMember

	/**
	 * Returns the ArticleMember whose index follows the specified ArticleMember in the collection.
	 * @param obj The ArticleMember whose index comes before the desired ArticleMember.
	 */
	nextItem(obj: ArticleMember): ArticleMember

	/**
	 * Returns the ArticleMember with the index previous to the specified index.
	 * @param obj The index of the ArticleMember that follows the desired ArticleMember.
	 */
	previousItem(obj: ArticleMember): ArticleMember

	/**
	 * Generates a string which, if executed, will return the ArticleMember.
	 */
	toSource(): string

}

/**
 * Member of a group that is part of an article.
 */
declare class ArticleChild {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the ArticleChild.
	 */
	id: number

	/**
	 * The index of the ArticleChild within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The underlying page item
	 */
	itemRef: PageItem

	/**
	 * The parent of the ArticleChild (a Group).
	 */
	parent: Group

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ArticleChild[]

	/**
	 * Moves the ArticleChild to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 */
	move(to: LocationOptions, reference: ArticleChild): ArticleChild

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ArticleChild.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of group items that are also part of an article.
 */
declare class ArticleChildren {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ArticleChild with the specified index.
	 * @param index The index.
	 */
	[index: number]: ArticleChild

	/**
	 * Returns any ArticleChild in the collection.
	 */
	anyItem(): ArticleChild

	/**
	 * Displays the number of elements in the ArticleChild.
	 */
	count(): number

	/**
	 * Returns every ArticleChild in the collection.
	 */
	everyItem(): ArticleChild[]

	/**
	 * Returns the first ArticleChild in the collection.
	 */
	firstItem(): ArticleChild

	/**
	 * Returns the ArticleChild with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ArticleChild

	/**
	 * Returns the ArticleChild with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ArticleChild

	/**
	 * Returns the ArticleChildren within the specified range.
	 * @param from The ArticleChild, index, or name at the beginning of the range.
	 * @param to The ArticleChild, index, or name at the end of the range.
	 */
	itemByRange(from: ArticleChild | number | string, to: ArticleChild | number | string): ArticleChild[]

	/**
	 * Returns the last ArticleChild in the collection.
	 */
	lastItem(): ArticleChild

	/**
	 * Returns the middle ArticleChild in the collection.
	 */
	middleItem(): ArticleChild

	/**
	 * Returns the ArticleChild whose index follows the specified ArticleChild in the collection.
	 * @param obj The ArticleChild whose index comes before the desired ArticleChild.
	 */
	nextItem(obj: ArticleChild): ArticleChild

	/**
	 * Returns the ArticleChild with the index previous to the specified index.
	 * @param obj The index of the ArticleChild that follows the desired ArticleChild.
	 */
	previousItem(obj: ArticleChild): ArticleChild

	/**
	 * Generates a string which, if executed, will return the ArticleChild.
	 */
	toSource(): string

}

/**
 * Embedded HTML.
 */
declare class HtmlItem extends PageItem {
	/**
	 * Is this HTML able to adapt its width and height based on changes to the parent div or does it have fixed dimensions?
	 */
	fixedDimensions: boolean

	/**
	 * The embedded HTML text
	 */
	htmlContent: string

}

/**
 * A collection of embedded HTML page items.
 */
declare class HtmlItems {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the HtmlItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: HtmlItem

	/**
	 * Creates a new HtmlItem
	 * @param layer The layer on which to create the HtmlItem.
	 * @param at The location at which to insert the HtmlItem relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new HtmlItem
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): HtmlItem

	/**
	 * Returns any HtmlItem in the collection.
	 */
	anyItem(): HtmlItem

	/**
	 * Displays the number of elements in the HtmlItem.
	 */
	count(): number

	/**
	 * Returns every HtmlItem in the collection.
	 */
	everyItem(): HtmlItem[]

	/**
	 * Returns the first HtmlItem in the collection.
	 */
	firstItem(): HtmlItem

	/**
	 * Returns the HtmlItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HtmlItem

	/**
	 * Returns the HtmlItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HtmlItem

	/**
	 * Returns the HtmlItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HtmlItem

	/**
	 * Returns the HtmlItems within the specified range.
	 * @param from The HtmlItem, index, or name at the beginning of the range.
	 * @param to The HtmlItem, index, or name at the end of the range.
	 */
	itemByRange(from: HtmlItem | number | string, to: HtmlItem | number | string): HtmlItem[]

	/**
	 * Returns the last HtmlItem in the collection.
	 */
	lastItem(): HtmlItem

	/**
	 * Returns the middle HtmlItem in the collection.
	 */
	middleItem(): HtmlItem

	/**
	 * Returns the HtmlItem whose index follows the specified HtmlItem in the collection.
	 * @param obj The HtmlItem whose index comes before the desired HtmlItem.
	 */
	nextItem(obj: HtmlItem): HtmlItem

	/**
	 * Returns the HtmlItem with the index previous to the specified index.
	 * @param obj The index of the HtmlItem that follows the desired HtmlItem.
	 */
	previousItem(obj: HtmlItem): HtmlItem

	/**
	 * Generates a string which, if executed, will return the HtmlItem.
	 */
	toSource(): string

}

/**
 * An object library.
 */
declare class Library {
	/**
	 * A collection of object library assets.
	 */
	assets: Assets

	/**
	 * The associated panel.
	 */
	associatedPanel: Panel

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The full path to the file.
	 */
	filePath: File

	/**
	 * The full path to the Library, including the name of the Library.
	 */
	fullName: File

	/**
	 * The index of the Library within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the Library.
	 */
	name: string

	/**
	 * The parent of the Library (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Closes the Library.
	 */
	close(): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Library[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Stores the specified object in the library.
	 * @param using The page item(s) to store.
	 * @param withProperties Initial values for properties of the new Library
	 */
	store(using: PageItem[] | Movies | Sounds | Graphics | XMLElements, withProperties: object): Asset

	/**
	 * Generates a string which, if executed, will return the Library.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of object libraries.
 */
declare class Libraries {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Library with the specified index.
	 * @param index The index.
	 */
	[index: number]: Library

	/**
	 * Creates a new object libary.
	 * @param fullName The library's path and file name.
	 * @param withProperties Initial values for properties of the new Library
	 */
	add(fullName: File, withProperties: object): Library

	/**
	 * Returns any Library in the collection.
	 */
	anyItem(): Library

	/**
	 * Displays the number of elements in the Library.
	 */
	count(): number

	/**
	 * Returns every Library in the collection.
	 */
	everyItem(): Library[]

	/**
	 * Returns the first Library in the collection.
	 */
	firstItem(): Library

	/**
	 * Returns the Library with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Library

	/**
	 * Returns the Library with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Library

	/**
	 * Returns the Libraries within the specified range.
	 * @param from The Library, index, or name at the beginning of the range.
	 * @param to The Library, index, or name at the end of the range.
	 */
	itemByRange(from: Library | number | string, to: Library | number | string): Library[]

	/**
	 * Returns the last Library in the collection.
	 */
	lastItem(): Library

	/**
	 * Returns the middle Library in the collection.
	 */
	middleItem(): Library

	/**
	 * Returns the Library whose index follows the specified Library in the collection.
	 * @param obj The Library whose index comes before the desired Library.
	 */
	nextItem(obj: Library): Library

	/**
	 * Returns the Library with the index previous to the specified index.
	 * @param obj The index of the Library that follows the desired Library.
	 */
	previousItem(obj: Library): Library

	/**
	 * Generates a string which, if executed, will return the Library.
	 */
	toSource(): string

}

/**
 * An object library asset.
 */
declare class Asset {
	/**
	 * The type of object library asset.
	 */
	assetType: AssetType

	/**
	 * The date and time the Asset was created.
	 */
	date: Date

	/**
	 * The description of the Asset.
	 */
	description: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Asset.
	 */
	id: number

	/**
	 * The index of the Asset within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Asset.
	 */
	name: string

	/**
	 * The parent of the Asset (a Library).
	 */
	parent: Library

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Asset[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Places the asset in the specified document or text.
	 * @param on The document or text object in which to place the asset.
	 */
	placeAsset(on: Document | Text): any[]

	/**
	 * Deletes the Asset.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Asset in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Generates a string which, if executed, will return the Asset.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of object library assets.
 */
declare class Assets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Asset with the specified index.
	 * @param index The index.
	 */
	[index: number]: Asset

	/**
	 * Returns any Asset in the collection.
	 */
	anyItem(): Asset

	/**
	 * Displays the number of elements in the Asset.
	 */
	count(): number

	/**
	 * Returns every Asset in the collection.
	 */
	everyItem(): Asset[]

	/**
	 * Returns the first Asset in the collection.
	 */
	firstItem(): Asset

	/**
	 * Returns the Asset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Asset

	/**
	 * Returns the Asset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Asset

	/**
	 * Returns the Asset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Asset

	/**
	 * Returns the Assets within the specified range.
	 * @param from The Asset, index, or name at the beginning of the range.
	 * @param to The Asset, index, or name at the end of the range.
	 */
	itemByRange(from: Asset | number | string, to: Asset | number | string): Asset[]

	/**
	 * Returns the last Asset in the collection.
	 */
	lastItem(): Asset

	/**
	 * Returns the middle Asset in the collection.
	 */
	middleItem(): Asset

	/**
	 * Returns the Asset whose index follows the specified Asset in the collection.
	 * @param obj The Asset whose index comes before the desired Asset.
	 */
	nextItem(obj: Asset): Asset

	/**
	 * Returns the Asset with the index previous to the specified index.
	 * @param obj The index of the Asset that follows the desired Asset.
	 */
	previousItem(obj: Asset): Asset

	/**
	 * Generates a string which, if executed, will return the Asset.
	 */
	toSource(): string

}

/**
 * A link to a placed file.
 */
declare class Link {
	/**
	 * Dispatched when the value of a property changes on this Link. This event bubbles. This event is not cancelable.
	 */
	AFTER_ATTRIBUTE_CHANGED: string

	/**
	 * Dispatched after a Link is deleted. This event bubbles. This event is not cancelable.
	 */
	AFTER_DELETE: string

	/**
	 * Dispatched after a Link is embedded. This event bubbles. This event is not cancelable.
	 */
	AFTER_EMBED: string

	/**
	 * Dispatched after a Link is relocated from one object to another. This event bubbles. This event is not cancelable.
	 */
	AFTER_MOVE: string

	/**
	 * Dispatched after a Link is created. This event bubbles. This event is not cancelable.
	 */
	AFTER_NEW: string

	/**
	 * Dispatched after a Link is unembedded. This event bubbles. This event is not cancelable.
	 */
	AFTER_UNEMBED: string

	/**
	 * Dispatched after a Link is updated. This event bubbles. This event is not cancelable.
	 */
	AFTER_UPDATE: string

	/**
	 * Dispatched before a Link is deleted. This event bubbles. This event is cancelable.
	 */
	BEFORE_DELETE: string

	/**
	 * Dispatched before a Link is embedded. This event bubbles. This event is cancelable.
	 */
	BEFORE_EMBED: string

	/**
	 * Dispatched before a Link is relocated from one object to another. This event bubbles. This event is cancelable.
	 */
	BEFORE_MOVE: string

	/**
	 * Dispatched before a Link is unembedded. This event bubbles. This event is cancelable.
	 */
	BEFORE_UNEMBED: string

	/**
	 * Dispatched before a Link is updated. This event bubbles. This event is cancelable.
	 */
	BEFORE_UPDATE: string

	/**
	 * The asset ID of the linked object.
	 */
	assetID: string

	/**
	 * The asset URL of the linked object.
	 */
	assetURL: string

	/**
	 * The date and time the Link was created.
	 */
	date: Date

	/**
	 * If true, indicates the linked object has been edited in the current document but the source file has not been updated.
	 */
	edited: boolean

	/**
	 * The Version Cue editing state of the file.
	 */
	editingState: EditingState

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The file path (colon delimited on the Mac OS).
	 */
	filePath: string | File

	/**
	 * The unique ID of the Link.
	 */
	id: number

	/**
	 * The index of the link in the links collection.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The URI of the linked resource.
	 */
	linkResourceURI: string

	/**
	 * The file type of the linked object.
	 */
	linkType: string

	/**
	 * XMP data for the link source file.
	 */
	linkXmp: LinkMetadata

	/**
	 * A collection of links.
	 */
	links: Links

	/**
	 * The name of the Link.
	 */
	name: string

	/**
	 * If true, indicates a link to a full-resolution version of the source file is needed. If false, indicates the object is embedded.
	 */
	needed: boolean

	/**
	 * The linked object.
	 */
	parent: Story | Graphic | Movie | Sound

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The rendition data of the link resource.
	 */
	renditionData: LinkResourceRenditionType

	/**
	 * The size of the Link file.
	 */
	size: number

	/**
	 * The status of the link.
	 */
	status: LinkStatus

	/**
	 * The Version Cue version state of the file.
	 */
	versionState: VersionState

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Check in to Version Cue.
	 * @param versionComments The comment for this version
	 * @param forceSave Forcibly save a version
	 */
	checkIn(versionComments: string, forceSave?: boolean): void

	/**
	 * Copies the link file to the specified location.
	 * @param to The file or folder to which to copy the file.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	copyLink(to: File, versionComments: string, forceSave?: boolean): void

	/**
	 * Opens the source file of the link in the default editor for the source file type.
	 */
	editOriginal(): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Link[]

	/**
	 * Opens the source file of the link in InDesign for SharedContent links.
	 */
	goToSource(): void

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Experimental: Reinitialize the link to a new uri
	 * @param linkResourceURI Resource URI to relink.
	 */
	reinitLink(linkResourceURI: string): void

	/**
	 * Points the link to a new source file.
	 * @param to The full path name of the new source file.
	 */
	relink(to: File | string): void

	/**
	 * Experimental: Relink the text fragment link to a new uri
	 * @param linkResourceURI Resource URI to relink to.
	 * @param name The tag name for the key.
	 */
	relinkTextFragmentLink(linkResourceURI: string, name: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Experimental: Download the original asset and replace FPO with it.
	 */
	replaceWithOriginal(): void

	/**
	 * Opens Adobe Bridge and selects the source file of the link.
	 */
	revealInBridge(): void

	/**
	 * Opens the file system to the folder that contains the source file of the link, and selects the file.
	 */
	revealInSystem(): void

	/**
	 * Selects the link.
	 */
	show(): void

	/**
	 * Generates a string which, if executed, will return the Link.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Unembeds the source file. If no folder is specified, creates a link to the original source file; if a folder is specified, copies the file to the folder and creates a link to the copied file.
	 * @param to The folder to which to copy the unembedded file.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	unembed(to: File, versionComments: string, forceSave?: boolean): void

	/**
	 * Embeds the source file in the document.
	 */
	unlink(): void

	/**
	 * Updates the link if the source file has been changed.
	 */
	update(): Link

}

/**
 * A collection of links.
 */
declare class Links {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Link with the specified index.
	 * @param index The index.
	 */
	[index: number]: Link

	/**
	 * Returns any Link in the collection.
	 */
	anyItem(): Link

	/**
	 * Displays the number of elements in the Link.
	 */
	count(): number

	/**
	 * Returns every Link in the collection.
	 */
	everyItem(): Link[]

	/**
	 * Returns the first Link in the collection.
	 */
	firstItem(): Link

	/**
	 * Returns the Link with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Link

	/**
	 * Returns the Link with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Link

	/**
	 * Returns the Link with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Link

	/**
	 * Returns the Links within the specified range.
	 * @param from The Link, index, or name at the beginning of the range.
	 * @param to The Link, index, or name at the end of the range.
	 */
	itemByRange(from: Link | number | string, to: Link | number | string): Link[]

	/**
	 * Returns the last Link in the collection.
	 */
	lastItem(): Link

	/**
	 * Returns the middle Link in the collection.
	 */
	middleItem(): Link

	/**
	 * Returns the Link whose index follows the specified Link in the collection.
	 * @param obj The Link whose index comes before the desired Link.
	 */
	nextItem(obj: Link): Link

	/**
	 * Returns the Link with the index previous to the specified index.
	 * @param obj The index of the Link that follows the desired Link.
	 */
	previousItem(obj: Link): Link

	/**
	 * Generates a string which, if executed, will return the Link.
	 */
	toSource(): string

}

/**
 * Experimental: An http link connection manager.
 */
declare class HttpLinkConnectionManagerObject {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the HttpLinkConnectionManagerObject within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the HttpLinkConnectionManagerObject (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HttpLinkConnectionManagerObject[]

	/**
	 * Experimental: Create a url connection for the given server address
	 * @param serverurl Server URL to connect
	 * @param jsonData JSON data
	 */
	httpConnect(serverurl: string, jsonData: string): void

	/**
	 * Experimental: Checks if the given server URL is connected or not.
	 * @param serverurl Server URL to check
	 */
	isConnected(serverurl: string): boolean

	/**
	 * Experimental: Logout from the given URL
	 * @param serverurl Server URL to logout from
	 */
	logout(serverurl: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the HttpLinkConnectionManagerObject.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * MetaData properties for the link source file.
 */
declare class LinkMetadata extends Preference {
	/**
	 * The author of the document.
	 */
	author: string

	/**
	 * The URL of the file that contains the linked copyright statement.
	 */
	copyrightInfoURL: string

	/**
	 * The text to use as a copyright notice.
	 */
	copyrightNotice: string

	/**
	 * The copyright status of the document.
	 */
	copyrightStatus: CopyrightStatus

	/**
	 * The creation date of the document.
	 */
	creationDate: Date

	/**
	 * The name of the application used to create the document.
	 */
	creator: string

	/**
	 * The description of the LinkMetadata.
	 */
	description: string

	/**
	 * The title of the document.
	 */
	documentTitle: string

	/**
	 * The format of the document.
	 */
	format: string

	/**
	 * The job name.
	 */
	jobName: string

	/**
	 * The list of keywords associated with the document.
	 */
	keywords: string[]

	/**
	 * The most recent modification date of the document.
	 */
	modificationDate: Date

	/**
	 * The location of the document on the asset management server.
	 */
	serverURL: string

	/**
	 * Counts the number of items in the container.
	 * @param namespace The namespace of the container.
	 * @param path The path to the container.
	 */
	countContainer(namespace: string, path: string): number

	/**
	 * Gets the XMP property value associated with the specified path.
	 * @param namespace The namespace of the property.
	 * @param path The specified path.
	 */
	getProperty(namespace: string, path: string): string

}

/**
 * An object style.
 */
declare class ObjectStyle {
	/**
	 * Anchored object settings.
	 */
	anchoredObjectSettings: AnchoredObjectSetting

	/**
	 * The named grid in use.
	 */
	appliedNamedGrid: NamedGrid

	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string

	/**
	 * If true, applies paragraph styles using Next Paragraph Style settings, beginning with the Next Paragraph Style defined in the paragraph style associated with the object style (if any).
	 */
	applyNextParagraphStyle: boolean

	/**
	 * The arrowhead alignment applied to the ObjectStyle.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum

	/**
	 * The style that this style is based on.
	 */
	basedOn: ObjectStyle | string

	/**
	 * Baseline frame grid option settings.
	 */
	baselineFrameGridOptions: BaselineFrameGridOption

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number | string

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number | string

	/**
	 * The content effects enabling settings.
	 */
	contentEffectsEnablingSettings: ObjectStyleContentEffectsCategorySettings

	/**
	 * Transparency settings for the content of the ObjectStyle.
	 */
	contentTransparencySettings: ContentTransparencySetting

	/**
	 * Emit CSS
	 */
	emitCss: boolean

	/**
	 * If true, the object style will apply an anchored object setting.
	 */
	enableAnchoredObjectOptions: boolean

	/**
	 * If true, the object style will apply an epub tag and class.
	 */
	enableExportTagging: boolean

	/**
	 * If true, the object style will apply a fill.
	 */
	enableFill: boolean

	/**
	 * If true, the object style will apply frame fitting options.
	 */
	enableFrameFittingOptions: boolean

	/**
	 * If true, the object style will apply alt text export options.
	 */
	enableObjectExportAltTextOptions: boolean

	/**
	 * If true, the object style will apply epub export options.
	 */
	enableObjectExportEpubOptions: boolean

	/**
	 * If true, the object style will apply tagged pdf export options.
	 */
	enableObjectExportTaggedPdfOptions: boolean

	/**
	 * If true, the object style will apply a paragraph style.
	 */
	enableParagraphStyle: boolean

	/**
	 * If true, the object style will apply story options.
	 */
	enableStoryOptions: boolean

	/**
	 * If true, the object style will apply a stroke.
	 */
	enableStroke: boolean

	/**
	 * If true, the object style will apply stroke options and corner options.
	 */
	enableStrokeAndCornerOptions: boolean

	/**
	 * If true, the object style will apply auto-sizing text frame options.
	 */
	enableTextFrameAutoSizingOptions: boolean

	/**
	 * If true, the object style will apply baseline text frame options.
	 */
	enableTextFrameBaselineOptions: boolean

	/**
	 * Enable the text frame footnote options category of object style
	 */
	enableTextFrameFootnoteOptions: boolean

	/**
	 * If true, the object style will apply general text frame options.
	 */
	enableTextFrameGeneralOptions: boolean

	/**
	 * If true, the object style will apply text wrap, contour, and non-printing settings.
	 */
	enableTextWrapAndOthers: boolean

	/**
	 * If true, enables the Dimension and Position attributes
	 */
	enableTransformAttributes: boolean

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap

	/**
	 * The corner join applied to the ObjectStyle.
	 */
	endJoin: EndJoin

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the ObjectStyle. .
	 */
	fillColor: Swatch | string

	/**
	 * The fill effects enabling settings.
	 */
	fillEffectsEnablingSettings: ObjectStyleFillEffectsCategorySettings

	/**
	 * The percent of tint to use in the ObjectStyle's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number

	/**
	 * Transparency settings for the fill applied to the ObjectStyle.
	 */
	fillTransparencySettings: FillTransparencySetting

	/**
	 * The frame fitting option to apply to placed or pasted content. Can be applied to a frame, object style, or document or to the application.
	 */
	frameFittingOptions: FrameFittingOption

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	gapTint: number

	/**
	 * The angle of a linear gradient applied to the fill of the ObjectStyle. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The angle of a linear gradient applied to the stroke of the ObjectStyle. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number

	/**
	 * The unique ID of the ObjectStyle.
	 */
	id: number

	/**
	 * If true, class attribute will be generated for the style
	 */
	includeClass: boolean

	/**
	 * The index of the ObjectStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number

	/**
	 * The arrowhead applied to the start of the path.
	 */
	leftLineEnd: ArrowHead

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number

	/**
	 * The name of the ObjectStyle.
	 */
	name: string

	/**
	 * If true, the ObjectStyle does not print.
	 */
	nonprinting: boolean

	/**
	 * The object effects enabling settings.
	 */
	objectEffectsEnablingSettings: ObjectStyleObjectEffectsCategorySettings

	/**
	 * Export options for the object
	 */
	objectExportOptions: ObjectExportOption

	/**
	 * A collection of object style export tag maps.
	 */
	objectStyleExportTagMaps: ObjectStyleExportTagMaps

	/**
	 * If true, the ObjectStyle's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean

	/**
	 * If true, the ObjectStyle's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean

	/**
	 * The parent of the ObjectStyle (a Document, Application or ObjectStyleGroup).
	 */
	parent: any

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead

	/**
	 * Story preference settings.
	 */
	storyPreferences: StoryPreference

	/**
	 * The stroke alignment applied to the ObjectStyle.
	 */
	strokeAlignment: StrokeAlignment

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the ObjectStyle.
	 */
	strokeColor: Swatch | string

	/**
	 * The stroke effects enabling settings.
	 */
	strokeEffectsEnablingSettings: ObjectStyleStrokeEffectsCategorySettings

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number

	/**
	 * Transparency settings for the stroke.
	 */
	strokeTransparencySettings: StrokeTransparencySetting

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | string

	/**
	 * The weight (in points) to apply to the ObjectStyle's stroke.
	 */
	strokeWeight: number | string

	/**
	 * Text frame preference settings.
	 */
	textFramePreferences: TextFramePreference

	/**
	 * The text wrap preference properties that define the default formatting for wrapping text around objects.
	 */
	textWrapPreferences: TextWrapPreference

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	topLeftCornerRadius: number | string

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	topRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number | string

	/**
	 * The layout attribute options to apply to any page item.
	 */
	transformAttributeOptions: TransformAttributeOption

	/**
	 * Transparency settings.
	 */
	transparencySettings: TransparencySetting

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the ObjectStyle.
	 */
	duplicate(): ObjectStyle

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ObjectStyle[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the ObjectStyle to the specified location.
	 * @param to The new location relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the to parameter is before or after.
	 */
	move(to: LocationOptions, reference: ObjectStyle | ObjectStyleGroup | Document | Application): ObjectStyle

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ObjectStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Sets the given dimension attribute state to enabled or disabled state
	 * @param whichAttributes Which dimension attributes do you want to enable or disable.
	 * @param attributeState Attribute state to be set, set true to enable and false to disable the attributes
	 */
	setDimensionAttributeState(whichAttributes: DimensionAttributes, attributeState: boolean): boolean

	/**
	 * Sets the given position attribute state to enabled or disabled state
	 * @param whichAttributes Which position attributes do you want to enable or disable.
	 * @param attributeState Attribute state to be set, set true to enable and false to disable the attributes
	 */
	setPositionAttributeState(whichAttributes: PositionAttributes, attributeState: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ObjectStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of object styles.
 */
declare class ObjectStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ObjectStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: ObjectStyle

	/**
	 * Creates a new ObjectStyle.
	 * @param withProperties Initial values for properties of the new ObjectStyle
	 */
	add(withProperties: object): ObjectStyle

	/**
	 * Returns any ObjectStyle in the collection.
	 */
	anyItem(): ObjectStyle

	/**
	 * Displays the number of elements in the ObjectStyle.
	 */
	count(): number

	/**
	 * Returns every ObjectStyle in the collection.
	 */
	everyItem(): ObjectStyle[]

	/**
	 * Returns the first ObjectStyle in the collection.
	 */
	firstItem(): ObjectStyle

	/**
	 * Returns the ObjectStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ObjectStyle

	/**
	 * Returns the ObjectStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ObjectStyle

	/**
	 * Returns the ObjectStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ObjectStyle

	/**
	 * Returns the ObjectStyles within the specified range.
	 * @param from The ObjectStyle, index, or name at the beginning of the range.
	 * @param to The ObjectStyle, index, or name at the end of the range.
	 */
	itemByRange(from: ObjectStyle | number | string, to: ObjectStyle | number | string): ObjectStyle[]

	/**
	 * Returns the last ObjectStyle in the collection.
	 */
	lastItem(): ObjectStyle

	/**
	 * Returns the middle ObjectStyle in the collection.
	 */
	middleItem(): ObjectStyle

	/**
	 * Returns the ObjectStyle whose index follows the specified ObjectStyle in the collection.
	 * @param obj The ObjectStyle whose index comes before the desired ObjectStyle.
	 */
	nextItem(obj: ObjectStyle): ObjectStyle

	/**
	 * Returns the ObjectStyle with the index previous to the specified index.
	 * @param obj The index of the ObjectStyle that follows the desired ObjectStyle.
	 */
	previousItem(obj: ObjectStyle): ObjectStyle

	/**
	 * Generates a string which, if executed, will return the ObjectStyle.
	 */
	toSource(): string

}

/**
 * A mapping object that maps an object export type to an export tag.
 */
declare class ObjectStyleExportTagMap {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The attributes to map.
	 */
	exportAttributes: string

	/**
	 * The class to map.
	 */
	exportClass: string

	/**
	 * The tag to map.
	 */
	exportTag: string

	/**
	 * The type of export.
	 */
	exportType: string

	/**
	 * The index of the ObjectStyleExportTagMap within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the ObjectStyleExportTagMap (a ObjectStyle).
	 */
	parent: ObjectStyle

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ObjectStyleExportTagMap[]

	/**
	 * Deletes the ObjectStyleExportTagMap.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ObjectStyleExportTagMap.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of object style export tag maps.
 */
declare class ObjectStyleExportTagMaps {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ObjectStyleExportTagMap with the specified index.
	 * @param index The index.
	 */
	[index: number]: ObjectStyleExportTagMap

	/**
	 * Create a new mapping
	 * @param exportType The type of export.
	 * @param exportTag The tag to map.
	 * @param exportClass The class to map.
	 * @param exportAttributes The attributes to map.
	 * @param withProperties Initial values for properties of the new ObjectStyleExportTagMap
	 */
	add(exportType: string, exportTag: string, exportClass: string, exportAttributes: string, withProperties: object): ObjectStyleExportTagMap

	/**
	 * Returns any ObjectStyleExportTagMap in the collection.
	 */
	anyItem(): ObjectStyleExportTagMap

	/**
	 * Displays the number of elements in the ObjectStyleExportTagMap.
	 */
	count(): number

	/**
	 * Returns every ObjectStyleExportTagMap in the collection.
	 */
	everyItem(): ObjectStyleExportTagMap[]

	/**
	 * Returns the first ObjectStyleExportTagMap in the collection.
	 */
	firstItem(): ObjectStyleExportTagMap

	/**
	 * Returns the ObjectStyleExportTagMap with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ObjectStyleExportTagMap

	/**
	 * Returns the ObjectStyleExportTagMaps within the specified range.
	 * @param from The ObjectStyleExportTagMap, index, or name at the beginning of the range.
	 * @param to The ObjectStyleExportTagMap, index, or name at the end of the range.
	 */
	itemByRange(from: ObjectStyleExportTagMap | number | string, to: ObjectStyleExportTagMap | number | string): ObjectStyleExportTagMap[]

	/**
	 * Returns the last ObjectStyleExportTagMap in the collection.
	 */
	lastItem(): ObjectStyleExportTagMap

	/**
	 * Returns the middle ObjectStyleExportTagMap in the collection.
	 */
	middleItem(): ObjectStyleExportTagMap

	/**
	 * Returns the ObjectStyleExportTagMap whose index follows the specified ObjectStyleExportTagMap in the collection.
	 * @param obj The ObjectStyleExportTagMap whose index comes before the desired ObjectStyleExportTagMap.
	 */
	nextItem(obj: ObjectStyleExportTagMap): ObjectStyleExportTagMap

	/**
	 * Returns the ObjectStyleExportTagMap with the index previous to the specified index.
	 * @param obj The index of the ObjectStyleExportTagMap that follows the desired ObjectStyleExportTagMap.
	 */
	previousItem(obj: ObjectStyleExportTagMap): ObjectStyleExportTagMap

	/**
	 * Generates a string which, if executed, will return the ObjectStyleExportTagMap.
	 */
	toSource(): string

}

/**
 * PDF comment object
 */
declare class PDFComment {
	/**
	 * The content of the comment
	 */
	commentContent: string

	/**
	 * The date of the comment
	 */
	commentDate: Date

	/**
	 * The file path of the comment
	 */
	commentFilePath: string

	/**
	 * Whether the comment has been applied
	 */
	commentIsApplied: boolean

	/**
	 * Whether the comment is an orphan
	 */
	commentIsOrphan: boolean

	/**
	 * Path geometry of the comment. Can return: Ordered array containing pathPointArray:Array of Ordered array containing anchor:Array of 2 Reals, leftDirection:Array of 2 Reals, rightDirection:Array of 2 Reals, pathOpen:Boolean.
	 */
	commentPathGeometry: any[]

	/**
	 * The name of the reviewer who made the comment
	 */
	commentReviewer: string

	/**
	 * The status of the comment
	 */
	commentStatus: CommentStatusEnum

	/**
	 * The type of the comment
	 */
	commentType: CommentTypeEnum

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the PDFComment.
	 */
	id: number

	/**
	 * The index of the PDFComment within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the PDFComment; this is an alias to the PDFComment's label property.
	 */
	name: string

	/**
	 * The parent of the PDFComment (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of reply objects
	 */
	replies: Replies

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Change the status of a comment
	 * @param commentStatus The new status of the comment
	 * @param withProperties Initial values for properties of the new PDFComment
	 */
	changeStatus(commentStatus: CommentStatusEnum, withProperties: object): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PDFComment[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the PDFComment.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the PDFComment.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of PDF comment objects
 */
declare class PDFComments {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PDFComment with the specified index.
	 * @param index The index.
	 */
	[index: number]: PDFComment

	/**
	 * Returns any PDFComment in the collection.
	 */
	anyItem(): PDFComment

	/**
	 * Displays the number of elements in the PDFComment.
	 */
	count(): number

	/**
	 * Returns every PDFComment in the collection.
	 */
	everyItem(): PDFComment[]

	/**
	 * Returns the first PDFComment in the collection.
	 */
	firstItem(): PDFComment

	/**
	 * Returns the PDFComment with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PDFComment

	/**
	 * Returns the PDFComment with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PDFComment

	/**
	 * Returns the PDFComment with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PDFComment

	/**
	 * Returns the PDFComments within the specified range.
	 * @param from The PDFComment, index, or name at the beginning of the range.
	 * @param to The PDFComment, index, or name at the end of the range.
	 */
	itemByRange(from: PDFComment | number | string, to: PDFComment | number | string): PDFComment[]

	/**
	 * Returns the last PDFComment in the collection.
	 */
	lastItem(): PDFComment

	/**
	 * Returns the middle PDFComment in the collection.
	 */
	middleItem(): PDFComment

	/**
	 * Returns the PDFComment whose index follows the specified PDFComment in the collection.
	 * @param obj The PDFComment whose index comes before the desired PDFComment.
	 */
	nextItem(obj: PDFComment): PDFComment

	/**
	 * Returns the PDFComment with the index previous to the specified index.
	 * @param obj The index of the PDFComment that follows the desired PDFComment.
	 */
	previousItem(obj: PDFComment): PDFComment

	/**
	 * Generates a string which, if executed, will return the PDFComment.
	 */
	toSource(): string

}

/**
 * Reply object.
 */
declare class Reply {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Reply.
	 */
	id: number

	/**
	 * The index of the Reply within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Reply; this is an alias to the Reply's label property.
	 */
	name: string

	/**
	 * The parent of the Reply (a PDFComment).
	 */
	parent: PDFComment

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The content of the reply
	 */
	replyContent: string

	/**
	 * The date of the reply
	 */
	replyDate: Date

	/**
	 * The name of the reviewer who made the reply
	 */
	replyReviewer: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Reply[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Reply.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of reply objects
 */
declare class Replies {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Reply with the specified index.
	 * @param index The index.
	 */
	[index: number]: Reply

	/**
	 * Returns any Reply in the collection.
	 */
	anyItem(): Reply

	/**
	 * Displays the number of elements in the Reply.
	 */
	count(): number

	/**
	 * Returns every Reply in the collection.
	 */
	everyItem(): Reply[]

	/**
	 * Returns the first Reply in the collection.
	 */
	firstItem(): Reply

	/**
	 * Returns the Reply with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Reply

	/**
	 * Returns the Reply with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Reply

	/**
	 * Returns the Reply with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Reply

	/**
	 * Returns the Replies within the specified range.
	 * @param from The Reply, index, or name at the beginning of the range.
	 * @param to The Reply, index, or name at the end of the range.
	 */
	itemByRange(from: Reply | number | string, to: Reply | number | string): Reply[]

	/**
	 * Returns the last Reply in the collection.
	 */
	lastItem(): Reply

	/**
	 * Returns the middle Reply in the collection.
	 */
	middleItem(): Reply

	/**
	 * Returns the Reply whose index follows the specified Reply in the collection.
	 * @param obj The Reply whose index comes before the desired Reply.
	 */
	nextItem(obj: Reply): Reply

	/**
	 * Returns the Reply with the index previous to the specified index.
	 * @param obj The index of the Reply that follows the desired Reply.
	 */
	previousItem(obj: Reply): Reply

	/**
	 * Generates a string which, if executed, will return the Reply.
	 */
	toSource(): string

}

/**
 * Story preferences.
 */
declare class StoryPreference extends Preference {
	/**
	 * The type of text frame.
	 */
	frameType: FrameTypes

	/**
	 * If true, adjust the position of characters at the edges of the frame to provide a better appearance.
	 */
	opticalMarginAlignment: boolean

	/**
	 * The point size used as the basis for calculating optical margin alignment. (Range: 0.1 to 1296)
	 */
	opticalMarginSize: number | string

	/**
	 * The direction of the story.
	 */
	storyDirection: StoryDirectionOptions

	/**
	 * The orientation of the text in the story.
	 */
	storyOrientation: StoryHorizontalOrVertical

}

/**
 * Text frame preferences.
 */
declare class TextFramePreference extends Preference {
	/**
	 * The reference point for auto sizing of text frame. Reference point is automatically adjusted to the suitable value depending on the auto-sizing type value. As an example, top left reference point becomes top center for height only dimension
	 */
	autoSizingReferencePoint: AutoSizingReferenceEnum

	/**
	 * Auto-sizing type of text frame. Based on type, reference value is automatically adjusted. For example, for height only type, top-left reference point becomes top-center. Recommended to change auto-sizing type, after setting other auto-sizing attributes
	 */
	autoSizingType: AutoSizingTypeEnum

	/**
	 * The distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	firstBaselineOffset: FirstBaseline

	/**
	 * If true, enable overrides to document footnote options.
	 */
	footnotesEnableOverrides: boolean

	/**
	 * Minimum Spacing Before First Footnote
	 */
	footnotesMinimumSpacing: number | string

	/**
	 * Space between footnotes.
	 */
	footnotesSpaceBetween: number | string

	/**
	 * If true, enable straddling footnotes.
	 */
	footnotesSpanAcrossColumns: boolean

	/**
	 * If true, ignores text wrap settings for drawn or placed objects in the text frame.
	 */
	ignoreWrap: boolean

	/**
	 * The amount to offset text from the edges of the text frame, specified either as a single value applied uniformly to all sides of the text frame or as an array of 4 values in the format [top inset, left inset, bottom inset, right inset].
	 */
	insetSpacing: number | [number, number, number, number]

	/**
	 * The minimum distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	minimumFirstBaselineOffset: number | string

	/**
	 * The minimum height for auto-sizing of the text frame.
	 */
	minimumHeightForAutoSizing: number | string

	/**
	 * The minimum width for auto-sizing of the text frame.
	 */
	minimumWidthForAutoSizing: number | string

	/**
	 * The number of columns in the text frame. Note: Depending on the value of use fixed column width, the number of columns can change automatically when the text frame size changes.
	 */
	textColumnCount: number

	/**
	 * The column width of the columns in the text frame.
	 */
	textColumnFixedWidth: number | string

	/**
	 * The space between columns in the text frame.
	 */
	textColumnGutter: number | string

	/**
	 * The maximum column width of the columns in the text frame. Use 0 to indicate no upper limit.
	 */
	textColumnMaxWidth: number | string

	/**
	 * If true, maintains column width when the text frame is resized. If false, causes columns to resize when the text frame is resized. Note: When true, resizing the frame can change the number of columns in the frame.
	 */
	useFixedColumnWidth: boolean

	/**
	 * If true, maintains column width between a min and max range when the text frame is resized. If false, causes columns to resize when the text frame is resized. Note: When true, resizing the frame can change the number of columns in the frame.
	 */
	useFlexibleColumnWidth: boolean

	/**
	 * If true, minimum height value is used during the auto-sizing of text frame.
	 */
	useMinimumHeightForAutoSizing: boolean

	/**
	 * If true, minimum width value is used during the auto-sizing of text frame.
	 */
	useMinimumWidthForAutoSizing: boolean

	/**
	 * If true, line-breaks are not introduced after auto sizing.
	 */
	useNoLineBreaksForAutoSizing: boolean

	/**
	 * Vertically justify balanced across all columns.
	 */
	verticalBalanceColumns: boolean

	/**
	 * The vertical alignment of the text content.
	 */
	verticalJustification: VerticalJustification

	/**
	 * The maximum amount of vertical space between two paragraphs. Note: Valid only when vertical justification is justified; the specified amount is applied in addition to the space before or space after values defined for the paragraph.
	 */
	verticalThreshold: number | string

}

/**
 * Text preferences.
 */
declare class TextPreference extends Preference {
	/**
	 * If true, moves wrapped text to the next available leading increment below the text wrap objects (skip by leading).
	 */
	abutTextToTextWrap: boolean

	/**
	 * Specifies where to insert new pages in response to overset text.
	 */
	addPages: AddPageOptions

	/**
	 * The amount that the baseline shift increases each time the user presses the option/alt-shift-up arrow keys or decreases each time the user presses the option/alt-shift-down arrow keys. (Range: .001 to 100)
	 */
	baselineShiftKeyIncrement: number | string

	/**
	 * Enable auto-deletion of pages containing empty threaded text frames.
	 */
	deleteEmptyPages: boolean

	/**
	 * If true, highlights character and paragraph styles with colored backgrounds.
	 */
	enableStylePreviewMode: boolean

	/**
	 * If true, highlights custom kerned or tracked characters.
	 */
	highlightCustomSpacing: boolean

	/**
	 * If true, highlights hyphenation and justification rule violations in the text.
	 */
	highlightHjViolations: boolean

	/**
	 * If true, highlights paragraphs that violate keep options.
	 */
	highlightKeeps: boolean

	/**
	 * If true, uses on-screen highlighting to identify kinsoku.
	 */
	highlightKinsoku: boolean

	/**
	 * If true, highlights missing fonts.
	 */
	highlightSubstitutedFonts: boolean

	/**
	 * If true, highlights substituted glyphs.
	 */
	highlightSubstitutedGlyphs: boolean

	/**
	 * If true, justifies text around text wrap objects.
	 */
	justifyTextWraps: boolean

	/**
	 * The amount the kerning value per 1000 ems increases each time the user presses of the option/alt-right arrow keys or decreases each time the user presses the option/alt-left arrow keys. (Range: 1 to 100)
	 */
	kerningKeyIncrement: number

	/**
	 * The amount that leading increases each time the user presses the option/alt-up arrow keys or decreases each time the user presses the option/alt-down arrow keys. (Range: .001 to 100)
	 */
	leadingKeyIncrement: number | string

	/**
	 * Restrict the adding of pages during smart text reflow to overridden master text frames.
	 */
	limitToMasterTextFrames: boolean

	/**
	 * If true, links placed text files and spreadsheet files. If false, embeds the files.
	 */
	linkTextFilesWhenImporting: boolean

	/**
	 * Preserve left-hand and right-and pages when facing pages are enabled during smart text reflow.
	 */
	preserveFacingPageSpreads: boolean

	/**
	 * If true, Japanese composer treats quotes as half width and rotates them in vertical.
	 */
	quoteCharactersRotatedInVertical: boolean

	/**
	 * If true, shows hidden characters.
	 */
	showInvisibles: boolean

	/**
	 * The size of text formatted as small caps, specified as a percentage of the font size. (Range: 1 to 200)
	 */
	smallCap: number

	/**
	 * If true, enable automatic adding and deleting of pages in response to text reflow.
	 */
	smartTextReflow: boolean

	/**
	 * The position of subscript characters, specified as a percentage of the regular leading. (Range: -500 to 500)
	 */
	subscriptPosition: number

	/**
	 * The size of subscript characters, specified as a percentage of the font size. (Range: 0 to 200)
	 */
	subscriptSize: number

	/**
	 * The position of superscript characters, specified as a percentage of the regular leading. (Range: -500 to 500)
	 */
	superscriptPosition: number

	/**
	 * The size of superscript characters, specified as a percentage of the font size. (Range: 0 to 200)
	 */
	superscriptSize: number

	/**
	 * If true, converts straight quotes to typographic quotes.
	 */
	typographersQuotes: boolean

	/**
	 * If true, uses the glyph CID to get the mojikumi class of the character.
	 */
	useCidMojikumi: boolean

	/**
	 * If true, reverses X and Y scaling on Roman characters in vertical text.
	 */
	useNewVerticalScaling: boolean

	/**
	 * If true, automatically selects the correct optical size.
	 */
	useOpticalSize: boolean

	/**
	 * If true, applies the leading changes made to a text range to the entire paragraph. If false, applies leading changes only to the text range.
	 */
	useParagraphLeading: boolean

	/**
	 * If true, text wrap does not affect text on layers above the layer that contains the text wrap object. If false, text wrap affects text on all visible layers.
	 */
	zOrderTextWrap: boolean

}

/**
 * Text defaults.
 */
declare class TextDefault extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean

	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string

	/**
	 * The font applied to the TextDefault, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | string

	/**
	 * The named grid in use.
	 */
	appliedNamedGrid: NamedGrid

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string

	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | string

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string

	/**
	 * The desired width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number

	/**
	 * The desired letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500)
	 */
	desiredLetterSpacing: number

	/**
	 * The desired word spacing, specified as a percentage of the font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number

	/**
	 * The character style to apply to the drop cap.
	 */
	dropCapStyle: CharacterStyle | string

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the TextDefault. .
	 */
	fillColor: Swatch | string

	/**
	 * The tint (as a percentage) of the fill color of the TextDefault. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | string

	/**
	 * The name of the font style.
	 */
	fontStyle: string

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: (number | string)[]

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[]

	/**
	 * If true, aligns only the first line to the frame grid or baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number

	/**
	 * The horizontal scaling applied to the TextDefault.
	 */
	horizontalScale: number

	/**
	 * The relative desirability of better spacing vs. fewer hyphens. A lower value results in greater use of hyphens. (Range: 0 to 100)
	 */
	hyphenWeight: number

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean

	/**
	 * The mininum number of letters at the beginning of a word that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number

	/**
	 * The minimum number of letters at the end of a word that can be broken by a hyphen.
	 */
	hyphenateBeforeLast: number

	/**
	 * If true, allows hyphenation of capitalized words.
	 */
	hyphenateCapitalizedWords: boolean

	/**
	 * The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean

	/**
	 * The minimum number of letters a word must have in order to qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number

	/**
	 * If true, allows hyphenation.
	 */
	hyphenation: boolean

	/**
	 * The amount of white space allowed at the end of a line of non-justified text before hypenation begins. Note: Valid when composer is single-line composer.
	 */
	hyphenationZone: number | string

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean

	/**
	 * The number of grid squares in which to arrange the text.
	 */
	jidori: number

	/**
	 * The paragraph alignment.
	 */
	justification: Justification

	/**
	 * Use of Kashidas for justification
	 */
	kashidas: KashidasOptions

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean

	/**
	 * The alignment of kenten characters relative to the parent characters.
	 */
	kentenAlignment: KentenAlignment

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenStrokeTint: number

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenTint: number

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number

	/**
	 * The vertical size of kenten charachers as a percent of the original size.
	 */
	kentenYScale: number

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | string

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | string

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean

	/**
	 * The maximum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number

	/**
	 * The maximum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number

	/**
	 * The maximum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number

	/**
	 * If true, consecutive para borders with completely similar properties are merged.
	 */
	mergeConsecutiveParaBorders: boolean

	/**
	 * The minimum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number

	/**
	 * The minimum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number

	/**
	 * The minimum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults

	/**
	 * A collection of nested GREP styles.
	 */
	nestedGrepStyles: NestedGrepStyles

	/**
	 * A collection of nested line styles.
	 */
	nestedLineStyles: NestedLineStyles

	/**
	 * A collection of nested styles.
	 */
	nestedStyles: NestedStyles

	/**
	 * If true, keeps the text on the same line.
	 */
	noBreak: boolean

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number

	/**
	 * Numbering restart policies.
	 */
	numberingRestartPolicies: NumberingRestartPolicy

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean

	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean

	/**
	 * If true, use overlapping swash forms in OpenType fonts
	 */
	otfOverlapSwash: boolean

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean

	/**
	 * If true, applies italics to half-width alphanumerics.
	 */
	otfRomanItalics: boolean

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean

	/**
	 * If true, use stretched alternate forms in OpenType fonts
	 */
	otfStretchedAlternate: boolean

	/**
	 * If true, use stylistic alternate forms in OpenType fonts
	 */
	otfStylisticAlternate: boolean

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphBorderBottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphBorderBottomLeftCornerRadius: number | string

	/**
	 * The bottom line weight of the border of paragraph.
	 */
	paragraphBorderBottomLineWeight: number | string

	/**
	 * The distance to offset the bottom edge of the paragraph border.
	 */
	paragraphBorderBottomOffset: number | string

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph border.
	 */
	paragraphBorderBottomOrigin: ParagraphBorderBottomOriginEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphBorderBottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphBorderBottomRightCornerRadius: number | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph stroke.
	 */
	paragraphBorderColor: Swatch | string

	/**
	 * If true, then paragraph border is also displayed at the points where the paragraph splits across frames or columns.
	 */
	paragraphBorderDisplayIfSplits: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph border gap. Note: Valid only when the border type is not solid.
	 */
	paragraphBorderGapColor: Swatch | string

	/**
	 * If true, the paragraph border gap will overprint. Note: Valid only when border type is not solid.
	 */
	paragraphBorderGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the paragraph border gap. Note: Valid only when the border type is not solid. (Range: 0 to 100)
	 */
	paragraphBorderGapTint: number

	/**
	 * The left line weight of the border of paragraph.
	 */
	paragraphBorderLeftLineWeight: number | string

	/**
	 * The distance to offset the left edge of the paragraph border.
	 */
	paragraphBorderLeftOffset: number | string

	/**
	 * If true, the paragraph border is on.
	 */
	paragraphBorderOn: boolean

	/**
	 * If true, the paragraph border will overprint.
	 */
	paragraphBorderOverprint: boolean

	/**
	 * The right line weight of the border of paragraph.
	 */
	paragraphBorderRightLineWeight: number | string

	/**
	 * The distance to offset the right edge of the paragraph border.
	 */
	paragraphBorderRightOffset: number | string

	/**
	 * The end shape of an open path.
	 */
	paragraphBorderStrokeEndCap: EndCap

	/**
	 * The corner join applied to the TextDefault.
	 */
	paragraphBorderStrokeEndJoin: EndJoin

	/**
	 * The tint (as a percentage) of the paragraph stroke. (Range: 0 to 100)
	 */
	paragraphBorderTint: number

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphBorderTopLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphBorderTopLeftCornerRadius: number | string

	/**
	 * The top line weight of the border of paragraph.
	 */
	paragraphBorderTopLineWeight: number | string

	/**
	 * The distance to offset the top edge of the paragraph border.
	 */
	paragraphBorderTopOffset: number | string

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph border.
	 */
	paragraphBorderTopOrigin: ParagraphBorderTopOriginEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerRadius: number | string

	/**
	 * The type of the border for the paragraph.
	 */
	paragraphBorderType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph border.
	 */
	paragraphBorderWidth: ParagraphBorderEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long
	 */
	paragraphKashidaWidth: number

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphShadingBottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphShadingBottomLeftCornerRadius: number | string

	/**
	 * The distance to offset the bottom edge of the paragraph.
	 */
	paragraphShadingBottomOffset: number | string

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphShadingBottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphShadingBottomRightCornerRadius: number | string

	/**
	 * If true, forces the shading of the paragraph to be clipped with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph shading.
	 */
	paragraphShadingColor: Swatch | string

	/**
	 * The distance to offset the left edge of the paragraph.
	 */
	paragraphShadingLeftOffset: number | string

	/**
	 * If true, the paragraph shading is On.
	 */
	paragraphShadingOn: boolean

	/**
	 * If true, the paragraph shading will overprint.
	 */
	paragraphShadingOverprint: boolean

	/**
	 * The distance to offset the right edge of the paragraph.
	 */
	paragraphShadingRightOffset: number | string

	/**
	 * If true, suppress printing of the shading of the paragraph.
	 */
	paragraphShadingSuppressPrinting: boolean

	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 0 to 100)
	 */
	paragraphShadingTint: number

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphShadingTopLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphShadingTopLeftCornerRadius: number | string

	/**
	 * The distance to offset the top edge of the paragraph.
	 */
	paragraphShadingTopOffset: number | string

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerRadius: number | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum

	/**
	 * The text size.
	 */
	pointSize: number | string

	/**
	 * The text position relative to the baseline.
	 */
	position: Position

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * The hyphenation style chosen for the provider.
	 */
	providerHyphenationStyle: HyphenationStyleEnum

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | string

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount.
	 */
	rubyOverhang: boolean

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number

	/**
	 * The ruby spacing relative to the parent text.
	 */
	rubyParentSpacing: RubyParentSpacing

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100)
	 */
	rubyTint: number

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number

	/**
	 * If true, places a rule above the paragraph.
	 */
	ruleAbove: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule above.
	 */
	ruleAboveColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule above. Note: Valid only when the paragraph rule above type is not solid.
	 */
	ruleAboveGapColor: Swatch | string

	/**
	 * If true, the stroke gap of the paragraph rule above will overprint. Note: Valid only the rule above type is not solid.
	 */
	ruleAboveGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule. (Range: 0 to 100) Note: Valid only when the rule above type is not solid.
	 */
	ruleAboveGapTint: number

	/**
	 * The distance to indent the left edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number | string

	/**
	 * The line weight of the rule above.
	 */
	ruleAboveLineWeight: number | string

	/**
	 * The amount to offset the paragraph rule above from the baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number | string

	/**
	 * If true, the paragraph rule above will overprint.
	 */
	ruleAboveOverprint: boolean

	/**
	 * The distance to indent the right edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveRightIndent: number | string

	/**
	 * The tint (as a percentage) of the paragraph rule above. (Range: 0 to 100)
	 */
	ruleAboveTint: number

	/**
	 * The stroke type of the rule above the paragraph.
	 */
	ruleAboveType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth

	/**
	 * If true, applies a paragraph rule below.
	 */
	ruleBelow: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule below.
	 */
	ruleBelowColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule below. Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapColor: Swatch | string

	/**
	 * If true, the gap color of the rule below will overprint.
	 */
	ruleBelowGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule below. (Range: 0 to 100) Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number

	/**
	 * The distance to indent the left edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number | string

	/**
	 * The line weight of the rule below.
	 */
	ruleBelowLineWeight: number | string

	/**
	 * The amount to offset the the paragraph rule below from the baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number | string

	/**
	 * If true, the rule below will overprint.
	 */
	ruleBelowOverprint: boolean

	/**
	 * The distance to indent the right edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowRightIndent: number | string

	/**
	 * The tint (as a percentage) of the paragraph rule below. (Range: 0 to 100)
	 */
	ruleBelowTint: number

	/**
	 * The stroke type of the rule below the paragraph.
	 */
	ruleBelowType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing

	/**
	 * If true, the line changes size when characters are scaled.
	 */
	scaleAffectsLineHeight: boolean

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification

	/**
	 * The skew angle of the TextDefault.
	 */
	skew: number

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | string

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | string

	/**
	 * The minimum space after a span or a split column
	 */
	spanColumnMinSpaceAfter: number | string

	/**
	 * The minimum space before a span or a split column
	 */
	spanColumnMinSpaceBefore: number | string

	/**
	 * Whether a paragraph should be a single column, span columns or split columns
	 */
	spanColumnType: SpanColumnTypeOptions

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions

	/**
	 * The inside gutter if the paragraph splits columns
	 */
	splitColumnInsideGutter: number | string

	/**
	 * The outside gutter if the paragraph splits columns
	 */
	splitColumnOutsideGutter: number | string

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | string

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100)
	 */
	strikeThroughTint: number

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | string

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the TextDefault.
	 */
	strokeColor: Swatch | string

	/**
	 * The tint (as a percentage) of the stroke color of the TextDefault. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | string

	/**
	 * A list of the tab stops in the paragraph. Can return: Array of Arrays of Property Name/Value Pairs.
	 */
	tabList: any[]

	/**
	 * A collection of tab stops.
	 */
	tabStops: TabStops

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number

	/**
	 * If true, underlines the text.
	 */
	underline: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | string

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100)
	 */
	underlineTint: number

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | string

	/**
	 * The vertical scaling applied to the TextDefault.
	 */
	verticalScale: number

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment

	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number

}

/**
 * Document preferences.
 */
declare class DocumentPreference extends Preference {
	/**
	 * If true, guarantees that when pages are added to a spread it will contain a maximum of two pages. If false, allows pages to be added or moved into existing spreads. For override information, see preserve layout when shuffling.
	 */
	allowPageShuffle: boolean

	/**
	 * The direction of text in the column.
	 */
	columnDirection: HorizontalOrVertical

	/**
	 * The color of the column guides, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values,, or as a UI color.
	 */
	columnGuideColor: [number, number, number] | UIColors

	/**
	 * If true, locks column guides.
	 */
	columnGuideLocked: boolean

	/**
	 * If true, the document A-master has primary text frames when a new document is created.
	 */
	createPrimaryTextFrame: boolean

	/**
	 * The amount to offset the bottom document bleed. Note: To set the bleed bottom offset, document bleed uniform size must be false.
	 */
	documentBleedBottomOffset: number | string

	/**
	 * The amount to offset the inside or left document bleed. Note: To set the bleed inside or left offset, document bleed uniform size must be false.
	 */
	documentBleedInsideOrLeftOffset: number | string

	/**
	 * The amount to offset the outside or right document bleed. Note: To set the bleed outside or right offset, document bleed uniform size must be false.
	 */
	documentBleedOutsideOrRightOffset: number | string

	/**
	 * The amount to offset the top document bleed.
	 */
	documentBleedTopOffset: number | string

	/**
	 * If true, uses the document bleed top offset value for bleed offset measurements on all sides of the document. The default setting is true.
	 */
	documentBleedUniformSize: boolean

	/**
	 * If true, uses the slug top offset value for slug measurements on all sides of the document. The default value is false.
	 */
	documentSlugUniformSize: boolean

	/**
	 * If true, the document has facing pages.
	 */
	facingPages: boolean

	/**
	 * The intent for a document.
	 */
	intent: DocumentIntentOptions

	/**
	 * The color of the margin guides, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	marginGuideColor: [number, number, number] | UIColors

	/**
	 * If true, overprints black when saving the document.
	 */
	overprintBlack: boolean

	/**
	 * The placement of the page binding.
	 */
	pageBinding: PageBindingOptions

	/**
	 * The height of the page.
	 */
	pageHeight: number | string

	/**
	 * The page orientation.
	 */
	pageOrientation: PageOrientation

	/**
	 * The size of the page.
	 */
	pageSize: string

	/**
	 * The width of the page.
	 */
	pageWidth: number | string

	/**
	 * The number of pages in the document. (Range: 1 to 9999)
	 */
	pagesPerDocument: number

	/**
	 * If true, preserves the layout of spreads that contained more than two pages when allow page shuffle was turned on. If false, changes multi-page spreads to two-page spreads if the spreads were created or changed since allow page shuffle was turned on.
	 */
	preserveLayoutWhenShuffling: boolean

	/**
	 * The amount to offset the bottom slug. Note: To set the slug bottom offset, document slug uniform size must be false.
	 */
	slugBottomOffset: number | string

	/**
	 * The amount to offset the inside or left slug. Note: To set the slug inside or left offset, document slug uniform size must be false.
	 */
	slugInsideOrLeftOffset: number | string

	/**
	 * The amount to offset the outside or right slug. Note: To set the slug right or outside offset, document slug uniform size must be false.
	 */
	slugRightOrOutsideOffset: number | string

	/**
	 * The amount to offset the top slug.
	 */
	slugTopOffset: number | string

	/**
	 * If true, causes UI-based snippet import to use original location for page items.
	 */
	snippetImportUsesOriginalLocation: boolean

	/**
	 * The starting page number for a document. This is the same as the starting page number for the first section of a document. Default value is 1.
	 */
	startPageNumber: number

}

/**
 * Grid preferences.
 */
declare class GridPreference extends Preference {
	/**
	 * The color of the baseline grid, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color. .
	 */
	baselineColor: [number, number, number] | UIColors

	/**
	 * The amount of space between baseline grid lines.
	 */
	baselineDivision: number | string

	/**
	 * The zero point for the baseline grid offset.
	 */
	baselineGridRelativeOption: BaselineGridRelativeOption

	/**
	 * If true, displays the baseline grid.
	 */
	baselineGridShown: boolean

	/**
	 * The amount to offset the baseline grid from the zero point.
	 */
	baselineStart: number | string

	/**
	 * The magnification (as a percentage) less than which ruler guides do not appear. (Range: 5 to 4000)
	 */
	baselineViewThreshold: number

	/**
	 * If true, displays the document grid.
	 */
	documentGridShown: boolean

	/**
	 * If true, an object snaps to the nearest grid line when the object is created, moved, or resized.
	 */
	documentGridSnapto: boolean

	/**
	 * The color of the document grid, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	gridColor: [number, number, number] | UIColors

	/**
	 * If true, places grids behind all other objects on the spread.
	 */
	gridsInBack: boolean

	/**
	 * The number of rows into which to subdivide the space between horizontal document grid lines.
	 */
	horizontalGridSubdivision: number

	/**
	 * The amount of space between major horizontal lines in the document grid.
	 */
	horizontalGridlineDivision: number | string

	/**
	 * The number of columns into which to subdivide the space between vertical document grid lines.
	 */
	verticalGridSubdivision: number

	/**
	 * The amount of space between major vertical lines in the document grid.
	 */
	verticalGridlineDivision: number | string

}

/**
 * Guide preferences.
 */
declare class GuidePreference extends Preference {
	/**
	 * If true, places guides behind all other objects on the spread.
	 */
	guidesInBack: boolean

	/**
	 * If true, guides cannot be moved, added, or deleted.
	 */
	guidesLocked: boolean

	/**
	 * If true, displays the guides.
	 */
	guidesShown: boolean

	/**
	 * If true, an object within the specified range snaps to the nearest guide when the object is created, moved, or resized. For range information, see guide snapto zone.
	 */
	guidesSnapto: boolean

	/**
	 * The color of the guide, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. .
	 */
	rulerGuidesColor: [number, number, number] | UIColors

	/**
	 * The magnification (as a percentage) less than which ruler guides do not appear. (Range: 5 to 4000)
	 */
	rulerGuidesViewThreshold: number

}

/**
 * Margin preferences.
 */
declare class MarginPreference extends Preference {
	/**
	 * The bottom edge of the MarginPreference.
	 */
	bottom: number | string

	/**
	 * The number of columns to place on the page.
	 */
	columnCount: number

	/**
	 * The direction of text in the column.
	 */
	columnDirection: HorizontalOrVertical

	/**
	 * The distance between columns.
	 */
	columnGutter: number | string

	/**
	 * The distance that each column guide is placed from the left margin, formatted as an array in the format [guide1, guide2, guide3].
	 */
	columnsPositions: (number | string)[]

	/**
	 * If false, columns are evenly spaced. If true, columns can have custom widths.
	 */
	customColumns: boolean

	/**
	 * The left edge of the MarginPreference.
	 */
	left: number | string

	/**
	 * The right edge of the MarginPreference.
	 */
	right: number | string

	/**
	 * The top edge of the MarginPreference.
	 */
	top: number | string

}

/**
 * Pasteboard preferences.
 */
declare class PasteboardPreference extends Preference {
	/**
	 * The color of bleed guides, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	bleedGuideColor: [number, number, number] | UIColors

	/**
	 * If true, match the Preview Background color to Theme Color, else use the color-value specified in Preview Background color drop down.
	 */
	matchPreviewBackgroundToThemeColor: boolean

	/**
	 * The minimum horizontal and vertical pasteboard margins. A horizontal margin of -1 means one document page width
	 */
	pasteboardMargins: (number | string)[]

	/**
	 * The color of the preview background, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	previewBackgroundColor: [number, number, number] | UIColors

	/**
	 * The color of slug guides, specified either as an array of three doubles, each in the range 0 to 255, representing R, G, and B values, or as a UI color.
	 */
	slugGuideColor: [number, number, number] | UIColors

}

/**
 * View preferences.
 */
declare class ViewPreference extends Preference {
	/**
	 * The distance to move a specified object when an arrow key is pressed. (Range depends on the measurement unit. For points: 0.001 to 100; picas: 0p0.001 to 8p4; mm: 0 to 35.278; cm: 0 to 3.5278; inches: 0 to 1.3889; ciceros: 0c0.001 to 7c9.839)
	 */
	cursorKeyIncrement: number | string

	/**
	 * The range (in pixels) within which an object snaps to guides. (Range: 1 to 36) Note: Snapping occurs only when guides are shown.
	 */
	guideSnaptoZone: number

	/**
	 * The distance (in points) between major tick marks on the horizontal ruler. (Range: 4 to 256) Valid only when horizontal measurement units is custom.
	 */
	horizontalCustomPoints: number

	/**
	 * The measurement unit for the horizontal ruler and other horizontally-measured spaces such as grid columns, horizontal offsets, column gutters, or others.
	 */
	horizontalMeasurementUnits: MeasurementUnits

	/**
	 * The number of points per inch, typically 72. (Range: 60 to 80)
	 */
	pointsPerInch: number

	/**
	 * The measurement unit for the print dialog.
	 */
	printDialogMeasurementUnits: MeasurementUnits

	/**
	 * The default zero point at the intersection of the vertical and horizontal rulers and the scope of the horizontal ruler.
	 */
	rulerOrigin: RulerOrigin

	/**
	 * If true, displays borders of unselected frames and the diagonal lines in empty unselected frames.
	 */
	showFrameEdges: boolean

	/**
	 * If true, notes are displayed.
	 */
	showNotes: boolean

	/**
	 * If true, displays the horizontal and vertical rulers.
	 */
	showRulers: boolean

	/**
	 * The measurement unit for stroke measurements.
	 */
	strokeMeasurementUnits: MeasurementUnits

	/**
	 * The measurement unit for text size measurements.
	 */
	textSizeMeasurementUnits: MeasurementUnits

	/**
	 * The measurement units for typography.
	 */
	typographicMeasurementUnits: MeasurementUnits

	/**
	 * The distance (in points) between major tick marks on the vertical ruler. (Range: 4 to 256) Valid only when vertical measurement units is custom.
	 */
	verticalCustomPoints: number

	/**
	 * The measurement unit for the vertical ruler and other vertically-measured spaces such as grid rows, vertical offsets, row heights, or others.
	 */
	verticalMeasurementUnits: MeasurementUnits

}

/**
 * A preset that contains all of the new document settings.
 */
declare class DocumentPreset {
	/**
	 * The bottom edge of the DocumentPreset.
	 */
	bottom: number | string

	/**
	 * The number of columns to place on the page.
	 */
	columnCount: number

	/**
	 * The distance between columns.
	 */
	columnGutter: number | string

	/**
	 * If true, the document A-master has primary text frames when a new document is created.
	 */
	createPrimaryTextFrame: boolean

	/**
	 * The amount to offset the bottom document bleed. Note: To set the bleed bottom offset, document bleed uniform size must be false.
	 */
	documentBleedBottomOffset: number | string

	/**
	 * The amount to offset the inside or left document bleed. Note: To set the bleed inside or left offset, document bleed uniform size must be false.
	 */
	documentBleedInsideOrLeftOffset: number | string

	/**
	 * The amount to offset the outside or right document bleed. Note: To set the bleed outside or right offset, document bleed uniform size must be false.
	 */
	documentBleedOutsideOrRightOffset: number | string

	/**
	 * The amount to offset the top document bleed.
	 */
	documentBleedTopOffset: number | string

	/**
	 * If true, uses the document bleed top offset value for bleed offset measurements on all sides of the document. The default setting is true.
	 */
	documentBleedUniformSize: boolean

	/**
	 * If true, uses the slug top offset value for slug measurements on all sides of the document. The default value is false.
	 */
	documentSlugUniformSize: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the document has facing pages.
	 */
	facingPages: boolean

	/**
	 * The unique ID of the DocumentPreset.
	 */
	id: number

	/**
	 * The index of the DocumentPreset within its containing object.
	 */
	index: number

	/**
	 * The intent for a document.
	 */
	intent: DocumentIntentOptions

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The left edge of the DocumentPreset.
	 */
	left: number | string

	/**
	 * The name of the DocumentPreset.
	 */
	name: string

	/**
	 * The height of the page.
	 */
	pageHeight: number | string

	/**
	 * The page orientation.
	 */
	pageOrientation: PageOrientation

	/**
	 * The size of the page.
	 */
	pageSize: string

	/**
	 * The width of the page.
	 */
	pageWidth: number | string

	/**
	 * The number of pages in the document. (Range: 1 to 9999)
	 */
	pagesPerDocument: number

	/**
	 * The parent of the DocumentPreset (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The right edge of the DocumentPreset.
	 */
	right: number | string

	/**
	 * The amount to offset the bottom slug. Note: To set the slug bottom offset, document slug uniform size must be false.
	 */
	slugBottomOffset: number | string

	/**
	 * The amount to offset the inside or left slug. Note: To set the slug inside or left offset, document slug uniform size must be false.
	 */
	slugInsideOrLeftOffset: number | string

	/**
	 * The amount to offset the outside or right slug. Note: To set the slug right or outside offset, document slug uniform size must be false.
	 */
	slugRightOrOutsideOffset: number | string

	/**
	 * The amount to offset the top slug.
	 */
	slugTopOffset: number | string

	/**
	 * The starting page number for a document. This is the same as the starting page number for the first section of a document. Default value is 1.
	 */
	startPageNumber: number

	/**
	 * The top edge of the DocumentPreset.
	 */
	top: number | string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the DocumentPreset.
	 */
	duplicate(): DocumentPreset

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DocumentPreset[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the DocumentPreset.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the DocumentPreset.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of document presets.
 */
declare class DocumentPresets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DocumentPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: DocumentPreset

	/**
	 * Creates a new DocumentPreset.
	 * @param withProperties Initial values for properties of the new DocumentPreset
	 */
	add(withProperties: object): DocumentPreset

	/**
	 * Returns any DocumentPreset in the collection.
	 */
	anyItem(): DocumentPreset

	/**
	 * Displays the number of elements in the DocumentPreset.
	 */
	count(): number

	/**
	 * Returns every DocumentPreset in the collection.
	 */
	everyItem(): DocumentPreset[]

	/**
	 * Returns the first DocumentPreset in the collection.
	 */
	firstItem(): DocumentPreset

	/**
	 * Returns the DocumentPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DocumentPreset

	/**
	 * Returns the DocumentPreset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DocumentPreset

	/**
	 * Returns the DocumentPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): DocumentPreset

	/**
	 * Returns the DocumentPresets within the specified range.
	 * @param from The DocumentPreset, index, or name at the beginning of the range.
	 * @param to The DocumentPreset, index, or name at the end of the range.
	 */
	itemByRange(from: DocumentPreset | number | string, to: DocumentPreset | number | string): DocumentPreset[]

	/**
	 * Returns the last DocumentPreset in the collection.
	 */
	lastItem(): DocumentPreset

	/**
	 * Returns the middle DocumentPreset in the collection.
	 */
	middleItem(): DocumentPreset

	/**
	 * Returns the DocumentPreset whose index follows the specified DocumentPreset in the collection.
	 * @param obj The DocumentPreset whose index comes before the desired DocumentPreset.
	 */
	nextItem(obj: DocumentPreset): DocumentPreset

	/**
	 * Returns the DocumentPreset with the index previous to the specified index.
	 * @param obj The index of the DocumentPreset that follows the desired DocumentPreset.
	 */
	previousItem(obj: DocumentPreset): DocumentPreset

	/**
	 * Generates a string which, if executed, will return the DocumentPreset.
	 */
	toSource(): string

}

/**
 * Print preferences.
 */
declare class PrintPreference extends Preference {
	/**
	 * The current printer preset type.
	 */
	activePrinterPreset: PrinterPresetTypes | PrinterPreset

	/**
	 * If true, prints all printer marks. If false, prints specified printer marks.
	 */
	allPrinterMarks: boolean

	/**
	 * If true, uses bitmap printing.
	 */
	bitmapPrinting: boolean

	/**
	 * The resolution for bitmap printing. (Range: 72 to 1200) Note: Valid when bitmap printing is true.
	 */
	bitmapResolution: number

	/**
	 * The angle override for black ink. (Range: 0 to 360)
	 */
	blackAngle: number

	/**
	 * The frequency override for black ink. (Range: 1 to 500)
	 */
	blackFrequency: number

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string

	/**
	 * If true, forces all bleed area settings to be the same, using the most recent bleed measurement setting. If false, allows bleed top, bleed bottom, bleed inside, and bleed outside to have different measurements.
	 */
	bleedChain: boolean

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string

	/**
	 * If true, collate printed copies.
	 */
	collating: boolean

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean

	/**
	 * The color output mode for composites. Note: Not valid when a device-independent PPD is specified.
	 */
	colorOutput: ColorOutputModes

	/**
	 * The screen angle to use when printing composites. (Range: 0 to 360) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeAngle: number

	/**
	 * The screen frequency to use when printing composites. (Range: 1 to 500) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeFrequency: number

	/**
	 * The number of copies to print. Note: Not valid when printer is PostScript File.
	 */
	copies: number

	/**
	 * The color-rendering dictionary (CRD), specified as a CRD name or an enumeration value. Note: Valid only when use color management is true.
	 */
	crd: ColorRenderingDictionary | string

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean

	/**
	 * The angle override for cyan ink. (Range: 0 to 360)
	 */
	cyanAngle: number

	/**
	 * The frequency override for cyan ink. (Range: 1 to 500)
	 */
	cyanFrequency: number

	/**
	 * The format in which to send image data to the printer.
	 */
	dataFormat: DataFormat

	/**
	 * If true, downloads all fonts listed in the selected PPD. Valid only when font downloading is complete or subset.
	 */
	downloadPPDFonts: boolean

	/**
	 * The name of the transparency flattener preset.
	 */
	flattenerPresetName: string

	/**
	 * The direction in which to flip the printed image.
	 */
	flip: Flip

	/**
	 * Controls how fonts are downloaded to the printer.
	 */
	fontDownloading: FontDownloading

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean

	/**
	 * If true, includes the slug area in the printed document.
	 */
	includeSlugToPrint: boolean

	/**
	 * The rendering intent. Note: Valid only when use color management is true.
	 */
	intent: RenderingIntent

	/**
	 * The angle override for magenta ink. (Range: 0 to 360)
	 */
	magentaAngle: number

	/**
	 * The frequency override for magenta ink. (Range: 1 to 500)
	 */
	magentaFrequency: number

	/**
	 * The stroke weight (in points) for printer marks.
	 */
	markLineWeight: MarkLineWeight

	/**
	 * The distance to offset the page marks from the edge of the page.
	 */
	markOffset: number | string

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	markType: MarkTypes | string

	/**
	 * If true, prints the document as a negative.
	 */
	negative: boolean

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean

	/**
	 * If true, prints graphics that are either OPI comments stored in imported EPS files or linked using OPI comments. For information on linking files using OPI comments, see omit EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean

	/**
	 * The position of the page on the printing medium. Note: Valid only when tile is false.
	 */
	pagePosition: PagePositions

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string

	/**
	 * The space between document pages on the printing medium.
	 */
	paperGap: number | string

	/**
	 * The paper height. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperHeight: PaperSize | number

	/**
	 * The amount of space to offset the page from the left edge of the imageable area.
	 */
	paperOffset: number | string

	/**
	 * The paper size, specified as either a string or an enumeration. For information on paper size names, see paper size list.
	 */
	paperSize: PaperSizes | string

	/**
	 * A list of the available paper sizes.
	 */
	paperSizeList: string[]

	/**
	 * If true, uses transverse orientation.
	 */
	paperTransverse: boolean

	/**
	 * The paper width. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperWidth: PaperSize | number

	/**
	 * If true, doing pdf passthrough.
	 */
	pdfPassthrough: boolean

	/**
	 * The PostScript level of the printer.
	 */
	postscriptLevel: PostScriptLevels

	/**
	 * The PPD, specified as a PPD name or an enumeration.
	 */
	ppd: PPDValues | string

	/**
	 * Available PPDs.
	 */
	ppdList: string[]

	/**
	 * If true, preserves uncalibrated color numbers.
	 */
	preserveColorNumbers: boolean

	/**
	 * If true, prints the black ink. Note: Valid only when trapping is off.
	 */
	printBlack: boolean

	/**
	 * If true, prints blank pages. Note: Valid only when trapping is off.
	 */
	printBlankPages: boolean

	/**
	 * If true, prints the cyan ink. Note: Valid only when trapping is off.
	 */
	printCyan: boolean

	/**
	 * The PostScript file to print to. Note: Valid only when the current printer is defined as postscript file.
	 */
	printFile: File

	/**
	 * If true, prints visible guides and baseline grids. Note: Valid only when trapping is off.
	 */
	printGuidesGrids: boolean

	/**
	 * The layers to print.
	 */
	printLayers: PrintLayerOptions

	/**
	 * If true, prints the magenta ink. Note: Valid only when trapping is off.
	 */
	printMagenta: boolean

	/**
	 * If true, prints master pages.
	 */
	printMasterPages: boolean

	/**
	 * If true, prints non-printing objects. Note: Valid only when trapping is off.
	 */
	printNonprinting: boolean

	/**
	 * The orientation of the printed page.
	 */
	printPageOrientation: PrintPageOrientation

	/**
	 * If true, prints each spread with all spread pages on a single sheet. If false, prints spread pages as separate pages.
	 */
	printSpreads: boolean

	/**
	 * If true, prints the yellow ink. Note: Valid only when trapping is off.
	 */
	printYellow: boolean

	/**
	 * The current printer.
	 */
	printer: Printer | string

	/**
	 * Available printers.
	 */
	printerList: string[]

	/**
	 * The color profile.
	 */
	profile: Profile | string

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean

	/**
	 * If true, prints pages in reverse order.
	 */
	reverseOrder: boolean

	/**
	 * The amount (as a percentage) that the page height is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleHeight: number

	/**
	 * The policy for scaling the page. Note: Valid only when printing from Layout view.
	 */
	scaleMode: ScaleModes

	/**
	 * If true, constrains the proportions of the scaling; uses the most recent value for either scale width or scale height to define both values. Note: Valid only when scale mode is scale width height.
	 */
	scaleProportional: boolean

	/**
	 * The amount (as a percentage)that the page width is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleWidth: number

	/**
	 * The ink screening settings for composite gray output in PostScript or PDF format. .
	 */
	screening: Screeening | string

	/**
	 * Lists the ink screenings available in the PPD. Note: Valid only when color output is separations or in rip separations.
	 */
	screeningList: string[]

	/**
	 * The image data sent to the printer or file.
	 */
	sendImageData: ImageDataTypes

	/**
	 * The sequence of pages to print.
	 */
	sequence: Sequences

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean

	/**
	 * The source of the color management system. Note: Valid only when use color management is true.
	 */
	sourceSpace: SourceSpaces

	/**
	 * If true, prints all text as black unless text has the color None or Paper or a color value that equals white. If false, prints colored text, such as blue hyperlinks, in halftone patterns. Note: Valid only when trapping is off.
	 */
	textAsBlack: boolean

	/**
	 * If true, prints thumbnails. Note: Valid only when trapping is off and tile is false.
	 */
	thumbnails: boolean

	/**
	 * The number of thumbnails per page.
	 */
	thumbnailsPerPage: ThumbsPerPage

	/**
	 * If true, tiles pages.
	 */
	tile: boolean

	/**
	 * The amount of tiling overlap. Note: Valid only when tiling is true and tiling type is not manual.
	 */
	tilingOverlap: number

	/**
	 * The tiling type. Note: Valid only when tiling is true.
	 */
	tilingType: TilingTypes

	/**
	 * The type of trapping.
	 */
	trapping: Trapping

	/**
	 * If true, uses the bleed area set for the document.
	 */
	useDocumentBleedToPrint: boolean

	/**
	 * The angle override for yellow ink. (Range: 0 to 360)
	 */
	yellowAngle: number

	/**
	 * The frequency override for yellow ink. (Range: 1 to 500)
	 */
	yellowFrequency: number

}

/**
 * Print booklet options.
 */
declare class PrintBookletOption extends Preference {
	/**
	 * If true, automatically adjust margins to fit the specified printer's marks and bleed area.
	 */
	autoAdjustMargins: boolean

	/**
	 * The amount of bleed between pages.
	 */
	bleedBetweenPages: number | string

	/**
	 * The type of booklet.
	 */
	bookletType: BookletTypeOptions

	/**
	 * Bottom margin of the printed booklet.
	 */
	bottomMargin: number | string

	/**
	 * The amount of creep (binding adjustment based on paper thickness) to add.
	 */
	creep: number | string

	/**
	 * Left margin of the printed booklet.
	 */
	leftMargin: number | string

	/**
	 * If true, make all margins equal to the top margin.
	 */
	marginsUniformSize: boolean

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string

	/**
	 * If true, print blank spreads.
	 */
	printBlankPrinterSpreads: boolean

	/**
	 * Right margin of the printed booklet.
	 */
	rightMargin: number | string

	/**
	 * The signature size of booklet (for perfect binding).
	 */
	signatureSize: SignatureSizeOptions

	/**
	 * The amount of space between pages.
	 */
	spaceBetweenPages: number | string

	/**
	 * Top margin of the printed booklet.
	 */
	topMargin: number | string

}

/**
 * Print booklet preferences.
 */
declare class PrintBookletPrintPreference extends Preference {
	/**
	 * The current printer preset type.
	 */
	activePrinterPreset: PrinterPresetTypes | PrinterPreset

	/**
	 * If true, prints all printer marks. If false, prints specified printer marks.
	 */
	allPrinterMarks: boolean

	/**
	 * If true, uses bitmap printing.
	 */
	bitmapPrinting: boolean

	/**
	 * The resolution for bitmap printing. (Range: 72 to 1200) Note: Valid when bitmap printing is true.
	 */
	bitmapResolution: number

	/**
	 * The angle override for black ink. (Range: 0 to 360)
	 */
	blackAngle: number

	/**
	 * The frequency override for black ink. (Range: 1 to 500)
	 */
	blackFrequency: number

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string

	/**
	 * If true, forces all bleed area settings to be the same, using the most recent bleed measurement setting. If false, allows bleed top, bleed bottom, bleed inside, and bleed outside to have different measurements.
	 */
	bleedChain: boolean

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string

	/**
	 * If true, collate printed copies.
	 */
	collating: boolean

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean

	/**
	 * The color output mode for composites. Note: Not valid when a device-independent PPD is specified.
	 */
	colorOutput: ColorOutputModes

	/**
	 * The screen angle to use when printing composites. (Range: 0 to 360) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeAngle: number

	/**
	 * The screen frequency to use when printing composites. (Range: 1 to 500) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeFrequency: number

	/**
	 * The number of copies to print. Note: Not valid when printer is PostScript File.
	 */
	copies: number

	/**
	 * The color-rendering dictionary (CRD), specified as a CRD name or an enumeration value. Note: Valid only when use color management is true.
	 */
	crd: ColorRenderingDictionary | string

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean

	/**
	 * The angle override for cyan ink. (Range: 0 to 360)
	 */
	cyanAngle: number

	/**
	 * The frequency override for cyan ink. (Range: 1 to 500)
	 */
	cyanFrequency: number

	/**
	 * The format in which to send image data to the printer.
	 */
	dataFormat: DataFormat

	/**
	 * If true, downloads all fonts listed in the selected PPD. Valid only when font downloading is complete or subset.
	 */
	downloadPPDFonts: boolean

	/**
	 * The name of the transparency flattener preset.
	 */
	flattenerPresetName: string

	/**
	 * The direction in which to flip the printed image.
	 */
	flip: Flip

	/**
	 * Controls how fonts are downloaded to the printer.
	 */
	fontDownloading: FontDownloading

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean

	/**
	 * The rendering intent. Note: Valid only when use color management is true.
	 */
	intent: RenderingIntent

	/**
	 * The angle override for magenta ink. (Range: 0 to 360)
	 */
	magentaAngle: number

	/**
	 * The frequency override for magenta ink. (Range: 1 to 500)
	 */
	magentaFrequency: number

	/**
	 * The stroke weight (in points) for printer marks.
	 */
	markLineWeight: MarkLineWeight

	/**
	 * The distance to offset the page marks from the edge of the page.
	 */
	markOffset: number | string

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	markType: MarkTypes | string

	/**
	 * If true, prints the document as a negative.
	 */
	negative: boolean

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean

	/**
	 * If true, prints graphics that are either OPI comments stored in imported EPS files or linked using OPI comments. For information on linking files using OPI comments, see omit EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean

	/**
	 * The position of the page on the printing medium. Note: Valid only when tile is false.
	 */
	pagePosition: PagePositions

	/**
	 * The space between document pages on the printing medium.
	 */
	paperGap: number | string

	/**
	 * The paper height. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperHeight: PaperSize | number

	/**
	 * The amount of space to offset the page from the left edge of the imageable area.
	 */
	paperOffset: number | string

	/**
	 * The paper size, specified as either a string or an enumeration. For information on paper size names, see paper size list.
	 */
	paperSize: PaperSizes | string

	/**
	 * A list of the available paper sizes.
	 */
	paperSizeList: string[]

	/**
	 * If true, uses transverse orientation.
	 */
	paperTransverse: boolean

	/**
	 * The paper width. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperWidth: PaperSize | number

	/**
	 * If true, doing pdf passthrough.
	 */
	pdfPassthrough: boolean

	/**
	 * The PostScript level of the printer.
	 */
	postscriptLevel: PostScriptLevels

	/**
	 * The PPD, specified as a PPD name or an enumeration.
	 */
	ppd: PPDValues | string

	/**
	 * Available PPDs.
	 */
	ppdList: string[]

	/**
	 * If true, preserves uncalibrated color numbers.
	 */
	preserveColorNumbers: boolean

	/**
	 * If true, prints the black ink. Note: Valid only when trapping is off.
	 */
	printBlack: boolean

	/**
	 * If true, prints blank pages. Note: Valid only when trapping is off.
	 */
	printBlankPages: boolean

	/**
	 * If true, prints the cyan ink. Note: Valid only when trapping is off.
	 */
	printCyan: boolean

	/**
	 * The PostScript file to print to. Note: Valid only when the current printer is defined as postscript file.
	 */
	printFile: File

	/**
	 * If true, prints visible guides and baseline grids. Note: Valid only when trapping is off.
	 */
	printGuidesGrids: boolean

	/**
	 * The layers to print.
	 */
	printLayers: PrintLayerOptions

	/**
	 * If true, prints the magenta ink. Note: Valid only when trapping is off.
	 */
	printMagenta: boolean

	/**
	 * If true, prints non-printing objects. Note: Valid only when trapping is off.
	 */
	printNonprinting: boolean

	/**
	 * The orientation of the printed page.
	 */
	printPageOrientation: PrintPageOrientation

	/**
	 * If true, prints the yellow ink. Note: Valid only when trapping is off.
	 */
	printYellow: boolean

	/**
	 * The current printer.
	 */
	printer: Printer | string

	/**
	 * Available printers.
	 */
	printerList: string[]

	/**
	 * The color profile.
	 */
	profile: Profile | string

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean

	/**
	 * If true, prints pages in reverse order.
	 */
	reverseOrder: boolean

	/**
	 * The amount (as a percentage) that the page height is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleHeight: number

	/**
	 * The policy for scaling the page. Note: Valid only when printing from Layout view.
	 */
	scaleMode: ScaleModes

	/**
	 * If true, constrains the proportions of the scaling; uses the most recent value for either scale width or scale height to define both values. Note: Valid only when scale mode is scale width height.
	 */
	scaleProportional: boolean

	/**
	 * The amount (as a percentage)that the page width is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleWidth: number

	/**
	 * The ink screening settings for composite gray output in PostScript or PDF format. .
	 */
	screening: Screeening | string

	/**
	 * Lists the ink screenings available in the PPD. Note: Valid only when color output is separations or in rip separations.
	 */
	screeningList: string[]

	/**
	 * The image data sent to the printer or file.
	 */
	sendImageData: ImageDataTypes

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean

	/**
	 * The source of the color management system. Note: Valid only when use color management is true.
	 */
	sourceSpace: SourceSpaces

	/**
	 * If true, prints all text as black unless text has the color None or Paper or a color value that equals white. If false, prints colored text, such as blue hyperlinks, in halftone patterns. Note: Valid only when trapping is off.
	 */
	textAsBlack: boolean

	/**
	 * The type of trapping.
	 */
	trapping: Trapping

	/**
	 * If true, uses the bleed area set for the document.
	 */
	useDocumentBleedToPrint: boolean

	/**
	 * The angle override for yellow ink. (Range: 0 to 360)
	 */
	yellowAngle: number

	/**
	 * The frequency override for yellow ink. (Range: 1 to 500)
	 */
	yellowFrequency: number

}

/**
 * EPS export preferences.
 */
declare class EPSExportPreference extends Preference {
	/**
	 * The transparency flattener preset to use.
	 */
	appliedFlattenerPreset: FlattenerPreset

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string

	/**
	 * The format in which to send image data to the printer.
	 */
	dataFormat: DataFormat

	/**
	 * The color space for representing color in the exported EPS.
	 */
	epsColor: EPSColorSpace

	/**
	 * If true, exports facing pages as a single page that has the width of the spread. If false, exports spread pages as separate pages.
	 */
	epsSpreads: boolean

	/**
	 * Controls how fonts are embedded in the exported EPS.
	 */
	fontEmbedding: FontEmbedding

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean

	/**
	 * The image data to export to the EPS document.
	 */
	imageData: EPSImageData

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean

	/**
	 * If true, prints graphics that are either OPI comments stored in imported EPS files or linked using OPI comments. For information on linking files using OPI comments, see omit EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string

	/**
	 * The PostScript level of the printer.
	 */
	postscriptLevel: PostScriptLevels

	/**
	 * The file format of the preview image saved with the exported EPS file.
	 */
	preview: PreviewTypes

}

/**
 * Tool box tools
 */
declare class ToolBox extends Preference {
	/**
	 * Dispatched when the value of a property changes on this ToolBox. This event bubbles. This event is not cancelable.
	 */
	AFTER_ATTRIBUTE_CHANGED: string

	/**
	 * The currently active tool.
	 */
	currentTool: UITools

	/**
	 * The currently active tool's hint.
	 */
	currentToolHint: string

	/**
	 * The currently active tool's icon resource file.
	 */
	currentToolIconFile: File

	/**
	 * The currently active tool's name.
	 */
	currentToolName: string

}

/**
 * Image preferences.
 */
declare class ImagePreference extends Preference {
	/**
	 * If true, preserve image bounds when relinking.
	 */
	preserveBounds: boolean

}

/**
 * Image I/O preferences.
 */
declare class ImageIOPreference extends Preference {
	/**
	 * If true, allows auto embedding.
	 */
	allowAutoEmbedding: boolean

	/**
	 * The name of the alpha channel.
	 */
	alphaChannelName: string

	/**
	 * If true, applies clipping paths defined in Photoshop to placed images.
	 */
	applyPhotoshopClippingPath: boolean

	/**
	 * The image resolution in ppi, set when the graphic is imported.
	 */
	previewResolution: number

}

/**
 * Clipping path settings.
 */
declare class ClippingPathSettings extends Preference {
	/**
	 * A list of the alpha channels stored in the graphic.
	 */
	alphaChannelPathNames: string[]

	/**
	 * The name of the Photoshop path or alpha channel to use as a clipping path.
	 */
	appliedPathName: string

	/**
	 * The clipping path type.
	 */
	clippingType: ClippingPathType

	/**
	 * If true, creates interior clipping paths within the surrounding clipping path. Note: Valid only when clipping type is alpha channel or detect edges.
	 */
	includeInsideEdges: boolean

	/**
	 * Shrinks the area enclosed by the clipping path by the specified amount. (Range depends on the unit. For points: -10000 to 10000; picas: -833p4 to 833p4; inches: -138.8889 to 138.8889; mm: -3527.778 to 3527.778; cm: -352.7778 to 352.7778; ciceros: -781c11.889 to 781c11.889)
	 */
	insetFrame: number | string

	/**
	 * If true, inverts the clipping path.
	 */
	invertPath: boolean

	/**
	 * A collection of paths.
	 */
	paths: Paths

	/**
	 * A list of the clipping paths stored in the graphic.
	 */
	photoshopPathNames: string[]

	/**
	 * If true, truncates the clipping path at the edge of the frame containing the graphic. Note: Valid only when clipping type is alpha channel or detect edges.
	 */
	restrictToFrame: boolean

	/**
	 * The lowest value (darkest) pixel to allow in the image. All pixels in the image whose values are greater than (lighter than) the threshold value are clipped (obscured). (Range: 0 to 255) Note: Valid only when clipping type is detect edges or alpha channel.
	 */
	threshold: number

	/**
	 * Specifies how similar a pixel's intensity value can be to the threshold value before the pixel is obscured by the clipping path. (Range: 0 to 10) Note: Valid only when clipping type is detect edges or alpha channel.
	 */
	tolerance: number

	/**
	 * If true, uses the high-resolution version of the graphic to create the clipping path. If false, calculates the clipping path based on screen-display resolution. Note: Valid only when clipping type is detect edges.
	 */
	useHighResolutionImage: boolean

	/**
	 * Converts the clipping path to a frame.
	 */
	convertToFrame(): PageItem

}

/**
 * Graphic layer option.
 */
declare class GraphicLayerOption extends Preference {
	/**
	 * A collection of graphic layers.
	 */
	graphicLayers: GraphicLayers

	/**
	 * Options for updating a graphic link after the visibility settings for the graphic layer have been modified in a different application.
	 */
	updateLinkOption: UpdateLinkOptions

}

/**
 * A layer in a PSD image or PDF file.
 */
declare class GraphicLayer {
	/**
	 * If true, the layer is an adjustment layer. Note: Must occur in the script before overriding the visibility state of the layer with a current visibility statement.
	 */
	adjustmentLayer: boolean

	/**
	 * If true, the layer is visible in the document.
	 */
	currentVisibility: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the export state is on.
	 */
	exportState: boolean

	/**
	 * If true, layer effects have been applied to the layer. Note: Must occur in the script before overriding the visibility state of the layer with a current visibility statement.
	 */
	fxLayer: boolean

	/**
	 * A collection of graphic layers.
	 */
	graphicLayers: GraphicLayers

	/**
	 * If true, the layer has an export state.
	 */
	hasExportState: boolean

	/**
	 * If true, the layer has a print state.
	 */
	hasPrintState: boolean

	/**
	 * If true, the layer has a view state.
	 */
	hasViewState: boolean

	/**
	 * The unique ID of the GraphicLayer.
	 */
	id: number

	/**
	 * The index of the GraphicLayer within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * If true, the GraphicLayer is locked.
	 */
	locked: boolean

	/**
	 * The name of the GraphicLayer.
	 */
	name: string

	/**
	 * Returns the visibility setting set for the layer before the graphic file was imported. Note: Must occur in the script before overriding the visibility state with a current visibility statement.
	 */
	originalVisibility: boolean

	/**
	 * The parent of the GraphicLayer (a GraphicLayerOption or GraphicLayer).
	 */
	parent: any

	/**
	 * If true, the print state is on.
	 */
	printState: boolean

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * If true, the layer is a section divider layer.
	 */
	sectionDividerLayer: boolean

	/**
	 * If true, the layer is a separator layer.
	 */
	separatorLayer: boolean

	/**
	 * If true, the view state is on.
	 */
	viewState: boolean

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): GraphicLayer[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the GraphicLayer.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of graphic layers.
 */
declare class GraphicLayers {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the GraphicLayer with the specified index.
	 * @param index The index.
	 */
	[index: number]: GraphicLayer

	/**
	 * Returns any GraphicLayer in the collection.
	 */
	anyItem(): GraphicLayer

	/**
	 * Displays the number of elements in the GraphicLayer.
	 */
	count(): number

	/**
	 * Returns every GraphicLayer in the collection.
	 */
	everyItem(): GraphicLayer[]

	/**
	 * Returns the first GraphicLayer in the collection.
	 */
	firstItem(): GraphicLayer

	/**
	 * Returns the GraphicLayer with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): GraphicLayer

	/**
	 * Returns the GraphicLayer with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): GraphicLayer

	/**
	 * Returns the GraphicLayer with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): GraphicLayer

	/**
	 * Returns the GraphicLayers within the specified range.
	 * @param from The GraphicLayer, index, or name at the beginning of the range.
	 * @param to The GraphicLayer, index, or name at the end of the range.
	 */
	itemByRange(from: GraphicLayer | number | string, to: GraphicLayer | number | string): GraphicLayer[]

	/**
	 * Returns the last GraphicLayer in the collection.
	 */
	lastItem(): GraphicLayer

	/**
	 * Returns the middle GraphicLayer in the collection.
	 */
	middleItem(): GraphicLayer

	/**
	 * Returns the GraphicLayer whose index follows the specified GraphicLayer in the collection.
	 * @param obj The GraphicLayer whose index comes before the desired GraphicLayer.
	 */
	nextItem(obj: GraphicLayer): GraphicLayer

	/**
	 * Returns the GraphicLayer with the index previous to the specified index.
	 * @param obj The index of the GraphicLayer that follows the desired GraphicLayer.
	 */
	previousItem(obj: GraphicLayer): GraphicLayer

	/**
	 * Generates a string which, if executed, will return the GraphicLayer.
	 */
	toSource(): string

}

/**
 * Input method editor (IME) preferences.
 */
declare class IMEPreference extends Preference {
	/**
	 * If true, allows inline input for non-Latin text.
	 */
	inlineInput: boolean

	/**
	 * If true, use native digits for Arabic languages.
	 */
	useNativeDigits: boolean

}

/**
 * PDF export settings for the application object.
 */
declare class PDFExportPreference extends Preference {
	/**
	 * The exported PDF document's Acrobat compatibility.
	 */
	acrobatCompatibility: AcrobatCompatibility

	/**
	 * The transparency flattener preset to use.
	 */
	appliedFlattenerPreset: FlattenerPreset

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string

	/**
	 * Changes the open document password to the specified string. Valid only when use security is true. Note: A script can set but not get this value.
	 */
	changeSecurityPassword: string

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean

	/**
	 * The amount of bitmap compression to use.
	 */
	colorBitmapCompression: BitmapCompression

	/**
	 * The compression option to apply to color images.
	 */
	colorBitmapQuality: CompressionQuality

	/**
	 * The sampling option to apply to color bitmap images in the PDF document.
	 */
	colorBitmapSampling: Sampling

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	colorBitmapSamplingDPI: number

	/**
	 * The tile size for color images. Valid only when color bitmap compression is JPEG 2000. (Range: 128 to 2048)
	 */
	colorTileSize: number

	/**
	 * If true, compresses text and line art using ZIP compression.
	 */
	compressTextAndLineArt: boolean

	/**
	 * The objects to compress in the PDF document.
	 */
	compressionType: PDFCompressionType

	/**
	 * If true, image data that falls outside the visible portion of an image's frame is not exported to the PDF document.
	 */
	cropImagesToFrames: boolean

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean

	/**
	 * Sets the default document language in the exported PDF. The correct ISO code of the language must be provided.
	 */
	defaultDocumentLanguage: string

	/**
	 * If true, users cannot fill in forms, sign, extract pages, or add comments in the PDF document. Valid only when use security is true.
	 */
	disallowChanging: boolean

	/**
	 * If true, users cannot copy and paste text, images, or other content from the PDF document. Valid only when use security is true.
	 */
	disallowCopying: boolean

	/**
	 * If true, users cannot insert, delete, or rotate pages in the PDF document. Valid only when use security is true.
	 */
	disallowDocumentAssembly: boolean

	/**
	 * If true, users cannot extract content from the PDF document using software tools for the visually impaired. Valid only when use security is true.
	 */
	disallowExtractionForAccessibility: boolean

	/**
	 * If true, users cannot change form fields in the PDF document. Valid only when use security is true.
	 */
	disallowFormFillIn: boolean

	/**
	 * If true, users cannot print high-resolution copies of the PDF document. Valid only when use security is true.
	 */
	disallowHiResPrinting: boolean

	/**
	 * If true, users cannot add or change notes, edit text, or fill in form fields in the PDF document. Valid only when use security is true.
	 */
	disallowNotes: boolean

	/**
	 * If true and acrobat compatibility is Acrobat 6 or higher, storage systems and search engines cannot access metadata stored in the PDF document. If true and acrobat compatibility is acrobat 5 or higher, users cannot copy and extract content from the document. Valid only when use security is true.
	 */
	disallowPlaintextMetadata: boolean

	/**
	 * If true, users cannot print the PDF document. Valid only when use security is true.
	 */
	disallowPrinting: boolean

	/**
	 * Effective PDF/X OC Registry.
	 */
	effectiveOCRegistry: string

	/**
	 * Effective PDF/X output condition.
	 */
	effectiveOutputCondition: string

	/**
	 * Effective destination color profile.
	 */
	effectivePDFDestinationProfile: PDFProfileSelector | string

	/**
	 * Effective PDF X color profile.
	 */
	effectivePDFXProfile: PDFProfileSelector | string

	/**
	 * Export each page or spread as a separate PDF file.
	 */
	exportAsSinglePages: boolean

	/**
	 * If true, includes visible guides and baseline grids in the PDF document.
	 */
	exportGuidesAndGrids: boolean

	/**
	 * If true, saves each layer as an Acrobat layer within the PDF document.
	 */
	exportLayers: boolean

	/**
	 * If true, makes non-printing objects visible in the PDF document.
	 */
	exportNonprintingObjects: boolean

	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	exportReaderSpreads: boolean

	/**
	 * Which layers to export.
	 */
	exportWhichLayers: ExportLayerOptions

	/**
	 * If true, generates thumbnail images for each page or spread.
	 */
	generateThumbnails: boolean

	/**
	 * The tile size for grayscale images. Valid only when grayscale bitmap compression is JPEG 2000. (Range: 128 to 2048)
	 */
	grayTileSize: number

	/**
	 * The bitmap compression option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapCompression: BitmapCompression

	/**
	 * The compression option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapQuality: CompressionQuality

	/**
	 * The sampling option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapSampling: Sampling

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	grayscaleBitmapSamplingDPI: number

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean

	/**
	 * If true, displays bookmarks and table of contents entries as links in the bookmarks pane in the PDF document. If false, no bookmarks are exported.
	 */
	includeBookmarks: boolean

	/**
	 * If true, includes hyperlinks when exporting the document.
	 */
	includeHyperlinks: boolean

	/**
	 * The ICC Profiles to include in the exported PDF document.
	 */
	includeICCProfiles: ICCProfiles | boolean

	/**
	 * If true, includes the document's slug area in the PDF document.
	 */
	includeSlugWithPDF: boolean

	/**
	 * If true, creates a tagged PDF file. Note: If acrobat compatibility is acrobat 6 or higher, tags are visible only when the PDF is opened in Acrobat 6 or higher.
	 */
	includeStructure: boolean

	/**
	 * How to draw interactive elements.
	 */
	interactiveElementsOption: InteractiveElementsOptions

	/**
	 * The bitmap compression option to apply to monochrome bitmap images.
	 */
	monochromeBitmapCompression: MonoBitmapCompression

	/**
	 * The sampling option to apply to monochrome bitmap images.
	 */
	monochromeBitmapSampling: Sampling

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	monochromeBitmapSamplingDPI: number

	/**
	 * The web address for the output condition registry. Not valid when PDF/X-3 is the compliance standard or PDF export preset.
	 */
	ocRegistry: string

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean

	/**
	 * The password to enter when opening the PDF document. Valid only when use security is true. Note: A script can set but not get this value.
	 */
	openDocumentPassword: string

	/**
	 * Open PDF in full screen mode.
	 */
	openInFullScreen: boolean

	/**
	 * If true, optimizes the exported PDF document for faster viewing in a web browser. Note: Compresses text and line art, regardless of specified compression settings.
	 */
	optimizePDF: boolean

	/**
	 * The name of the intended printing condition. Valid only when a PDF/X compliance standard has been defined for the document. Not valid when PDF/X-3 is the compliance standard or PDF export preset. For information on compliance standards, see standards compliance and PDF X standards.
	 */
	outputCondition: string

	/**
	 * The name of the output condition. Valid only when a PDF/X standard has been defined for the document.
	 */
	outputConditionName: string

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean

	/**
	 * The offset from the edge of the page for page marks.
	 */
	pageMarksOffset: number | string

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string

	/**
	 * The color space to use to represent color information in the exported PDF document.
	 */
	pdfColorSpace: PDFColorSpace

	/**
	 * The gamut of the final RGB or CMYK device.
	 */
	pdfDestinationProfile: PDFProfileSelector | string

	/**
	 * The export PDF display title.
	 */
	pdfDisplayTitle: PdfDisplayTitleOptions

	/**
	 * The export PDF magnification options.
	 */
	pdfMagnification: PdfMagnificationOptions

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	pdfMarkType: MarkTypes | string

	/**
	 * The export PDF page layout.
	 */
	pdfPageLayout: PageLayoutOptions

	/**
	 * The PDF X color profile to use for the PDF document. .
	 */
	pdfXProfile: PDFProfileSelector | string

	/**
	 * The stroke weight for printer's marks.
	 */
	printerMarkWeight: PDFMarkWeight

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean

	/**
	 * Suffix to be used at the end of each file when pages are exported as separate PDF files.
	 */
	singlePagesPDFSuffix: string

	/**
	 * The PDF/X standards compliance to test against.
	 */
	standardsCompliance: PDFXStandards

	/**
	 * Sets the threshold for embedding complete fonts based on how many of the fonts' characters are used in the document. If the percentage of characters used in the document for any given font exceeds the specified value, the font is completely embedded; otherwise, the font is subsetted. (Range: 0 to 100) Notes: Embedding complete fonts increases file size. To completely embed all fonts, use 0 (zero).
	 */
	subsetFontsBelow: number

	/**
	 * The minimum dpi at which color compression is applied. (Range: 1 to 10 times the value specified for color bitmap sampling DPI.)
	 */
	thresholdToCompressColor: number

	/**
	 * The minimum dpi at which grayscale compression is applied. (Range: 1 to 10 times the value specified for grayscale bitmap sampling DPI.)
	 */
	thresholdToCompressGray: number

	/**
	 * The minimum dpi at which monochrome compression is applied. (Range: 1 to 10 times the value specified for monochrome bitmap sampling DPI.)
	 */
	thresholdToCompressMonochrome: number

	/**
	 * If true, uses the document's bleed settings in the PDF document.
	 */
	useDocumentBleedWithPDF: boolean

	/**
	 * If true, activates security controls for the PDF document.
	 */
	useSecurity: boolean

	/**
	 * If true, automatically opens the PDF file after exporting.
	 */
	viewPDF: boolean

}

/**
 * PDF export settings for the document object.
 */
declare class PDFExportPreset {
	/**
	 * The exported PDF document's Acrobat compatibility.
	 */
	acrobatCompatibility: AcrobatCompatibility

	/**
	 * The transparency flattener preset to use.
	 */
	appliedFlattenerPreset: FlattenerPreset

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean

	/**
	 * The amount of bitmap compression to use.
	 */
	colorBitmapCompression: BitmapCompression

	/**
	 * The compression option to apply to color images.
	 */
	colorBitmapQuality: CompressionQuality

	/**
	 * The sampling option to apply to color bitmap images in the PDF document.
	 */
	colorBitmapSampling: Sampling

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	colorBitmapSamplingDPI: number

	/**
	 * The tile size for color images. Valid only when color bitmap compression is JPEG 2000. (Range: 128 to 2048)
	 */
	colorTileSize: number

	/**
	 * If true, compresses text and line art using ZIP compression.
	 */
	compressTextAndLineArt: boolean

	/**
	 * The objects to compress in the PDF document.
	 */
	compressionType: PDFCompressionType

	/**
	 * If true, image data that falls outside the visible portion of an image's frame is not exported to the PDF document.
	 */
	cropImagesToFrames: boolean

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean

	/**
	 * Sets the default document language in the exported PDF. The correct ISO code of the language must be provided.
	 */
	defaultDocumentLanguage: string

	/**
	 * Effective PDF/X OC Registry.
	 */
	effectiveOCRegistry: string

	/**
	 * Effective PDF/X output condition.
	 */
	effectiveOutputCondition: string

	/**
	 * Effective destination color profile.
	 */
	effectivePDFDestinationProfile: PDFProfileSelector | string

	/**
	 * Effective PDF X color profile.
	 */
	effectivePDFXProfile: PDFProfileSelector | string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * Export each page or spread as a separate PDF file.
	 */
	exportAsSinglePages: boolean

	/**
	 * If true, includes visible guides and baseline grids in the PDF document.
	 */
	exportGuidesAndGrids: boolean

	/**
	 * If true, saves each layer as an Acrobat layer within the PDF document.
	 */
	exportLayers: boolean

	/**
	 * If true, makes non-printing objects visible in the PDF document.
	 */
	exportNonprintingObjects: boolean

	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	exportReaderSpreads: boolean

	/**
	 * Which layers to export.
	 */
	exportWhichLayers: ExportLayerOptions

	/**
	 * The full path to the PDFExportPreset, including the name of the PDFExportPreset.
	 */
	fullName: File

	/**
	 * If true, generates thumbnail images for each page or spread.
	 */
	generateThumbnails: boolean

	/**
	 * The tile size for grayscale images. Valid only when grayscale bitmap compression is JPEG 2000. (Range: 128 to 2048)
	 */
	grayTileSize: number

	/**
	 * The bitmap compression option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapCompression: BitmapCompression

	/**
	 * The compression option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapQuality: CompressionQuality

	/**
	 * The sampling option to apply to grayscale bitmap images.
	 */
	grayscaleBitmapSampling: Sampling

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	grayscaleBitmapSamplingDPI: number

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean

	/**
	 * If true, displays bookmarks and table of contents entries as links in the bookmarks pane in the PDF document. If false, no bookmarks are exported.
	 */
	includeBookmarks: boolean

	/**
	 * If true, includes hyperlinks when exporting the document.
	 */
	includeHyperlinks: boolean

	/**
	 * The ICC Profiles to include in the exported PDF document.
	 */
	includeICCProfiles: ICCProfiles | boolean

	/**
	 * If true, includes the document's slug area in the PDF document.
	 */
	includeSlugWithPDF: boolean

	/**
	 * If true, creates a tagged PDF file. Note: If acrobat compatibility is acrobat 6 or higher, tags are visible only when the PDF is opened in Acrobat 6 or higher.
	 */
	includeStructure: boolean

	/**
	 * The index of the PDFExportPreset within its containing object.
	 */
	index: number

	/**
	 * How to draw interactive elements.
	 */
	interactiveElementsOption: InteractiveElementsOptions

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The bitmap compression option to apply to monochrome bitmap images.
	 */
	monochromeBitmapCompression: MonoBitmapCompression

	/**
	 * The sampling option to apply to monochrome bitmap images.
	 */
	monochromeBitmapSampling: Sampling

	/**
	 * The ppi of the resampled image. (Range: 9 to 2400)
	 */
	monochromeBitmapSamplingDPI: number

	/**
	 * The name of the PDFExportPreset.
	 */
	name: string

	/**
	 * The web address for the output condition registry. Not valid when PDF/X-3 is the compliance standard or PDF export preset.
	 */
	ocRegistry: string

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean

	/**
	 * Open PDF in full screen mode.
	 */
	openInFullScreen: boolean

	/**
	 * If true, optimizes the exported PDF document for faster viewing in a web browser. Note: Compresses text and line art, regardless of specified compression settings.
	 */
	optimizePDF: boolean

	/**
	 * The name of the intended printing condition. Valid only when a PDF/X compliance standard has been defined for the document. Not valid when PDF/X-3 is the compliance standard or PDF export preset. For information on compliance standards, see standards compliance and PDF X standards.
	 */
	outputCondition: string

	/**
	 * The name of the output condition. Valid only when a PDF/X standard has been defined for the document.
	 */
	outputConditionName: string

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean

	/**
	 * The offset from the edge of the page for page marks.
	 */
	pageMarksOffset: number | string

	/**
	 * The parent of the PDFExportPreset (a Application).
	 */
	parent: Application

	/**
	 * The color space to use to represent color information in the exported PDF document.
	 */
	pdfColorSpace: PDFColorSpace

	/**
	 * The gamut of the final RGB or CMYK device.
	 */
	pdfDestinationProfile: PDFProfileSelector | string

	/**
	 * The export PDF display title.
	 */
	pdfDisplayTitle: PdfDisplayTitleOptions

	/**
	 * The export PDF magnification options.
	 */
	pdfMagnification: PdfMagnificationOptions

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	pdfMarkType: MarkTypes | string

	/**
	 * The export PDF page layout.
	 */
	pdfPageLayout: PageLayoutOptions

	/**
	 * The PDF X color profile to use for the PDF document. .
	 */
	pdfXProfile: PDFProfileSelector | string

	/**
	 * The stroke weight for printer's marks.
	 */
	printerMarkWeight: PDFMarkWeight

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean

	/**
	 * Suffix to be used at the end of each file when pages are exported as separate PDF files.
	 */
	singlePagesPDFSuffix: string

	/**
	 * The PDF/X standards compliance to test against.
	 */
	standardsCompliance: PDFXStandards

	/**
	 * Sets the threshold for embedding complete fonts based on how many of the fonts' characters are used in the document. If the percentage of characters used in the document for any given font exceeds the specified value, the font is completely embedded; otherwise, the font is subsetted. (Range: 0 to 100) Notes: Embedding complete fonts increases file size. To completely embed all fonts, use 0 (zero).
	 */
	subsetFontsBelow: number

	/**
	 * The minimum dpi at which color compression is applied. (Range: 1 to 10 times the value specified for color bitmap sampling DPI.)
	 */
	thresholdToCompressColor: number

	/**
	 * The minimum dpi at which grayscale compression is applied. (Range: 1 to 10 times the value specified for grayscale bitmap sampling DPI.)
	 */
	thresholdToCompressGray: number

	/**
	 * The minimum dpi at which monochrome compression is applied. (Range: 1 to 10 times the value specified for monochrome bitmap sampling DPI.)
	 */
	thresholdToCompressMonochrome: number

	/**
	 * If true, uses the document's bleed settings in the PDF document.
	 */
	useDocumentBleedWithPDF: boolean

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the PDFExportPreset.
	 */
	duplicate(): PDFExportPreset

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PDFExportPreset[]

	/**
	 * Deletes the PDFExportPreset.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the PDFExportPreset.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of PDF export presets.
 */
declare class PDFExportPresets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PDFExportPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: PDFExportPreset

	/**
	 * Creates a new PDFExportPreset.
	 * @param withProperties Initial values for properties of the new PDFExportPreset
	 */
	add(withProperties: object): PDFExportPreset

	/**
	 * Returns any PDFExportPreset in the collection.
	 */
	anyItem(): PDFExportPreset

	/**
	 * Displays the number of elements in the PDFExportPreset.
	 */
	count(): number

	/**
	 * Returns every PDFExportPreset in the collection.
	 */
	everyItem(): PDFExportPreset[]

	/**
	 * Returns the first PDFExportPreset in the collection.
	 */
	firstItem(): PDFExportPreset

	/**
	 * Returns the PDFExportPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PDFExportPreset

	/**
	 * Returns the PDFExportPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PDFExportPreset

	/**
	 * Returns the PDFExportPresets within the specified range.
	 * @param from The PDFExportPreset, index, or name at the beginning of the range.
	 * @param to The PDFExportPreset, index, or name at the end of the range.
	 */
	itemByRange(from: PDFExportPreset | number | string, to: PDFExportPreset | number | string): PDFExportPreset[]

	/**
	 * Returns the last PDFExportPreset in the collection.
	 */
	lastItem(): PDFExportPreset

	/**
	 * Returns the middle PDFExportPreset in the collection.
	 */
	middleItem(): PDFExportPreset

	/**
	 * Returns the PDFExportPreset whose index follows the specified PDFExportPreset in the collection.
	 * @param obj The PDFExportPreset whose index comes before the desired PDFExportPreset.
	 */
	nextItem(obj: PDFExportPreset): PDFExportPreset

	/**
	 * Returns the PDFExportPreset with the index previous to the specified index.
	 * @param obj The index of the PDFExportPreset that follows the desired PDFExportPreset.
	 */
	previousItem(obj: PDFExportPreset): PDFExportPreset

	/**
	 * Generates a string which, if executed, will return the PDFExportPreset.
	 */
	toSource(): string

}

/**
 * PDF place preferences.
 */
declare class PDFPlacePreference extends Preference {
	/**
	 * The password to enter when opening the PDF document. Valid only when use security is true. Note: A script can set but not get this value.
	 */
	openDocumentPassword: string

	/**
	 * The page number of the PDF document page to place.
	 */
	pageNumber: number

	/**
	 * The type of cropping to apply.
	 */
	pdfCrop: PDFCrop

	/**
	 * If true, the background of the PDF is transparent.
	 */
	transparentBackground: boolean

}

/**
 * Interactive PDF export settings for the application object.
 */
declare class InteractivePDFExportPreference extends Preference {
	/**
	 * Sets the default document language in the exported PDF. The correct ISO code of the language must be provided.
	 */
	defaultDocumentLanguage: string

	/**
	 * Export each page or spread as a separate PDF file.
	 */
	exportAsSinglePages: boolean

	/**
	 * If true, saves each layer as an Acrobat layer within the PDF document.
	 */
	exportLayers: boolean

	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	exportReaderSpreads: boolean

	/**
	 * Automatically flip pages in the exported PDF.
	 */
	flipPages: boolean

	/**
	 * The speed that the pages flip.
	 */
	flipPagesSpeed: number

	/**
	 * If true, generates thumbnail images for each page or spread.
	 */
	generateThumbnails: boolean

	/**
	 * If true, creates a tagged PDF file. Note: If acrobat compatibility is acrobat 6 or higher, tags are visible only when the PDF is opened in Acrobat 6 or higher.
	 */
	includeStructure: boolean

	/**
	 * How to draw interactive elements.
	 */
	interactivePDFInteractiveElementsOption: InteractivePDFInteractiveElementsOptions

	/**
	 * Open PDF in full screen mode.
	 */
	openInFullScreen: boolean

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string

	/**
	 * The name of the page transition to use for all pages.
	 */
	pageTransitionOverride: PageTransitionOverrideOptions

	/**
	 * The export PDF display title.
	 */
	pdfDisplayTitle: PdfDisplayTitleOptions

	/**
	 * The PDF JPEG quality options.
	 */
	pdfJPEGQuality: PDFJPEGQualityOptions

	/**
	 * The export PDF magnification options.
	 */
	pdfMagnification: PdfMagnificationOptions

	/**
	 * The export PDF page layout.
	 */
	pdfPageLayout: PageLayoutOptions

	/**
	 * The PDF raster compression options.
	 */
	pdfRasterCompression: PDFRasterCompressionOptions

	/**
	 * The raster resolution.
	 */
	rasterResolution: RasterResolutionOptions | number

	/**
	 * Suffix to be used at the end of each file when pages are exported as separate PDF files.
	 */
	singlePagesPDFSuffix: string

	/**
	 * Use tagged PDF structure for interactive elements tab order.
	 */
	usePDFStructureForTabOrder: boolean

	/**
	 * If true, automatically opens the PDF file after exporting.
	 */
	viewPDF: boolean

}

/**
 * Tagged PDF preferences.
 */
declare class TaggedPDFPreference extends Preference {
	/**
	 * Tagged PDF structure order preference.
	 */
	structureOrder: TaggedPDFStructureOrderOptions

}

/**
 * Options for specifying default endnote formatting.
 */
declare class EndnoteOption extends Preference {
	/**
	 * The position of endnote reference numbers in the main text.
	 */
	endnoteMarkerPositioning: FootnoteMarkerPositioning | string

	/**
	 * The character style to apply to endnote reference numbers in the main text.
	 */
	endnoteMarkerStyle: CharacterStyle

	/**
	 * The endnote numbering style.
	 */
	endnoteNumberingStyle: FootnoteNumberingStyle | string

	/**
	 * The prefix text of the endnote. (Limit: 0 to 100 characters)
	 */
	endnotePrefix: string

	/**
	 * The text to insert between the endnote marker number and the endnote text. (Range: 0 to 100 characters)
	 */
	endnoteSeparatorText: string

	/**
	 * The suffix text of the endnote. (Limit: 0 to 100 characters)
	 */
	endnoteSuffix: string

	/**
	 * The paragraph style to apply to endnote text.
	 */
	endnoteTextStyle: ParagraphStyle

	/**
	 * Title of the endnotes. (Limit: 0 to 100 characters)
	 */
	endnoteTitle: string

	/**
	 * The paragraph style to apply to endnote title.
	 */
	endnoteTitleStyle: ParagraphStyle

	/**
	 * Frame creation of the endnotes.
	 */
	frameCreateOption: EndnoteFrameCreate | string

	/**
	 * The point at which to restart endnote numbering.
	 */
	restartEndnoteNumbering: EndnoteRestarting | string

	/**
	 * Scope value of the endnotes.
	 */
	scopeValue: EndnoteScope | string

	/**
	 * The position of the endnote prefix and/or suffix.
	 */
	showEndnotePrefixSuffix: FootnotePrefixSuffix | string

	/**
	 * The number at which to start endnote numbering.
	 */
	startEndnoteNumberAt: number

}

/**
 * Default page item formatting properties.
 */
declare class PageItemDefault extends Preference {
	/**
	 * The default graphic object style applied to the PageItemDefault.
	 */
	appliedGraphicObjectStyle: ObjectStyle | string

	/**
	 * The default frame grid object style applied to the PageItemDefault.
	 */
	appliedGridObjectStyle: ObjectStyle | string

	/**
	 * The default text object style applied to the PageItemDefault.
	 */
	appliedTextObjectStyle: ObjectStyle | string

	/**
	 * The arrowhead alignment applied to the PageItemDefault.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	bottomLeftCornerRadius: number | string

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	bottomRightCornerRadius: number | string

	/**
	 * Transparency settings for the content of the PageItemDefault.
	 */
	contentTransparencySettings: ContentTransparencySetting

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap

	/**
	 * The corner join applied to the PageItemDefault.
	 */
	endJoin: EndJoin

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the PageItemDefault. .
	 */
	fillColor: Swatch | string

	/**
	 * The percent of tint to use in the PageItemDefault's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number

	/**
	 * Transparency settings for the fill applied to the PageItemDefault.
	 */
	fillTransparencySettings: FillTransparencySetting

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	gapTint: number

	/**
	 * The angle of a linear gradient applied to the fill of the PageItemDefault. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The angle of a linear gradient applied to the stroke of the PageItemDefault. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000)
	 */
	leftArrowHeadScale: number

	/**
	 * The arrowhead applied to the start of the path.
	 */
	leftLineEnd: ArrowHead

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number

	/**
	 * If true, the PageItemDefault does not print.
	 */
	nonprinting: boolean

	/**
	 * If true, the PageItemDefault's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean

	/**
	 * If true, the PageItemDefault's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000)
	 */
	rightArrowHeadScale: number

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead

	/**
	 * The stroke alignment applied to the PageItemDefault.
	 */
	strokeAlignment: StrokeAlignment

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the PageItemDefault.
	 */
	strokeColor: Swatch | string

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number

	/**
	 * Transparency settings for the stroke.
	 */
	strokeTransparencySettings: StrokeTransparencySetting

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | string

	/**
	 * The weight (in points) to apply to the PageItemDefault's stroke.
	 */
	strokeWeight: number | string

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	topLeftCornerRadius: number | string

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	topRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	topRightCornerRadius: number | string

	/**
	 * Transparency settings.
	 */
	transparencySettings: TransparencySetting

	/**
	 * Applies the specified object style.
	 * @param using The object style to apply.
	 * @param clearingOverrides If true, clears the PageItemDefault's existing attributes before applying the style.
	 * @param clearingOverridesThroughRootObjectStyle If true, clears attributes and formatting applied to the PageItemDefault that are not defined in the object style.
	 */
	applyObjectStyle(using: ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void

	/**
	 * Clear overrides for object style
	 */
	clearObjectStyleOverrides(): void

}

/**
 * Export options for the object
 */
declare class ObjectExportOption extends Preference {
	/**
	 * The metadata property to use as source of actual text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String.
	 */
	actualMetadataProperty: any

	/**
	 * The source type of actual text
	 */
	actualTextSourceType: SourceType

	/**
	 * The metadata property to use as source of alternate text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String.
	 */
	altMetadataProperty: any

	/**
	 * The source type of alternate text
	 */
	altTextSourceType: SourceType

	/**
	 * The tag type of page item
	 */
	applyTagType: TagType

	/**
	 * The custom actual text entered by the user
	 */
	customActualText: string

	/**
	 * The custom alternate text entered by the user
	 */
	customAltText: string

	/**
	 * If true, custom layout is enabled for object
	 */
	customLayout: boolean

	/**
	 * Custom Layout settings to be used for object
	 */
	customLayoutType: CustomLayoutTypeEnum

	/**
	 * Custom size applied to the object
	 */
	customSize: string

	/**
	 * The epub type as recommended by IDPF
	 */
	epubType: string

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette

	/**
	 * Alignment applied to images
	 */
	imageAlignment: ImageAlignmentType

	/**
	 * Allows user to select the image format for conversion
	 */
	imageConversionType: ImageFormat

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution

	/**
	 * Image page break settings to be used with objects
	 */
	imagePageBreak: ImagePageBreakType

	/**
	 * Space After applied to images
	 */
	imageSpaceAfter: number

	/**
	 * Space Before applied to images
	 */
	imageSpaceBefore: number

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality

	/**
	 * Preserve Appearance from Layout
	 */
	preserveAppearanceFromLayout: PreserveAppearanceFromLayoutEnum

	/**
	 * size settings to be used for the object
	 */
	sizeType: SizeTypeEnum

	/**
	 * If true, image page break settings will be used in objects
	 */
	useImagePageBreak: boolean

	/**
	 * Provides the actual text for the object
	 */
	actualText(): string

	/**
	 * Provides the alternate text for the object
	 */
	altText(): string

}

/**
 * Text editing preferences.
 */
declare class TextEditingPreference extends Preference {
	/**
	 * If true, allows text to be dragged and dropped in the story editor or galley view.
	 */
	allowDragAndDropTextInStory: boolean

	/**
	 * If true, allows text to be dragged and dropped on a layout page.
	 */
	dragAndDropTextInLayout: boolean

	/**
	 * If true, a single click (with the Type tool) converts non-text frames to text frames.
	 */
	singleClickConvertsFramesToTextFrames: boolean

	/**
	 * If true, automatically adjusts spacing among words and between words and punctuation marks when cutting and pasting text.
	 */
	smartCutAndPaste: boolean

	/**
	 * If true, a triple click selects a line of text. If false, a triple click selects a paragraph.
	 */
	tripleClickSelectsLine: boolean

}

/**
 * Mojikumi UI preferences.
 */
declare class MojikumiUiPreference extends Preference {
	/**
	 * If true, uses full-width spacing for all characters.
	 */
	lineEndAllOneEm: boolean

	/**
	 * If true, uses half-width spacing for all characters.
	 */
	lineEndAllOneHalfEm: boolean

	/**
	 * If true, uses full-width spacing for punctuation and for the last character in the line.
	 */
	lineEndPeriodOneEm: boolean

	/**
	 * If true, uses line end uke no float.
	 */
	lineEndUkeNoFloat: boolean

	/**
	 * If true, indents lines one full space and uses no float for all characters.
	 */
	oneEmIndentLineEndAllNoFloat: boolean

	/**
	 * If true, indents lines one full space and uses full-width spacing for all characters.
	 */
	oneEmIndentLineEndAllOneEm: boolean

	/**
	 * If true, indents lines one full space and uses half-width spacing for all characters.
	 */
	oneEmIndentLineEndAllOneHalfEm: boolean

	/**
	 * If true, indents lines one space and uses full-width spacing for punctuation and for the last character in the line.
	 */
	oneEmIndentLineEndPeriodOneEm: boolean

	/**
	 * If true, indents lines one full space and uses line end uke no float.
	 */
	oneEmIndentLineEndUkeNoFloat: boolean

	/**
	 * If true, indents lines one space and uses line end uke one half space.
	 */
	oneEmIndentLineEndUkeOneHalfEm: boolean

	/**
	 * If true, Uses full-witdh spacing for all characters except the last character in the line, which uses either full- or half-width spacing.
	 */
	oneOrOneHalfEmIndentLineEndAllOneEm: boolean

	/**
	 * If true, indents lines one or one-half space and uses full-width spacing for punctuation and for the last character in the line.
	 */
	oneOrOneHalfEmIndentLineEndPeriodOneEm: boolean

	/**
	 * If true, indents lines one half space or one full space and uses line end uke no float.
	 */
	oneOrOneHalfEmIndentLineEndUkeNoFloat: boolean

	/**
	 * If true, indents lines one full or half space and uses line end uke one half space.
	 */
	oneOrOneHalfEmIndentLineEndUkeOneHalfEm: boolean

	/**
	 * If true, displays table for mojikumi tsume and aki optimized for Simplified Chinese punctuation glyphs.
	 */
	showSimpChineseDefault: boolean

	/**
	 * If true, displays table for mojikumi tsume and aki optimized for Traditional Chinese centered punctuation glyphs.
	 */
	showTradChineseDefault: boolean

}

/**
 * Font locking preferences.
 */
declare class FontLockingPreference extends Preference {
	/**
	 * If true, turns on missing glyph protection during font change.
	 */
	fontChangeLocking: boolean

	/**
	 * If true, turns on missing glyph protection during typing.
	 */
	fontInputLocking: boolean

}

/**
 * User dictionary preferences.
 */
declare class DictionaryPreference extends Preference {
	/**
	 * The hyphenation exception list to use when composing text.
	 */
	composition: ComposeUsing

	/**
	 * If true, merges the spelling and hyphenation exceptions lists in the external user dictionary with the lists stored within the document.
	 */
	mergeUserDictionary: boolean

	/**
	 * If true, recomposes all stories when the compose using settings are changed, or when words are added to or removed from the user dictionary.
	 */
	recomposeWhenChanged: boolean

}

/**
 * Default settings to use when creating a polygon.
 */
declare class PolygonPreference extends Preference {
	/**
	 * The star inset percentage for the sides of a polygon. (Range: 0 to 100)
	 */
	insetPercentage: number

	/**
	 * The number of sides for a polygon. (Range: 3 to 100)
	 */
	numberOfSides: number

}

/**
 * Spell-check preferences.
 */
declare class SpellPreference extends Preference {
	/**
	 * If true, checks for uncapitalized first words in sentences.
	 */
	checkCapitalizedSentences: boolean

	/**
	 * If true, checks for uncapitalized proper nouns.
	 */
	checkCapitalizedWords: boolean

	/**
	 * If true, checks for misspelled words.
	 */
	checkMisspelledWords: boolean

	/**
	 * If true, checks for repeated words.
	 */
	checkRepeatedWords: boolean

	/**
	 * If true, underlines misspelled and repeated words, uncapitalized proper nouns, and uncapitalized first words in sentences. Note: Valid only when the corresponding properties are true. For information, see check misspelled words, check repeated words, check capitalized words, and check capitalized sentences.
	 */
	dynamicSpellCheck: boolean

	/**
	 * The underline color for misspelled words, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid only when both dynamic spell check and check misspelled words are true.
	 */
	misspelledWordColor: [number, number, number] | UIColors

	/**
	 * The underline color for repeated words, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid only when both dynamic spell check and check repeated words are true. .
	 */
	repeatedWordColor: [number, number, number] | UIColors

	/**
	 * The underline color for the first word in sentences that do not begin with a capital letter, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid when both dynamic spell check and check capitalized sentences are true.
	 */
	uncapitalizedSentenceColor: [number, number, number] | UIColors

	/**
	 * The underline color for uncapitalized proper nouns, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid only when both dynamic spell check and check capitalized words are true. .
	 */
	uncapitalizedWordColor: [number, number, number] | UIColors

}

/**
 * Auto-correct preferences.
 */
declare class AutoCorrectPreference extends Preference {
	/**
	 * If true, automatically corrects misspelled words listed in the auto-correct table.
	 */
	autoCorrect: boolean

	/**
	 * If true, automatically corrects capitalization errors listed in the auto-correct table.
	 */
	autoCorrectCapitalizationErrors: boolean

}

/**
 * Smart Guide preferences.
 */
declare class SmartGuidePreference extends Preference {
	/**
	 * If true, smart alignment to object centers is enabled.
	 */
	alignToObjectCenter: boolean

	/**
	 * If true, smart alignment to object edges is enabled.
	 */
	alignToObjectEdges: boolean

	/**
	 * If true, smart guides are enabled.
	 */
	enabled: boolean

	/**
	 * The color of the guide, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	guideColor: [number, number, number] | UIColors

	/**
	 * If true, smart dimensions guides are enabled.
	 */
	smartDimensions: boolean

	/**
	 * If true, smart spacing guides are enabled.
	 */
	smartSpacing: boolean

}

/**
 * EPS import preferences.
 */
declare class EPSImportPreference extends Preference {
	/**
	 * If true, applies clipping paths stored in the EPS file.
	 */
	epsFrames: boolean

	/**
	 * Indicates when to create preview images.
	 */
	epsProxy: CreateProxy

	/**
	 * If true, reads OPI image links in the imported EPS file. If false, preserves the OPI links but does not read them.
	 */
	opiComments: boolean

}

/**
 * Placed InDesign page attribute.
 */
declare class ImportedPageAttribute extends Preference {
	/**
	 * Specifies the cropping of the imported InDesign page. Read only for page items.
	 */
	importedPageCrop: ImportedPageCropOptions

	/**
	 * Which page of the InDesign document should be imported. Read only for page items.
	 */
	pageNumber: number

}

/**
 * Stroke/fill proxy settings.
 */
declare class StrokeFillProxySetting extends Preference {
	/**
	 * Which part of the stroke/fill proxy is currently active.
	 */
	active: StrokeFillProxyOptions

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the StrokeFillProxySetting. .
	 */
	fillColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the StrokeFillProxySetting.
	 */
	strokeColor: Swatch | string

	/**
	 * Which target is affected by changes to the stroke/fill proxy.
	 */
	target: StrokeFillTargetOptions

}

/**
 * Adjust layout preferences.
 */
declare class AdjustLayoutPreference extends Preference {
	/**
	 * If true, allows font sizes and leading to adjust.
	 */
	allowFontSizeAndLeadingAdjustment: boolean

	/**
	 * If true, allows locked objects or objects on locked layers to be adjusted.
	 */
	allowLockedObjectsToAdjust: boolean

	/**
	 * If true, adjust layout is enabled.
	 */
	enableAdjustLayout: boolean

	/**
	 * If true, margins are adjusted automatically if page size is changed.
	 */
	enableAutoAdjustMargins: boolean

	/**
	 * If true, imposes the font size restriction during the adjustment.
	 */
	imposeFontSizeRestriction: boolean

	/**
	 * maximum font size after adjustment in points
	 */
	maximumFontSize: number

	/**
	 * minimum font size after adjustment in points
	 */
	minimumFontSize: number

}

/**
 * A preferences object.
 */
declare class Preference {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the Preference (a Application, Document, XmlStory, Spread, FindChangeTransparencySetting, FindChangeStrokeTransparencySetting, FindChangeFillTransparencySetting, FindChangeContentTransparencySetting, HtmlItem, SignatureField, TextBox, RadioButton, ListBox, ComboBox, CheckBox, MultiStateObject, Button, FormField, Sound, Movie, MediaItem, EPSText, Polygon, GraphicLine, Rectangle, Oval, SplineItem, ImportedPage, PICT, WMF, PDF, EPS, Image, Graphic, Group, EndnoteTextFrame, TextFrame, PageItem, PageItemDefault, TransparencySetting, StrokeTransparencySetting, FillTransparencySetting, ContentTransparencySetting, FindObjectPreference, ChangeObjectPreference, Story, TextVariable, TextWrapPreference, Page, Book, Link, ObjectStyle, MasterSpread, NamedGrid, TextDefault, ParagraphStyle, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, Text, FindTextPreference, ChangeTextPreference, FindGrepPreference, ChangeGrepPreference, FindTransliteratePreference, ChangeTransliteratePreference or DataMerge).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Preference[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Preference.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of preferences objects.
 */
declare class Preferences {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Preference with the specified index.
	 * @param index The index.
	 */
	[index: number]: Preference

	/**
	 * Returns any Preference in the collection.
	 */
	anyItem(): Preference

	/**
	 * Displays the number of elements in the Preference.
	 */
	count(): number

	/**
	 * Returns every Preference in the collection.
	 */
	everyItem(): Preference[]

	/**
	 * Returns the first Preference in the collection.
	 */
	firstItem(): Preference

	/**
	 * Returns the Preference with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Preference

	/**
	 * Returns the Preferences within the specified range.
	 * @param from The Preference, index, or name at the beginning of the range.
	 * @param to The Preference, index, or name at the end of the range.
	 */
	itemByRange(from: Preference | number | string, to: Preference | number | string): Preference[]

	/**
	 * Returns the last Preference in the collection.
	 */
	lastItem(): Preference

	/**
	 * Returns the middle Preference in the collection.
	 */
	middleItem(): Preference

	/**
	 * Returns the Preference whose index follows the specified Preference in the collection.
	 * @param obj The Preference whose index comes before the desired Preference.
	 */
	nextItem(obj: Preference): Preference

	/**
	 * Returns the Preference with the index previous to the specified index.
	 * @param obj The index of the Preference that follows the desired Preference.
	 */
	previousItem(obj: Preference): Preference

	/**
	 * Generates a string which, if executed, will return the Preference.
	 */
	toSource(): string

}

/**
 * Scripting environment preferences.
 */
declare class ScriptPreference extends Preference {
	/**
	 * If true, enables redraw during script execution.
	 */
	enableRedraw: boolean

	/**
	 * The measurement unit used during script processing.
	 */
	measurementUnit: AutoEnum | MeasurementUnits

	/**
	 * The path to the Scripts folder for the application.
	 */
	scriptsFolder: File

	/**
	 * A list of the scripts in the Scripts folder. Can return: Array of Array of 2 Strings or Files.
	 */
	scriptsList: any[]

	/**
	 * Controls the display of dialogs and alerts during script processing.
	 */
	userInteractionLevel: UserInteractionLevels

	/**
	 * The version of the scripting environment.
	 */
	version: string | number

}

/**
 * Color management settings.
 */
declare class ColorSetting extends Preference {
	/**
	 * If true, uses LAB alternates for spot colors when available.
	 */
	accurateLABSpots: boolean

	/**
	 * The current color management system settings configuration. Note: For information on possible values, see CMS settings list.
	 */
	cmsSettings: string

	/**
	 * A list of valid color management system settings configurations.
	 */
	cmsSettingsList: string[]

	/**
	 * The file path of the CSF file to use.
	 */
	cmsSettingsPath: File

	/**
	 * The policy for handling colors in a CMYK color model, including reading and embedding color profiles, resolving mismatches between embedded color profiles and the working space, and moving colors between documents.
	 */
	cmykPolicy: ColorSettingsPolicy

	/**
	 * If true, enables color management.
	 */
	enableColorManagement: boolean

	/**
	 * The color management module (CMM) for mapping color space gamuts between documents.
	 */
	engine: string

	/**
	 * The available color engines.
	 */
	engineList: string[]

	/**
	 * If true, uses idealized black for CMYK-to-RGB or CMYK-to-Gray conversions to print or export.
	 */
	idealizedBlackToExport: boolean

	/**
	 * If true, uses idealized black for CMYK-to-RGB or CMYK-to-Gray conversions to the screen.
	 */
	idealizedBlackToScreen: boolean

	/**
	 * The default rendering intent.
	 */
	intent: DefaultRenderingIntent

	/**
	 * If true, displays a prompt when opening a file whose embedded color profile does not match the current working space. The prompt provides the option to override the default mismatch behavior.
	 */
	mismatchAskWhenOpening: boolean

	/**
	 * If true, displays a prompt when importing an object (via pasting, drag-and-drop, or other similar methods) whose colors do not match the current working space. The prompt provides the option to override the default mismatch behavior.
	 */
	mismatchAskWhenPasting: boolean

	/**
	 * If true, displays a prompt when opening a file that does not have an embedded color profile. The prompt provides the option to assign a color profile.
	 */
	missingAskWhenOpening: boolean

	/**
	 * The policy for handling colors in an RGB color model, including reading and embedding color profiles, handling mismatches between embedded color profiles and the working space, and moving colors from one document to another.
	 */
	rgbPolicy: ColorSettingsPolicy

	/**
	 * If true, uses black point compensation to ensure that shadow detail is preserved by simulating the full dynamic range of the output device.
	 */
	useBPC: boolean

	/**
	 * The current CMYK profile.
	 */
	workingSpaceCMYK: string

	/**
	 * A list of valid CMYK color profiles.
	 */
	workingSpaceCMYKList: string[]

	/**
	 * The current RGB profile.
	 */
	workingSpaceRGB: string

	/**
	 * A list of valid RGB color profiles.
	 */
	workingSpaceRGBList: string[]

}

/**
 * Find/change text options.
 */
declare class FindChangeTextOption extends Preference {
	/**
	 * If true, finds strings whose use of case matches the find text string. If false, finds strings that match the find text string regardless of case.
	 */
	caseSensitive: boolean

	/**
	 * If true, ignore diacs in the find/change query.
	 */
	ignoreDiacritics: boolean

	/**
	 * If true, ignore kashidas in the find/change query.
	 */
	ignoreKashidas: boolean

	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean

	/**
	 * If true, finds only text that matches the specified kana type.
	 */
	kanaSensitive: boolean

	/**
	 * If true, search in the backward direction.
	 */
	searchBackwards: boolean

	/**
	 * If true, finds only the complete find text string. If false, also finds strings that contain the find text string.
	 */
	wholeWord: boolean

	/**
	 * If true, finds only text that matches the specified character width.
	 */
	widthSensitive: boolean

}

/**
 * Find/change grep options.
 */
declare class FindChangeGrepOption extends Preference {
	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean

	/**
	 * If true, finds only text that matches the specified kana type.
	 */
	kanaSensitive: boolean

	/**
	 * If true, search in the backward direction.
	 */
	searchBackwards: boolean

	/**
	 * If true, finds only text that matches the specified character width.
	 */
	widthSensitive: boolean

}

/**
 * Find/change glyph options.
 */
declare class FindChangeGlyphOption extends Preference {
	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean

	/**
	 * If true, search in the backward direction.
	 */
	searchBackwards: boolean

}

/**
 * Find/change object options.
 */
declare class FindChangeObjectOption extends Preference {
	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean

	/**
	 * The object type.
	 */
	objectType: ObjectTypes

}

/**
 * Find/change transliterate options.
 */
declare class FindChangeTransliterateOption extends Preference {
	/**
	 * If true, finds strings whose use of case matches the find text string. If false, finds strings that match the find text string regardless of case.
	 */
	caseSensitive: boolean

	/**
	 * If true, includes footnotes in the find/change query.
	 */
	includeFootnotes: boolean

	/**
	 * If true, includes hidden layers in the find/change query.
	 */
	includeHiddenLayers: boolean

	/**
	 * If true, includes locked layers in the find query.
	 */
	includeLockedLayersForFind: boolean

	/**
	 * If true, includes locked stories in the find query.
	 */
	includeLockedStoriesForFind: boolean

	/**
	 * If true, includes master pages in the find/change query.
	 */
	includeMasterPages: boolean

	/**
	 * If true, finds only text that matches the specified kana type.
	 */
	kanaSensitive: boolean

	/**
	 * If true, search in the backward direction.
	 */
	searchBackwards: boolean

	/**
	 * If true, finds only the complete find text string. If false, also finds strings that contain the find text string.
	 */
	wholeWord: boolean

	/**
	 * If true, finds only text that matches the specified character width.
	 */
	widthSensitive: boolean

}

/**
 * Find text preferences.
 */
declare class FindTextPreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[]

	/**
	 * The font applied to the FindTextPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet | NothingEnum

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the fill color of the FindTextPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum

	/**
	 * The FindTextPreference to find.
	 */
	findWhat: string | NothingEnum

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum

	/**
	 * The horizontal scaling applied to the FindTextPreference.
	 */
	horizontalScale: number | NothingEnum

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum

	/**
	 * Numbering restart policies.
	 */
	numberingRestartPolicies: NumberingRestartPolicy | NothingEnum

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long.
	 */
	paragraphKashidaWidth: number | NothingEnum

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum

	/**
	 * The skew angle of the FindTextPreference.
	 */
	skew: number | NothingEnum

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the stroke color of the FindTextPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum

	/**
	 * The vertical scaling applied to the FindTextPreference.
	 */
	verticalScale: number | NothingEnum

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum

}

/**
 * Find grep preferences.
 */
declare class FindGrepPreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[]

	/**
	 * The font applied to the FindGrepPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet | NothingEnum

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the fill color of the FindGrepPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum

	/**
	 * The FindGrepPreference to find.
	 */
	findWhat: string | NothingEnum

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum

	/**
	 * The horizontal scaling applied to the FindGrepPreference.
	 */
	horizontalScale: number | NothingEnum

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum

	/**
	 * Numbering restart policies.
	 */
	numberingRestartPolicies: NumberingRestartPolicy | NothingEnum

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long.
	 */
	paragraphKashidaWidth: number | NothingEnum

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum

	/**
	 * The skew angle of the FindGrepPreference.
	 */
	skew: number | NothingEnum

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the stroke color of the FindGrepPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum

	/**
	 * The vertical scaling applied to the FindGrepPreference.
	 */
	verticalScale: number | NothingEnum

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum

}

/**
 * Find glyph preferences.
 */
declare class FindGlyphPreference extends Preference {
	/**
	 * The font applied to the FindGlyphPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum

	/**
	 * The GID/CID of the glyph.
	 */
	glyphID: number | NothingEnum

	/**
	 * The Registry Ordered font group.
	 */
	rosFontGroup: [string, string] | NothingEnum

}

/**
 * Find object preferences.
 */
declare class FindObjectPreference extends Preference {
	/**
	 * The metadata property to use as source of actual text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.
	 */
	actualMetadataProperty: any

	/**
	 * The source type of actual text.
	 */
	actualTextSourceType: SourceType | NothingEnum

	/**
	 * The metadata property to use as source of alternate text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.
	 */
	altMetadataProperty: any

	/**
	 * The source type of alternate text.
	 */
	altTextSourceType: SourceType | NothingEnum

	/**
	 * The point in the anchored object to position.
	 */
	anchorPoint: AnchorPoint | NothingEnum

	/**
	 * The space above an above-line anchored object.
	 */
	anchorSpaceAbove: number | NothingEnum

	/**
	 * The horizontal (x) offset of the anchored object.
	 */
	anchorXoffset: number | NothingEnum

	/**
	 * The vertical (y) offset of the anchored object. Corresponds to the space after property for above line positioning.
	 */
	anchorYoffset: number | NothingEnum

	/**
	 * The position of the anchored object relative to the anchor.
	 */
	anchoredPosition: AnchorPosition | NothingEnum

	/**
	 * The applied object style(s).
	 */
	appliedObjectStyles: string | NothingEnum | ObjectStyle

	/**
	 * The tag type of page item.
	 */
	applyTagType: TagType | NothingEnum

	/**
	 * If true, text wraps on the master spread apply to that spread only, and not to any pages the master spread has been applied to.
	 */
	applyToMasterPageOnly: boolean | NothingEnum

	/**
	 * The arrowhead alignment applied to the FindObjectPreference.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum | NothingEnum

	/**
	 * The reference point for auto sizing of text frame. Reference point is automatically adjusted to the suitable value depending on the auto-sizing type value. As an example, top left reference point becomes top center for height only dimension.
	 */
	autoSizingReferencePoint: AutoSizingReferenceEnum | NothingEnum

	/**
	 * Auto-sizing type of text frame. Based on type, reference value is automatically adjusted. For example, for height only type, top-left reference point becomes top-center. Recommended to change auto-sizing type, after setting other auto-sizing attributes.
	 */
	autoSizingType: AutoSizingTypeEnum | NothingEnum

	/**
	 * The grid line color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	baselineFrameGridColor: [number, number, number] | UIColors | NothingEnum

	/**
	 * The distance between grid lines.
	 */
	baselineFrameGridIncrement: number | NothingEnum

	/**
	 * The location (top of page, top margin, top of frame, or frame inset) on which to base the custom baseline grid.
	 */
	baselineFrameGridRelativeOption: BaselineFrameGridRelativeOption | NothingEnum

	/**
	 * The amount in measurement units to crop the bottom edge of a graphic.
	 */
	bottomCrop: number | NothingEnum

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions | NothingEnum

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerRadius: number | NothingEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions | NothingEnum

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerRadius: number | NothingEnum

	/**
	 * Transparency settings for the content of the FindObjectPreference.
	 */
	contentTransparencySettings: FindChangeContentTransparencySetting | NothingEnum

	/**
	 * The contour type.
	 */
	contourType: ContourOptionsTypes | NothingEnum

	/**
	 * The custom actual text entered by the user.
	 */
	customActualText: string | NothingEnum

	/**
	 * The custom alternate text entered by the user.
	 */
	customAltText: string | NothingEnum

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap | NothingEnum

	/**
	 * The corner join applied to the FindObjectPreference.
	 */
	endJoin: EndJoin | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the FindObjectPreference. .
	 */
	fillColor: Swatch | NothingEnum | string

	/**
	 * The percent of tint to use in the FindObjectPreference's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum

	/**
	 * Transparency settings for the fill applied to the FindObjectPreference.
	 */
	fillTransparencySettings: FindChangeFillTransparencySetting | NothingEnum

	/**
	 * The distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	firstBaselineOffset: FirstBaseline | NothingEnum

	/**
	 * The point with which to align the image empty when fitting in a frame. For information, see frame fitting options.
	 */
	fittingAlignment: AnchorPoint | NothingEnum

	/**
	 * The frame fitting option to apply to placed or pasted content if the frame is empty. Can be applied to a frame, object style, or document or to the application.
	 */
	fittingOnEmptyFrame: EmptyFrameFittingOptions | NothingEnum

	/**
	 * If true, enable overrides to document footnote options.
	 */
	footnotesEnableOverrides: boolean | NothingEnum

	/**
	 * Minimum Spacing Before First Footnote.
	 */
	footnotesMinimumSpacing: number | NothingEnum

	/**
	 * Space between footnotes.
	 */
	footnotesSpaceBetween: number | NothingEnum

	/**
	 * If true, enable straddling footnotes.
	 */
	footnotesSpanAcrossColumns: boolean | NothingEnum

	/**
	 * The type of text frame.
	 */
	frameType: FrameTypes | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch | NothingEnum

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	gapTint: number | NothingEnum

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean | NothingEnum

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG. .
	 */
	gifOptionsPalette: GIFOptionsPalette | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the FindObjectPreference. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The angle of a linear gradient applied to the stroke of the FindObjectPreference. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum

	/**
	 * The horizontal reference point on the page. Valid only when anchored position is custom.
	 */
	horizontalReferencePoint: AnchoredRelativeTo | NothingEnum

	/**
	 * If true, ignores text wrap settings for drawn or placed objects in the text frame. .
	 */
	ignoreWrap: boolean | NothingEnum

	/**
	 * Alignment applied to images.
	 */
	imageAlignment: ImageAlignmentType | NothingEnum

	/**
	 * Allows user to select the image format for conversion.
	 */
	imageConversionType: ImageFormat | NothingEnum

	/**
	 * The export resolution.
	 */
	imageExportResolution: ImageResolution | NothingEnum

	/**
	 * Image page break settings to be used with objects.
	 */
	imagePageBreak: ImagePageBreakType | NothingEnum

	/**
	 * Space After applied to images.
	 */
	imageSpaceAfter: number | NothingEnum

	/**
	 * Space Before applied to images.
	 */
	imageSpaceBefore: number | NothingEnum

	/**
	 * If true, creates interior clipping paths within the surrounding clipping path. Note: Valid only when clipping type is alpha channel or detect edges. .
	 */
	includeInsideEdges: boolean | NothingEnum

	/**
	 * The amount to offset text from the edges of the text frame, specified either as a single value applied uniformly to all sides of the text frame or as an array of 4 values in the format [top inset, left inset, bottom inset, right inset].
	 */
	insetSpacing: number | [number, number, number, number] | NothingEnum

	/**
	 * If true, inverts the text wrap.
	 */
	inverse: boolean | NothingEnum

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat | NothingEnum

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF. .
	 */
	jpegOptionsQuality: JPEGOptionsQuality | NothingEnum

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000).
	 */
	leftArrowHeadScale: number | NothingEnum

	/**
	 * The amount in measurement units to crop the left edge of a graphic.
	 */
	leftCrop: number | NothingEnum

	/**
	 * The arrowhead applied to the start of the path. .
	 */
	leftLineEnd: ArrowHead | NothingEnum

	/**
	 * If true, prevents manual positioning of the anchored object.
	 */
	lockPosition: boolean | NothingEnum

	/**
	 * The minimum distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	minimumFirstBaselineOffset: number | NothingEnum

	/**
	 * The minimum height for auto-sizing of the text frame.
	 */
	minimumHeightForAutoSizing: number | NothingEnum

	/**
	 * The minimum width for auto-sizing of the text frame.
	 */
	minimumWidthForAutoSizing: number | NothingEnum

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum

	/**
	 * If true, the FindObjectPreference does not print.
	 */
	nonprinting: boolean | NothingEnum

	/**
	 * If true, adjust the position of characters at the edges of the frame to provide a better appearance.
	 */
	opticalMarginAlignment: boolean | NothingEnum

	/**
	 * The point size used as the basis for calculating optical margin alignment. (Range: 0.1 to 1296).
	 */
	opticalMarginSize: number | NothingEnum

	/**
	 * If true, the FindObjectPreference's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean | NothingEnum

	/**
	 * If true, the FindObjectPreference's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean | NothingEnum

	/**
	 * If true, pins the position of the anchored object within the text frame top and bottom.
	 */
	pinPosition: boolean | NothingEnum

	/**
	 * The point in the referenced object relative to which to position the anchored object. Notes: Valid only when anchored position is custom.
	 */
	positionReferencePoint: AnchorPoint | NothingEnum

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Preserve Appearance from Layout.
	 */
	preserveAppearanceFromLayout: PreserveAppearanceFromLayoutEnum | NothingEnum

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000).
	 */
	rightArrowHeadScale: number | NothingEnum

	/**
	 * The amount in measurement units to crop the right edge of a graphic.
	 */
	rightCrop: number | NothingEnum

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead | NothingEnum

	/**
	 * If true, the position of the anchored object is relative to the binding spine of the page or spread.
	 */
	spineRelative: boolean | NothingEnum

	/**
	 * The amount to offset the baseline grid.
	 */
	startingOffsetForBaselineFrameGrid: number | NothingEnum

	/**
	 * The direction of the story.
	 */
	storyDirection: StoryDirectionOptions | NothingEnum

	/**
	 * The orientation of the text in the story.
	 */
	storyOrientation: StoryHorizontalOrVertical | NothingEnum

	/**
	 * The stroke alignment applied to the FindObjectPreference.
	 */
	strokeAlignment: StrokeAlignment | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the FindObjectPreference.
	 */
	strokeColor: Swatch | NothingEnum | string

	/**
	 * The corner adjustment applied to the FindObjectPreference.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment | NothingEnum

	/**
	 * The dash and gap measurements that define the pattern of a custom dashed line. Define up to six values (in points) in the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number[] | NothingEnum

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum

	/**
	 * Transparency settings for the stroke.
	 */
	strokeTransparencySettings: FindChangeStrokeTransparencySetting | NothingEnum

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | NothingEnum | string

	/**
	 * The weight (in points) to apply to the FindObjectPreference's stroke.
	 */
	strokeWeight: number | NothingEnum

	/**
	 * The number of columns in the text frame. Note: Depending on the value of use fixed column width, the number of columns can change automatically when the text frame size changes.
	 */
	textColumnCount: number | NothingEnum

	/**
	 * The column width of the columns in the text frame.
	 */
	textColumnFixedWidth: number | NothingEnum

	/**
	 * The space between columns in the text frame.
	 */
	textColumnGutter: number | NothingEnum

	/**
	 * The text wrap mode. .
	 */
	textWrapMode: TextWrapModes | NothingEnum

	/**
	 * The minimum space between text and the edges of the wrapped object. Specify four values in the format [top, left, bottom, right]. . Can return: Ordered array containing top:Unit, left:Unit, bottom:Unit, right:Unit or NothingEnum enumerator.
	 */
	textWrapOffset: any

	/**
	 * Text wrap side options.
	 */
	textWrapSide: TextWrapSideOptions | NothingEnum

	/**
	 * The amount in measurement units to crop the top edge of a graphic.
	 */
	topCrop: number | NothingEnum

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions | NothingEnum

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.
	 */
	topLeftCornerRadius: number | NothingEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes.
	 */
	topRightCornerOption: CornerOptions | NothingEnum

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes.
	 */
	topRightCornerRadius: number | NothingEnum

	/**
	 * Transparency settings.
	 */
	transparencySettings: FindChangeTransparencySetting | NothingEnum

	/**
	 * If true, uses a custom baseline frame grid.
	 */
	useCustomBaselineFrameGrid: boolean | NothingEnum

	/**
	 * If true, maintains column width when the text frame is resized. If false, causes columns to resize when the text frame is resized. Note: When true, resizing the frame can change the number of columns in the frame.
	 */
	useFixedColumnWidth: boolean | NothingEnum

	/**
	 * If true, image page break settings will be used in objects.
	 */
	useImagePageBreak: boolean | NothingEnum

	/**
	 * If true, minimum height value is used during the auto-sizing of text frame. .
	 */
	useMinimumHeightForAutoSizing: boolean | NothingEnum

	/**
	 * If true, minimum width value is used during the auto-sizing of text frame. .
	 */
	useMinimumWidthForAutoSizing: boolean | NothingEnum

	/**
	 * If true, line-breaks are not introduced after auto sizing. .
	 */
	useNoLineBreaksForAutoSizing: boolean | NothingEnum

	/**
	 * If true, the text wrap path has been explicitly modified by the user.
	 */
	userModifiedWrap: boolean | NothingEnum

	/**
	 * The vertical alignment of the text content. .
	 */
	verticalJustification: VerticalJustification | NothingEnum

	/**
	 * The vertical reference point on the page. Valid when anchored position is custom.
	 */
	verticalReferencePoint: VerticallyRelativeTo | NothingEnum

	/**
	 * The maximum amount of vertical space between two paragraphs. Note: Valid only when vertical justification is justified; the specified amount is applied in addition to the space before or space after values defined for the paragraph.
	 */
	verticalThreshold: number | NothingEnum

	/**
	 * Provides the actual text for the object
	 */
	actualText(): string

	/**
	 * Provides the alternate text for the object
	 */
	altText(): string

}

/**
 * Find transliterate preferences.
 */
declare class FindTransliteratePreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[]

	/**
	 * The font applied to the FindTransliteratePreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet | NothingEnum

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment | NothingEnum

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the fill color of the FindTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum

	/**
	 * The character type to find.
	 */
	findCharacterType: FindChangeTransliterateCharacterTypes | NothingEnum

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum

	/**
	 * The horizontal scaling applied to the FindTransliteratePreference.
	 */
	horizontalScale: number | NothingEnum

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment | NothingEnum

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum

	/**
	 * The skew angle of the FindTransliteratePreference.
	 */
	skew: number | NothingEnum

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the stroke color of the FindTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum

	/**
	 * The vertical scaling applied to the FindTransliteratePreference.
	 */
	verticalScale: number | NothingEnum

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum

}

/**
 * Change text preferences.
 */
declare class ChangeTextPreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[]

	/**
	 * The font applied to the ChangeTextPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet | NothingEnum

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum

	/**
	 * The change conditions mode, change either replaces applied conditions or adds to applied conditions.
	 */
	changeConditionsMode: ChangeConditionsModes | NothingEnum

	/**
	 * The replacement ChangeTextPreference.
	 */
	changeTo: string | NothingEnum

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the fill color of the ChangeTextPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum

	/**
	 * The horizontal scaling applied to the ChangeTextPreference.
	 */
	horizontalScale: number | NothingEnum

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: string | NothingEnum | XMLTag

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum

	/**
	 * Numbering restart policies.
	 */
	numberingRestartPolicies: NumberingRestartPolicy | NothingEnum

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long.
	 */
	paragraphKashidaWidth: number | NothingEnum

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum

	/**
	 * The skew angle of the ChangeTextPreference.
	 */
	skew: number | NothingEnum

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the stroke color of the ChangeTextPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum

	/**
	 * The vertical scaling applied to the ChangeTextPreference.
	 */
	verticalScale: number | NothingEnum

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum

}

/**
 * Change grep preferences.
 */
declare class ChangeGrepPreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[]

	/**
	 * The font applied to the ChangeGrepPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet | NothingEnum

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum

	/**
	 * The change conditions mode, change either replaces applied conditions or adds to applied conditions.
	 */
	changeConditionsMode: ChangeConditionsModes | NothingEnum

	/**
	 * The replacement ChangeGrepPreference.
	 */
	changeTo: string | NothingEnum

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the fill color of the ChangeGrepPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum

	/**
	 * The horizontal scaling applied to the ChangeGrepPreference.
	 */
	horizontalScale: number | NothingEnum

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: string | NothingEnum | XMLTag

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum

	/**
	 * Numbering restart policies.
	 */
	numberingRestartPolicies: NumberingRestartPolicy | NothingEnum

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long.
	 */
	paragraphKashidaWidth: number | NothingEnum

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum

	/**
	 * The skew angle of the ChangeGrepPreference.
	 */
	skew: number | NothingEnum

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the stroke color of the ChangeGrepPreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum

	/**
	 * The vertical scaling applied to the ChangeGrepPreference.
	 */
	verticalScale: number | NothingEnum

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum

}

/**
 * Change glyph preferences.
 */
declare class ChangeGlyphPreference extends Preference {
	/**
	 * The font applied to the ChangeGlyphPreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum

	/**
	 * The GID/CID of the glyph.
	 */
	glyphID: number | NothingEnum

}

/**
 * Change object preferences.
 */
declare class ChangeObjectPreference extends Preference {
	/**
	 * The metadata property to use as source of actual text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.
	 */
	actualMetadataProperty: any

	/**
	 * The source type of actual text.
	 */
	actualTextSourceType: SourceType | NothingEnum

	/**
	 * The metadata property to use as source of alternate text. Can return: Ordered array containing namespacePrefix:String, propertyPath:String or NothingEnum enumerator.
	 */
	altMetadataProperty: any

	/**
	 * The source type of alternate text.
	 */
	altTextSourceType: SourceType | NothingEnum

	/**
	 * The point in the anchored object to position.
	 */
	anchorPoint: AnchorPoint | NothingEnum

	/**
	 * The space above an above-line anchored object.
	 */
	anchorSpaceAbove: number | NothingEnum

	/**
	 * The horizontal (x) offset of the anchored object.
	 */
	anchorXoffset: number | NothingEnum

	/**
	 * The vertical (y) offset of the anchored object. Corresponds to the space after property for above line positioning.
	 */
	anchorYoffset: number | NothingEnum

	/**
	 * The position of the anchored object relative to the anchor.
	 */
	anchoredPosition: AnchorPosition | NothingEnum

	/**
	 * The applied object style(s).
	 */
	appliedObjectStyles: string | NothingEnum | ObjectStyle

	/**
	 * The tag type of page item.
	 */
	applyTagType: TagType | NothingEnum

	/**
	 * If true, text wraps on the master spread apply to that spread only, and not to any pages the master spread has been applied to.
	 */
	applyToMasterPageOnly: boolean | NothingEnum

	/**
	 * The arrowhead alignment applied to the ChangeObjectPreference.
	 */
	arrowHeadAlignment: ArrowHeadAlignmentEnum | NothingEnum

	/**
	 * The reference point for auto sizing of text frame. Reference point is automatically adjusted to the suitable value depending on the auto-sizing type value. As an example, top left reference point becomes top center for height only dimension.
	 */
	autoSizingReferencePoint: AutoSizingReferenceEnum | NothingEnum

	/**
	 * Auto-sizing type of text frame. Based on type, reference value is automatically adjusted. For example, for height only type, top-left reference point becomes top-center. Recommended to change auto-sizing type, after setting other auto-sizing attributes.
	 */
	autoSizingType: AutoSizingTypeEnum | NothingEnum

	/**
	 * The grid line color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	baselineFrameGridColor: [number, number, number] | UIColors | NothingEnum

	/**
	 * The distance between grid lines.
	 */
	baselineFrameGridIncrement: number | NothingEnum

	/**
	 * The location (top of page, top margin, top of frame, or frame inset) on which to base the custom baseline grid.
	 */
	baselineFrameGridRelativeOption: BaselineFrameGridRelativeOption | NothingEnum

	/**
	 * The amount in measurement units to crop the bottom edge of a graphic.
	 */
	bottomCrop: number | NothingEnum

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerOption: CornerOptions | NothingEnum

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes.
	 */
	bottomLeftCornerRadius: number | NothingEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerOption: CornerOptions | NothingEnum

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes.
	 */
	bottomRightCornerRadius: number | NothingEnum

	/**
	 * Transparency settings for the content of the ChangeObjectPreference.
	 */
	contentTransparencySettings: FindChangeContentTransparencySetting | NothingEnum

	/**
	 * The contour type.
	 */
	contourType: ContourOptionsTypes | NothingEnum

	/**
	 * The custom actual text entered by the user.
	 */
	customActualText: string | NothingEnum

	/**
	 * The custom alternate text entered by the user.
	 */
	customAltText: string | NothingEnum

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap | NothingEnum

	/**
	 * The corner join applied to the ChangeObjectPreference.
	 */
	endJoin: EndJoin | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the ChangeObjectPreference. .
	 */
	fillColor: Swatch | NothingEnum | string

	/**
	 * The percent of tint to use in the ChangeObjectPreference's fill color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum

	/**
	 * Transparency settings for the fill applied to the ChangeObjectPreference.
	 */
	fillTransparencySettings: FindChangeFillTransparencySetting | NothingEnum

	/**
	 * The distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	firstBaselineOffset: FirstBaseline | NothingEnum

	/**
	 * The point with which to align the image empty when fitting in a frame. For information, see frame fitting options.
	 */
	fittingAlignment: AnchorPoint | NothingEnum

	/**
	 * The frame fitting option to apply to placed or pasted content if the frame is empty. Can be applied to a frame, object style, or document or to the application.
	 */
	fittingOnEmptyFrame: EmptyFrameFittingOptions | NothingEnum

	/**
	 * If true, enable overrides to document footnote options.
	 */
	footnotesEnableOverrides: boolean | NothingEnum

	/**
	 * Minimum Spacing Before First Footnote.
	 */
	footnotesMinimumSpacing: number | NothingEnum

	/**
	 * Space between footnotes.
	 */
	footnotesSpaceBetween: number | NothingEnum

	/**
	 * If true, enable straddling footnotes.
	 */
	footnotesSpanAcrossColumns: boolean | NothingEnum

	/**
	 * The type of text frame.
	 */
	frameType: FrameTypes | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of a dashed, dotted, or striped stroke. For information, see stroke type.
	 */
	gapColor: Swatch | NothingEnum

	/**
	 * The tint as a percentage of the gap color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	gapTint: number | NothingEnum

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean | NothingEnum

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG. .
	 */
	gifOptionsPalette: GIFOptionsPalette | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the ChangeObjectPreference. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The angle of a linear gradient applied to the stroke of the ChangeObjectPreference. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum

	/**
	 * The horizontal reference point on the page. Valid only when anchored position is custom.
	 */
	horizontalReferencePoint: AnchoredRelativeTo | NothingEnum

	/**
	 * If true, ignores text wrap settings for drawn or placed objects in the text frame. .
	 */
	ignoreWrap: boolean | NothingEnum

	/**
	 * Alignment applied to images.
	 */
	imageAlignment: ImageAlignmentType | NothingEnum

	/**
	 * Allows user to select the image format for conversion.
	 */
	imageConversionType: ImageFormat | NothingEnum

	/**
	 * The export resolution.
	 */
	imageExportResolution: ImageResolution | NothingEnum

	/**
	 * Image page break settings to be used with objects.
	 */
	imagePageBreak: ImagePageBreakType | NothingEnum

	/**
	 * Space After applied to images.
	 */
	imageSpaceAfter: number | NothingEnum

	/**
	 * Space Before applied to images.
	 */
	imageSpaceBefore: number | NothingEnum

	/**
	 * If true, creates interior clipping paths within the surrounding clipping path. Note: Valid only when clipping type is alpha channel or detect edges. .
	 */
	includeInsideEdges: boolean | NothingEnum

	/**
	 * The amount to offset text from the edges of the text frame, specified either as a single value applied uniformly to all sides of the text frame or as an array of 4 values in the format [top inset, left inset, bottom inset, right inset].
	 */
	insetSpacing: number | [number, number, number, number] | NothingEnum

	/**
	 * If true, inverts the text wrap.
	 */
	inverse: boolean | NothingEnum

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat | NothingEnum

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF. .
	 */
	jpegOptionsQuality: JPEGOptionsQuality | NothingEnum

	/**
	 * The scaling applied to the arrowhead at the start of the path. (Range: 1 to 1000).
	 */
	leftArrowHeadScale: number | NothingEnum

	/**
	 * The amount in measurement units to crop the left edge of a graphic.
	 */
	leftCrop: number | NothingEnum

	/**
	 * The arrowhead applied to the start of the path. .
	 */
	leftLineEnd: ArrowHead | NothingEnum

	/**
	 * If true, prevents manual positioning of the anchored object.
	 */
	lockPosition: boolean | NothingEnum

	/**
	 * The minimum distance between the baseline of the text and the top inset of the text frame or cell.
	 */
	minimumFirstBaselineOffset: number | NothingEnum

	/**
	 * The minimum height for auto-sizing of the text frame.
	 */
	minimumHeightForAutoSizing: number | NothingEnum

	/**
	 * The minimum width for auto-sizing of the text frame.
	 */
	minimumWidthForAutoSizing: number | NothingEnum

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum

	/**
	 * If true, the ChangeObjectPreference does not print.
	 */
	nonprinting: boolean | NothingEnum

	/**
	 * If true, adjust the position of characters at the edges of the frame to provide a better appearance.
	 */
	opticalMarginAlignment: boolean | NothingEnum

	/**
	 * The point size used as the basis for calculating optical margin alignment. (Range: 0.1 to 1296).
	 */
	opticalMarginSize: number | NothingEnum

	/**
	 * If true, the ChangeObjectPreference's fill color overprints any underlying objects. If false, the fill color knocks out the underlying colors.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * If true, the gap color overprints any underlying colors. If false, the gap color knocks out the underlying colors.
	 */
	overprintGap: boolean | NothingEnum

	/**
	 * If true, the ChangeObjectPreference's stroke color overprints any underlying objects. If false, the stroke color knocks out theunderlying colors.
	 */
	overprintStroke: boolean | NothingEnum

	/**
	 * If true, pins the position of the anchored object within the text frame top and bottom.
	 */
	pinPosition: boolean | NothingEnum

	/**
	 * The point in the referenced object relative to which to position the anchored object. Notes: Valid only when anchored position is custom.
	 */
	positionReferencePoint: AnchorPoint | NothingEnum

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Preserve Appearance from Layout.
	 */
	preserveAppearanceFromLayout: PreserveAppearanceFromLayoutEnum | NothingEnum

	/**
	 * The scaling applied to the arrowhead at the end of the path. (Range: 1 to 1000).
	 */
	rightArrowHeadScale: number | NothingEnum

	/**
	 * The amount in measurement units to crop the right edge of a graphic.
	 */
	rightCrop: number | NothingEnum

	/**
	 * The arrowhead applied to the end of the path.
	 */
	rightLineEnd: ArrowHead | NothingEnum

	/**
	 * If true, the position of the anchored object is relative to the binding spine of the page or spread.
	 */
	spineRelative: boolean | NothingEnum

	/**
	 * The amount to offset the baseline grid.
	 */
	startingOffsetForBaselineFrameGrid: number | NothingEnum

	/**
	 * The direction of the story.
	 */
	storyDirection: StoryDirectionOptions | NothingEnum

	/**
	 * The orientation of the text in the story.
	 */
	storyOrientation: StoryHorizontalOrVertical | NothingEnum

	/**
	 * The stroke alignment applied to the ChangeObjectPreference.
	 */
	strokeAlignment: StrokeAlignment | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the ChangeObjectPreference.
	 */
	strokeColor: Swatch | NothingEnum | string

	/**
	 * The corner adjustment applied to the ChangeObjectPreference.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment | NothingEnum

	/**
	 * The dash and gap measurements that define the pattern of a custom dashed line. Define up to six values (in points) in the format [dash1, gap1, dash2, gap2, dash3, gap3].
	 */
	strokeDashAndGap: number[] | NothingEnum

	/**
	 * The percent of tint to use in object's stroke color. (To specify a tint percent, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum

	/**
	 * Transparency settings for the stroke.
	 */
	strokeTransparencySettings: FindChangeStrokeTransparencySetting | NothingEnum

	/**
	 * The name of the stroke style to apply.
	 */
	strokeType: StrokeStyle | NothingEnum | string

	/**
	 * The weight (in points) to apply to the ChangeObjectPreference's stroke.
	 */
	strokeWeight: number | NothingEnum

	/**
	 * The number of columns in the text frame. Note: Depending on the value of use fixed column width, the number of columns can change automatically when the text frame size changes.
	 */
	textColumnCount: number | NothingEnum

	/**
	 * The column width of the columns in the text frame.
	 */
	textColumnFixedWidth: number | NothingEnum

	/**
	 * The space between columns in the text frame.
	 */
	textColumnGutter: number | NothingEnum

	/**
	 * The text wrap mode. .
	 */
	textWrapMode: TextWrapModes | NothingEnum

	/**
	 * The minimum space between text and the edges of the wrapped object. Specify four values in the format [top, left, bottom, right]. . Can return: Ordered array containing top:Unit, left:Unit, bottom:Unit, right:Unit or NothingEnum enumerator.
	 */
	textWrapOffset: any

	/**
	 * Text wrap side options.
	 */
	textWrapSide: TextWrapSideOptions | NothingEnum

	/**
	 * The amount in measurement units to crop the top edge of a graphic.
	 */
	topCrop: number | NothingEnum

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	topLeftCornerOption: CornerOptions | NothingEnum

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.
	 */
	topLeftCornerRadius: number | NothingEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes.
	 */
	topRightCornerOption: CornerOptions | NothingEnum

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes.
	 */
	topRightCornerRadius: number | NothingEnum

	/**
	 * Transparency settings.
	 */
	transparencySettings: FindChangeTransparencySetting | NothingEnum

	/**
	 * If true, uses a custom baseline frame grid.
	 */
	useCustomBaselineFrameGrid: boolean | NothingEnum

	/**
	 * If true, maintains column width when the text frame is resized. If false, causes columns to resize when the text frame is resized. Note: When true, resizing the frame can change the number of columns in the frame.
	 */
	useFixedColumnWidth: boolean | NothingEnum

	/**
	 * If true, image page break settings will be used in objects.
	 */
	useImagePageBreak: boolean | NothingEnum

	/**
	 * If true, minimum height value is used during the auto-sizing of text frame. .
	 */
	useMinimumHeightForAutoSizing: boolean | NothingEnum

	/**
	 * If true, minimum width value is used during the auto-sizing of text frame. .
	 */
	useMinimumWidthForAutoSizing: boolean | NothingEnum

	/**
	 * If true, line-breaks are not introduced after auto sizing. .
	 */
	useNoLineBreaksForAutoSizing: boolean | NothingEnum

	/**
	 * If true, the text wrap path has been explicitly modified by the user.
	 */
	userModifiedWrap: boolean | NothingEnum

	/**
	 * The vertical alignment of the text content. .
	 */
	verticalJustification: VerticalJustification | NothingEnum

	/**
	 * The vertical reference point on the page. Valid when anchored position is custom.
	 */
	verticalReferencePoint: VerticallyRelativeTo | NothingEnum

	/**
	 * The maximum amount of vertical space between two paragraphs. Note: Valid only when vertical justification is justified; the specified amount is applied in addition to the space before or space after values defined for the paragraph.
	 */
	verticalThreshold: number | NothingEnum

	/**
	 * Provides the actual text for the object
	 */
	actualText(): string

	/**
	 * Provides the alternate text for the object
	 */
	altText(): string

}

/**
 * Change transliterate preferences.
 */
declare class ChangeTransliteratePreference extends Preference {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean | NothingEnum

	/**
	 * The character style to search for or change to.
	 */
	appliedCharacterStyle: string | NothingEnum | CharacterStyle

	/**
	 * The conditions to search for or change to. Specify the "nothing" enum for "Any" or an empty list for "[Unconditional]".
	 */
	appliedConditions: string[] | NothingEnum | Condition[]

	/**
	 * The font applied to the ChangeTransliteratePreference, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum

	/**
	 * The language to search for or change to.
	 */
	appliedLanguage: string | NothingEnum | Language | LanguageWithVendors

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string | NothingEnum

	/**
	 * The paragraph style to search for or change to.
	 */
	appliedParagraphStyle: string | NothingEnum | ParagraphStyle

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number | NothingEnum

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number | NothingEnum

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle | NothingEnum

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet | NothingEnum

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment | NothingEnum

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType | NothingEnum

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string | NothingEnum

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean | NothingEnum

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum

	/**
	 * The character type to which to change the found character type.
	 */
	changeCharacterType: FindChangeTransliterateCharacterTypes | NothingEnum

	/**
	 * The change conditions mode, change either replaces applied conditions or adds to applied conditions.
	 */
	changeConditionsMode: ChangeConditionsModes | NothingEnum

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string | NothingEnum

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number | NothingEnum

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number | NothingEnum

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number | NothingEnum

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a fill color, to search for or change to.
	 */
	fillColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the fill color of the ChangeTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | NothingEnum

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment | NothingEnum

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number | NothingEnum

	/**
	 * The horizontal scaling applied to the ChangeTransliteratePreference.
	 */
	horizontalScale: number | NothingEnum

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean | NothingEnum

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean | NothingEnum

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean | NothingEnum

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum

	/**
	 * The paragraph alignment.
	 */
	justification: Justification | NothingEnum

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number | NothingEnum

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number | NothingEnum

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean | NothingEnum

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean | NothingEnum

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number | NothingEnum

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean | NothingEnum

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em. .
	 */
	kerningValue: number | NothingEnum

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes | NothingEnum

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string | NothingEnum

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType | NothingEnum

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | NothingEnum

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel | NothingEnum

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | NothingEnum

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: string | NothingEnum | XMLTag

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults | NothingEnum

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment | NothingEnum

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean | NothingEnum

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string | NothingEnum

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean | NothingEnum

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string | NothingEnum

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string | NothingEnum

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number | NothingEnum

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number | NothingEnum

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions | NothingEnum

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean | NothingEnum

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions | NothingEnum

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean | NothingEnum

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | NothingEnum

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean | NothingEnum

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing | NothingEnum

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification | NothingEnum

	/**
	 * The skew angle of the ChangeTransliteratePreference.
	 */
	skew: number | NothingEnum

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | NothingEnum

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | NothingEnum

	/**
	 * The minimum space after a span or a split column.
	 */
	spanColumnMinSpaceAfter: number | NothingEnum

	/**
	 * The minimum space before a span or a split column.
	 */
	spanColumnMinSpaceBefore: number | NothingEnum

	/**
	 * Whether a paragraph should be a single column, span columns or split columns.
	 */
	spanColumnType: SpanColumnTypeOptions | NothingEnum

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions | NothingEnum

	/**
	 * The inside gutter if the paragraph splits columns.
	 */
	splitColumnInsideGutter: number | NothingEnum

	/**
	 * The outside gutter if the paragraph splits columns.
	 */
	splitColumnOutsideGutter: number | NothingEnum

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink), applied as a stroke color, to search for or change to.
	 */
	strokeColor: string | NothingEnum | Swatch

	/**
	 * The tint (as a percentage) of the stroke color of the ChangeTransliteratePreference. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean | NothingEnum

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum

	/**
	 * The vertical scaling applied to the ChangeTransliteratePreference.
	 */
	verticalScale: number | NothingEnum

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum

}

/**
 * Linking preferences.
 */
declare class LinkingPreference extends Preference {
	/**
	 * If true, link states will be checked at document open time
	 */
	checkLinksAtOpen: boolean

	/**
	 * If true, missing links will be searched for at document open time
	 */
	findMissingLinksAtOpen: boolean

	/**
	 * Experimental: The preference for enabling auto tagging of items created through http based links.
	 */
	httpLinksAutoTagAssetsPreference: boolean

	/**
	 * Experimental: The rendition type for http link.
	 */
	httpLinksRenditionType: LinkResourceRenditionType

}

/**
 * Export options for InCopy INCX document format.
 */
declare class InCopyExportOption extends Preference {
	/**
	 * If true, export all resources (styles etc), otherwise export resources used by the story.
	 */
	includeAllResources: boolean

	/**
	 * If true, include graphic proxy data.
	 */
	includeGraphicProxies: boolean

}

/**
 * A preset that contains all of the print settings.
 */
declare class PrinterPreset {
	/**
	 * If true, prints all printer marks. If false, prints specified printer marks.
	 */
	allPrinterMarks: boolean

	/**
	 * If true, uses bitmap printing.
	 */
	bitmapPrinting: boolean

	/**
	 * The resolution for bitmap printing. (Range: 72 to 1200) Note: Valid when bitmap printing is true.
	 */
	bitmapResolution: number

	/**
	 * The angle override for black ink. (Range: 0 to 360)
	 */
	blackAngle: number

	/**
	 * The frequency override for black ink. (Range: 1 to 500)
	 */
	blackFrequency: number

	/**
	 * The height of the bleed area at the bottom of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedBottom: number | string

	/**
	 * If true, forces all bleed area settings to be the same, using the most recent bleed measurement setting. If false, allows bleed top, bleed bottom, bleed inside, and bleed outside to have different measurements.
	 */
	bleedChain: boolean

	/**
	 * The width of the bleed area at the inside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedInside: number | string

	/**
	 * If true, print bleed marks.
	 */
	bleedMarks: boolean

	/**
	 * The width of the bleed area at the outside of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedOutside: number | string

	/**
	 * The height of the bleed area at the top of the page. Note: Valid only when use document bleed to print is true.
	 */
	bleedTop: number | string

	/**
	 * If true, collate printed copies.
	 */
	collating: boolean

	/**
	 * If true, add small squares of color representing the CMYK inks and tints of gray in 10% increments.
	 */
	colorBars: boolean

	/**
	 * The color output mode for composites. Note: Not valid when a device-independent PPD is specified.
	 */
	colorOutput: ColorOutputModes

	/**
	 * The screen angle to use when printing composites. (Range: 0 to 360) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeAngle: number

	/**
	 * The screen frequency to use when printing composites. (Range: 1 to 500) Note: Valid only for PostScript or PDF files that use custom screening.
	 */
	compositeFrequency: number

	/**
	 * The number of copies to print. Note: Not valid when printer is PostScript File.
	 */
	copies: number

	/**
	 * The color-rendering dictionary (CRD), specified as a CRD name or an enumeration value. Note: Valid only when use color management is true.
	 */
	crd: ColorRenderingDictionary | string

	/**
	 * Prints crop marks that define where the page should be trimmed.
	 */
	cropMarks: boolean

	/**
	 * The angle override for cyan ink. (Range: 0 to 360)
	 */
	cyanAngle: number

	/**
	 * The frequency override for cyan ink. (Range: 1 to 500)
	 */
	cyanFrequency: number

	/**
	 * The format in which to send image data to the printer.
	 */
	dataFormat: DataFormat

	/**
	 * If true, downloads all fonts listed in the selected PPD. Valid only when font downloading is complete or subset.
	 */
	downloadPPDFonts: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The name of the transparency flattener preset.
	 */
	flattenerPresetName: string

	/**
	 * The direction in which to flip the printed image.
	 */
	flip: Flip

	/**
	 * Controls how fonts are downloaded to the printer.
	 */
	fontDownloading: FontDownloading

	/**
	 * If true, ignores flattener spread overrides.
	 */
	ignoreSpreadOverrides: boolean

	/**
	 * If true, includes the slug area in the printed document.
	 */
	includeSlugToPrint: boolean

	/**
	 * The index of the PrinterPreset within its containing object.
	 */
	index: number

	/**
	 * The rendering intent. Note: Valid only when use color management is true.
	 */
	intent: RenderingIntent

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The angle override for magenta ink. (Range: 0 to 360)
	 */
	magentaAngle: number

	/**
	 * The frequency override for magenta ink. (Range: 1 to 500)
	 */
	magentaFrequency: number

	/**
	 * The stroke weight (in points) for printer marks.
	 */
	markLineWeight: MarkLineWeight

	/**
	 * The distance to offset the page marks from the edge of the page.
	 */
	markOffset: number | string

	/**
	 * The type of printer marks, either an enum value or the name of a custom marks file.
	 */
	markType: MarkTypes | string

	/**
	 * The name of the PrinterPreset.
	 */
	name: string

	/**
	 * If true, prints the document as a negative.
	 */
	negative: boolean

	/**
	 * If true, replaces bitmap images with OPI links.
	 */
	omitBitmaps: boolean

	/**
	 * If true, replaces EPS images with OPI links.
	 */
	omitEPS: boolean

	/**
	 * If true, replaces PDF images with OPI links.
	 */
	omitPDF: boolean

	/**
	 * If true, prints graphics that are either OPI comments stored in imported EPS files or linked using OPI comments. For information on linking files using OPI comments, see omit EPS, omit PDF, or omit bitmaps.
	 */
	opiImageReplacement: boolean

	/**
	 * If true, prints the filename, page number, current date and time, and color separation name.
	 */
	pageInformationMarks: boolean

	/**
	 * The position of the page on the printing medium. Note: Valid only when tile is false.
	 */
	pagePosition: PagePositions

	/**
	 * The space between document pages on the printing medium.
	 */
	paperGap: number | string

	/**
	 * The paper height. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperHeight: PaperSize | number

	/**
	 * The amount of space to offset the page from the left edge of the imageable area.
	 */
	paperOffset: number | string

	/**
	 * The paper size, specified as either a string or an enumeration. For information on paper size names, see paper size list.
	 */
	paperSize: PaperSizes | string

	/**
	 * A list of the available paper sizes.
	 */
	paperSizeList: string[]

	/**
	 * If true, uses transverse orientation.
	 */
	paperTransverse: boolean

	/**
	 * The paper width. Note: Valid only when paper size is custom or scale mode is scale width height.
	 */
	paperWidth: PaperSize | number

	/**
	 * The parent of the PrinterPreset (a Application).
	 */
	parent: Application

	/**
	 * The PostScript level of the printer.
	 */
	postscriptLevel: PostScriptLevels

	/**
	 * The PPD, specified as a PPD name or an enumeration.
	 */
	ppd: PPDValues | string

	/**
	 * Available PPDs.
	 */
	ppdList: string[]

	/**
	 * If true, prints the black ink. Note: Valid only when trapping is off.
	 */
	printBlack: boolean

	/**
	 * If true, prints blank pages. Note: Valid only when trapping is off.
	 */
	printBlankPages: boolean

	/**
	 * If true, prints the cyan ink. Note: Valid only when trapping is off.
	 */
	printCyan: boolean

	/**
	 * The PostScript file to print to. Note: Valid only when the current printer is defined as postscript file.
	 */
	printFile: File

	/**
	 * If true, prints visible guides and baseline grids. Note: Valid only when trapping is off.
	 */
	printGuidesGrids: boolean

	/**
	 * The layers to print.
	 */
	printLayers: PrintLayerOptions

	/**
	 * If true, prints the magenta ink. Note: Valid only when trapping is off.
	 */
	printMagenta: boolean

	/**
	 * If true, prints master pages.
	 */
	printMasterPages: boolean

	/**
	 * If true, prints non-printing objects. Note: Valid only when trapping is off.
	 */
	printNonprinting: boolean

	/**
	 * The orientation of the printed page.
	 */
	printPageOrientation: PrintPageOrientation

	/**
	 * If true, prints each spread with all spread pages on a single sheet. If false, prints spread pages as separate pages.
	 */
	printSpreads: boolean

	/**
	 * If true, prints the yellow ink. Note: Valid only when trapping is off.
	 */
	printYellow: boolean

	/**
	 * The current printer.
	 */
	printer: Printer | string

	/**
	 * Available printers.
	 */
	printerList: string[]

	/**
	 * The color profile.
	 */
	profile: Profile | string

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * If true, prints small targets outside the page area for aligning color separations.
	 */
	registrationMarks: boolean

	/**
	 * If true, prints pages in reverse order.
	 */
	reverseOrder: boolean

	/**
	 * The amount (as a percentage) that the page height is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleHeight: number

	/**
	 * The policy for scaling the page. Note: Valid only when printing from Layout view.
	 */
	scaleMode: ScaleModes

	/**
	 * If true, constrains the proportions of the scaling; uses the most recent value for either scale width or scale height to define both values. Note: Valid only when scale mode is scale width height.
	 */
	scaleProportional: boolean

	/**
	 * The amount (as a percentage)that the page width is scaled during printing. (Range: 0 to 1000) Note: Valid only when scale mode is scale width height.
	 */
	scaleWidth: number

	/**
	 * The ink screening settings for composite gray output in PostScript or PDF format. .
	 */
	screening: Screeening | string

	/**
	 * Lists the ink screenings available in the PPD. Note: Valid only when color output is separations or in rip separations.
	 */
	screeningList: string[]

	/**
	 * The image data sent to the printer or file.
	 */
	sendImageData: ImageDataTypes

	/**
	 * The sequence of pages to print.
	 */
	sequence: Sequences

	/**
	 * If true, simulates the effects of overprinting spot inks with different neutral density values by converting spot colors to process colors for printing. Note: Not valid when the color output mode is defined to leave color profiles unchanged.
	 */
	simulateOverprint: boolean

	/**
	 * The source of the color management system. Note: Valid only when use color management is true.
	 */
	sourceSpace: SourceSpaces

	/**
	 * If true, prints all text as black unless text has the color None or Paper or a color value that equals white. If false, prints colored text, such as blue hyperlinks, in halftone patterns. Note: Valid only when trapping is off.
	 */
	textAsBlack: boolean

	/**
	 * If true, prints thumbnails. Note: Valid only when trapping is off and tile is false.
	 */
	thumbnails: boolean

	/**
	 * The number of thumbnails per page.
	 */
	thumbnailsPerPage: ThumbsPerPage

	/**
	 * If true, tiles pages.
	 */
	tile: boolean

	/**
	 * The amount of tiling overlap. Note: Valid only when tiling is true and tiling type is not manual.
	 */
	tilingOverlap: number

	/**
	 * The tiling type. Note: Valid only when tiling is true.
	 */
	tilingType: TilingTypes

	/**
	 * The type of trapping.
	 */
	trapping: Trapping

	/**
	 * If true, uses the bleed area set for the document.
	 */
	useDocumentBleedToPrint: boolean

	/**
	 * The angle override for yellow ink. (Range: 0 to 360)
	 */
	yellowAngle: number

	/**
	 * The frequency override for yellow ink. (Range: 1 to 500)
	 */
	yellowFrequency: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the PrinterPreset.
	 */
	duplicate(): PrinterPreset

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PrinterPreset[]

	/**
	 * Deletes the PrinterPreset.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the PrinterPreset.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of printer presets.
 */
declare class PrinterPresets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PrinterPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: PrinterPreset

	/**
	 * Creates a new PrinterPreset.
	 * @param withProperties Initial values for properties of the new PrinterPreset
	 */
	add(withProperties: object): PrinterPreset

	/**
	 * Returns any PrinterPreset in the collection.
	 */
	anyItem(): PrinterPreset

	/**
	 * Displays the number of elements in the PrinterPreset.
	 */
	count(): number

	/**
	 * Returns every PrinterPreset in the collection.
	 */
	everyItem(): PrinterPreset[]

	/**
	 * Returns the first PrinterPreset in the collection.
	 */
	firstItem(): PrinterPreset

	/**
	 * Returns the PrinterPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PrinterPreset

	/**
	 * Returns the PrinterPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PrinterPreset

	/**
	 * Returns the PrinterPresets within the specified range.
	 * @param from The PrinterPreset, index, or name at the beginning of the range.
	 * @param to The PrinterPreset, index, or name at the end of the range.
	 */
	itemByRange(from: PrinterPreset | number | string, to: PrinterPreset | number | string): PrinterPreset[]

	/**
	 * Returns the last PrinterPreset in the collection.
	 */
	lastItem(): PrinterPreset

	/**
	 * Returns the middle PrinterPreset in the collection.
	 */
	middleItem(): PrinterPreset

	/**
	 * Returns the PrinterPreset whose index follows the specified PrinterPreset in the collection.
	 * @param obj The PrinterPreset whose index comes before the desired PrinterPreset.
	 */
	nextItem(obj: PrinterPreset): PrinterPreset

	/**
	 * Returns the PrinterPreset with the index previous to the specified index.
	 * @param obj The index of the PrinterPreset that follows the desired PrinterPreset.
	 */
	previousItem(obj: PrinterPreset): PrinterPreset

	/**
	 * Generates a string which, if executed, will return the PrinterPreset.
	 */
	toSource(): string

}

/**
 * XML import preferences.
 */
declare class XMLImportPreference extends Preference {
	/**
	 * If true, transforms the XML using an XSLT file.
	 */
	allowTransform: boolean

	/**
	 * If true, creates a link to the imported XML file. If false, embeds the file.
	 */
	createLinkToXML: boolean

	/**
	 * If true, ignores elements that do not match the existing structure. Note: Valid only when import style is merge.
	 */
	ignoreUnmatchedIncoming: boolean

	/**
	 * If true, leaves existing content in place if the matching XML content contains only whitespace characters such as a carriage return or a tab character. Note: Valid only when import style is merge.
	 */
	ignoreWhitespace: boolean

	/**
	 * If true, imports CALS tables as InDesign tables.
	 */
	importCALSTables: boolean

	/**
	 * The style of incorporating imported XML content into the document.
	 */
	importStyle: XMLImportStyles

	/**
	 * If true, imports text into tables if tags match placeholder tables and their cells. Note: Valid only when import style is merge.
	 */
	importTextIntoTables: boolean

	/**
	 * If true, imports into the selected XML element. If false, imports at the root element.
	 */
	importToSelected: boolean

	/**
	 * If true, deletes existing elements or placeholders in the document that do not have matches in the XML file. Note: Valid only when import style is merge.
	 */
	removeUnmatchedExisting: boolean

	/**
	 * If true, repeating text elements inherit the formatting applied to placeholder text. Note: Valid only when import style is merge.
	 */
	repeatTextElements: boolean

	/**
	 * The name of the XSLT file. Note: Valid when allow transform is true.
	 */
	transformFilename: File | XMLTransformFile

	/**
	 * Stylesheet parameters as a list of name/value pairs in the format [[name, value], [name, value], ...]. Can return: Ordered array containing name:String, value:String.
	 */
	transformParameters: any[]

}

/**
 * XML export preferences.
 */
declare class XMLExportPreference extends Preference {
	/**
	 * If true, transforms the XML using an XSLT file.
	 */
	allowTransform: boolean

	/**
	 * If true, replaces special characters with character references.
	 */
	characterReferences: boolean

	/**
	 * If true, copies formatted images to the images subfolder.
	 */
	copyFormattedImages: boolean

	/**
	 * If true, copies optimized images to the images subfolder.
	 */
	copyOptimizedImages: boolean

	/**
	 * If true, copies original images to the images subfolder.
	 */
	copyOriginalImages: boolean

	/**
	 * If true, excludes the DTD from the exported XML content.
	 */
	excludeDtd: boolean

	/**
	 * If true, exports XML content from the selected XML element. If false, exports the entire document.
	 */
	exportFromSelected: boolean

	/**
	 * The export format for untagged tables in tagged stories.
	 */
	exportUntaggedTablesFormat: XMLExportUntaggedTablesFormat

	/**
	 * The file encoding type for exporting XML content.
	 */
	fileEncoding: XMLFileEncoding

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality

	/**
	 * The preferred browser for viewing XML.
	 */
	preferredBrowser: File | NothingEnum

	/**
	 * If true, includes Ruby text in the exported XML content.
	 */
	ruby: boolean

	/**
	 * The name of the XSLT file. Note: Valid when allow transform is true.
	 */
	transformFilename: File | XMLTransformFile

	/**
	 * If true, displays exported XML content in a specified viewer.
	 */
	viewAfterExport: boolean

}

/**
 * XML preferences.
 */
declare class XMLPreference extends Preference {
	/**
	 * The color of the default cell tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Valid only when default cell tag name value creates a new tag. Does not update the color of an existing tag. .
	 */
	defaultCellTagColor: [number, number, number] | UIColors

	/**
	 * The name of the default tag to use for new table cell elements. Note: Either specifies an existing tag or creates a new tag.
	 */
	defaultCellTagName: string

	/**
	 * The color to give a new image tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Note: Used only when the tag needs to be created.
	 */
	defaultImageTagColor: [number, number, number] | UIColors

	/**
	 * The default name for new image elements created automatically.
	 */
	defaultImageTagName: string

	/**
	 * The color of the default story tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Notes: Valid only when default story tag name value creates a new tag. Does not update the color of an existing tag.
	 */
	defaultStoryTagColor: [number, number, number] | UIColors

	/**
	 * The name of the default tag to use for new story elements. Note: Either specifies an existing tag or creates a new tag.
	 */
	defaultStoryTagName: string

	/**
	 * The color of the default table tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color. Notes: Valid only when default table tag name value creates a new tag. Does not update the color of an existing tag. .
	 */
	defaultTableTagColor: [number, number, number] | UIColors

	/**
	 * The name of the default tag to use for new table elements. Note: Either specifies an existing tag or creates a new tag.
	 */
	defaultTableTagName: string

	/**
	 * The preference for deleting the element when deleting the associated content like a page item or a text fragment.
	 */
	deleteElementOnContentDeletion: boolean

}

/**
 * Export for web preferences.
 */
declare class ExportForWebPreference extends Preference {
	/**
	 * If true, copies formatted images to the images subfolder.
	 */
	copyFormattedImages: boolean

	/**
	 * If true, copies optimized images to the images subfolder.
	 */
	copyOptimizedImages: boolean

	/**
	 * If true, copies original images to the images subfolder.
	 */
	copyOriginalImages: boolean

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality

}

/**
 * Anchored object default settings.
 */
declare class AnchoredObjectDefault extends Preference {
	/**
	 * The initial frame type of a new anchored object.
	 */
	anchorContent: ContentType

	/**
	 * The initial object style of a new anchored object.
	 */
	anchoredObjectStyle: ObjectStyle

	/**
	 * The initial paragraph style of a new anchored object. Note: Valid when anchor content is text.
	 */
	anchoredParagraphStyle: ParagraphStyle

	/**
	 * The initial height of a new anchored object.
	 */
	initialAnchorHeight: number | string

	/**
	 * The initial width of a new anchored object.
	 */
	initialAnchorWidth: number | string

}

/**
 * The settings for an anchored object.
 */
declare class AnchoredObjectSetting extends Preference {
	/**
	 * The point in the anchored object to position.
	 */
	anchorPoint: AnchorPoint

	/**
	 * The space above an above-line anchored object.
	 */
	anchorSpaceAbove: number | string

	/**
	 * The horizontal (x) offset of the anchored object.
	 */
	anchorXoffset: number | string

	/**
	 * The vertical (y) offset of the anchored object. Corresponds to the space after property for above line positioning.
	 */
	anchorYoffset: number | string

	/**
	 * The position of the anchored object relative to the anchor.
	 */
	anchoredPosition: AnchorPosition

	/**
	 * When anchored position is above line, the position of the anchored object is relative to the text area. When anchored position is custom, the horizontal alignment of the anchored object is set by the horizontal reference point. Note: Not valid when anchored position is inline.
	 */
	horizontalAlignment: HorizontalAlignment

	/**
	 * The horizontal reference point on the page. Valid only when anchored position is custom.
	 */
	horizontalReferencePoint: AnchoredRelativeTo

	/**
	 * If true, prevents manual positioning of the anchored object.
	 */
	lockPosition: boolean

	/**
	 * If true, pins the position of the anchored object within the text frame top and bottom.
	 */
	pinPosition: boolean

	/**
	 * If true, the position of the anchored object is relative to the binding spine of the page or spread.
	 */
	spineRelative: boolean

	/**
	 * The vertical alignment of the anchored object reference point with the vertical reference point on the page. Notes: Valid only when anchored position is custom.
	 */
	verticalAlignment: VerticalAlignment

	/**
	 * The vertical reference point on the page. Valid when anchored position is custom.
	 */
	verticalReferencePoint: VerticallyRelativeTo

	/**
	 * Inserts the anchored object into specified story.
	 * @param storyOffset The location within the story, specified as an insertion point.
	 * @param anchoredPosition The position of the anchored object relative to the anchor.
	 */
	insertAnchoredObject(storyOffset: InsertionPoint, anchoredPosition: AnchorPosition): void

	/**
	 * Releases the anchored object from its associated text.
	 */
	releaseAnchoredObject(): void

}

/**
 * Baseline frame grid options.
 */
declare class BaselineFrameGridOption extends Preference {
	/**
	 * The grid line color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	baselineFrameGridColor: [number, number, number] | UIColors

	/**
	 * The distance between grid lines.
	 */
	baselineFrameGridIncrement: number | string

	/**
	 * The location (top of page, top margin, top of frame, or frame inset) on which to base the custom baseline grid.
	 */
	baselineFrameGridRelativeOption: BaselineFrameGridRelativeOption

	/**
	 * The amount to offset the baseline grid.
	 */
	startingOffsetForBaselineFrameGrid: number | string

	/**
	 * If true, uses a custom baseline frame grid.
	 */
	useCustomBaselineFrameGrid: boolean

}

/**
 * Options for specifying default footnote formatting.
 */
declare class FootnoteOption extends Preference {
	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the rule above continued footnote text. Note: Valid when continuing rule type is not solid.
	 */
	continuingRuleGapColor: Swatch | string

	/**
	 * If true, overprints the gap color of the rule above continued footnote text. Note: Valid when continuing rule type is not solid.
	 */
	continuingRuleGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the rule above continued footnote text. (Range: 0 to 100) Note: Valid when continuing rule type is not solid.
	 */
	continuingRuleGapTint: number

	/**
	 * The amount to left indent the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleLeftIndent: number | string

	/**
	 * The stroke weight of the rule above continued footnote text. (Range: 0 to 1000) Note: Valid when continuing rule on is true.
	 */
	continuingRuleLineWeight: number | string

	/**
	 * The vertical offset of the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleOffset: number | string

	/**
	 * If true, draws a rule above footnote text that continues from a previous column. Note: Valid when no splitting is false or undefined.
	 */
	continuingRuleOn: boolean

	/**
	 * If true, overprints the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleOverprint: boolean

	/**
	 * The tint (as a percentage) of the rule above continued footnote text. (Range: 0 to 100) Note: Valid when continuing rule type is not solid.
	 */
	continuingRuleTint: number

	/**
	 * The stroke type of the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleType: StrokeStyle | string

	/**
	 * The length of the rule above continued footnote text. Note: Valid when continuing rule on is true.
	 */
	continuingRuleWidth: number | string

	/**
	 * If true, document will have straddling footnotes. If false, document will not have straddling footnotes.
	 */
	enableStraddling: boolean

	/**
	 * If true, footnotes at the end of the story are placed just below the text. If false, footnotes at the end of the story are placed at the bottom of the column.
	 */
	eosPlacement: boolean

	/**
	 * The distance between the top of the footnote container and the footnote text.
	 */
	footnoteFirstBaselineOffset: FootnoteFirstBaseline

	/**
	 * The character style to apply to footnote reference numbers in the main text.
	 */
	footnoteMarkerStyle: CharacterStyle

	/**
	 * The minimum distance between the baseline of the text and the top of the footnote container.
	 */
	footnoteMinimumFirstBaselineOffset: number | string

	/**
	 * The footnote numbering style.
	 */
	footnoteNumberingStyle: FootnoteNumberingStyle | string

	/**
	 * The paragraph style to apply to footnotes. Note: The space before and after the paragraph defined in the paragraph style is ignored for footnotes. To define space above and between footnotes, see spacer and space between.
	 */
	footnoteTextStyle: ParagraphStyle

	/**
	 * The position of footnote reference numbers in the main text.
	 */
	markerPositioning: FootnoteMarkerPositioning | string

	/**
	 * If true, footnotes cannot split across columns. If false, footnotes flow into succeeding columns when the footnote text causes the footnote area to expand upward to reach the footnote reference number in the main text.
	 */
	noSplitting: boolean

	/**
	 * The prefix text of the footnote. (Limit: 0 to 100 characters)
	 */
	prefix: string

	/**
	 * The point at which to restart footnote numbering.
	 */
	restartNumbering: FootnoteRestarting | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the rule above the first footnote in the column. Note: Valid when rule type is not solid.
	 */
	ruleGapColor: Swatch | string

	/**
	 * If true, overprints the gap color of the rule above the first footnote in the column. Note: Valid when rule type is not solid.
	 */
	ruleGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the rule above the first footnote in the column. (Range: 0 to 100) Note: Valid when rule type is not solid.
	 */
	ruleGapTint: number

	/**
	 * The amount to left indent the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleLeftIndent: number | string

	/**
	 * The stroke weight of the rule above the first footnote in the column. (Range: 0 to 1000) Note: Valid when rule on is true.
	 */
	ruleLineWeight: number | string

	/**
	 * The vertical offset of the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleOffset: number | string

	/**
	 * If true, draws a rule between the text and the first footnote in the column.
	 */
	ruleOn: boolean

	/**
	 * If true, overprints the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleOverprint: boolean

	/**
	 * The tint (as a percentage) of the rule above the first footnote in the column. (Range: 0 to 100) Note: Valid when rule on is true.
	 */
	ruleTint: number

	/**
	 * The stroke type of the rule above the first footnote in a column. Note: Valid when rule on is true.
	 */
	ruleType: StrokeStyle | string

	/**
	 * The length of the rule above the first footnote in the column. Note: Valid when rule on is true.
	 */
	ruleWidth: number | string

	/**
	 * The text to insert between the footnote marker number and the footnote text. (Range: 0 to 100 characters)
	 */
	separatorText: string

	/**
	 * The position of the footnote prefix and/or suffix.
	 */
	showPrefixSuffix: FootnotePrefixSuffix | string

	/**
	 * The amount of vertical space between footnotes. Note: The space before and space after defined for the paragraph style applied to the footnote is ignored.
	 */
	spaceBetween: number | string

	/**
	 * The minimum amount of vertical space between the bottom of the text column and the first footnote. Note: The space before amount defined in the paragraph style applied to the footnote is ignored for the first footnote.
	 */
	spacer: number | string

	/**
	 * The number at which to start footnote numbering.
	 */
	startAt: number

	/**
	 * The suffix text of the footnote. (Limit: 0 to 100 characters)
	 */
	suffix: string

}

/**
 * The preferences for a page number variable.
 */
declare class PageNumberVariablePreference extends Preference {
	/**
	 * The format for the variable.
	 */
	format: VariableNumberingStyles

	/**
	 * The scope or range of the pages to include.
	 */
	scope: VariableScopes

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string

}

/**
 * The preferences for a chapter number variable.
 */
declare class ChapterNumberVariablePreference extends Preference {
	/**
	 * The format for the variable.
	 */
	format: VariableNumberingStyles

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string

}

/**
 * The preferences for a date variable.
 */
declare class DateVariablePreference extends Preference {
	/**
	 * The date format.
	 */
	format: string

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string

}

/**
 * The preferences for a file name variable.
 */
declare class FileNameVariablePreference extends Preference {
	/**
	 * If true, includes the file extension.
	 */
	includeExtension: boolean

	/**
	 * If true, includes the entire path of the file.
	 */
	includePath: boolean

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string

}

/**
 * The preferences for a running header/footer (match character style) variable.
 */
declare class MatchCharacterStylePreference extends Preference {
	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string

	/**
	 * The case of the matched text.
	 */
	changeCase: ChangeCaseOptions

	/**
	 * If true, deletes end punctuation from the matched text.
	 */
	deleteEndPunctuation: boolean

	/**
	 * The starting point and direction in which the search will be conducted.
	 */
	searchStrategy: SearchStrategies

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string

}

/**
 * The preferences for a running header/footer (match paragraph style) variable.
 */
declare class MatchParagraphStylePreference extends Preference {
	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string

	/**
	 * The case of the matched text.
	 */
	changeCase: ChangeCaseOptions

	/**
	 * If true, deletes end punctuation from the matched text.
	 */
	deleteEndPunctuation: boolean

	/**
	 * The starting point and direction in which the search will be conducted.
	 */
	searchStrategy: SearchStrategies

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string

}

/**
 * The preferences for a custom text variable.
 */
declare class CustomTextVariablePreference extends Preference {
	/**
	 * The contents of the text.
	 */
	contents: string | SpecialCharacters

}

/**
 * The preferences for a caption metadata variable.
 */
declare class CaptionMetadataVariablePreference extends Preference {
	/**
	 * Name of the metadata provider.
	 */
	metadataProviderName: string

	/**
	 * The text that follows the value of the variable. (Limit: 128 characters)
	 */
	textAfter: string

	/**
	 * The text that precedes the value of the variable. (Limit: 128 characters)
	 */
	textBefore: string

}

/**
 * Grid defaults. Note: Applies to named, layout, and frame (story) grids.
 */
declare class GridDataInformation extends Preference {
	/**
	 * The font applied to the GridDataInformation, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string

	/**
	 * The amount of white space between characters.
	 */
	characterAki: number

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment

	/**
	 * The character count location. Note: Valid when show character count is true.
	 */
	characterCountLocation: CharacterCountLocation

	/**
	 * The character size for the character count display.
	 */
	characterCountSize: number

	/**
	 * The name of the font style.
	 */
	fontStyle: string

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment

	/**
	 * The grid view setting.
	 */
	gridView: GridViewSettings

	/**
	 * The horizontal scaling applied to the GridDataInformation.
	 */
	horizontalScale: number

	/**
	 * The amount of white space between lines.
	 */
	lineAki: number

	/**
	 * The line justification.
	 */
	lineAlignment: LineAlignment

	/**
	 * The text size.
	 */
	pointSize: number | string

	/**
	 * The vertical scaling applied to the GridDataInformation.
	 */
	verticalScale: number

}

/**
 * Default properties specific to layout grids.
 */
declare class LayoutGridDataInformation extends Preference {
	/**
	 * The font applied to the LayoutGridDataInformation, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string

	/**
	 * The amount of white space between characters.
	 */
	characterAki: number

	/**
	 * The name of the font style.
	 */
	fontStyle: string

	/**
	 * The horizontal scaling applied to the LayoutGridDataInformation.
	 */
	horizontalScale: number

	/**
	 * The amount of white space between lines.
	 */
	lineAki: number

	/**
	 * The text size.
	 */
	pointSize: number | string

	/**
	 * The vertical scaling applied to the LayoutGridDataInformation.
	 */
	verticalScale: number

}

/**
 * Default properties specific to frame grids.
 */
declare class StoryGridDataInformation extends Preference {
	/**
	 * The font applied to the StoryGridDataInformation, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string

	/**
	 * The amount of white space between characters.
	 */
	characterAki: number

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment

	/**
	 * The character count location. Note: Valid when show character count is true.
	 */
	characterCountLocation: CharacterCountLocation

	/**
	 * The character size for the character count display.
	 */
	characterCountSize: number

	/**
	 * The name of the font style.
	 */
	fontStyle: string

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment

	/**
	 * The grid view setting.
	 */
	gridView: GridViewSettings

	/**
	 * The horizontal scaling applied to the StoryGridDataInformation.
	 */
	horizontalScale: number

	/**
	 * The amount of white space between lines.
	 */
	lineAki: number

	/**
	 * The line justification.
	 */
	lineAlignment: LineAlignment

	/**
	 * The text size.
	 */
	pointSize: number | string

	/**
	 * The vertical scaling applied to the StoryGridDataInformation.
	 */
	verticalScale: number

}

/**
 * Character grid preferences.
 */
declare class CjkGridPreference extends Preference {
	/**
	 * Applies the grid color to every nth cell, where n is the value of this property.
	 */
	colorEveryNthCell: number

	/**
	 * If true, uses ICF mode for grid cells. If false, uses virtual body mode.
	 */
	icfMode: boolean

	/**
	 * The layout grid color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	layoutGridColorIndex: [number, number, number] | UIColors

	/**
	 * The view magnification (as a percentage) less than which grids do not appear. (Range: 5 to 4000)
	 */
	minimumScale: number

	/**
	 * If true, displays the frame (story) grids.
	 */
	showAllFrameGrids: boolean

	/**
	 * If true, displays the layout grids.
	 */
	showAllLayoutGrids: boolean

	/**
	 * If true, displays the character count for the frame.
	 */
	showCharacterCount: boolean

	/**
	 * If true, applies the grid color from the the edge of the line. If false, applies the grid color from the corner of the frame.
	 */
	singleLineColorMode: boolean

	/**
	 * If true, objects snap to the layout grid.
	 */
	snapToLayoutGrid: boolean

	/**
	 * If true, cell shape is circular. If false, cell shape is rectangular.
	 */
	useCircularCells: boolean

}

/**
 * Grid printing and exporting preferences.
 */
declare class GridPrintingPreference extends Preference {
	/**
	 * If true, displays frame (story) grids in the printed or exported document.
	 */
	frameGridPrinting: boolean

	/**
	 * The stroke weight (in points) of the frame grid.
	 */
	frameGridStrokeWeight: number

	/**
	 * If true, displays layout grids in the printed or exported document.
	 */
	layoutGridPrinting: boolean

	/**
	 * The stroke weight (in points) of the layout grid.
	 */
	layoutGridStrokeWeight: number

	/**
	 * If true, displays page items other than text, frame grids, and layout grids in the printed or exported document. For information on printing and exporting text and grids, see text printing, frame grid printing, and layout grid printing.
	 */
	pageItemPrinting: boolean

	/**
	 * If true, displays text in the printed or exported document.
	 */
	textPrinting: boolean

}

/**
 * Galley preferences.
 */
declare class GalleyPreference extends Preference {
	/**
	 * The type of text anti-aliasing to use in story and galley views.
	 */
	antiAliasType: AntiAliasType

	/**
	 * The background color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as an InCopy UI color. .
	 */
	backgroundColor: [number, number, number] | InCopyUIColors

	/**
	 * If true, the cursor blinks.
	 */
	blinkCursor: boolean

	/**
	 * The cursor type for galley and story views.
	 */
	cursorType: CursorTypes

	/**
	 * Font family name to use for text display.
	 */
	displayFont: string

	/**
	 * Size to use for text display.
	 */
	displayFontSize: number | string

	/**
	 * Info column width.
	 */
	infoColumnWidth: number | string

	/**
	 * Amount of spacing between lines.
	 */
	lineSpacingValue: LineSpacingType

	/**
	 * If true, displays the depth ruler.
	 */
	showDepthRuler: boolean

	/**
	 * If true, display the Info column.
	 */
	showInfoColumn: boolean

	/**
	 * If true, show paragraph break marks.
	 */
	showParagraphBreakMarks: boolean

	/**
	 * If true, show paragraph style names.
	 */
	showParagraphStyleNames: boolean

	/**
	 * If true, galley text is anti-aliased.
	 */
	smoothText: boolean

	/**
	 * The text color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as an InCopy UI color.
	 */
	textColor: [number, number, number] | InCopyUIColors

}

/**
 * A preset that contains transparency flattener properties.
 */
declare class FlattenerPreset {
	/**
	 * If true, ensures that the boundaries between vector and rasterized artwork fall along object paths.
	 */
	clipComplexRegions: boolean

	/**
	 * If true, converts all strokes to outlines and ensures that stroke widths remain constant during flattening. Note: Can cause thin strokes to appear slightly thicker than their original width. Affects all strokes, not only strokes involved in the transparency.
	 */
	convertAllStrokesToOutlines: boolean

	/**
	 * If true, converts all text to outlines and discards all type glyph information on spreads with transparency; ensures that the width of text strokes remains constant during flattening. Note: Can cause small fonts to appear slightly thicker when viewed in Acrobat or printed on low-quality desktop printers, but does not affect type quality when printed on high-resolution printers or imagesetters.
	 */
	convertAllTextToOutlines: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The resolution for gradients rasterized as a result of flattening and for drop shadow and feathers when printed or exported. (Range: 0 to 1200) Note: Resolutions higher than 300 ppi increase file size and printing time but generally do not improve the image quality.
	 */
	gradientAndMeshResolution: number

	/**
	 * The unique ID of the FlattenerPreset.
	 */
	id: number

	/**
	 * The index of the FlattenerPreset within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The resolution for vector objects rasterized as a result of flattening. (Range: 1 to 9600) For information, see raster vector balance.
	 */
	lineArtAndTextResolution: number

	/**
	 * The name of the FlattenerPreset.
	 */
	name: string

	/**
	 * The parent of the FlattenerPreset (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The amount of vector artwork to rasterize during flattening, specified as an enumerator or as a percentage in the range 0 to 100.
	 */
	rasterVectorBalance: FlattenerLevel | number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the FlattenerPreset.
	 */
	duplicate(): FlattenerPreset

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): FlattenerPreset[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the FlattenerPreset.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the FlattenerPreset.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of transparency flattener presets.
 */
declare class FlattenerPresets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the FlattenerPreset with the specified index.
	 * @param index The index.
	 */
	[index: number]: FlattenerPreset

	/**
	 * Creates a new FlattenerPreset.
	 * @param withProperties Initial values for properties of the new FlattenerPreset
	 */
	add(withProperties: object): FlattenerPreset

	/**
	 * Returns any FlattenerPreset in the collection.
	 */
	anyItem(): FlattenerPreset

	/**
	 * Displays the number of elements in the FlattenerPreset.
	 */
	count(): number

	/**
	 * Returns every FlattenerPreset in the collection.
	 */
	everyItem(): FlattenerPreset[]

	/**
	 * Returns the first FlattenerPreset in the collection.
	 */
	firstItem(): FlattenerPreset

	/**
	 * Returns the FlattenerPreset with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): FlattenerPreset

	/**
	 * Returns the FlattenerPreset with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): FlattenerPreset

	/**
	 * Returns the FlattenerPreset with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): FlattenerPreset

	/**
	 * Returns the FlattenerPresets within the specified range.
	 * @param from The FlattenerPreset, index, or name at the beginning of the range.
	 * @param to The FlattenerPreset, index, or name at the end of the range.
	 */
	itemByRange(from: FlattenerPreset | number | string, to: FlattenerPreset | number | string): FlattenerPreset[]

	/**
	 * Returns the last FlattenerPreset in the collection.
	 */
	lastItem(): FlattenerPreset

	/**
	 * Returns the middle FlattenerPreset in the collection.
	 */
	middleItem(): FlattenerPreset

	/**
	 * Returns the FlattenerPreset whose index follows the specified FlattenerPreset in the collection.
	 * @param obj The FlattenerPreset whose index comes before the desired FlattenerPreset.
	 */
	nextItem(obj: FlattenerPreset): FlattenerPreset

	/**
	 * Returns the FlattenerPreset with the index previous to the specified index.
	 * @param obj The index of the FlattenerPreset that follows the desired FlattenerPreset.
	 */
	previousItem(obj: FlattenerPreset): FlattenerPreset

	/**
	 * Generates a string which, if executed, will return the FlattenerPreset.
	 */
	toSource(): string

}

/**
 * Transparency flattener preferences.
 */
declare class FlattenerPreference extends Preference {
	/**
	 * If true, ensures that the boundaries between vector and rasterized artwork fall along object paths.
	 */
	clipComplexRegions: boolean

	/**
	 * If true, converts all strokes to outlines and ensures that stroke widths remain constant during flattening. Note: Can cause thin strokes to appear slightly thicker than their original width. Affects all strokes, not only strokes involved in the transparency.
	 */
	convertAllStrokesToOutlines: boolean

	/**
	 * If true, converts all text to outlines and discards all type glyph information on spreads with transparency; ensures that the width of text strokes remains constant during flattening. Note: Can cause small fonts to appear slightly thicker when viewed in Acrobat or printed on low-quality desktop printers, but does not affect type quality when printed on high-resolution printers or imagesetters.
	 */
	convertAllTextToOutlines: boolean

	/**
	 * The resolution for gradients rasterized as a result of flattening and for drop shadow and feathers when printed or exported. (Range: 0 to 1200) Note: Resolutions higher than 300 ppi increase file size and printing time but generally do not improve the image quality.
	 */
	gradientAndMeshResolution: number

	/**
	 * The resolution for vector objects rasterized as a result of flattening. (Range: 1 to 9600) For information, see raster vector balance.
	 */
	lineArtAndTextResolution: number

	/**
	 * The amount of vector artwork to rasterize during flattening, specified as an enumerator or as a percentage in the range 0 to 100.
	 */
	rasterVectorBalance: FlattenerLevel | number

}

/**
 * Transparency preferences.
 */
declare class TransparencyPreference extends Preference {
	/**
	 * The color space used for blending the colors of transparent objects.
	 */
	blendingSpace: BlendingSpace

	/**
	 * The altitude of the global light. (Range: 0 to 90)
	 */
	globalLightAltitude: number

	/**
	 * The angle of the global light. (Range: -360 to 360)
	 */
	globalLightAngle: number

}

/**
 * Transparency settings.
 */
declare class TransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	bevelAndEmbossSettings: BevelAndEmbossSetting

	/**
	 * Blending mode settings.
	 */
	blendingSettings: BlendingSetting

	/**
	 * Settings related to the directional feather effect.
	 */
	directionalFeatherSettings: DirectionalFeatherSetting

	/**
	 * Settings related to the drop shadow effect.
	 */
	dropShadowSettings: DropShadowSetting

	/**
	 * Settings related to the feather effect.
	 */
	featherSettings: FeatherSetting

	/**
	 * Settings related to the gradient feather effect.
	 */
	gradientFeatherSettings: GradientFeatherSetting

	/**
	 * Settings related to the inner glow effect.
	 */
	innerGlowSettings: InnerGlowSetting

	/**
	 * Settings related to the inner shadow effect.
	 */
	innerShadowSettings: InnerShadowSetting

	/**
	 * Settings related to the outer glow effect.
	 */
	outerGlowSettings: OuterGlowSetting

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Settings related to the satin effect
	 */
	satinSettings: SatinSetting

}

/**
 * Transparency settings for the stroke of the parent object.
 */
declare class StrokeTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	bevelAndEmbossSettings: BevelAndEmbossSetting

	/**
	 * Blending mode settings.
	 */
	blendingSettings: BlendingSetting

	/**
	 * Settings related to the directional feather effect.
	 */
	directionalFeatherSettings: DirectionalFeatherSetting

	/**
	 * Settings related to the drop shadow effect.
	 */
	dropShadowSettings: DropShadowSetting

	/**
	 * Settings related to the feather effect.
	 */
	featherSettings: FeatherSetting

	/**
	 * Settings related to the gradient feather effect.
	 */
	gradientFeatherSettings: GradientFeatherSetting

	/**
	 * Settings related to the inner glow effect.
	 */
	innerGlowSettings: InnerGlowSetting

	/**
	 * Settings related to the inner shadow effect.
	 */
	innerShadowSettings: InnerShadowSetting

	/**
	 * Settings related to the outer glow effect.
	 */
	outerGlowSettings: OuterGlowSetting

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Settings related to the satin effect
	 */
	satinSettings: SatinSetting

}

/**
 * Transparency settings for the fill applied to the parent object.
 */
declare class FillTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	bevelAndEmbossSettings: BevelAndEmbossSetting

	/**
	 * Blending mode settings.
	 */
	blendingSettings: BlendingSetting

	/**
	 * Settings related to the directional feather effect.
	 */
	directionalFeatherSettings: DirectionalFeatherSetting

	/**
	 * Settings related to the drop shadow effect.
	 */
	dropShadowSettings: DropShadowSetting

	/**
	 * Settings related to the feather effect.
	 */
	featherSettings: FeatherSetting

	/**
	 * Settings related to the gradient feather effect.
	 */
	gradientFeatherSettings: GradientFeatherSetting

	/**
	 * Settings related to the inner glow effect.
	 */
	innerGlowSettings: InnerGlowSetting

	/**
	 * Settings related to the inner shadow effect.
	 */
	innerShadowSettings: InnerShadowSetting

	/**
	 * Settings related to the outer glow effect.
	 */
	outerGlowSettings: OuterGlowSetting

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Settings related to the satin effect
	 */
	satinSettings: SatinSetting

}

/**
 * Basic object blending settings.
 */
declare class BlendingSetting extends Preference {
	/**
	 * The blending mode for controlling how the base color interacts with the color of the BlendingSetting.
	 */
	blendMode: BlendMode

	/**
	 * If true, blending is applied only to the group. If false, blending includes all objects beneath the group.
	 */
	isolateBlending: boolean

	/**
	 * If true, the BlendingSetting is a knockout group.
	 */
	knockoutGroup: boolean

	/**
	 * The fill opacity of the BlendingSetting (as a percentage). (Range: 0 to 100)
	 */
	opacity: number

}

/**
 * Drop shadow settings.
 */
declare class DropShadowSetting extends Preference {
	/**
	 * The angle at which the shadow is thrown
	 */
	angle: number

	/**
	 * The blending mode for the drop shadow effect.
	 */
	blendMode: BlendMode

	/**
	 * The distance between the item and its shadow
	 */
	distance: number | string

	/**
	 * The color applied to the drop shadow, specified as a swatch (color, gradient, tint, or mixed ink), or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127.
	 */
	effectColor: Swatch

	/**
	 * If true, the drop shadow will take into account other non-shadow effects.
	 */
	honorOtherEffects: boolean

	/**
	 * If true, the layer will knock out the drop shadow.
	 */
	knockedOut: boolean

	/**
	 * The shadow mode.
	 */
	mode: ShadowMode

	/**
	 * The amount (as a percentage) of noise applied to the shadow. (Range: 0 to 100)
	 */
	noise: number

	/**
	 * The opacity of the drop shadow (as a percentage). (Range: 0 to 100)
	 */
	opacity: number

	/**
	 * The radius (in pixels) of the blur applied to the drop shadow. (Range depends on the unit type. For points: 0 to 144; for picas: 0p0 to 12p0; for inches: 0 to 2; for mm: 0 to 50.08; for cm: 0 to 5.08; for ciceros: 0c0 to 11c3.128.)
	 */
	size: number | string

	/**
	 * The amount (as a percentage of the blur width) to spread the footprint of the drop shadow and reduce the radius of the blur. (Range: 0 to 100)
	 */
	spread: number

	/**
	 * If true, uses the global light angle.
	 */
	useGlobalLight: boolean

	/**
	 * The horizontal offset of the drop shadow. Range depends on the unit type. For points: -1000 to 1000; for picas: -83p4 to 83p4; for inches: -13.8889 to 13.8889; for mm: -352.778 to 352.778; for cm: -35.277 to 35.277; for ciceros: -78c2.389 to 78c2.389.
	 */
	xOffset: number | string

	/**
	 * The vertical offset of the drop shadow. (Range depends on the unit type. For points: -1000 to 1000; for picas: -83p4 to 83p4; for inches: -13.8889 to 13.8889; for mm: -352.778 to 352.778; for cm: -35.277 to 35.277; for ciceros: -78c2.389 to 78c2.389)
	 */
	yOffset: number | string

}

/**
 * Feather effect settings.
 */
declare class FeatherSetting extends Preference {
	/**
	 * The amount to choke the feather (as a percentage of the feather width). (Range: 0 to 100)
	 */
	chokeAmount: number

	/**
	 * The corner effect applied to the feather.
	 */
	cornerType: FeatherCornerType

	/**
	 * The feather mode.
	 */
	mode: FeatherMode

	/**
	 * The amount (as a percentage) of noise applied to the feather. (Range: 0 to 100)
	 */
	noise: number

	/**
	 * The feather width. (Range depends on the unit type. For points: 0 to 1000; for picas: 0 to 83p4; for inches: 0 to 13.8889; for mm: 0 to 352.778; for cm: 0 to 35.277; for ciceros: 0 to 78c2.389.)
	 */
	width: number | string

}

/**
 * Inner shadow effect settings.
 */
declare class InnerShadowSetting extends Preference {
	/**
	 * The angle at which the inner shadow is thrown. (Range: -360 to 360)
	 */
	angle: number

	/**
	 * If true, the inner shadow effect is applied.
	 */
	applied: boolean

	/**
	 * The blending mode for the inner shadow effect.
	 */
	blendMode: BlendMode

	/**
	 * The amount to choke the inner shadow (as a percentage of shadow size). (Range: 0 to 100)
	 */
	chokeAmount: number

	/**
	 * The distance between the InnerShadowSetting and the shadow.
	 */
	distance: number | string

	/**
	 * The color applied to the inner shadow, specified as a swatch (color, gradient, tint, or mixed ink), or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127.
	 */
	effectColor: Swatch

	/**
	 * The amount (as a percentage) of noise to add to the shadow. (Range: 0 to 100)
	 */
	noise: number

	/**
	 * The opacity (as a percentage) of the inner shadow. (Range: 0 to 100)
	 */
	opacity: number

	/**
	 * The size of the inner shadow.
	 */
	size: number | string

	/**
	 * If true, the global light angle is used.
	 */
	useGlobalLight: boolean

	/**
	 * The horizontal offset of the shadow
	 */
	xOffset: number | string

	/**
	 * The vertical offset of the shadow
	 */
	yOffset: number | string

}

/**
 * Outer glow effect settings.
 */
declare class OuterGlowSetting extends Preference {
	/**
	 * If true, the outer glow effect is applied.
	 */
	applied: boolean

	/**
	 * The blending mode for the outer glow effect.
	 */
	blendMode: BlendMode

	/**
	 * The color applied to the outer glow, specified as a swatch (color, gradient, tint, or mixed ink), or an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127.
	 */
	effectColor: Swatch

	/**
	 * The amount (as a percentage) of noise applied to the outer glow. (Range: 0 to 100)
	 */
	noise: number

	/**
	 * The opacity of the outer glow (as a percentage). (Range: 0 to 100)
	 */
	opacity: number

	/**
	 * The size of the outer glow.
	 */
	size: number | string

	/**
	 * The amount of spread (as a percentage of the outer glow size). (Range: 0 to 100)
	 */
	spread: number

	/**
	 * The technique applied to the outer glow.
	 */
	technique: GlowTechnique

}

/**
 * Inner glow effect settings.
 */
declare class InnerGlowSetting extends Preference {
	/**
	 * If true, the inner glow effect is applied.
	 */
	applied: boolean

	/**
	 * The blending mode for the inner glow effect.
	 */
	blendMode: BlendMode

	/**
	 * The color applied to the inner glow, specified as a swatch (color, gradient, tint, or mixed ink), or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127.
	 */
	effectColor: Swatch

	/**
	 * The amount (as a percentage) of noise applied to the inner glow. (Range: 0 to 100)
	 */
	noise: number

	/**
	 * The opacity of the inner glow (as a percentage). (Range: 0 to 100)
	 */
	opacity: number

	/**
	 * The size of the inner glow.
	 */
	size: number | string

	/**
	 * The light source of the inner glow effect.
	 */
	source: InnerGlowSource

	/**
	 * The amount of spread (as a percentage of the inner glow size). (Range: 0 to 100)
	 */
	spread: number

	/**
	 * The technique used for the inner glow.
	 */
	technique: GlowTechnique

}

/**
 * Bevel and emboss effect settings.
 */
declare class BevelAndEmbossSetting extends Preference {
	/**
	 * The altitude of the light source. (Range: 0 to 90)
	 */
	altitude: number

	/**
	 * The angle of the light source. (Range: -180 to 180)
	 */
	angle: number

	/**
	 * If true, the bevel or emboss effect is applied.
	 */
	applied: boolean

	/**
	 * The depth of the bevel or emboss (as a percentage). (Range: 0 to 1000)
	 */
	depth: number

	/**
	 * The direction of the bevel or emboss.
	 */
	direction: BevelAndEmbossDirection

	/**
	 * The blending mode for the highlight portion of the effect.
	 */
	highlightBlendMode: BlendMode

	/**
	 * The color applied to the highlight portion of the effect, specified as a swatch (color, gradient, tint, or mixed ink), a color library color, a hex value, or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127; for HSB, specify three colors in the format [H,S,B], with H in the range 0 to 360 and S and B as percentages in the range 0 to 100.
	 */
	highlightColor: Swatch

	/**
	 * The opacity of the highlight portion of the effect (as a percentage). (Range: 0 to 100)
	 */
	highlightOpacity: number

	/**
	 * The blending mode for the shadow portion of the effect.
	 */
	shadowBlendMode: BlendMode

	/**
	 * The color applied to the shadow portion of the effect, specified as a swatch (color, gradient, tint, or mixed ink), a color library color, a hex value, or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127; for HSB, specify three colors in the format [H,S,B], with H in the range 0 to 360 and S and B as percentages in the range 0 to 100.
	 */
	shadowColor: Swatch

	/**
	 * The opacity of the shadow portion of the effect (as a percentage). (Range: 0 to 100)
	 */
	shadowOpacity: number

	/**
	 * The size of the bevel or emboss.
	 */
	size: number | string

	/**
	 * The amount (in pixels) of softening.
	 */
	soften: number | string

	/**
	 * The style of bevel or emboss.
	 */
	style: BevelAndEmbossStyle

	/**
	 * The edging technique of the bevel or emboss.
	 */
	technique: BevelAndEmbossTechnique

	/**
	 * If true, the global light source is used.
	 */
	useGlobalLight: boolean

}

/**
 * Satin effect settings.
 */
declare class SatinSetting extends Preference {
	/**
	 * The light angle of the satin effect. (Range: -360 to 360)
	 */
	angle: number

	/**
	 * If true, applies the satin effect.
	 */
	applied: boolean

	/**
	 * The blending mode for the satin effect.
	 */
	blendMode: BlendMode

	/**
	 * The distance (in pixels) from the SatinSetting to the satin effect.
	 */
	distance: number | string

	/**
	 * The color applied to the satin effect, specified as a swatch (color, gradient, tint, or mixed ink), a color library color, a hex value, or as an array of color values. The color mode dictates the array values: for RGB, specify three values, each in the range 0 to 255, in the format [R,G,B]; for CMYK, specify four values, each as a percentage and each in the range 0 to 100, in the format [C,M,Y,K]; for LAB, specify three values in the format [L,A,B], with L in the range 0 to 100 and A and B in the range -128 to 127; for HSB, specify three colors in the format [H,S,B], with H in the range 0 to 360 and S and B as percentages in the range 0 to 100.
	 */
	effectColor: Swatch

	/**
	 * If true, inverts the satin effect.
	 */
	invertEffect: boolean

	/**
	 * The opacity of the satin effect (as a percentage). (Range: 0 to 100)
	 */
	opacity: number

	/**
	 * The width (in pixels) of the satin effect.
	 */
	size: number | string

}

/**
 * Transparency settings for the content of the parent object.
 */
declare class ContentTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	bevelAndEmbossSettings: BevelAndEmbossSetting

	/**
	 * Blending mode settings.
	 */
	blendingSettings: BlendingSetting

	/**
	 * Settings related to the directional feather effect.
	 */
	directionalFeatherSettings: DirectionalFeatherSetting

	/**
	 * Settings related to the drop shadow effect.
	 */
	dropShadowSettings: DropShadowSetting

	/**
	 * Settings related to the feather effect.
	 */
	featherSettings: FeatherSetting

	/**
	 * Settings related to the gradient feather effect.
	 */
	gradientFeatherSettings: GradientFeatherSetting

	/**
	 * Settings related to the inner glow effect.
	 */
	innerGlowSettings: InnerGlowSetting

	/**
	 * Settings related to the inner shadow effect.
	 */
	innerShadowSettings: InnerShadowSetting

	/**
	 * Settings related to the outer glow effect.
	 */
	outerGlowSettings: OuterGlowSetting

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Settings related to the satin effect
	 */
	satinSettings: SatinSetting

}

/**
 * Directional feather effect settings.
 */
declare class DirectionalFeatherSetting extends Preference {
	/**
	 * The angle of the feather. (Range: 180 to -180)
	 */
	angle: number

	/**
	 * If true, the directional feather effect is applied.
	 */
	applied: boolean

	/**
	 * The feather width (in pixels) on the bottom side of the object DirectionalFeatherSetting. (Range: .2 to 250)
	 */
	bottomWidth: number | string

	/**
	 * The amount to choke the directional feather (as a percentage of the feather width). (Range: 0 to 100)
	 */
	chokeAmount: number

	/**
	 * The shape-following algorithm applied to the feather.
	 */
	followShapeMode: FollowShapeModeOptions

	/**
	 * The feather width (in pixels) on the left side of the DirectionalFeatherSetting.
	 */
	leftWidth: number | string

	/**
	 * The amount of noise (as a percentage) applied to the feather region. (Range: 0 to 100)
	 */
	noise: number

	/**
	 * The feather width (in pixels) on the right side of the DirectionalFeatherSetting. (Range: .2 to 250)
	 */
	rightWidth: number | string

	/**
	 * The feather width (in pixels) on the top side of the object DirectionalFeatherSetting. (Range: .2 to 250)
	 */
	topWidth: number | string

}

/**
 * Gradient feather effect settings.
 */
declare class GradientFeatherSetting extends Preference {
	/**
	 * The angle of the gradient feather.
	 */
	angle: number

	/**
	 * If true, the gradient feather effect is applied.
	 */
	applied: boolean

	/**
	 * The center point (for a radial gradient) or starting point (for a linear gradient) applied to the fill, as page coordinates in the format [x, y].
	 */
	gradientStart: (number | string)[]

	/**
	 * The hilite angle of the radial gradient feather.
	 */
	hiliteAngle: number

	/**
	 * The hilite length of the radial gradient feather.
	 */
	hiliteLength: number | string

	/**
	 * The length of the axial gradient, or radius of the radial gradient.
	 */
	length: number | string

	/**
	 * A collection of opacity gradient stops.
	 */
	opacityGradientStops: OpacityGradientStops

	/**
	 * The type of gradient.
	 */
	type: GradientType

}

/**
 * Transparency settings.
 */
declare class FindChangeTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting

	/**
	 * Blending mode settings.
	 */
	blendingSettings: FindChangeBlendingSetting

	/**
	 * Settings related to the directional feather effect.
	 */
	directionalFeatherSettings: FindChangeDirectionalFeatherSetting

	/**
	 * Settings related to the drop shadow effect.
	 */
	dropShadowSettings: FindChangeDropShadowSetting

	/**
	 * Settings related to the feather effect.
	 */
	featherSettings: FindChangeFeatherSetting

	/**
	 * Settings related to the gradient feather effect.
	 */
	gradientFeatherSettings: FindChangeGradientFeatherSetting

	/**
	 * Settings related to the inner glow effect.
	 */
	innerGlowSettings: FindChangeInnerGlowSetting

	/**
	 * Settings related to the inner shadow effect.
	 */
	innerShadowSettings: FindChangeInnerShadowSetting

	/**
	 * Settings related to the outer glow effect.
	 */
	outerGlowSettings: FindChangeOuterGlowSetting

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Settings related to the satin effect
	 */
	satinSettings: FindChangeSatinSetting

}

/**
 * Transparency settings for the stroke of the parent object.
 */
declare class FindChangeStrokeTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting

	/**
	 * Blending mode settings.
	 */
	blendingSettings: FindChangeBlendingSetting

	/**
	 * Settings related to the directional feather effect.
	 */
	directionalFeatherSettings: FindChangeDirectionalFeatherSetting

	/**
	 * Settings related to the drop shadow effect.
	 */
	dropShadowSettings: FindChangeDropShadowSetting

	/**
	 * Settings related to the feather effect.
	 */
	featherSettings: FindChangeFeatherSetting

	/**
	 * Settings related to the gradient feather effect.
	 */
	gradientFeatherSettings: FindChangeGradientFeatherSetting

	/**
	 * Settings related to the inner glow effect.
	 */
	innerGlowSettings: FindChangeInnerGlowSetting

	/**
	 * Settings related to the inner shadow effect.
	 */
	innerShadowSettings: FindChangeInnerShadowSetting

	/**
	 * Settings related to the outer glow effect.
	 */
	outerGlowSettings: FindChangeOuterGlowSetting

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Settings related to the satin effect
	 */
	satinSettings: FindChangeSatinSetting

}

/**
 * Transparency settings for the fill applied to the parent object.
 */
declare class FindChangeFillTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting

	/**
	 * Blending mode settings.
	 */
	blendingSettings: FindChangeBlendingSetting

	/**
	 * Settings related to the directional feather effect.
	 */
	directionalFeatherSettings: FindChangeDirectionalFeatherSetting

	/**
	 * Settings related to the drop shadow effect.
	 */
	dropShadowSettings: FindChangeDropShadowSetting

	/**
	 * Settings related to the feather effect.
	 */
	featherSettings: FindChangeFeatherSetting

	/**
	 * Settings related to the gradient feather effect.
	 */
	gradientFeatherSettings: FindChangeGradientFeatherSetting

	/**
	 * Settings related to the inner glow effect.
	 */
	innerGlowSettings: FindChangeInnerGlowSetting

	/**
	 * Settings related to the inner shadow effect.
	 */
	innerShadowSettings: FindChangeInnerShadowSetting

	/**
	 * Settings related to the outer glow effect.
	 */
	outerGlowSettings: FindChangeOuterGlowSetting

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Settings related to the satin effect
	 */
	satinSettings: FindChangeSatinSetting

}

/**
 * Transparency settings for the content of the parent object.
 */
declare class FindChangeContentTransparencySetting extends Preference {
	/**
	 * Settings related to the bevel and emboss effect.
	 */
	bevelAndEmbossSettings: FindChangeBevelAndEmbossSetting

	/**
	 * Blending mode settings.
	 */
	blendingSettings: FindChangeBlendingSetting

	/**
	 * Settings related to the directional feather effect.
	 */
	directionalFeatherSettings: FindChangeDirectionalFeatherSetting

	/**
	 * Settings related to the drop shadow effect.
	 */
	dropShadowSettings: FindChangeDropShadowSetting

	/**
	 * Settings related to the feather effect.
	 */
	featherSettings: FindChangeFeatherSetting

	/**
	 * Settings related to the gradient feather effect.
	 */
	gradientFeatherSettings: FindChangeGradientFeatherSetting

	/**
	 * Settings related to the inner glow effect.
	 */
	innerGlowSettings: FindChangeInnerGlowSetting

	/**
	 * Settings related to the inner shadow effect.
	 */
	innerShadowSettings: FindChangeInnerShadowSetting

	/**
	 * Settings related to the outer glow effect.
	 */
	outerGlowSettings: FindChangeOuterGlowSetting

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Settings related to the satin effect
	 */
	satinSettings: FindChangeSatinSetting

}

/**
 * Basic object blending settings.
 */
declare class FindChangeBlendingSetting extends BlendingSetting {
}

/**
 * Drop shadow settings.
 */
declare class FindChangeDropShadowSetting extends DropShadowSetting {
}

/**
 * Feather effect settings.
 */
declare class FindChangeFeatherSetting extends FeatherSetting {
}

/**
 * Inner shadow effect settings.
 */
declare class FindChangeInnerShadowSetting extends InnerShadowSetting {
}

/**
 * Outer glow effect settings.
 */
declare class FindChangeOuterGlowSetting extends OuterGlowSetting {
}

/**
 * Inner glow effect settings.
 */
declare class FindChangeInnerGlowSetting extends InnerGlowSetting {
}

/**
 * Bevel and emboss effect settings.
 */
declare class FindChangeBevelAndEmbossSetting extends BevelAndEmbossSetting {
}

/**
 * Satin effect settings.
 */
declare class FindChangeSatinSetting extends SatinSetting {
}

/**
 * Directional feather effect settings.
 */
declare class FindChangeDirectionalFeatherSetting extends DirectionalFeatherSetting {
}

/**
 * Gradient feather effect settings.
 */
declare class FindChangeGradientFeatherSetting extends GradientFeatherSetting {
}

/**
 * Text import preferences.
 */
declare class TextImportPreference extends Preference {
	/**
	 * The computer language character set used to create the text file.
	 */
	characterSet: TextImportCharacterSet

	/**
	 * If true, converts the specified number of spaces into a tab. For information on specifying the number of spaces, see spaces into tabs count.
	 */
	convertSpacesIntoTabs: boolean

	/**
	 * The dictionary to use for the imported text.
	 */
	dictionary: string

	/**
	 * The platform used to create the imported text file.
	 */
	platform: ImportPlatform

	/**
	 * The number of spaces to convert to a tab. Note: Valid when convert spaces into tabs is true.
	 */
	spacesIntoTabsCount: number

	/**
	 * If true, the import filter removes extra carriage returns at the ends of lines.
	 */
	stripReturnsBetweenLines: boolean

	/**
	 * If true, the import filter removes extra carriage returns between paragraphs.
	 */
	stripReturnsBetweenParagraphs: boolean

	/**
	 * If true, convert straight quotes and apostrophes in the imported text to typographic quotation marks and apostrophes.
	 */
	useTypographersQuotes: boolean

}

/**
 * Text export preferences.
 */
declare class TextExportPreference extends Preference {
	/**
	 * The character set.
	 */
	characterSet: TextExportCharacterSet

	/**
	 * The platform on which the text file will be used.
	 */
	platform: ImportPlatform

}

/**
 * Word RTF import preferences.
 */
declare class WordRTFImportPreference extends Preference {
	/**
	 * If true, bullets and numbers will be converted to embedded characters during import. If false, bullets and numbers will be rendered by InDesign.
	 */
	convertBulletsAndNumbersToText: boolean

	/**
	 * The option for handling manual page breaks.
	 */
	convertPageBreaks: ConvertPageBreaks

	/**
	 * The policy for converting tables whose formatting has been removed. Note: Valid when remove formatting is true.
	 */
	convertTablesTo: ConvertTablesOptions

	/**
	 * If true, imports endnotes as static text. Else live endnotes
	 */
	importAsStaticEndnotes: boolean

	/**
	 * If true, imports endnotes.
	 */
	importEndnotes: boolean

	/**
	 * If true, imports footnotes.
	 */
	importFootnotes: boolean

	/**
	 * If true, imports the index.
	 */
	importIndex: boolean

	/**
	 * If true, imports the table of contents.
	 */
	importTOC: boolean

	/**
	 * If true, imports unused styles.
	 */
	importUnusedStyles: boolean

	/**
	 * If true, preserves inline graphics.
	 */
	preserveGraphics: boolean

	/**
	 * If true, maintains character formatting in text whose formatting has been removed. Note: Valid when remove formatting is true.
	 */
	preserveLocalOverrides: boolean

	/**
	 * If true, preserves comments and edits in the imported file.
	 */
	preserveTrackChanges: boolean

	/**
	 * If true, removes text and table formatting.
	 */
	removeFormatting: boolean

	/**
	 * The option for handling style name conflicts.
	 */
	resolveCharacterStyleClash: ResolveStyleClash

	/**
	 * The option for resolving conflicts that arise when paragraph styles have matching names.
	 */
	resolveParagraphStyleClash: ResolveStyleClash

	/**
	 * If true, convert straight quotes and apostrophes in the imported text to typographic quotation marks and apostrophes.
	 */
	useTypographersQuotes: boolean

}

/**
 * Tagged text export preferences.
 */
declare class TaggedTextExportPreference extends Preference {
	/**
	 * The character set.
	 */
	characterSet: TagTextExportCharacterSet

	/**
	 * The form for tags in the exported text.
	 */
	tagForm: TagTextForm

}

/**
 * Tagged text import preferences.
 */
declare class TaggedTextImportPreference extends Preference {
	/**
	 * If true, removes text formatting.
	 */
	removeTextFormatting: boolean

	/**
	 * The policy for resolving conflicts when style names in the imported tagged text file match style names the current publication.
	 */
	styleConflict: StyleConflict

	/**
	 * If true, convert straight quotes and apostrophes in the imported text to typographic quotation marks and apostrophes.
	 */
	useTypographersQuotes: boolean

}

/**
 * Excel import preferences.
 */
declare class ExcelImportPreference extends Preference {
	/**
	 * The cell alignment for the imported document.
	 */
	alignmentStyle: AlignmentStyleOptions

	/**
	 * The number of decimal places to include. Note: Valid only when alignment style is decimal.
	 */
	decimalPlaces: number

	/**
	 * The import error code. (Key: 0=Success; 1=Empty Sheet; 2=Invalid sheet; 3=Invalid range; 4=Invalid View; 5=Misc. Error)
	 */
	errorCode: number

	/**
	 * If true, preserves inline graphics.
	 */
	preserveGraphics: boolean

	/**
	 * The range of cells to import. Note: Use a colon (:) to separate the start and end cell names in the range.
	 */
	rangeName: string

	/**
	 * The worksheet's index. For information, see sheet name.
	 */
	sheetIndex: number

	/**
	 * The worksheet to import.
	 */
	sheetName: string

	/**
	 * If true, shows hidden cells.
	 */
	showHiddenCells: boolean

	/**
	 * The format for imported spreadsheets.
	 */
	tableFormatting: TableFormattingOptions

	/**
	 * If true, convert straight quotes and apostrophes in the imported text to typographic quotation marks and apostrophes.
	 */
	useTypographersQuotes: boolean

	/**
	 * The stored custom or personal view(s) to import with the file.
	 */
	viewName: string

}

/**
 * Metadata preferences.
 */
declare class MetadataPreference extends Preference {
	/**
	 * The author of the document.
	 */
	author: string

	/**
	 * The URL of the file that contains the linked copyright statement.
	 */
	copyrightInfoURL: string

	/**
	 * The text to use as a copyright notice.
	 */
	copyrightNotice: string

	/**
	 * The copyright status of the document.
	 */
	copyrightStatus: CopyrightStatus

	/**
	 * The creation date of the document.
	 */
	creationDate: Date

	/**
	 * The name of the application used to create the document.
	 */
	creator: string

	/**
	 * The description of the MetadataPreference.
	 */
	description: string

	/**
	 * The title of the document.
	 */
	documentTitle: string

	/**
	 * The format of the document.
	 */
	format: string

	/**
	 * The job name.
	 */
	jobName: string

	/**
	 * The list of keywords associated with the document.
	 */
	keywords: string[]

	/**
	 * The most recent modification date of the document.
	 */
	modificationDate: Date

	/**
	 * The location of the document on the asset management server.
	 */
	serverURL: string

	/**
	 * Uses metadata from the specified external file to define any undefined metadata properties in the document.
	 * @param from The path to the external file that contains the metadata.
	 * @param affectAll If true, also replaces existing metadata with data from the external file. If false, does not replace existing metadata. Note: Defaults to false.
	 */
	append(from: File, affectAll?: boolean): void

	/**
	 * Counts the number of items in the container.
	 * @param namespace The namespace of the container.
	 * @param path The path to the container.
	 */
	countContainer(namespace: string, path: string): number

	/**
	 * Creates an empty container.
	 * @param namespace The namespace of the container.
	 * @param path The path to the container.
	 * @param index The index of the item within the container. Specified values must be 1 or greater. To append the item to the end of the index and allow the next available value to be assigned, use 0.
	 * @param container The container type. Note: Required when the new item is the first item added to the container.
	 */
	createContainerItem(namespace: string, path: string, index?: number, container?: ContainerType): void

	/**
	 * Gets the XMP property value associated with the specified path.
	 * @param namespace The namespace of the property.
	 * @param path The specified path.
	 */
	getProperty(namespace: string, path: string): string

	/**
	 * Replaces the current metadata in the document with metadata from the specified file.
	 * @param using The full path to the file that contains the replacement metadata.
	 * @param affectAll If true, treats all properties as external. Note: Defaults to false.
	 */
	replace(using: File, affectAll?: boolean): void

	/**
	 * Saves the metadata in the document to an external file.
	 * @param to The path to the external file.
	 */
	save(to: File): void

	/**
	 * Sets the XMP property associated with the specified path.
	 * @param namespace The namespace of the property.
	 * @param path The specified path(s).
	 * @param value The value to assign to the property. Note: To remove the property, pass an empty string.
	 */
	setProperty(namespace: string, path: string, value: string): void

}

/**
 * Default display performance settings for the application.
 */
declare class DisplayPerformancePreference extends Preference {
	/**
	 * Object-level default display performance settings. Note: The settings do not apply to graphics that are already placed in the document.
	 */
	defaultDisplaySettings: ViewDisplaySettings

	/**
	 * If true, ignores object-level default display performance settings and uses the application-level default display settings; also prevents setting object-level settings.
	 */
	ignoreLocalSettings: boolean

	/**
	 * If true, sets application-level preferences to preserve object-level display settings.
	 */
	persistLocalSettings: boolean

}

/**
 * Object-level display settings.
 */
declare class DisplaySetting {
	/**
	 * If true, uses anti-aliasing for text and bitmap images.
	 */
	antialiasing: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The point size below which text is greeked.
	 */
	greekBelow: number

	/**
	 * The index of the DisplaySetting within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the DisplaySetting (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The display method for raster images.
	 */
	raster: TagRaster

	/**
	 * The display setting for transparencies.
	 */
	transparency: TagTransparency

	/**
	 * The display method for vector images.
	 */
	vector: TagVector

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DisplaySetting[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the DisplaySetting.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * Display setting properties.
 */
declare class DisplaySettings {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DisplaySetting with the specified index.
	 * @param index The index.
	 */
	[index: number]: DisplaySetting

	/**
	 * Returns any DisplaySetting in the collection.
	 */
	anyItem(): DisplaySetting

	/**
	 * Displays the number of elements in the DisplaySetting.
	 */
	count(): number

	/**
	 * Returns every DisplaySetting in the collection.
	 */
	everyItem(): DisplaySetting[]

	/**
	 * Returns the first DisplaySetting in the collection.
	 */
	firstItem(): DisplaySetting

	/**
	 * Returns the DisplaySetting with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DisplaySetting

	/**
	 * Returns the DisplaySettings within the specified range.
	 * @param from The DisplaySetting, index, or name at the beginning of the range.
	 * @param to The DisplaySetting, index, or name at the end of the range.
	 */
	itemByRange(from: DisplaySetting | number | string, to: DisplaySetting | number | string): DisplaySetting[]

	/**
	 * Returns the last DisplaySetting in the collection.
	 */
	lastItem(): DisplaySetting

	/**
	 * Returns the middle DisplaySetting in the collection.
	 */
	middleItem(): DisplaySetting

	/**
	 * Returns the DisplaySetting whose index follows the specified DisplaySetting in the collection.
	 * @param obj The DisplaySetting whose index comes before the desired DisplaySetting.
	 */
	nextItem(obj: DisplaySetting): DisplaySetting

	/**
	 * Returns the DisplaySetting with the index previous to the specified index.
	 * @param obj The index of the DisplaySetting that follows the desired DisplaySetting.
	 */
	previousItem(obj: DisplaySetting): DisplaySetting

	/**
	 * Generates a string which, if executed, will return the DisplaySetting.
	 */
	toSource(): string

}

/**
 * GPU performance settings for the application.
 */
declare class GpuPerformancePreference extends Preference {
	/**
	 * If true, enables animated zoom.
	 */
	enableAnimatedZoom: boolean

	/**
	 * If true, enables GPU performance.
	 */
	enableGpuPerformance: boolean

}

/**
 * XML view preferences
 */
declare class XMLViewPreference extends Preference {
	/**
	 * If true, displays attributes as well as elements in the structure view. Note: Valid only when show structure is true.
	 */
	showAttributes: boolean

	/**
	 * If true, displays the structure view.
	 */
	showStructure: boolean

	/**
	 * If true, displays XML tags.
	 */
	showTagMarkers: boolean

	/**
	 * If true, displays the tag options dialog when tagging any item whose parent is not tagged.
	 */
	showTagOptions: boolean

	/**
	 * If true, displays XML tags in tagged frames.
	 */
	showTaggedFrames: boolean

	/**
	 * If true, the structure view displays text snippets of element content. Note: Valid only when show structure is true.
	 */
	showTextSnippets: boolean

}

/**
 * Preflight options.
 */
declare class PreflightOption extends Preference {
	/**
	 * If true, embed working profile when creating new document.
	 */
	preflightEmbedWorkingProfile: boolean

	/**
	 * If true, include objects that do not print when preflighting.
	 */
	preflightIncludeNonprintingObjects: boolean

	/**
	 * If true, include objects on pasteboard when preflighting.
	 */
	preflightIncludeObjectsOnPasteboard: boolean

	/**
	 * If true, preflight is turned off for all documents or for this document.
	 */
	preflightOff: boolean

	/**
	 * The policy for preflighting applied when opening a document or book, whether to use embedded profile or the another profile when the preflight is turned on.
	 */
	preflightProfilePolicy: PreflightProfileOptions

	/**
	 * The pages or documents to preflight, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	preflightScope: PreflightScopeOptions | string

	/**
	 * Which layers to preflight.
	 */
	preflightWhichLayers: PreflightLayerOptions

	/**
	 * The working preflight profile.
	 */
	preflightWorkingProfile: PreflightProfile | string

}

/**
 * Preflight book options.
 */
declare class PreflightBookOption extends Preference {
	/**
	 * If true, include objects that do not print when preflighting.
	 */
	preflightIncludeNonprintingObjects: boolean

	/**
	 * If true, include objects on pasteboard when preflighting.
	 */
	preflightIncludeObjectsOnPasteboard: boolean

	/**
	 * The policy for preflighting applied when opening a document or book, whether to use embedded profile or the another profile when the preflight is turned on.
	 */
	preflightProfilePolicy: PreflightProfileOptions

	/**
	 * The pages or documents to preflight, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	preflightScope: PreflightScopeOptions | string

	/**
	 * Which layers to preflight.
	 */
	preflightWhichLayers: PreflightLayerOptions

	/**
	 * The working preflight profile.
	 */
	preflightWorkingProfile: PreflightProfile | string

}

/**
 * PNG export preferences.
 */
declare class PNGExportPreference extends Preference {
	/**
	 * If true, use anti-aliasing for text and vectors during export.
	 */
	antiAlias: boolean

	/**
	 * The export resolution expressed as a real number instead of an integer. (Range: 1.0 to 2400.0)
	 */
	exportResolution: number

	/**
	 * If true, exports each spread as a single PNG file. If false, exports facing pages as separate files and appends sequential numbers to each file name.
	 */
	exportingSpread: boolean

	/**
	 * The page(s) to export, specified as a page number or an array of page numbers. Note: Valid when PNG export range is not all.
	 */
	pageString: string

	/**
	 * RGB or Gray
	 */
	pngColorSpace: PNGColorSpaceEnum

	/**
	 * The page range to export.
	 */
	pngExportRange: PNGExportRangeEnum

	/**
	 * The compression quality.
	 */
	pngQuality: PNGQualityEnum

	/**
	 * If true, simulates the effects of overprinting spot and process colors in the same way they would occur when printing.
	 */
	simulateOverprint: boolean

	/**
	 * If true, use a transparent background for the exported PNG.
	 */
	transparentBackground: boolean

	/**
	 * If true, uses the document's bleed settings in the exported PNG.
	 */
	useDocumentBleeds: boolean

}

/**
 * Button preferences.
 */
declare class ButtonPreference extends Preference {
	/**
	 * The name of the ButtonPreference.
	 */
	name: string

}

/**
 * Watermark preference
 */
declare class WatermarkPreference extends Preference {
	/**
	 * Watermark do print for a document
	 */
	watermarkDoPrint: boolean

	/**
	 * Watermark draw in back for a document
	 */
	watermarkDrawInBack: boolean

	/**
	 * Watermark font color for a document.
	 */
	watermarkFontColor: [number, number, number] | UIColors

	/**
	 * Watermark font family display name
	 */
	watermarkFontFamily: string

	/**
	 * Watermark font point size for a document
	 */
	watermarkFontPointSize: number

	/**
	 * Watermark font style name
	 */
	watermarkFontStyle: string

	/**
	 * Watermark horizontal offset for a document
	 */
	watermarkHorizontalOffset: number | string

	/**
	 * Watermark horizontal position enum for a document
	 */
	watermarkHorizontalPosition: WatermarkHorizontalPositionEnum

	/**
	 * Watermark opacity (as a percentage). (Range: 0 to 100)
	 */
	watermarkOpacity: number

	/**
	 * Watermark rotation for a document
	 */
	watermarkRotation: number

	/**
	 * Watermark text for a document
	 */
	watermarkText: string

	/**
	 * Watermark vertical offset for a document
	 */
	watermarkVerticalOffset: number | string

	/**
	 * Watermark vertical position enum for a document
	 */
	watermarkVerticalPosition: WatermarkVerticalPositionEnum

	/**
	 * Watermark visibility for a document
	 */
	watermarkVisibility: boolean

}

/**
 * General application preferences.
 */
declare class GeneralPreference extends Preference {
	/**
	 * If true, application bar is shown.
	 */
	applicationBarShown: boolean

	/**
	 * If true, on creating new char style through the new char style dialog, it will be exported to CC Libraries as well
	 */
	autoAddCharStyleToCCLibraries: boolean

	/**
	 * If true, on creating new para style through the new para style dialog, it will be exported to CC Libraries as well
	 */
	autoAddParaStyleToCCLibraries: boolean

	/**
	 * If true, on creating new swatch through the new swatch dialog, it will be exported to CC Libraries as well
	 */
	autoAddSwatchToCCLibraries: boolean

	/**
	 * If true, panel drawers close automatically.
	 */
	autoCollapseIconPanels: boolean

	/**
	 * If true, vertical reveal strips appear when palette UI is hidden.
	 */
	autoShowHiddenPanels: boolean

	/**
	 * The threshold at which to trigger font subsetting based on the number of glyphs the font contains.
	 */
	completeFontDownloadGlyphLimit: number

	/**
	 * Enable the creation of links on content place
	 */
	createLinksOnContentPlace: boolean

	/**
	 * When using a custom monitor resolution, what is the value of that resolution in pixels per inch
	 */
	customMonitorPpi: number

	/**
	 * If true, enable content-aware fit as default while placing items
	 */
	enableContentAwareFit: boolean

	/**
	 * If true, floating windows can be docked by user as tabs.
	 */
	enableFloatingWindowDocking: boolean

	/**
	 * Controls whether or not multi-touch gestures are enabled.
	 */
	enableMultiTouchGestures: boolean

	/**
	 * Controls whether or not to greek vector graphics when dragging at high quality.
	 */
	greekVectorGraphicsOnDrag: boolean

	/**
	 * Controls whether or not to highlight object under selection tool.
	 */
	highlightObjectUnderSelectionTool: boolean

	/**
	 * If true, includes a preview in saved documents.
	 */
	includePreview: boolean

	/**
	 * The value of the system reported main monitor resolution
	 */
	mainMonitorPpi: number

	/**
	 * Enable the mapping of styles on content place
	 */
	mapStylesOnContentPlace: boolean

	/**
	 * Controls whether page items move when a page is repositioned from the UI. The option/alt key temporarily reverses this property
	 */
	objectsMoveWithPage: boolean

	/**
	 * If true, documents open as tabs.
	 */
	openDocumentsAsTabs: boolean

	/**
	 * Number of items to show in the Open Recent menu list. Range: 0 to 30
	 */
	openRecentLength: number

	/**
	 * The page numbering method.
	 */
	pageNumbering: PageNumberingOptions

	/**
	 * If true, Large Tabs are shown for panels else Smaller tabs are shown
	 */
	panelTabHeightPreference: boolean

	/**
	 * Specify the Pasteboard color preference (0 or 1). Specify 0 to set preference to Default White, and 1 to set preference to Match with Theme Color.
	 */
	pasteboardColorPreference: number

	/**
	 * Controls whether or not to show thumbnails of imported files in the Place icon.
	 */
	placeCursorUsesThumbnails: boolean

	/**
	 * Controls whether or not you can select and interact with a locked item. When this is off, only position is locked.
	 */
	preventSelectingLockedItems: boolean

	/**
	 * The pages to create preview images for. Note: Valid when include preview is true.
	 */
	previewPages: PreviewPagesOptions

	/**
	 * The preview size. Note: Valid when include preview is true.
	 */
	previewSize: PreviewSizeOptions

	/**
	 * Controls whether or not the anchor object adornment is shown.
	 */
	showAnchorObjectAdornment: boolean

	/**
	 * Controls whether or not the content grabber adornment is shown.
	 */
	showContentGrabber: boolean

	/**
	 * Show the conveyor on content collector or content placer tool activation
	 */
	showConveyor: boolean

	/**
	 * If true, legacy new document dialog will be shown when Ctrl/Cmd + N are pressed.
	 */
	showLegacyNewDocumentDialog: boolean

	/**
	 * Controls whether or not the live corners grabber adornment is shown.
	 */
	showLiveCorners: boolean

	/**
	 * Controls whether or not to show the master page overlay when a page is selected using the Page Tool.
	 */
	showMasterPageOverlay: boolean

	/**
	 * If true, show start workspace when no documents are open
	 */
	showStartWorkspace: boolean

	/**
	 * If true, show stock cart adornment on unlicensed stock images
	 */
	showStockPurchaseAdornment: boolean

	/**
	 * Controls whether or not to dynamically display transformation information as part of the cursor while manipulating page items.
	 */
	showTransformationValues: boolean

	/**
	 * If true, show What's New dialog on startup.
	 */
	showWhatsNewOnStartup: boolean

	/**
	 * The location in which to store temporary files.
	 */
	temporaryFolder: File

	/**
	 * Tool tip behavior.
	 */
	toolTips: ToolTipOptions

	/**
	 * Controls the appearance of the Tools panel.
	 */
	toolsPanel: ToolsPanelOptions

	/**
	 * Specify the Application User Interface brightness preference (from 0.0 to 1.0). To use color theme brightness preset values, specify 0.0 for Dark, 0.50 for Medium Dark, 0.51 for Medium Bright, and 1.0 for Bright. Any value between 0.0 and 1.0 will automatically be mapped to closest preset.
	 */
	uiBrightnessPreference: number

	/**
	 * If true, objects after ungrouping go back to their original layers.
	 */
	ungroupRemembersLayers: boolean

	/**
	 * If true, application lives in a frame.
	 */
	useApplicationFrame: boolean

	/**
	 * Enable the use of a custom monitor resolution in pixels per inch as opposed to querying the system settings
	 */
	useCustomMonitorResolution: boolean

	/**
	 * If true, use incoming spot color definition in case of conflict, when placing or pasting content
	 */
	useIncomingSpotUponConflict: boolean

}

/**
 * Clipboard preferences.
 */
declare class ClipboardPreference extends Preference {
	/**
	 * If true, copies PDF to the clipboard.
	 */
	copyPDFToClipboard: boolean

	/**
	 * If true, objects cut or copied from different layers retain their layer assignment when pasted.
	 */
	pasteRemembersLayers: boolean

	/**
	 * If true, pastes PDF if available.
	 */
	preferPDFWhenPasting: boolean

	/**
	 * If true, includes text attributes when pasting text.
	 */
	preferStyledTextWhenPasting: boolean

	/**
	 * If true, preserves PDF data on the system clipboard when the application exits.
	 */
	preservePdfClipboardAtQuit: boolean

}

/**
 * Transform preferences.
 */
declare class TransformPreference extends Preference {
	/**
	 * If true, transparency effects are scaled when objects are scaled.
	 */
	adjustEffectsWhenScaling: boolean

	/**
	 * If true, strokes are scaled when objects are scaled.
	 */
	adjustStrokeWeightWhenScaling: boolean

	/**
	 * If true, includes the stroke weight when displaying object dimensions. If false, measures objects from the path or frame.
	 */
	dimensionsIncludeStrokeWeight: boolean

	/**
	 * If true, measures the x and y values of the object relative to the containing frame. If false, measures the x and y values relative to the rulers.
	 */
	showContentOffset: boolean

	/**
	 * If true, transformation values are relative to the parent object. If false, the transformation values are absolute values.
	 */
	transformationsAreTotals: boolean

	/**
	 * The method used to scale a page item.
	 */
	whenScaling: WhenScalingOptions

}

/**
 * Note preferences.
 */
declare class NotePreference extends Preference {
	/**
	 * If true, includes inline notes content when using Find/Change commands (in Galley and Story views only).
	 */
	findAndReplaceNoteContents: boolean

	/**
	 * The background color for notes.
	 */
	noteBackgroundColor: NoteBackgrounds

	/**
	 * The note color, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as an InCopy UI color.
	 */
	noteColor: [number, number, number] | InCopyUIColors

	/**
	 * The color to use for notes.
	 */
	noteColorChoices: NoteColorChoices

	/**
	 * If true, displays note information and some note content when the mouse pointer hovers over a note anchor in layout view or a note bookend in galley or story view.
	 */
	showNoteTips: boolean

	/**
	 * If true, includes inline notes content when using Spell Check (in Galley and Story views only).
	 */
	spellCheckNotes: boolean

}

/**
 * Track changes preferences.
 */
declare class TrackChangesPreference extends Preference {
	/**
	 * The background color option for added text.
	 */
	addedBackgroundColorChoice: ChangeBackgroundColorChoices

	/**
	 * The color option for added text.
	 */
	addedTextColorChoice: ChangeTextColorChoices

	/**
	 * The background color for added text, specified as an InCopy UI color. Note: Valid only when added background color choice is change background uses change pref color.
	 */
	backgroundColorForAddedText: [number, number, number] | InCopyUIColors

	/**
	 * The background color for deleted text, specified as an InCopy UI color. Note: Valid only when deleted background color choice is change background uses change pref color.
	 */
	backgroundColorForDeletedText: [number, number, number] | InCopyUIColors

	/**
	 * The background color for moved text, specified as an InCopy UI color. Note: Valid only when moved background color choice is change background uses change pref color.
	 */
	backgroundColorForMovedText: [number, number, number] | InCopyUIColors

	/**
	 * The change bar color, specified as an InCopy UI color.
	 */
	changeBarColor: [number, number, number] | InCopyUIColors

	/**
	 * The background color option for deleted text.
	 */
	deletedBackgroundColorChoice: ChangeBackgroundColorChoices

	/**
	 * The color option for deleted text.
	 */
	deletedTextColorChoice: ChangeTextColorChoices

	/**
	 * The change bar location.
	 */
	locationForChangeBar: ChangebarLocations

	/**
	 * The marking that identifies added text.
	 */
	markingForAddedText: ChangeMarkings

	/**
	 * The marking that identifies deleted text.
	 */
	markingForDeletedText: ChangeMarkings

	/**
	 * The marking that identifies moved text.
	 */
	markingForMovedText: ChangeMarkings

	/**
	 * The background color option for moved text.
	 */
	movedBackgroundColorChoice: ChangeBackgroundColorChoices

	/**
	 * The color option for moved text.
	 */
	movedTextColorChoice: ChangeTextColorChoices

	/**
	 * If true, prevent duplicate user color for tracked changes background color.
	 */
	preventDuplicateColor: boolean

	/**
	 * If true, displays added text.
	 */
	showAddedText: boolean

	/**
	 * If true, displays change bars,
	 */
	showChangeBars: boolean

	/**
	 * If true, displays deleted text.
	 */
	showDeletedText: boolean

	/**
	 * If true, displays moved text.
	 */
	showMovedText: boolean

	/**
	 * If true, includes deleted text when using the Spell Check command.
	 */
	spellCheckDeletedText: boolean

	/**
	 * The color for added text, specified as an InCopy UI color. Note: Valid only when added text color choice is change uses change pref color.
	 */
	textColorForAddedText: [number, number, number] | InCopyUIColors

	/**
	 * The color for deleted text, specified as an InCopy UI color. Note: Valid only when deleted text color choice is change uses change pref color.
	 */
	textColorForDeletedText: [number, number, number] | InCopyUIColors

	/**
	 * The color for moved text, specified as an InCopy UI color. Note: Valid only when moved text color choice is change uses change pref color.
	 */
	textColorForMovedText: [number, number, number] | InCopyUIColors

}

/**
 * JPEG export preferences.
 */
declare class JPEGExportPreference extends Preference {
	/**
	 * If true, use anti-aliasing for text and vectors during export.
	 */
	antiAlias: boolean

	/**
	 * True to embed the color profile, false otherwise.
	 */
	embedColorProfile: boolean

	/**
	 * The export	resolution expressed as a real number instead of an integer. (Range: 1.0 to 2400.0)
	 */
	exportResolution: number

	/**
	 * If true, exports each spread as a single JPEG file. If false, exports facing pages as separate files and appends sequential numbers to each file name.
	 */
	exportingSpread: boolean

	/**
	 * One of RGB, CMYK or Gray
	 */
	jpegColorSpace: JpegColorSpaceEnum

	/**
	 * The page range to export.
	 */
	jpegExportRange: ExportRangeOrAllPages

	/**
	 * The compression quality.
	 */
	jpegQuality: JPEGOptionsQuality

	/**
	 * The rendering style.
	 */
	jpegRenderingStyle: JPEGOptionsFormat

	/**
	 * The page(s) to export, specified as a page number or an array of page numbers. Note: Valid when JPEG export range is not all.
	 */
	pageString: string

	/**
	 * If true, simulates the effects of overprinting spot and process colors in the same way they would occur when printing.
	 */
	simulateOverprint: boolean

	/**
	 * If true, uses the document's bleed settings in the exported JPEG.
	 */
	useDocumentBleeds: boolean

}

/**
 * Data merge preferences.
 */
declare class DataMergePreference extends Preference {
	/**
	 * The order in which to arrange multiple records on the page in the target document.
	 */
	arrangeBy: ArrangeBy

	/**
	 * The offset value of the bottom margin in the target document.
	 */
	bottomMargin: number | string

	/**
	 * The amount of space between columns of records in the target document.
	 */
	columnSpacing: number | string

	/**
	 * The offset value of the left margin in the target document.
	 */
	leftMargin: number | string

	/**
	 * The number of the record to merge. Note: Valid only when record selection is one record.
	 */
	recordNumber: number

	/**
	 * The range of records to merge. Note: Valid only when record selection is range.
	 */
	recordRange: string

	/**
	 * The records to merge.
	 */
	recordSelection: RecordSelection

	/**
	 * The number of records to place on each page in the document.
	 */
	recordsPerPage: RecordsPerPage

	/**
	 * The offset value of the right margin in the target document.
	 */
	rightMargin: number | string

	/**
	 * The amount of space between rows of records in the target document.
	 */
	rowSpacing: number | string

	/**
	 * The offset value of the top margin in the target document.
	 */
	topMargin: number | string

	/**
	 * If true, lists missing images in the specified output file.
	 * @param outputMissingImagesReportFile The path to the output file.
	 */
	alertMissingImages(outputMissingImagesReportFile: File): boolean

}

/**
 * Data merge options.
 */
declare class DataMergeOption extends Preference {
	/**
	 * If true, centers the image in the frame; preserves the frame size as well as content size and proportions. Note: If the content is larger than the frame, content around the edges is obscured by the bounding box of the frame. This doesn't work with fittingOption CONTENT_AWARE_FIT
	 */
	centerImage: boolean

	/**
	 * If true, creates a new document when records are merged.
	 */
	createNewDocument: boolean

	/**
	 * The maximum number of pages per document.
	 */
	documentSize: number

	/**
	 * Instructions for fitting content in a frame.
	 */
	fittingOption: Fitting

	/**
	 * If true, links images to the target document. If false, embeds images in the target document.
	 */
	linkImages: boolean

	/**
	 * If true, removes blank lines caused by empty fields.
	 */
	removeBlankLines: boolean

}

/**
 * A data merge object.
 */
declare class DataMerge extends Preference {
	/**
	 * A collection of data merge fields.
	 */
	dataMergeFields: DataMergeFields

	/**
	 * The data merge preference properties that define the layout and content of the target page.
	 */
	dataMergePreferences: DataMergePreference

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * Merges records and exports to PDF.
	 * @param to The path of exported PDF file.
	 * @param using The PDF export style to use.
	 * @param outputOversetReportFile The path to the file in which to store the overset report.
	 */
	exportFile(to: File, using: PDFExportPreset, outputOversetReportFile: File): void

	/**
	 * Merges records and produces an optional overset report.
	 * @param outputOversetReportFile The path to the file in which to store the overset report.
	 */
	mergeRecords(outputOversetReportFile: File): void

	/**
	 * Removes the data source.
	 */
	removeDataSource(): void

	/**
	 * Specifies the file to use as the data source.
	 * @param dataSourceFile The path to the data source file.
	 */
	selectDataSource(dataSourceFile: File): void

	/**
	 * Updates the data source file with the most current data.
	 */
	updateDataSource(): void

}

/**
 * Chapter numbering preferences.
 */
declare class ChapterNumberPreference extends Preference {
	/**
	 * Chapter number.
	 */
	chapterNumber: number

	/**
	 * Chapter number formatting options.
	 */
	chapterNumberFormat: NumberingStyle | string

	/**
	 * Source for generating the chapter number.
	 */
	chapterNumberSource: ChapterNumberSources

}

/**
 * Object style object effects category settings.
 */
declare class ObjectStyleObjectEffectsCategorySettings extends Preference {
	/**
	 * If true, the object style will apply bevel emboss.
	 */
	enableBevelEmboss: boolean

	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean

	/**
	 * If true, the object style will apply drop shadows.
	 */
	enableDropShadow: boolean

	/**
	 * If true, the object style will apply feathering.
	 */
	enableFeather: boolean

	/**
	 * If true, the object style will apply gradient feathering.
	 */
	enableGradientFeather: boolean

	/**
	 * If true, the object style will apply inner glow.
	 */
	enableInnerGlow: boolean

	/**
	 * If true, the object style will apply inner shadows.
	 */
	enableInnerShadow: boolean

	/**
	 * If true, the object style will apply outer glow.
	 */
	enableOuterGlow: boolean

	/**
	 * If true, the object style will apply satin.
	 */
	enableSatin: boolean

	/**
	 * If true, the object style will apply transparency settings.
	 */
	enableTransparency: boolean

}

/**
 * Object style stroke effects category settings.
 */
declare class ObjectStyleStrokeEffectsCategorySettings extends Preference {
	/**
	 * If true, the object style will apply bevel emboss.
	 */
	enableBevelEmboss: boolean

	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean

	/**
	 * If true, the object style will apply drop shadows.
	 */
	enableDropShadow: boolean

	/**
	 * If true, the object style will apply feathering.
	 */
	enableFeather: boolean

	/**
	 * If true, the object style will apply gradient feathering.
	 */
	enableGradientFeather: boolean

	/**
	 * If true, the object style will apply inner glow.
	 */
	enableInnerGlow: boolean

	/**
	 * If true, the object style will apply inner shadows.
	 */
	enableInnerShadow: boolean

	/**
	 * If true, the object style will apply outer glow.
	 */
	enableOuterGlow: boolean

	/**
	 * If true, the object style will apply satin.
	 */
	enableSatin: boolean

	/**
	 * If true, the object style will apply transparency settings.
	 */
	enableTransparency: boolean

}

/**
 * Object style fill effects category settings.
 */
declare class ObjectStyleFillEffectsCategorySettings extends Preference {
	/**
	 * If true, the object style will apply bevel emboss.
	 */
	enableBevelEmboss: boolean

	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean

	/**
	 * If true, the object style will apply drop shadows.
	 */
	enableDropShadow: boolean

	/**
	 * If true, the object style will apply feathering.
	 */
	enableFeather: boolean

	/**
	 * If true, the object style will apply gradient feathering.
	 */
	enableGradientFeather: boolean

	/**
	 * If true, the object style will apply inner glow.
	 */
	enableInnerGlow: boolean

	/**
	 * If true, the object style will apply inner shadows.
	 */
	enableInnerShadow: boolean

	/**
	 * If true, the object style will apply outer glow.
	 */
	enableOuterGlow: boolean

	/**
	 * If true, the object style will apply satin.
	 */
	enableSatin: boolean

	/**
	 * If true, the object style will apply transparency settings.
	 */
	enableTransparency: boolean

}

/**
 * Object style content effects category settings.
 */
declare class ObjectStyleContentEffectsCategorySettings extends Preference {
	/**
	 * If true, the object style will apply bevel emboss.
	 */
	enableBevelEmboss: boolean

	/**
	 * If true, the object style will apply directional feathering.
	 */
	enableDirectionalFeather: boolean

	/**
	 * If true, the object style will apply drop shadows.
	 */
	enableDropShadow: boolean

	/**
	 * If true, the object style will apply feathering.
	 */
	enableFeather: boolean

	/**
	 * If true, the object style will apply gradient feathering.
	 */
	enableGradientFeather: boolean

	/**
	 * If true, the object style will apply inner glow.
	 */
	enableInnerGlow: boolean

	/**
	 * If true, the object style will apply inner shadows.
	 */
	enableInnerShadow: boolean

	/**
	 * If true, the object style will apply outer glow.
	 */
	enableOuterGlow: boolean

	/**
	 * If true, the object style will apply satin.
	 */
	enableSatin: boolean

	/**
	 * If true, the object style will apply transparency settings.
	 */
	enableTransparency: boolean

}

/**
 * Grabber preferences.
 */
declare class GrabberPreference extends Preference {
	/**
	 * The display performance quality setting to use when scrolling.
	 */
	grabberPanning: PanningTypes

}

/**
 * Type Contextual UI Preference.
 */
declare class TypeContextualUiPreference extends Preference {
	/**
	 * Preference for showing contextual ui for alternates.
	 */
	showAlternatesUi: boolean

	/**
	 * Preference for showing contextual ui for fractions.
	 */
	showFractionsUi: boolean

}

/**
 * Preferences for alignment and distribution.
 */
declare class AlignDistributePreference extends Preference {
	/**
	 * The bounds to use as a basis for aligning or distributing page items.
	 */
	alignDistributeBounds: AlignDistributeBounds

	/**
	 * If true, distribute space between page items and ignore the bounds setting.
	 */
	distributeAbsolute: boolean

	/**
	 * The distance to use when distributing page items.
	 */
	distributeAbsoluteMeasurement: number | string

	/**
	 * If true, distribute space between page items and ignore the bounds setting.
	 */
	distributeSpaceAbsolute: boolean

	/**
	 * The distance to use when distributing page items.
	 */
	distributeSpaceAbsoluteMeasurement: number | string

}

/**
 * SWF export settings for the application object.
 */
declare class SWFExportPreference extends Preference {
	/**
	 * The SWF curve quality.
	 */
	curveQuality: SWFCurveQualityValue

	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	dynamicDocumentExportReaderSpreads: boolean

	/**
	 * The dynamic media handling options.
	 */
	dynamicMediaHandling: DynamicMediaHandlingOptions

	/**
	 * The fitting method to use.
	 */
	fitMethod: FitMethodSettings

	/**
	 * The options for fitting to predefined dimension.
	 */
	fitOption: FitDimension

	/**
	 * The size fits to given scale percentage.
	 */
	fitScale: number

	/**
	 * The size fits to given width and height.
	 */
	fitWidthAndHeight: number[]

	/**
	 * Flatten transparency when exporting.
	 */
	flattenTransparency: boolean

	/**
	 * The frame rate in frames per second.
	 */
	frameRate: number

	/**
	 * Flag indicates whether to generate HTML.
	 */
	generateHTML: boolean

	/**
	 * Flag indicates whether to include interactive page curl when export to SWF.
	 */
	includeInteractivePageCurl: boolean

	/**
	 * The JPEG quality options.
	 */
	jpegQualityOptions: DynamicDocumentsJPEGQualityOptions

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string

	/**
	 * The name of the page transition to use for all pages.
	 */
	pageTransitionOverride: PageTransitionOverrideOptions

	/**
	 * The SWF raster compression options.
	 */
	rasterCompression: RasterCompressionOptions

	/**
	 * The raster resolution.
	 */
	rasterResolution: number

	/**
	 * If true, all the pages in the exported document will be rasterized.
	 */
	rasterizePages: boolean

	/**
	 * The resampling threshold.
	 */
	resamplingThreshold: number

	/**
	 * The resampling type.
	 */
	resamplingType: Sampling

	/**
	 * SWF background setting
	 */
	swfBackground: SWFBackgroundOptions

	/**
	 * The text export policy.
	 */
	textExportPolicy: DynamicDocumentsTextExportPolicy

	/**
	 * Flag indicates whether to allow to use network access when export to SWF.
	 */
	useNetworkAccess: boolean

	/**
	 * Flag indicates to whether to view the SWF after exporting.
	 */
	viewSWFAfterExporting: boolean

}

/**
 * XFL export preferences.
 */
declare class XFLExportPreference extends Preference {
	/**
	 * If true, each spread in the exported document is combined into a single page that has spread's original width.
	 */
	dynamicDocumentExportReaderSpreads: boolean

	/**
	 * The dynamic media handling options.
	 */
	dynamicMediaHandling: DynamicMediaHandlingOptions

	/**
	 * The fitting method to use.
	 */
	fitMethod: FitMethodSettings

	/**
	 * The options for fitting to predefined dimension.
	 */
	fitOption: FitDimension

	/**
	 * The size fits to given scale percentage.
	 */
	fitScale: number

	/**
	 * The size fits to given width and height.
	 */
	fitWidthAndHeight: number[]

	/**
	 * Flatten transparency when exporting.
	 */
	flattenTransparency: boolean

	/**
	 * If true, discretionary hyphenation points are inserted when TLF text is used.
	 */
	insertHyphens: boolean

	/**
	 * The JPEG quality options.
	 */
	jpegQualityOptions: DynamicDocumentsJPEGQualityOptions

	/**
	 * The pages to print, specified either as an enumeration or a string. To specify a range, separate page numbers in the string with a hyphen (-). To specify separate pages, separate page numbers in the string with a comma (,).
	 */
	pageRange: PageRange | string

	/**
	 * The raster format options.
	 */
	rasterFormat: XFLRasterizeFormatOptions

	/**
	 * The raster resolution.
	 */
	rasterResolution: number

	/**
	 * If true, all the pages in the exported document will be rasterized.
	 */
	rasterizePages: boolean

	/**
	 * The resampling threshold.
	 */
	resamplingThreshold: number

	/**
	 * The resampling type.
	 */
	resamplingType: Sampling

	/**
	 * The text export policy.
	 */
	textExportPolicy: DynamicDocumentsTextExportPolicy

}

/**
 * Animation settings.
 */
declare class AnimationSetting extends Preference {
	/**
	 * The animation design option.
	 */
	designOption: DesignOptions

	/**
	 * The duration in second for this animation.
	 */
	duration: number

	/**
	 * The ease type.
	 */
	easeType: AnimationEaseOptions

	/**
	 * Determines if this animated object has custom settings.
	 */
	hasCustomSettings: boolean

	/**
	 * Determines if this object is hidden after its animation is played in an exported SWF file.
	 */
	hiddenAfter: boolean

	/**
	 * Determines if this object is initially hidden when displayed in an exported SWF file.
	 */
	initiallyHidden: boolean

	/**
	 * The list of motion path points and key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, pathPoint:Ordered array containing anchor:Array of 2 Reals, leftDirection:Array of 2 Reals, rightDirection:Array of 2 Reals.
	 */
	motionPath: any[]

	/**
	 * The list of motion path points for this animation. Can return: Ordered array containing pathPointArray:Array of Ordered array containing anchor:Array of 2 Reals, leftDirection:Array of 2 Reals, rightDirection:Array of 2 Reals, pathOpen:Boolean.
	 */
	motionPathPoints: any

	/**
	 * The list of opacity key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, value:Real.
	 */
	opacityArray: any[]

	/**
	 * The number of times this animation plays.
	 */
	plays: number

	/**
	 * Set to true if animation play loops.
	 */
	playsLoop: boolean

	/**
	 * The base animation preset applied.
	 */
	preset: MotionPreset | string | NothingEnum

	/**
	 * The list of rotation key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, value:Real.
	 */
	rotationArray: any[]

	/**
	 * The list of scale x key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, value:Real.
	 */
	scaleXArray: any[]

	/**
	 * The list of scale y key frames for this animation. Can return: Ordered array containing keyFrame:Long Integer, value:Real.
	 */
	scaleYArray: any[]

	/**
	 * The tranform offset percentage from the target object bounding box's left-top corner.
	 */
	transformOffsets: number[]

	/**
	 * Save this motion preset as custom preset.
	 * @param name The name for the new motion preset.
	 */
	save(name: string): MotionPreset

	/**
	 * Save a copy of this motion preset to a InDesign motion preset file.
	 * @param to The Flash motion preset file to export to.
	 */
	saveACopy(to: File): void

}

/**
 * Conditional text preferences.
 */
declare class ConditionalTextPreference extends Preference {
	/**
	 * The currently active condition set.
	 */
	activeConditionSet: ConditionSet

	/**
	 * Shows or hides condition indicators.
	 */
	showConditionIndicators: ConditionIndicatorMode

}

/**
 * EPub export preferences.
 */
declare class EPubExportPreference extends Preference {
	/**
	 * Bottom margin of the epub.
	 */
	bottomMargin: number

	/**
	 * Iftrue, break InDesign document into smaller piece when generating epub.
	 */
	breakDocument: boolean

	/**
	 * The bullet export option.
	 */
	bulletExportOption: BulletListExportOption

	/**
	 * The epub cover image file path.
	 */
	coverImageFile: string

	/**
	 * Allows user to select the image size option for conversion
	 */
	customImageSizeOption: ImageSizeOption

	/**
	 * If true, embed font in epub.
	 */
	embedFont: boolean

	/**
	 * The epub cover option.
	 */
	epubCover: EpubCover

	/**
	 * The epub creator.
	 */
	epubCreator: string

	/**
	 * The epub date.
	 */
	epubDate: string

	/**
	 * The epub description.
	 */
	epubDescription: string

	/**
	 * The epub publisher.
	 */
	epubPublisher: string

	/**
	 * The epub rights.
	 */
	epubRights: string

	/**
	 * The epub subject.
	 */
	epubSubject: string

	/**
	 * The epub title.
	 */
	epubTitle: string

	/**
	 * The export order.
	 */
	exportOrder: ExportOrder

	/**
	 * The file path of external cascading style sheets.
	 */
	externalStyleSheets: string[]

	/**
	 * The placement of footnote for EPub export
	 */
	footnotePlacement: EPubFootnotePlacement

	/**
	 * If true, InDesign will generate cascade style sheet.
	 */
	generateCascadeStyleSheet: boolean

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette

	/**
	 * The epub unique identifier, like ISBN.
	 */
	id: string

	/**
	 * ignore object level image conversion settings.
	 */
	ignoreObjectConversionSettings: boolean

	/**
	 * Alignment applied to images
	 */
	imageAlignment: ImageAlignmentType

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution

	/**
	 * Image page break settings to be used with objects
	 */
	imagePageBreak: ImagePageBreakType

	/**
	 * Space After applied to images
	 */
	imageSpaceAfter: number

	/**
	 * Space Before applied to images
	 */
	imageSpaceBefore: number

	/**
	 * If true, InDesign will generate class attributes for elements in HTML, else will generate plain html without class attributes.
	 */
	includeClassesInHTML: boolean

	/**
	 * The file path of external javascripts.
	 */
	javascripts: string[]

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality

	/**
	 * Left margin of the epub.
	 */
	leftMargin: number

	/**
	 * The PNG compression level.
	 */
	level: number

	/**
	 * The numbered list export option.
	 */
	numberedListExportOption: NumberedListExportOption

	/**
	 * The name of paragraph style to break InDesign document.
	 */
	paragraphStyleName: string

	/**
	 * If true, format image based on layout appearence.
	 */
	preserveLayoutAppearence: boolean

	/**
	 * If true, output local style override.
	 */
	preserveLocalOverride: boolean

	/**
	 * Right margin of the epub.
	 */
	rightMargin: number

	/**
	 * Iftrue, strip soft return.
	 */
	stripSoftReturn: boolean

	/**
	 * The name of TOC style to generate epub TOC.
	 */
	tocStyleName: string

	/**
	 * Top margin of the epub.
	 */
	topMargin: number

	/**
	 * If true, InDesign will use existing image for graphic objects on export.
	 */
	useExistingImageOnExport: boolean

	/**
	 * If true, image page break settings will be used in objects
	 */
	useImagePageBreak: boolean

	/**
	 * The version of EPUB.
	 */
	version: EpubVersion

}

/**
 * HTML export preferences.
 */
declare class HTMLExportPreference extends Preference {
	/**
	 * The bullet export option.
	 */
	bulletExportOption: BulletListExportOption

	/**
	 * Allows user to select the image size option for conversion
	 */
	customImageSizeOption: ImageSizeOption

	/**
	 * The export order.
	 */
	exportOrder: ExportOrder

	/**
	 * If true and have selection, export selected content to HTML.
	 */
	exportSelection: boolean

	/**
	 * The file path of external cascading style sheets.
	 */
	externalStyleSheets: string[]

	/**
	 * If true, InDesign will generate cascade style sheet.
	 */
	generateCascadeStyleSheet: boolean

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette

	/**
	 * ignore object level image conversion settings.
	 */
	ignoreObjectConversionSettings: boolean

	/**
	 * Alignment applied to images
	 */
	imageAlignment: ImageAlignmentType

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion

	/**
	 * The export order.
	 */
	imageExportOption: ImageExportOption

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution

	/**
	 * The image extension on server.
	 */
	imageExtension: string

	/**
	 * Space After applied to images
	 */
	imageSpaceAfter: number

	/**
	 * Space Before applied to images
	 */
	imageSpaceBefore: number

	/**
	 * If true, InDesign will generate class attributes for elements in HTML, else will generate plain html without class attributes.
	 */
	includeClassesInHTML: boolean

	/**
	 * The file path of external javascripts.
	 */
	javascripts: string[]

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality

	/**
	 * The PNG compression level.
	 */
	level: number

	/**
	 * The numbered list export option.
	 */
	numberedListExportOption: NumberedListExportOption

	/**
	 * If true, format image based on layout appearence.
	 */
	preserveLayoutAppearence: boolean

	/**
	 * If true, output local style override.
	 */
	preserveLocalOverride: boolean

	/**
	 * The server path for image .
	 */
	serverPath: string

	/**
	 * If true, open docuemnt in viewer after export.
	 */
	viewDocumentAfterExport: boolean

}

/**
 * EPub fixed layout export preferences.
 */
declare class EPubFixedLayoutExportPreference extends Preference {
	/**
	 * The epub cover image file path.
	 */
	coverImageFile: string

	/**
	 * The epub cover option.
	 */
	epubCover: EpubCover

	/**
	 * The epub creator.
	 */
	epubCreator: string

	/**
	 * The epub date.
	 */
	epubDate: string

	/**
	 * The epub description.
	 */
	epubDescription: string

	/**
	 * The epub navigation style.
	 */
	epubNavigationStyles: EpubNavigationStyle

	/**
	 * The epub page range.
	 */
	epubPageRange: string

	/**
	 * The epub page range format.
	 */
	epubPageRangeFormat: PageRangeFormat

	/**
	 * The epub publisher.
	 */
	epubPublisher: string

	/**
	 * The epub rights.
	 */
	epubRights: string

	/**
	 * The control for spreads in fixed layout EPub.
	 */
	epubSpreadControlOptions: EpubFixedLayoutSpreadControl

	/**
	 * The epub subject.
	 */
	epubSubject: string

	/**
	 * The epub title.
	 */
	epubTitle: string

	/**
	 * The file path of external cascading style sheets.
	 */
	externalStyleSheets: string[]

	/**
	 * If true, generates interlaced GIFs. Note: Not validwhen image conversion is JPEG.
	 */
	gifOptionsInterlaced: boolean

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette

	/**
	 * The epub unique identifier, like ISBN.
	 */
	id: string

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution

	/**
	 * The file path of external javascripts.
	 */
	javascripts: string[]

	/**
	 * The formatting method for converted JPEG images. Note: Not validwhen image conversion is GIF.
	 */
	jpegOptionsFormat: JPEGOptionsFormat

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality

	/**
	 * The PNG compression level.
	 */
	level: number

	/**
	 * The name of TOC style to generate epub TOC.
	 */
	tocStyleName: string

}

/**
 * EPub export preview app preferences.
 */
declare class EPubExportPreviewAppPreference extends Preference {
	/**
	 * If true, open docuemnt in viewer after export.
	 */
	viewDocumentAfterExport: boolean

	/**
	 * Add a new preview application preference
	 * @param applicationPath The full path of the application to be added.
	 * @param selectedForReflowableEpub Check if the app is selected in Reflowable ePub export.
	 * @param selectedForFixedLayoutEpub Check if the app is selected in Fixed Layout ePub export.
	 * @param withProperties Initial values for properties of the new EPubExportPreviewAppPreference
	 */
	addApplication(applicationPath: string, selectedForReflowableEpub: boolean, selectedForFixedLayoutEpub: boolean, withProperties: object): void

	/**
	 * Get the application at index.
	 * @param indexOfApp The index of the application to get information for.
	 * @param withProperties Initial values for properties of the new EPubExportPreviewAppPreference
	 */
	getApplicationAtIndex(indexOfApp: boolean, withProperties: object): any

	/**
	 * Number of applications added for ePub Preview.
	 */
	getApplicationCount(): number

	/**
	 * Remove an application at specified index.
	 * @param indexOfApp The index of the application to be removed.
	 * @param withProperties Initial values for properties of the new EPubExportPreviewAppPreference
	 */
	removeApplication(indexOfApp: number, withProperties: object): void

}

/**
 * HTML FXL export preferences.
 */
declare class HTMLFXLExportPreference extends Preference {
	/**
	 * The epub page range.
	 */
	epubPageRange: string

	/**
	 * The epub page range format.
	 */
	epubPageRangeFormat: PageRangeFormat

}

/**
 * Publish export preferences.
 */
declare class PublishExportPreference extends Preference {
	/**
	 * The epub cover image file path.
	 */
	coverImageFile: string

	/**
	 * The cover page.
	 */
	coverPage: string

	/**
	 * The color palette for GIF conversion. Note: Not valid when image conversion is JPEG.
	 */
	gifOptionsPalette: GIFOptionsPalette

	/**
	 * The file format to use for converted images. Note: Valid only when copy optimized images and/or copy formatted images is true.
	 */
	imageConversion: ImageConversion

	/**
	 * The export resolution
	 */
	imageExportResolution: ImageResolution

	/**
	 * The quality of converted JPEG images. Note: Not valid when image conversion is GIF.
	 */
	jpegOptionsQuality: JPEGOptionsQuality

	/**
	 * The publish cover option.
	 */
	publishCover: PublishCoverEnum

	/**
	 * The publish description.
	 */
	publishDescription: string

	/**
	 * The file name.
	 */
	publishFileName: string

	/**
	 * the publish format.
	 */
	publishFormat: PublishFormatEnum

	/**
	 * The publish page range.
	 */
	publishPageRange: string

	/**
	 * The publish page range format.
	 */
	publishPageRangeFormat: PageRangeFormat

	/**
	 * If PDF should be uploaded while publishing.
	 */
	publishPdf: boolean

}

/**
 * The link options for a linked story.
 */
declare class LinkedStoryOption extends Preference {
	/**
	 * If true, style mappings will be applied during linked story creation or update.
	 */
	applyStyleMappings: boolean

	/**
	 * If true, forced line breaks will be removed during story creation or update.
	 */
	removeForcedLineBreaks: boolean

	/**
	 * If true, the linked story will be updated while saving.
	 */
	updateWhileSaving: boolean

	/**
	 * If true, a warning will be shown if the update link operation will override local edits.
	 */
	warnOnUpdateOfEditedStory: boolean

}

/**
 * A para style mapping.
 */
declare class ParaStyleMapping {
	/**
	 * The destination style name property.
	 */
	destinationStyleName: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the ParaStyleMapping within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The type of the mapping rule.
	 */
	mappingRuleType: MapType

	/**
	 * The parent of the ParaStyleMapping (a Application, Document, Story or XmlStory).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The source style name property.
	 */
	sourceStyleName: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ParaStyleMapping[]

	/**
	 * deletes a style mapping.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ParaStyleMapping.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of para style mappings.
 */
declare class ParaStyleMappings {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ParaStyleMapping with the specified index.
	 * @param index The index.
	 */
	[index: number]: ParaStyleMapping

	/**
	 * Adds a style mapping.
	 * @param sourceStyleName The source style name.
	 * @param destinationStyleName The destination style name.
	 * @param mappingRuleType The mapping type
	 * @param withProperties Initial values for properties of the new ParaStyleMapping
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: object): ParaStyleMapping

	/**
	 * Returns any ParaStyleMapping in the collection.
	 */
	anyItem(): ParaStyleMapping

	/**
	 * Displays the number of elements in the ParaStyleMapping.
	 */
	count(): number

	/**
	 * Returns every ParaStyleMapping in the collection.
	 */
	everyItem(): ParaStyleMapping[]

	/**
	 * Returns the first ParaStyleMapping in the collection.
	 */
	firstItem(): ParaStyleMapping

	/**
	 * Returns the ParaStyleMapping with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ParaStyleMapping

	/**
	 * Returns the ParaStyleMappings within the specified range.
	 * @param from The ParaStyleMapping, index, or name at the beginning of the range.
	 * @param to The ParaStyleMapping, index, or name at the end of the range.
	 */
	itemByRange(from: ParaStyleMapping | number | string, to: ParaStyleMapping | number | string): ParaStyleMapping[]

	/**
	 * Returns the last ParaStyleMapping in the collection.
	 */
	lastItem(): ParaStyleMapping

	/**
	 * Returns the middle ParaStyleMapping in the collection.
	 */
	middleItem(): ParaStyleMapping

	/**
	 * Returns the ParaStyleMapping whose index follows the specified ParaStyleMapping in the collection.
	 * @param obj The ParaStyleMapping whose index comes before the desired ParaStyleMapping.
	 */
	nextItem(obj: ParaStyleMapping): ParaStyleMapping

	/**
	 * Returns the ParaStyleMapping with the index previous to the specified index.
	 * @param obj The index of the ParaStyleMapping that follows the desired ParaStyleMapping.
	 */
	previousItem(obj: ParaStyleMapping): ParaStyleMapping

	/**
	 * Generates a string which, if executed, will return the ParaStyleMapping.
	 */
	toSource(): string

}

/**
 * A cell style mapping.
 */
declare class CellStyleMapping {
	/**
	 * The destination style name property.
	 */
	destinationStyleName: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the CellStyleMapping within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The type of the mapping rule.
	 */
	mappingRuleType: MapType

	/**
	 * The parent of the CellStyleMapping (a Application, Document, Story or XmlStory).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The source style name property.
	 */
	sourceStyleName: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CellStyleMapping[]

	/**
	 * deletes a style mapping.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CellStyleMapping.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of cell style mappings.
 */
declare class CellStyleMappings {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CellStyleMapping with the specified index.
	 * @param index The index.
	 */
	[index: number]: CellStyleMapping

	/**
	 * Adds a style mapping.
	 * @param sourceStyleName The source style name.
	 * @param destinationStyleName The destination style name.
	 * @param mappingRuleType The mapping type
	 * @param withProperties Initial values for properties of the new CellStyleMapping
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: object): CellStyleMapping

	/**
	 * Returns any CellStyleMapping in the collection.
	 */
	anyItem(): CellStyleMapping

	/**
	 * Displays the number of elements in the CellStyleMapping.
	 */
	count(): number

	/**
	 * Returns every CellStyleMapping in the collection.
	 */
	everyItem(): CellStyleMapping[]

	/**
	 * Returns the first CellStyleMapping in the collection.
	 */
	firstItem(): CellStyleMapping

	/**
	 * Returns the CellStyleMapping with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CellStyleMapping

	/**
	 * Returns the CellStyleMappings within the specified range.
	 * @param from The CellStyleMapping, index, or name at the beginning of the range.
	 * @param to The CellStyleMapping, index, or name at the end of the range.
	 */
	itemByRange(from: CellStyleMapping | number | string, to: CellStyleMapping | number | string): CellStyleMapping[]

	/**
	 * Returns the last CellStyleMapping in the collection.
	 */
	lastItem(): CellStyleMapping

	/**
	 * Returns the middle CellStyleMapping in the collection.
	 */
	middleItem(): CellStyleMapping

	/**
	 * Returns the CellStyleMapping whose index follows the specified CellStyleMapping in the collection.
	 * @param obj The CellStyleMapping whose index comes before the desired CellStyleMapping.
	 */
	nextItem(obj: CellStyleMapping): CellStyleMapping

	/**
	 * Returns the CellStyleMapping with the index previous to the specified index.
	 * @param obj The index of the CellStyleMapping that follows the desired CellStyleMapping.
	 */
	previousItem(obj: CellStyleMapping): CellStyleMapping

	/**
	 * Generates a string which, if executed, will return the CellStyleMapping.
	 */
	toSource(): string

}

/**
 * A char style mapping.
 */
declare class CharStyleMapping {
	/**
	 * The destination style name property.
	 */
	destinationStyleName: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the CharStyleMapping within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The type of the mapping rule.
	 */
	mappingRuleType: MapType

	/**
	 * The parent of the CharStyleMapping (a Application, Document, Story or XmlStory).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The source style name property.
	 */
	sourceStyleName: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CharStyleMapping[]

	/**
	 * deletes a style mapping.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CharStyleMapping.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of char style mappings.
 */
declare class CharStyleMappings {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CharStyleMapping with the specified index.
	 * @param index The index.
	 */
	[index: number]: CharStyleMapping

	/**
	 * Adds a style mapping.
	 * @param sourceStyleName The source style name.
	 * @param destinationStyleName The destination style name.
	 * @param mappingRuleType The mapping type
	 * @param withProperties Initial values for properties of the new CharStyleMapping
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: object): CharStyleMapping

	/**
	 * Returns any CharStyleMapping in the collection.
	 */
	anyItem(): CharStyleMapping

	/**
	 * Displays the number of elements in the CharStyleMapping.
	 */
	count(): number

	/**
	 * Returns every CharStyleMapping in the collection.
	 */
	everyItem(): CharStyleMapping[]

	/**
	 * Returns the first CharStyleMapping in the collection.
	 */
	firstItem(): CharStyleMapping

	/**
	 * Returns the CharStyleMapping with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CharStyleMapping

	/**
	 * Returns the CharStyleMappings within the specified range.
	 * @param from The CharStyleMapping, index, or name at the beginning of the range.
	 * @param to The CharStyleMapping, index, or name at the end of the range.
	 */
	itemByRange(from: CharStyleMapping | number | string, to: CharStyleMapping | number | string): CharStyleMapping[]

	/**
	 * Returns the last CharStyleMapping in the collection.
	 */
	lastItem(): CharStyleMapping

	/**
	 * Returns the middle CharStyleMapping in the collection.
	 */
	middleItem(): CharStyleMapping

	/**
	 * Returns the CharStyleMapping whose index follows the specified CharStyleMapping in the collection.
	 * @param obj The CharStyleMapping whose index comes before the desired CharStyleMapping.
	 */
	nextItem(obj: CharStyleMapping): CharStyleMapping

	/**
	 * Returns the CharStyleMapping with the index previous to the specified index.
	 * @param obj The index of the CharStyleMapping that follows the desired CharStyleMapping.
	 */
	previousItem(obj: CharStyleMapping): CharStyleMapping

	/**
	 * Generates a string which, if executed, will return the CharStyleMapping.
	 */
	toSource(): string

}

/**
 * A table style mapping.
 */
declare class TableStyleMapping {
	/**
	 * The destination style name property.
	 */
	destinationStyleName: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the TableStyleMapping within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The type of the mapping rule.
	 */
	mappingRuleType: MapType

	/**
	 * The parent of the TableStyleMapping (a Application, Document, Story or XmlStory).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The source style name property.
	 */
	sourceStyleName: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TableStyleMapping[]

	/**
	 * deletes a style mapping.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TableStyleMapping.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of table style mappings.
 */
declare class TableStyleMappings {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TableStyleMapping with the specified index.
	 * @param index The index.
	 */
	[index: number]: TableStyleMapping

	/**
	 * Adds a style mapping.
	 * @param sourceStyleName The source style name.
	 * @param destinationStyleName The destination style name.
	 * @param mappingRuleType The mapping type
	 * @param withProperties Initial values for properties of the new TableStyleMapping
	 */
	add(sourceStyleName: string, destinationStyleName: string, mappingRuleType: MapType, withProperties: object): TableStyleMapping

	/**
	 * Returns any TableStyleMapping in the collection.
	 */
	anyItem(): TableStyleMapping

	/**
	 * Displays the number of elements in the TableStyleMapping.
	 */
	count(): number

	/**
	 * Returns every TableStyleMapping in the collection.
	 */
	everyItem(): TableStyleMapping[]

	/**
	 * Returns the first TableStyleMapping in the collection.
	 */
	firstItem(): TableStyleMapping

	/**
	 * Returns the TableStyleMapping with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TableStyleMapping

	/**
	 * Returns the TableStyleMappings within the specified range.
	 * @param from The TableStyleMapping, index, or name at the beginning of the range.
	 * @param to The TableStyleMapping, index, or name at the end of the range.
	 */
	itemByRange(from: TableStyleMapping | number | string, to: TableStyleMapping | number | string): TableStyleMapping[]

	/**
	 * Returns the last TableStyleMapping in the collection.
	 */
	lastItem(): TableStyleMapping

	/**
	 * Returns the middle TableStyleMapping in the collection.
	 */
	middleItem(): TableStyleMapping

	/**
	 * Returns the TableStyleMapping whose index follows the specified TableStyleMapping in the collection.
	 * @param obj The TableStyleMapping whose index comes before the desired TableStyleMapping.
	 */
	nextItem(obj: TableStyleMapping): TableStyleMapping

	/**
	 * Returns the TableStyleMapping with the index previous to the specified index.
	 * @param obj The index of the TableStyleMapping that follows the desired TableStyleMapping.
	 */
	previousItem(obj: TableStyleMapping): TableStyleMapping

	/**
	 * Generates a string which, if executed, will return the TableStyleMapping.
	 */
	toSource(): string

}

/**
 * The link options for a linked Page Item.
 */
declare class LinkedPageItemOption extends Preference {
	/**
	 * If true, appearance edits will be preserved during update.
	 */
	preserveAppearance: boolean

	/**
	 * If true, frame content edits will be preserved during update.
	 */
	preserveFrameContent: boolean

	/**
	 * If true, interactivity edits will be preserved during update.
	 */
	preserveInteractivity: boolean

	/**
	 * If true, text wrap, hyperLinks, text frame options, object export settings will be preserved during update.
	 */
	preserveOthers: boolean

	/**
	 * If true, size and shape edits will be preserved during update.
	 */
	preserveSizeAndShape: boolean

	/**
	 * If true, the linked Page Item will be updated while saving.
	 */
	updateLinkWhileSaving: boolean

	/**
	 * If true, a warning will be shown if the update link operation will override local edits.
	 */
	warnOnUpdateOfEditedPageItem: boolean

}

/**
 * A preflight rule
 */
declare class PreflightRule {
	/**
	 * The description of the PreflightRule.
	 */
	description: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the preflight rule is fully supported.
	 */
	fullFeature: boolean

	/**
	 * The rule ID for this rule.
	 */
	id: string

	/**
	 * The index of the PreflightRule within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the PreflightRule.
	 */
	name: string

	/**
	 * The parent of the PreflightRule (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PreflightRule[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the PreflightRule.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of preflight rules.
 */
declare class PreflightRules {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PreflightRule with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightRule

	/**
	 * Returns any PreflightRule in the collection.
	 */
	anyItem(): PreflightRule

	/**
	 * Displays the number of elements in the PreflightRule.
	 */
	count(): number

	/**
	 * Returns every PreflightRule in the collection.
	 */
	everyItem(): PreflightRule[]

	/**
	 * Returns the first PreflightRule in the collection.
	 */
	firstItem(): PreflightRule

	/**
	 * Returns the PreflightRule with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightRule

	/**
	 * Returns the PreflightRule with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PreflightRule

	/**
	 * Returns the PreflightRule with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PreflightRule

	/**
	 * Returns the PreflightRules within the specified range.
	 * @param from The PreflightRule, index, or name at the beginning of the range.
	 * @param to The PreflightRule, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightRule | number | string, to: PreflightRule | number | string): PreflightRule[]

	/**
	 * Returns the last PreflightRule in the collection.
	 */
	lastItem(): PreflightRule

	/**
	 * Returns the middle PreflightRule in the collection.
	 */
	middleItem(): PreflightRule

	/**
	 * Returns the PreflightRule whose index follows the specified PreflightRule in the collection.
	 * @param obj The PreflightRule whose index comes before the desired PreflightRule.
	 */
	nextItem(obj: PreflightRule): PreflightRule

	/**
	 * Returns the PreflightRule with the index previous to the specified index.
	 * @param obj The index of the PreflightRule that follows the desired PreflightRule.
	 */
	previousItem(obj: PreflightRule): PreflightRule

	/**
	 * Generates a string which, if executed, will return the PreflightRule.
	 */
	toSource(): string

}

/**
 * A preflight rule data object.
 */
declare class RuleDataObject {
	/**
	 * The type of data.
	 */
	dataType: RuleDataType

	/**
	 * The value for this data object. Can return: String, Real, Long Integer, Short Integer, Boolean, Object or Array of Strings, Reals, Long Integers, Short Integers, Booleans, Objects or Arrays of Array of Arrays of Array of Strings, Reals, Long Integers, Short Integers, Booleans or Objects.
	 */
	dataValue: any

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The ID for this rule data object.
	 */
	id: string

	/**
	 * The index of the RuleDataObject within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the RuleDataObject.
	 */
	name: string

	/**
	 * The parent of the RuleDataObject (a PreflightProfileRule or PreflightRuleInstance).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): RuleDataObject[]

	/**
	 * Deletes the RuleDataObject.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the RuleDataObject.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of prefight rule data objects.
 */
declare class RuleDataObjects {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the RuleDataObject with the specified index.
	 * @param index The index.
	 */
	[index: number]: RuleDataObject

	/**
	 * Add a new preflight rule data to a preflight profile rule.
	 * @param name The name of the rule data to add
	 * @param dataType The type of data
	 * @param dataValue The value of data. Can accept: String, Real, Long Integer, Short Integer, Boolean, Object or Array of Strings, Reals, Long Integers, Short Integers, Booleans, Objects or Arrays of Array of Arrays of Array of Strings, Reals, Long Integers, Short Integers, Booleans or Objects.
	 * @param withProperties Initial values for properties of the new RuleDataObject
	 */
	add(name: string, dataType: RuleDataType, dataValue: any, withProperties: object): RuleDataObject

	/**
	 * Returns any RuleDataObject in the collection.
	 */
	anyItem(): RuleDataObject

	/**
	 * Displays the number of elements in the RuleDataObject.
	 */
	count(): number

	/**
	 * Returns every RuleDataObject in the collection.
	 */
	everyItem(): RuleDataObject[]

	/**
	 * Returns the first RuleDataObject in the collection.
	 */
	firstItem(): RuleDataObject

	/**
	 * Returns the RuleDataObject with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RuleDataObject

	/**
	 * Returns the RuleDataObject with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RuleDataObject

	/**
	 * Returns the RuleDataObject with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): RuleDataObject

	/**
	 * Returns the RuleDataObjects within the specified range.
	 * @param from The RuleDataObject, index, or name at the beginning of the range.
	 * @param to The RuleDataObject, index, or name at the end of the range.
	 */
	itemByRange(from: RuleDataObject | number | string, to: RuleDataObject | number | string): RuleDataObject[]

	/**
	 * Returns the last RuleDataObject in the collection.
	 */
	lastItem(): RuleDataObject

	/**
	 * Returns the middle RuleDataObject in the collection.
	 */
	middleItem(): RuleDataObject

	/**
	 * Returns the RuleDataObject whose index follows the specified RuleDataObject in the collection.
	 * @param obj The RuleDataObject whose index comes before the desired RuleDataObject.
	 */
	nextItem(obj: RuleDataObject): RuleDataObject

	/**
	 * Returns the RuleDataObject with the index previous to the specified index.
	 * @param obj The index of the RuleDataObject that follows the desired RuleDataObject.
	 */
	previousItem(obj: RuleDataObject): RuleDataObject

	/**
	 * Generates a string which, if executed, will return the RuleDataObject.
	 */
	toSource(): string

}

/**
 * A preflight rule instance.
 */
declare class PreflightRuleInstance extends PreflightProfileRule {
}

/**
 * A collection of preflight rule instances.
 */
declare class PreflightRuleInstances {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PreflightRuleInstance with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightRuleInstance

	/**
	 * Adds a new preflight rule to the profile.
	 * @param id The ID of the rule to be added
	 * @param withProperties Initial values for properties of the new PreflightRuleInstance
	 */
	add(id: string, withProperties: object): any

	/**
	 * Returns any PreflightRuleInstance in the collection.
	 */
	anyItem(): PreflightRuleInstance

	/**
	 * Displays the number of elements in the PreflightRuleInstance.
	 */
	count(): number

	/**
	 * Returns every PreflightRuleInstance in the collection.
	 */
	everyItem(): PreflightRuleInstance[]

	/**
	 * Returns the first PreflightRuleInstance in the collection.
	 */
	firstItem(): PreflightRuleInstance

	/**
	 * Returns the PreflightRuleInstance with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightRuleInstance

	/**
	 * Returns the PreflightRuleInstance with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PreflightRuleInstance

	/**
	 * Returns the PreflightRuleInstance with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PreflightRuleInstance

	/**
	 * Returns the PreflightRuleInstances within the specified range.
	 * @param from The PreflightRuleInstance, index, or name at the beginning of the range.
	 * @param to The PreflightRuleInstance, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightRuleInstance | number | string, to: PreflightRuleInstance | number | string): PreflightRuleInstance[]

	/**
	 * Returns the last PreflightRuleInstance in the collection.
	 */
	lastItem(): PreflightRuleInstance

	/**
	 * Returns the middle PreflightRuleInstance in the collection.
	 */
	middleItem(): PreflightRuleInstance

	/**
	 * Returns the PreflightRuleInstance whose index follows the specified PreflightRuleInstance in the collection.
	 * @param obj The PreflightRuleInstance whose index comes before the desired PreflightRuleInstance.
	 */
	nextItem(obj: PreflightRuleInstance): PreflightRuleInstance

	/**
	 * Returns the PreflightRuleInstance with the index previous to the specified index.
	 * @param obj The index of the PreflightRuleInstance that follows the desired PreflightRuleInstance.
	 */
	previousItem(obj: PreflightRuleInstance): PreflightRuleInstance

	/**
	 * Generates a string which, if executed, will return the PreflightRuleInstance.
	 */
	toSource(): string

}

/**
 * A preflight profile.
 */
declare class PreflightProfile {
	/**
	 * The description of the PreflightProfile.
	 */
	description: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the PreflightProfile.
	 */
	id: number

	/**
	 * The index of the PreflightProfile within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the PreflightProfile.
	 */
	name: string

	/**
	 * The parent of the PreflightProfile (a Application or Document).
	 */
	parent: any

	/**
	 * A collection of preflight profile rules.
	 */
	preflightProfileRules: PreflightProfileRules

	/**
	 * A collection of preflight rule instances.
	 */
	preflightRuleInstances: PreflightRuleInstances

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the PreflightProfile.
	 */
	duplicate(): PreflightProfile

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PreflightProfile[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the PreflightProfile.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Saves this preflight profile to a InDesign preflight profile file.
	 * @param to The preflight profile file to save to.
	 */
	save(to: File): void

	/**
	 * Generates a string which, if executed, will return the PreflightProfile.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Unembed this profile.
	 */
	unembed(): void

	/**
	 * Update the preflight profile by copying from another profile.
	 * @param using The preflight profile to copy.
	 */
	update(using: string | PreflightProfile): void

}

/**
 * A collection of preflight profiles.
 */
declare class PreflightProfiles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PreflightProfile with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightProfile

	/**
	 * Creates a new PreflightProfile.
	 * @param withProperties Initial values for properties of the new PreflightProfile
	 */
	add(withProperties: object): PreflightProfile

	/**
	 * Returns any PreflightProfile in the collection.
	 */
	anyItem(): PreflightProfile

	/**
	 * Displays the number of elements in the PreflightProfile.
	 */
	count(): number

	/**
	 * Returns every PreflightProfile in the collection.
	 */
	everyItem(): PreflightProfile[]

	/**
	 * Returns the first PreflightProfile in the collection.
	 */
	firstItem(): PreflightProfile

	/**
	 * Returns the PreflightProfile with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightProfile

	/**
	 * Returns the PreflightProfile with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PreflightProfile

	/**
	 * Returns the PreflightProfile with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PreflightProfile

	/**
	 * Returns the PreflightProfiles within the specified range.
	 * @param from The PreflightProfile, index, or name at the beginning of the range.
	 * @param to The PreflightProfile, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightProfile | number | string, to: PreflightProfile | number | string): PreflightProfile[]

	/**
	 * Returns the last PreflightProfile in the collection.
	 */
	lastItem(): PreflightProfile

	/**
	 * Returns the middle PreflightProfile in the collection.
	 */
	middleItem(): PreflightProfile

	/**
	 * Returns the PreflightProfile whose index follows the specified PreflightProfile in the collection.
	 * @param obj The PreflightProfile whose index comes before the desired PreflightProfile.
	 */
	nextItem(obj: PreflightProfile): PreflightProfile

	/**
	 * Returns the PreflightProfile with the index previous to the specified index.
	 * @param obj The index of the PreflightProfile that follows the desired PreflightProfile.
	 */
	previousItem(obj: PreflightProfile): PreflightProfile

	/**
	 * Generates a string which, if executed, will return the PreflightProfile.
	 */
	toSource(): string

}

/**
 * An active preflight process.
 */
declare class PreflightProcess {
	/**
	 * The aggregated results found by the process. Can return: Ordered array containing documentName:String, profileName:String, results:Array of Ordered array containing parentNodeID:Long Integer, errorName:String, pageNumber:String, errorInfo:String, errorDetail:Array of Ordered array containing label:String, description:String.
	 */
	aggregatedResults: any

	/**
	 * The preflight profile the process is using.
	 */
	appliedProfile: PreflightProfile

	/**
	 * The description of the PreflightProcess.
	 */
	description: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the PreflightProcess within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the PreflightProcess (a Application).
	 */
	parent: Application

	/**
	 * A string containing a description of all elements visited by the process.
	 */
	processInventory: string

	/**
	 * The results found by the process as a large string.
	 */
	processResults: string

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The target document the process is inspecting.
	 */
	targetObject: Document

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PreflightProcess[]

	/**
	 * Deletes the PreflightProcess.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Saves a report of the completed preflight process.
	 * @param to The preflight report to save to.
	 * @param autoOpen If true, automatically open the report after creation.
	 */
	saveReport(to: File, autoOpen?: boolean): void

	/**
	 * Generates a string which, if executed, will return the PreflightProcess.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Waits for the process to finish, up to an optional maximum amount of time. No other processes get cycles during this time.
	 * @param waitTime The maximum time to wait, in seconds; if omitted, waits until completion no matter how long it takes.
	 */
	waitForProcess(waitTime: number): boolean

}

/**
 * A collection of preflight processes.
 */
declare class PreflightProcesses {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PreflightProcess with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightProcess

	/**
	 * Adds a new preflight process.
	 * @param targetObject The document the process should inspect.
	 * @param appliedProfile The preflight profile that should be used.
	 * @param preflightOptions The preflight options that should be used.
	 * @param withProperties Initial values for properties of the new PreflightProcess
	 */
	add(targetObject: Document, appliedProfile: PreflightProfile, preflightOptions: PreflightOption, withProperties: object): PreflightProcess

	/**
	 * Returns any PreflightProcess in the collection.
	 */
	anyItem(): PreflightProcess

	/**
	 * Displays the number of elements in the PreflightProcess.
	 */
	count(): number

	/**
	 * Returns every PreflightProcess in the collection.
	 */
	everyItem(): PreflightProcess[]

	/**
	 * Returns the first PreflightProcess in the collection.
	 */
	firstItem(): PreflightProcess

	/**
	 * Returns the PreflightProcess with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightProcess

	/**
	 * Returns the PreflightProcesses within the specified range.
	 * @param from The PreflightProcess, index, or name at the beginning of the range.
	 * @param to The PreflightProcess, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightProcess | number | string, to: PreflightProcess | number | string): PreflightProcess[]

	/**
	 * Returns the last PreflightProcess in the collection.
	 */
	lastItem(): PreflightProcess

	/**
	 * Returns the middle PreflightProcess in the collection.
	 */
	middleItem(): PreflightProcess

	/**
	 * Returns the PreflightProcess whose index follows the specified PreflightProcess in the collection.
	 * @param obj The PreflightProcess whose index comes before the desired PreflightProcess.
	 */
	nextItem(obj: PreflightProcess): PreflightProcess

	/**
	 * Returns the PreflightProcess with the index previous to the specified index.
	 * @param obj The index of the PreflightProcess that follows the desired PreflightProcess.
	 */
	previousItem(obj: PreflightProcess): PreflightProcess

	/**
	 * Generates a string which, if executed, will return the PreflightProcess.
	 */
	toSource(): string

}

/**
 * A preflight profile rule.
 */
declare class PreflightProfileRule {
	/**
	 * The description of the PreflightProfileRule.
	 */
	description: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * Indicates whether or not the preflight rule is disabled, set for error, warning, or information level feedback.
	 */
	flag: PreflightRuleFlag

	/**
	 * The rule ID for this rule.
	 */
	id: string

	/**
	 * The index of the PreflightProfileRule within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the PreflightProfileRule.
	 */
	name: string

	/**
	 * The parent of the PreflightProfileRule (a PreflightProfile).
	 */
	parent: PreflightProfile

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of prefight rule data objects.
	 */
	ruleDataObjects: RuleDataObjects

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): PreflightProfileRule[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the PreflightProfileRule.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the PreflightProfileRule.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of preflight profile rules.
 */
declare class PreflightProfileRules {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PreflightProfileRule with the specified index.
	 * @param index The index.
	 */
	[index: number]: PreflightProfileRule

	/**
	 * Adds a new preflight rule to the profile.
	 * @param id The ID of the rule to be added
	 * @param withProperties Initial values for properties of the new PreflightProfileRule
	 */
	add(id: string, withProperties: object): any

	/**
	 * Returns any PreflightProfileRule in the collection.
	 */
	anyItem(): PreflightProfileRule

	/**
	 * Displays the number of elements in the PreflightProfileRule.
	 */
	count(): number

	/**
	 * Returns every PreflightProfileRule in the collection.
	 */
	everyItem(): PreflightProfileRule[]

	/**
	 * Returns the first PreflightProfileRule in the collection.
	 */
	firstItem(): PreflightProfileRule

	/**
	 * Returns the PreflightProfileRule with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PreflightProfileRule

	/**
	 * Returns the PreflightProfileRule with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PreflightProfileRule

	/**
	 * Returns the PreflightProfileRule with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): PreflightProfileRule

	/**
	 * Returns the PreflightProfileRules within the specified range.
	 * @param from The PreflightProfileRule, index, or name at the beginning of the range.
	 * @param to The PreflightProfileRule, index, or name at the end of the range.
	 */
	itemByRange(from: PreflightProfileRule | number | string, to: PreflightProfileRule | number | string): PreflightProfileRule[]

	/**
	 * Returns the last PreflightProfileRule in the collection.
	 */
	lastItem(): PreflightProfileRule

	/**
	 * Returns the middle PreflightProfileRule in the collection.
	 */
	middleItem(): PreflightProfileRule

	/**
	 * Returns the PreflightProfileRule whose index follows the specified PreflightProfileRule in the collection.
	 * @param obj The PreflightProfileRule whose index comes before the desired PreflightProfileRule.
	 */
	nextItem(obj: PreflightProfileRule): PreflightProfileRule

	/**
	 * Returns the PreflightProfileRule with the index previous to the specified index.
	 * @param obj The index of the PreflightProfileRule that follows the desired PreflightProfileRule.
	 */
	previousItem(obj: PreflightProfileRule): PreflightProfileRule

	/**
	 * Generates a string which, if executed, will return the PreflightProfileRule.
	 */
	toSource(): string

}

/**
 * A stroke style.
 */
declare class StrokeStyle {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the StrokeStyle.
	 */
	id: number

	/**
	 * The index of the StrokeStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the StrokeStyle.
	 */
	name: string

	/**
	 * The parent of the StrokeStyle (a Document or Application).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The stroke style type.
	 */
	strokeStyleType: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the StrokeStyle.
	 */
	duplicate(): StrokeStyle

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): StrokeStyle[]

	/**
	 * Deletes the stroke style.
	 * @param replacingWith The stroke style to apply in place of the deleted style. .
	 */
	remove(replacingWith: StrokeStyle | string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the StrokeStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of stroke styles.
 */
declare class StrokeStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the StrokeStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: StrokeStyle

	/**
	 * Returns any StrokeStyle in the collection.
	 */
	anyItem(): StrokeStyle

	/**
	 * Displays the number of elements in the StrokeStyle.
	 */
	count(): number

	/**
	 * Returns every StrokeStyle in the collection.
	 */
	everyItem(): StrokeStyle[]

	/**
	 * Returns the first StrokeStyle in the collection.
	 */
	firstItem(): StrokeStyle

	/**
	 * Returns the StrokeStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StrokeStyle

	/**
	 * Returns the StrokeStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): StrokeStyle

	/**
	 * Returns the StrokeStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): StrokeStyle

	/**
	 * Returns the StrokeStyles within the specified range.
	 * @param from The StrokeStyle, index, or name at the beginning of the range.
	 * @param to The StrokeStyle, index, or name at the end of the range.
	 */
	itemByRange(from: StrokeStyle | number | string, to: StrokeStyle | number | string): StrokeStyle[]

	/**
	 * Returns the last StrokeStyle in the collection.
	 */
	lastItem(): StrokeStyle

	/**
	 * Returns the middle StrokeStyle in the collection.
	 */
	middleItem(): StrokeStyle

	/**
	 * Returns the StrokeStyle whose index follows the specified StrokeStyle in the collection.
	 * @param obj The StrokeStyle whose index comes before the desired StrokeStyle.
	 */
	nextItem(obj: StrokeStyle): StrokeStyle

	/**
	 * Returns the StrokeStyle with the index previous to the specified index.
	 * @param obj The index of the StrokeStyle that follows the desired StrokeStyle.
	 */
	previousItem(obj: StrokeStyle): StrokeStyle

	/**
	 * Generates a string which, if executed, will return the StrokeStyle.
	 */
	toSource(): string

}

/**
 * A dashed stroke style.
 */
declare class DashedStrokeStyle extends StrokeStyle {
	/**
	 * The pattern of dashes and gaps, in the format [dash length1, gap length1, dash length2, gap length2]. Define up to ten values.
	 */
	dashArray: (number | string)[]

	/**
	 * The end shape of an open path.
	 */
	endCap: EndCap

	/**
	 * The corner adjustment applied to the DashedStrokeStyle.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment

}

/**
 * A collection of dashed stroke styles.
 */
declare class DashedStrokeStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DashedStrokeStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: DashedStrokeStyle

	/**
	 * Creates a new DashedStrokeStyle.
	 * @param withProperties Initial values for properties of the new DashedStrokeStyle
	 */
	add(withProperties: object): DashedStrokeStyle

	/**
	 * Returns any DashedStrokeStyle in the collection.
	 */
	anyItem(): DashedStrokeStyle

	/**
	 * Displays the number of elements in the DashedStrokeStyle.
	 */
	count(): number

	/**
	 * Returns every DashedStrokeStyle in the collection.
	 */
	everyItem(): DashedStrokeStyle[]

	/**
	 * Returns the first DashedStrokeStyle in the collection.
	 */
	firstItem(): DashedStrokeStyle

	/**
	 * Returns the DashedStrokeStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DashedStrokeStyle

	/**
	 * Returns the DashedStrokeStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DashedStrokeStyle

	/**
	 * Returns the DashedStrokeStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): DashedStrokeStyle

	/**
	 * Returns the DashedStrokeStyles within the specified range.
	 * @param from The DashedStrokeStyle, index, or name at the beginning of the range.
	 * @param to The DashedStrokeStyle, index, or name at the end of the range.
	 */
	itemByRange(from: DashedStrokeStyle | number | string, to: DashedStrokeStyle | number | string): DashedStrokeStyle[]

	/**
	 * Returns the last DashedStrokeStyle in the collection.
	 */
	lastItem(): DashedStrokeStyle

	/**
	 * Returns the middle DashedStrokeStyle in the collection.
	 */
	middleItem(): DashedStrokeStyle

	/**
	 * Returns the DashedStrokeStyle whose index follows the specified DashedStrokeStyle in the collection.
	 * @param obj The DashedStrokeStyle whose index comes before the desired DashedStrokeStyle.
	 */
	nextItem(obj: DashedStrokeStyle): DashedStrokeStyle

	/**
	 * Returns the DashedStrokeStyle with the index previous to the specified index.
	 * @param obj The index of the DashedStrokeStyle that follows the desired DashedStrokeStyle.
	 */
	previousItem(obj: DashedStrokeStyle): DashedStrokeStyle

	/**
	 * Generates a string which, if executed, will return the DashedStrokeStyle.
	 */
	toSource(): string

}

/**
 * A dotted stroke style.
 */
declare class DottedStrokeStyle extends StrokeStyle {
	/**
	 * The length of gaps between dots. Define up to five values.
	 */
	dotArray: (number | string)[]

	/**
	 * The corner adjustment applied to the DottedStrokeStyle.
	 */
	strokeCornerAdjustment: StrokeCornerAdjustment

}

/**
 * A collection of dotted stroke styles.
 */
declare class DottedStrokeStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DottedStrokeStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: DottedStrokeStyle

	/**
	 * Creates a new DottedStrokeStyle.
	 * @param withProperties Initial values for properties of the new DottedStrokeStyle
	 */
	add(withProperties: object): DottedStrokeStyle

	/**
	 * Returns any DottedStrokeStyle in the collection.
	 */
	anyItem(): DottedStrokeStyle

	/**
	 * Displays the number of elements in the DottedStrokeStyle.
	 */
	count(): number

	/**
	 * Returns every DottedStrokeStyle in the collection.
	 */
	everyItem(): DottedStrokeStyle[]

	/**
	 * Returns the first DottedStrokeStyle in the collection.
	 */
	firstItem(): DottedStrokeStyle

	/**
	 * Returns the DottedStrokeStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DottedStrokeStyle

	/**
	 * Returns the DottedStrokeStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DottedStrokeStyle

	/**
	 * Returns the DottedStrokeStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): DottedStrokeStyle

	/**
	 * Returns the DottedStrokeStyles within the specified range.
	 * @param from The DottedStrokeStyle, index, or name at the beginning of the range.
	 * @param to The DottedStrokeStyle, index, or name at the end of the range.
	 */
	itemByRange(from: DottedStrokeStyle | number | string, to: DottedStrokeStyle | number | string): DottedStrokeStyle[]

	/**
	 * Returns the last DottedStrokeStyle in the collection.
	 */
	lastItem(): DottedStrokeStyle

	/**
	 * Returns the middle DottedStrokeStyle in the collection.
	 */
	middleItem(): DottedStrokeStyle

	/**
	 * Returns the DottedStrokeStyle whose index follows the specified DottedStrokeStyle in the collection.
	 * @param obj The DottedStrokeStyle whose index comes before the desired DottedStrokeStyle.
	 */
	nextItem(obj: DottedStrokeStyle): DottedStrokeStyle

	/**
	 * Returns the DottedStrokeStyle with the index previous to the specified index.
	 * @param obj The index of the DottedStrokeStyle that follows the desired DottedStrokeStyle.
	 */
	previousItem(obj: DottedStrokeStyle): DottedStrokeStyle

	/**
	 * Generates a string which, if executed, will return the DottedStrokeStyle.
	 */
	toSource(): string

}

/**
 * A striped stroke style.
 */
declare class StripedStrokeStyle extends StrokeStyle {
	/**
	 * The width and position of stripes in a striped stroke pattern. Each stripe is specified by a start-end pair in the format [start1, end1, start2, end2]; each value indicates a percentage of the stroke weight. Each value must be greater than the previous value. (Range: 0 to 100).
	 */
	stripeArray: number[]

}

/**
 * A collection of striped stroke styles.
 */
declare class StripedStrokeStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the StripedStrokeStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: StripedStrokeStyle

	/**
	 * Creates a new StripedStrokeStyle.
	 * @param withProperties Initial values for properties of the new StripedStrokeStyle
	 */
	add(withProperties: object): StripedStrokeStyle

	/**
	 * Returns any StripedStrokeStyle in the collection.
	 */
	anyItem(): StripedStrokeStyle

	/**
	 * Displays the number of elements in the StripedStrokeStyle.
	 */
	count(): number

	/**
	 * Returns every StripedStrokeStyle in the collection.
	 */
	everyItem(): StripedStrokeStyle[]

	/**
	 * Returns the first StripedStrokeStyle in the collection.
	 */
	firstItem(): StripedStrokeStyle

	/**
	 * Returns the StripedStrokeStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StripedStrokeStyle

	/**
	 * Returns the StripedStrokeStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): StripedStrokeStyle

	/**
	 * Returns the StripedStrokeStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): StripedStrokeStyle

	/**
	 * Returns the StripedStrokeStyles within the specified range.
	 * @param from The StripedStrokeStyle, index, or name at the beginning of the range.
	 * @param to The StripedStrokeStyle, index, or name at the end of the range.
	 */
	itemByRange(from: StripedStrokeStyle | number | string, to: StripedStrokeStyle | number | string): StripedStrokeStyle[]

	/**
	 * Returns the last StripedStrokeStyle in the collection.
	 */
	lastItem(): StripedStrokeStyle

	/**
	 * Returns the middle StripedStrokeStyle in the collection.
	 */
	middleItem(): StripedStrokeStyle

	/**
	 * Returns the StripedStrokeStyle whose index follows the specified StripedStrokeStyle in the collection.
	 * @param obj The StripedStrokeStyle whose index comes before the desired StripedStrokeStyle.
	 */
	nextItem(obj: StripedStrokeStyle): StripedStrokeStyle

	/**
	 * Returns the StripedStrokeStyle with the index previous to the specified index.
	 * @param obj The index of the StripedStrokeStyle that follows the desired StripedStrokeStyle.
	 */
	previousItem(obj: StripedStrokeStyle): StripedStrokeStyle

	/**
	 * Generates a string which, if executed, will return the StripedStrokeStyle.
	 */
	toSource(): string

}

/**
 * A TOC style definition.
 */
declare class TOCStyle {
	/**
	 * If true, creates bookmarks for TOC entries.
	 */
	createBookmarks: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the TOCStyle.
	 */
	id: number

	/**
	 * If true, includes the entire book in the TOC. If false, includes only the TOC entries in the current document. Note: Valid when the current document is part of a book.
	 */
	includeBookDocuments: boolean

	/**
	 * If true, the TOC includes entries from text on hidden layers.
	 */
	includeHidden: boolean

	/**
	 * The index of the TOCStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * If true, make text anchor in source paragraph.
	 */
	makeAnchor: boolean

	/**
	 * The name of the TOCStyle.
	 */
	name: string

	/**
	 * The format for importing numbered paragraphs into the TOC.
	 */
	numberedParagraphs: NumberedParagraphsOptions

	/**
	 * The parent of the TOCStyle (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * If true, remove forced line breaks.
	 */
	removeForcedLineBreak: boolean

	/**
	 * If true, the lowest-level TOC entries are placed on the same line as the previous entry.
	 */
	runIn: boolean

	/**
	 * The table of contents story direction.
	 */
	setStoryDirection: HorizontalOrVertical

	/**
	 * The TOC title.
	 */
	title: string

	/**
	 * The paragraph style applied to the TOC title.
	 */
	titleStyle: ParagraphStyle

	/**
	 * A collection TOC style entries.
	 */
	tocStyleEntries: TOCStyleEntries

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the TOCStyle.
	 */
	duplicate(): TOCStyle

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TOCStyle[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the TOCStyle.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TOCStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of TOC styles.
 */
declare class TOCStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TOCStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: TOCStyle

	/**
	 * Creates a new TOCStyle.
	 * @param withProperties Initial values for properties of the new TOCStyle
	 */
	add(withProperties: object): TOCStyle

	/**
	 * Returns any TOCStyle in the collection.
	 */
	anyItem(): TOCStyle

	/**
	 * Displays the number of elements in the TOCStyle.
	 */
	count(): number

	/**
	 * Returns every TOCStyle in the collection.
	 */
	everyItem(): TOCStyle[]

	/**
	 * Returns the first TOCStyle in the collection.
	 */
	firstItem(): TOCStyle

	/**
	 * Returns the TOCStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TOCStyle

	/**
	 * Returns the TOCStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TOCStyle

	/**
	 * Returns the TOCStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TOCStyle

	/**
	 * Returns the TOCStyles within the specified range.
	 * @param from The TOCStyle, index, or name at the beginning of the range.
	 * @param to The TOCStyle, index, or name at the end of the range.
	 */
	itemByRange(from: TOCStyle | number | string, to: TOCStyle | number | string): TOCStyle[]

	/**
	 * Returns the last TOCStyle in the collection.
	 */
	lastItem(): TOCStyle

	/**
	 * Returns the middle TOCStyle in the collection.
	 */
	middleItem(): TOCStyle

	/**
	 * Returns the TOCStyle whose index follows the specified TOCStyle in the collection.
	 * @param obj The TOCStyle whose index comes before the desired TOCStyle.
	 */
	nextItem(obj: TOCStyle): TOCStyle

	/**
	 * Returns the TOCStyle with the index previous to the specified index.
	 * @param obj The index of the TOCStyle that follows the desired TOCStyle.
	 */
	previousItem(obj: TOCStyle): TOCStyle

	/**
	 * Generates a string which, if executed, will return the TOCStyle.
	 */
	toSource(): string

}

/**
 * A TOC entry definition.
 */
declare class TOCStyleEntry {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The paragraph style applied to the TOC entry.
	 */
	formatStyle: ParagraphStyle | string

	/**
	 * The index of the TOCStyleEntry within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The indent level of the entry in the TOC.
	 */
	level: number

	/**
	 * The name of the TOCStyleEntry.
	 */
	name: string

	/**
	 * The page number placement for the TOC entry style.
	 */
	pageNumberPosition: PageNumberPosition

	/**
	 * The character style applied to the page number of the entry.
	 */
	pageNumberStyle: CharacterStyle | string

	/**
	 * The parent of the TOCStyleEntry (a TOCStyle).
	 */
	parent: TOCStyle

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The string to insert between the entry text and the page numbers.
	 */
	separator: string

	/**
	 * The character style applied to the string separating the TOC entry text and the page numbers.
	 */
	separatorStyle: CharacterStyle | string

	/**
	 * If true, sorts the entries alphabetically.
	 */
	sortAlphabet: boolean

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TOCStyleEntry[]

	/**
	 * Deletes the TOCStyleEntry.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TOCStyleEntry.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection TOC style entries.
 */
declare class TOCStyleEntries {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TOCStyleEntry with the specified index.
	 * @param index The index.
	 */
	[index: number]: TOCStyleEntry

	/**
	 * Adds a TOC style entry.
	 * @param styleName The paragraph style to include as TOC entries in the TOC.
	 * @param withProperties Initial values for properties of the new TOCStyleEntry
	 */
	add(styleName: string, withProperties: object): TOCStyleEntry

	/**
	 * Returns any TOCStyleEntry in the collection.
	 */
	anyItem(): TOCStyleEntry

	/**
	 * Displays the number of elements in the TOCStyleEntry.
	 */
	count(): number

	/**
	 * Returns every TOCStyleEntry in the collection.
	 */
	everyItem(): TOCStyleEntry[]

	/**
	 * Returns the first TOCStyleEntry in the collection.
	 */
	firstItem(): TOCStyleEntry

	/**
	 * Returns the TOCStyleEntry with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TOCStyleEntry

	/**
	 * Returns the TOCStyleEntry with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TOCStyleEntry

	/**
	 * Returns the TOCStyleEntries within the specified range.
	 * @param from The TOCStyleEntry, index, or name at the beginning of the range.
	 * @param to The TOCStyleEntry, index, or name at the end of the range.
	 */
	itemByRange(from: TOCStyleEntry | number | string, to: TOCStyleEntry | number | string): TOCStyleEntry[]

	/**
	 * Returns the last TOCStyleEntry in the collection.
	 */
	lastItem(): TOCStyleEntry

	/**
	 * Returns the middle TOCStyleEntry in the collection.
	 */
	middleItem(): TOCStyleEntry

	/**
	 * Returns the TOCStyleEntry whose index follows the specified TOCStyleEntry in the collection.
	 * @param obj The TOCStyleEntry whose index comes before the desired TOCStyleEntry.
	 */
	nextItem(obj: TOCStyleEntry): TOCStyleEntry

	/**
	 * Returns the TOCStyleEntry with the index previous to the specified index.
	 * @param obj The index of the TOCStyleEntry that follows the desired TOCStyleEntry.
	 */
	previousItem(obj: TOCStyleEntry): TOCStyleEntry

	/**
	 * Generates a string which, if executed, will return the TOCStyleEntry.
	 */
	toSource(): string

}

/**
 * A table cell.
 */
declare class Cell {
	/**
	 * Lists all graphics contained by the Cell.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the Cell.
	 */
	allPageItems: PageItem[]

	/**
	 * The cell style applied to the cell.
	 */
	appliedCellStyle: CellStyle | string

	/**
	 * The XML element associated with the Cell.
	 */
	associatedXMLElement: XMLItem

	/**
	 * If true, the height of the cell or the cells in the Cell can increase or decrease automatically to fit cell content. Note: Allows cells to grow or shrink to the maximum or minimum height, if specified.
	 */
	autoGrow: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number

	/**
	 * If true, the bottom edge border stroke will overprint.
	 */
	bottomEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number

	/**
	 * The stroke type of the bottom edge.
	 */
	bottomEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the bottom edge border stroke.
	 */
	bottomEdgeStrokeWeight: number | string

	/**
	 * The bottom inset of the cell.The API has been deprecated. Use TextBottomInset or GraphicBottomInset
	 */
	bottomInset: number | string

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * The content type of cell.
	 */
	cellType: CellTypeEnum

	/**
	 * A collection of table cells.
	 */
	cells: Cells

	/**
	 * A collection of changes.
	 */
	changes: Changes

	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * If true, clips the cell's content to width and height of the cell. The API has been deprecated. Use ClipContentsToTextCell or ClipContentsToPageItemCell
	 */
	clipContentToCell: boolean

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean

	/**
	 * The number of columns that the object spans.
	 */
	columnSpan: number

	/**
	 * A collection of table columns.
	 */
	columns: Columns

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * The text contents. For rows or columns, when specified as a string, the sting populates each cell in the row or column; when specified as an array, the first value in the array populates the left-most cell in the row or the top-most cell in the column; the next value populates the next cell to the right (for rows) or the next lowest cell (for columns), and so on.
	 */
	contents: PageItem | string | SpecialCharacters | string[] | PageItems | NothingEnum

	/**
	 * If true, draws the diagonal line in front of cell contents.
	 */
	diagonalLineInFront: boolean

	/**
	 * The diagonal line color, specified as a swatch.
	 */
	diagonalLineStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch

	/**
	 * If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapTint: number

	/**
	 * If true, the diagonal line stroke will overprint.
	 */
	diagonalLineStrokeOverprint: boolean

	/**
	 * The diagonal line tint (as a percentage). (Range: 0 to 100)
	 */
	diagonalLineStrokeTint: number

	/**
	 * The stroke type of the diagonal line(s).
	 */
	diagonalLineStrokeType: StrokeStyle | string

	/**
	 * The diagonal line stroke weight.
	 */
	diagonalLineStrokeWeight: number | string

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * A collection of endnotes.
	 */
	endnotes: Endnotes

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the object.
	 */
	fillColor: Swatch | string

	/**
	 * The tint (as a percentage) of the fill of the object.
	 */
	fillTint: number

	/**
	 * The distance between the baseline of the text and the top inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline

	/**
	 * A collection of footnotes.
	 */
	footnotes: Footnotes

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * The angle of a linear gradient applied to the fill of the object. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The length (of a linear gradient) or radius (of a radial gradient) applied to the fill of the object.
	 */
	gradientFillLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the Cell, in the format [x, y].
	 */
	gradientFillStart: (number | string)[]

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * The height of the Cell. For a table or column, specifies the sum of the row heights.
	 */
	height: number | string

	/**
	 * A collection of hidden text objects.
	 */
	hiddenTexts: HiddenTexts

	/**
	 * The unique ID of the Cell.
	 */
	id: number

	/**
	 * The index of the Cell within its containing object.
	 */
	index: number

	/**
	 * The color, specified as a swatch, of the inner column border stroke.
	 */
	innerColumnStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner column border stroke. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the inner column border stroke will overprint. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner column border stroke gap color. (Range: 0 to 100) Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapTint: number

	/**
	 * If true, the inner column border stroke will overprint.
	 */
	innerColumnStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner column border stroke. (Range: 0 to 100)
	 */
	innerColumnStrokeTint: number

	/**
	 * The stroke type of the inner column.
	 */
	innerColumnStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the inner column border stroke.
	 */
	innerColumnStrokeWeight: number | string

	/**
	 * The color, specified as a swatch, of the inner row border stroke.
	 */
	innerRowStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner row border stroke. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the inner row border stroke will overprint. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100) Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapTint: number

	/**
	 * If true, the inner row border stroke will overprint.
	 */
	innerRowStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100)
	 */
	innerRowStrokeTint: number

	/**
	 * The stroke type of the inner row.
	 */
	innerRowStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the inner row border strokes.
	 */
	innerRowStrokeWeight: number | string

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * If true, keeps the row with the next row when the table is split across text frames or pages.
	 */
	keepWithNextRow: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number

	/**
	 * If true, the left edge border stroke will overprint.
	 */
	leftEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the left edge border stroke. (Range: 0 to 100)
	 */
	leftEdgeStrokeTint: number

	/**
	 * The stroke type of the left edge.
	 */
	leftEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the left edge border stroke.
	 */
	leftEdgeStrokeWeight: number | string

	/**
	 * The left inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicLeftInset
	 */
	leftInset: number | string

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * The maximum height to which cells in the Cell may grow. Note: The maximum height cannot be exceeded even when auto grow is set to true. Also, the maximum height can affect redistribution.
	 */
	maximumHeight: number | string

	/**
	 * The space between the baseline of the text and the top inset of the frame or cell.
	 */
	minimumFirstBaselineOffset: number | string

	/**
	 * The minimum height of the cells in the Cell. Note: When auto grow is true, cells can automatically grow larger than this amount when content is added. Also, the minimum height can affect redistribution.
	 */
	minimumHeight: number | string

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The name of the Cell.
	 */
	name: string

	/**
	 * A collection of notes.
	 */
	notes: Notes

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * If true, the story has overset text.
	 */
	overflows: boolean

	/**
	 * If true, the fill of the object will overprint.
	 */
	overprintFill: boolean

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified.
	 */
	paragraphSpacingLimit: number | string

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The parent of the Cell (a XMLElement, Cell, Table, Column or Row).
	 */
	parent: any

	/**
	 * The parent column of the cell.
	 */
	parentColumn: Column

	/**
	 * The parent row of the cell.
	 */
	parentRow: Row

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * The color, specified as a swatch, of the right edge border stroke.
	 */
	rightEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number

	/**
	 * If true, the right edge border stroke will overprint.
	 */
	rightEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the right edge border stroke. (Range: 0 to 100)
	 */
	rightEdgeStrokeTint: number

	/**
	 * The stroke type of the right edge.
	 */
	rightEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the right edge border stroke.
	 */
	rightEdgeStrokeWeight: number | string

	/**
	 * The right inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicRightInset
	 */
	rightInset: number | string

	/**
	 * The rotation angle (in degrees) of the cell, specified as one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number

	/**
	 * The number of rows that the object spans.
	 */
	rowSpan: number

	/**
	 * The row type.
	 */
	rowType: RowTypes

	/**
	 * A collection of table rows.
	 */
	rows: Rows

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * Indicates where to start the row.
	 */
	startRow: StartParagraph

	/**
	 * A collection of tables.
	 */
	tables: Tables

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string

	/**
	 * A collection of text variable instances.
	 */
	textVariableInstances: TextVariableInstances

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapTint: number

	/**
	 * If true, the top edge border stroke will overprint.
	 */
	topEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the top edge border stroke. (Range: 0 to 100)
	 */
	topEdgeStrokeTint: number

	/**
	 * The stroke type of the top edge.
	 */
	topEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the top edge border stroke.
	 */
	topEdgeStrokeWeight: number | string

	/**
	 * The top inset of the cell. The API has been deprecated. Use TextTopInset or GraphicTopInset
	 */
	topInset: number | string

	/**
	 * If true, draws a diagonal line starting from the top left.
	 */
	topLeftDiagonalLine: boolean

	/**
	 * If true, draws a diagonal line starting from the top right.
	 */
	topRightDiagonalLine: boolean

	/**
	 * The vertical alignment of cell.
	 */
	verticalJustification: VerticalJustification

	/**
	 * The width of the Cell. For a table or row, specifies the sum of the column widths.
	 */
	width: number | string

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * The direction of the text in the cell.
	 */
	writingDirection: HorizontalOrVertical

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Clear Cell Style Overrides
	 * @param clearingOverridesThroughRootCellStyle If true, clears all overrides, whether or not they are defined in the underlying cell style
	 */
	clearCellStyleOverrides(clearingOverridesThroughRootCellStyle?: boolean): void

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void

	/**
	 * Convert cell type. The new cell type parameter is required. Preserve data is optional
	 * @param finalCellType Cell Type to which the cell is to be converted
	 * @param flagToPreserveData If true then the data inside the cell is preserved. While converting graphic cell to text cell, page item becomes inline.
	 */
	convertCellType(finalCellType: CellTypeEnum, flagToPreserveData?: boolean): void

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[]

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Cell[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Merges the cells.
	 * @param with_ The cell(s) to merge with.
	 */
	merge(with_: Cell | Row | Column): Cell

	/**
	 * Recomposes the text in the Cell.
	 */
	recompose(): void

	/**
	 * Deletes the Cell.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Cell in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Splits the cell along the specified axis.
	 * @param using The direction in which to split the cell.
	 */
	split(using: HorizontalOrVertical): void

	/**
	 * Generates a string which, if executed, will return the Cell.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Unmerges all merged cells in the Cell.
	 */
	unmerge(): Cell[]

}

/**
 * A collection of table cells.
 */
declare class Cells {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Cell with the specified index.
	 * @param index The index.
	 */
	[index: number]: Cell

	/**
	 * Returns any Cell in the collection.
	 */
	anyItem(): Cell

	/**
	 * Displays the number of elements in the Cell.
	 */
	count(): number

	/**
	 * Returns every Cell in the collection.
	 */
	everyItem(): Cell[]

	/**
	 * Returns the first Cell in the collection.
	 */
	firstItem(): Cell

	/**
	 * Returns the Cell with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Cell

	/**
	 * Returns the Cell with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Cell

	/**
	 * Returns the Cell with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Cell

	/**
	 * Returns the Cells within the specified range.
	 * @param from The Cell, index, or name at the beginning of the range.
	 * @param to The Cell, index, or name at the end of the range.
	 */
	itemByRange(from: Cell | number | string, to: Cell | number | string): Cell[]

	/**
	 * Returns the last Cell in the collection.
	 */
	lastItem(): Cell

	/**
	 * Returns the middle Cell in the collection.
	 */
	middleItem(): Cell

	/**
	 * Returns the Cell whose index follows the specified Cell in the collection.
	 * @param obj The Cell whose index comes before the desired Cell.
	 */
	nextItem(obj: Cell): Cell

	/**
	 * Returns the Cell with the index previous to the specified index.
	 * @param obj The index of the Cell that follows the desired Cell.
	 */
	previousItem(obj: Cell): Cell

	/**
	 * Generates a string which, if executed, will return the Cell.
	 */
	toSource(): string

}

/**
 * A table.
 */
declare class Table {
	/**
	 * Lists all graphics contained by the Table.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the Table.
	 */
	allPageItems: PageItem[]

	/**
	 * The pattern for alternating fills.
	 */
	alternatingFills: AlternatingFillsTypes

	/**
	 * The table style applied to the table.
	 */
	appliedTableStyle: TableStyle | string

	/**
	 * The XML element associated with the Table.
	 */
	associatedXMLElement: XMLItem

	/**
	 * The number of body rows.
	 */
	bodyRowCount: number

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the bottom border stroke.
	 */
	bottomBorderStrokeColor: Swatch

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the bottom border stroke. Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapColor: Swatch

	/**
	 * If true, the gap of the bottom border stroke will overprint. Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the bottom border stroke. (Range: 0 to 100) Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapTint: number

	/**
	 * If true, the bottom border stroke will overprint.
	 */
	bottomBorderStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the bottom border stroke. (Range: 0 to 100)
	 */
	bottomBorderStrokeTint: number

	/**
	 * The stroke type of the bottom border.
	 */
	bottomBorderStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the bottom border stroke.
	 */
	bottomBorderStrokeWeight: number | string

	/**
	 * The footer placement.
	 */
	breakFooters: HeaderFooterBreakTypes

	/**
	 * The header placement.
	 */
	breakHeaders: HeaderFooterBreakTypes

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of table cells.
	 */
	cells: Cells

	/**
	 * A collection of changes.
	 */
	changes: Changes

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean

	/**
	 * The number of columns.
	 */
	columnCount: number

	/**
	 * If true, hides alternating row fills. If false, hides alternating column fills.
	 */
	columnFillsPriority: boolean

	/**
	 * A collection of table columns.
	 */
	columns: Columns

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * The contents to place in cells, specified as an array whose first item populates the top left cell and whose second item populates the next cell to the right, and so on until each cell in the top row is populated, at which point the next item populates the left-most cell in the second row, and so on. Note: If the array contains fewer strings than the table contains cells, the remaining cells are left blank.
	 */
	contents: string[] | SpecialCharacters | NothingEnum

	/**
	 * If true, then the table will show collapsed in story and galley views.
	 */
	displayCollapsed: boolean

	/**
	 * Specifies the order the table cells will display in when viewing in story and galley views.
	 */
	displayOrder: DisplayOrderOptions

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of columns in the second alternating fill group. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillColor: Swatch

	/**
	 * The number of columns in the second alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillCount: number

	/**
	 * If true, the columns in the second alternating fills group will overprint. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillOverprint: boolean

	/**
	 * The tint (as a percentage) of the columns in the second alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillTint: number

	/**
	 * The stroke type of columns in the second alternating strokes group.
	 */
	endColumnLineStyle: StrokeStyle | string

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeColor: Swatch

	/**
	 * The number of columns in the second alternating column strokes group.
	 */
	endColumnStrokeCount: number

	/**
	 * The stroke gap color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapColor: Swatch

	/**
	 * If true, the gap of the column border stroke in the second alternating column strokes group will overprint. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of column borders in the second alternating column strokes group. (Range: 0 to 100) Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapTint: number

	/**
	 * If true, the column borders in the second alternating column strokes group will overprint. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of column borders in the second alternating column strokes group. (Range: 0 to 100) Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeTint: number

	/**
	 * The stroke weight of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeWeight: number | string

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of rows in the second alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillColor: Swatch

	/**
	 * The number of rows in the second alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillCount: number

	/**
	 * If true, the rows in the second alternating fills group will overprint. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillOverprint: boolean

	/**
	 * The tint (as a percentage) of the rows in the second alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillTint: number

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the second alternating row strokes group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeColor: Swatch

	/**
	 * The number of rows in the second alternating row strokes group.
	 */
	endRowStrokeCount: number

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the second alternating rows group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeGapColor: Swatch

	/**
	 * If true, the gap of the row borders in the second alternating rows group will overprint. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of rows in the second alternating strokes group. (Range: 0 to 100) Note: Valid when end row stroke count is 1 or greater and end row stroke type is not solid.
	 */
	endRowStrokeGapTint: number

	/**
	 * If true, the rows in the second alternating rows group will overprint. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the row borders in the second alternating strokes group. (Range: 0 to 100) Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeTint: number

	/**
	 * The stroke type of rows in the second alternating strokes group.
	 */
	endRowStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of row borders in the second alternating row strokes group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeWeight: number | string

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * A collection of endnotes.
	 */
	endnotes: Endnotes

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The number of footer rows.
	 */
	footerRowCount: number

	/**
	 * A collection of footnotes.
	 */
	footnotes: Footnotes

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * The number of header rows.
	 */
	headerRowCount: number

	/**
	 * The height of the Table. For a table or column, specifies the sum of the row heights.
	 */
	height: number | string

	/**
	 * A collection of hidden text objects.
	 */
	hiddenTexts: HiddenTexts

	/**
	 * The unique ID of the Table.
	 */
	id: number

	/**
	 * The index of the Table within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the left border stroke.
	 */
	leftBorderStrokeColor: Swatch

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the left border stroke. Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapColor: Swatch

	/**
	 * If true, the gap of the left border stroke will overprint. Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the left border stroke. (Range: 0 to 100) Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapTint: number

	/**
	 * If true, the left border stroke will overprint.
	 */
	leftBorderStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the left border stroke. (Range: 0 to 100)
	 */
	leftBorderStrokeTint: number

	/**
	 * The stroke type of the left border.
	 */
	leftBorderStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the left border stroke.
	 */
	leftBorderStrokeWeight: number | string

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The name of the Table; this is an alias to the Table's label property.
	 */
	name: string

	/**
	 * A collection of notes.
	 */
	notes: Notes

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * The parent of the Table (a XmlStory, XMLElement, TextFrame, EndnoteTextFrame, Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, Story or Cell).
	 */
	parent: any

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the right border stroke.
	 */
	rightBorderStrokeColor: Swatch

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the right border stroke. Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the right border stroke will overprint. Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the right border stroke. (Range: 0 to 100) Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapTint: number

	/**
	 * If true, the right border stroke will overprint.
	 */
	rightBorderStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the right border stroke. (Range: 0 to 100)
	 */
	rightBorderStrokeTint: number

	/**
	 * The stroke type of the right border.
	 */
	rightBorderStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the right border stroke.
	 */
	rightBorderStrokeWeight: number | string

	/**
	 * A collection of table rows.
	 */
	rows: Rows

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The number of columns on the left side of the table to skip before applying the column fill color. Note: Valid when alternating fills are defined for table columns.
	 */
	skipFirstAlternatingFillColumns: number

	/**
	 * The number of body rows at the beginning of the table to skip before applying the row fill color. Note: Valid when alternating fills are defined for table rows.
	 */
	skipFirstAlternatingFillRows: number

	/**
	 * The number of columns on the left of the table in which to skip border stroke formatting. Note: Valid when start column stroke count is 1 or greater and/or end column stroke count is 1 or greater.
	 */
	skipFirstAlternatingStrokeColumns: number

	/**
	 * The number of body rows at the beginning of the table in which to skip border stroke formatting. Note: Valid when start row stroke count is 1 or greater and/or end row stroke count is 1 or greater.
	 */
	skipFirstAlternatingStrokeRows: number

	/**
	 * If true, skips the first occurrence of header rows.
	 */
	skipFirstHeader: boolean

	/**
	 * The number columns on the right side of the table in which to not apply the column fill color. Note: Valid when alternating fills are defined for table columns.
	 */
	skipLastAlternatingFillColumns: number

	/**
	 * The number of body rows at the end of the table in which to not apply the row fill color. Note: Valid when alternating fills are defined for table rows.
	 */
	skipLastAlternatingFillRows: number

	/**
	 * The number of columns on the right side of the table in which to skip border stroke formatting. Note: Valid when start column stroke count is 1 or greater and/or end column stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeColumns: number

	/**
	 * The number of body rows at the end of the table in which to skip border stroke formatting. Note: Valid when start row stroke count is 1 or greater and/or end row stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeRows: number

	/**
	 * If true, skips the last occurrence of footer rows.
	 */
	skipLastFooter: boolean

	/**
	 * The space below the table.
	 */
	spaceAfter: number | string

	/**
	 * The space above the table.
	 */
	spaceBefore: number | string

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of columns in the first alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillColor: Swatch

	/**
	 * The number of columns in the first alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillCount: number

	/**
	 * If true, the columns in the first alternating fills group will overprint. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillOverprint: boolean

	/**
	 * The tint (as a percentage) of the columns in the first alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillTint: number

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the first alternating column strokes group.
	 */
	startColumnStrokeColor: Swatch

	/**
	 * The number of columns in the first alternating column strokes group.
	 */
	startColumnStrokeCount: number

	/**
	 * The stroke gap color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the first alternating column strokes group. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapColor: Swatch

	/**
	 * If true, the gap of the column borders in the first alternating column strokes group will overprint. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of column borders in the first alternating column strokes group. (Range: 0 to 100) Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapTint: number

	/**
	 * If true, the column borders in the first alternating column strokes group will overprint. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of column borders in the first alternating column strokes group. (Range: 0 to 100) Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeTint: number

	/**
	 * The stroke type of columns in the first alternating strokes group.
	 */
	startColumnStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of column borders in the first alternating column strokes group. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeWeight: number | string

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of rows in the first alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillColor: Swatch

	/**
	 * The number of rows in the first alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillCount: number

	/**
	 * If true, the rows in the first alternating fills group will overprint. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillOverprint: boolean

	/**
	 * The tint (as a percentage) of the rows in the first alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillTint: number

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the first alternating row strokes group. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeColor: Swatch

	/**
	 * The number of rows in the first alternating row strokes group.
	 */
	startRowStrokeCount: number

	/**
	 * The stroke gap color of row borders in the first alternating row strokes group, specified as a swatch (color, gradient, tint, or mixed ink). Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the row border stroke in the first alternating row strokes group will overprint. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of row borders in the first alternating rows group. (Range: 0 to 100) Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapTint: number

	/**
	 * If true, the row borders in the first alternating row strokes group will overprint. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the borders in the first alternating row strokes group. (Range: 0 to 100) Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeTint: number

	/**
	 * The stroke type of rows in the first alternating strokes group.
	 */
	startRowStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of row borders in the first alternating row strokes group. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeWeight: number | string

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	storyOffset: InsertionPoint

	/**
	 * The order in which to display row and column strokes at corners.
	 */
	strokeOrder: StrokeOrderTypes

	/**
	 * The direction of the the table
	 */
	tableDirection: TableDirectionOptions

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string

	/**
	 * A collection of text variable instances.
	 */
	textVariableInstances: TextVariableInstances

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the table's top border stroke.
	 */
	topBorderStrokeColor: Swatch

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the table's top border stroke. Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapColor: Swatch

	/**
	 * If true, the gap of the top border stroke will overprint. Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the table's top border stroke. (Range: 0 to 100) Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapTint: number

	/**
	 * If true, the top border strokes will overprint.
	 */
	topBorderStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the table's top border stroke. (Range: 0 to 100)
	 */
	topBorderStrokeTint: number

	/**
	 * The stroke type of the top border.
	 */
	topBorderStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the table's top border stroke.
	 */
	topBorderStrokeWeight: number | string

	/**
	 * The width of the Table. For a table or row, specifies the sum of the column widths.
	 */
	width: number | string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Clear Table Style Overrides
	 */
	clearTableStyleOverrides(): void

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void

	/**
	 * Converts the table to text.
	 * @param columnSeparator The character to insert between the each column's content in the converted text. Note: Can be defined as any single character, such as a letter, number, or punctuation mark, or by typing a space or tab. Use the actual character rather than its name, such as ',' rather than 'Comma'. Precede double or single quotes or a backslash with an extra backslash as an escape character. For paragraphs, use ^p.
	 * @param rowSeparator The character to use to separate each row's content in the converted text. Note: Can be defined as any single character, such as a letter, number, or punctuation mark, or by typing a space or tab. Use the actual character rather than its name, such as , rather than Comma. Precede double or single quotes or a backslash with an extra backslash as an escape character. For paragraphs, use ^p.
	 */
	convertToText(columnSeparator: string, rowSeparator: string): Text

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[]

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Table[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Associates the page item with the specified XML element while preserving existing content.
	 * @param using The XML element.
	 */
	markup(using: XMLElement): void

	/**
	 * Recomposes the text in the Table.
	 */
	recompose(): void

	/**
	 * Deletes the Table.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Table in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Generates a string which, if executed, will return the Table.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Unmerges all merged cells in the Table.
	 */
	unmerge(): Cell[]

}

/**
 * A collection of tables.
 */
declare class Tables {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Table with the specified index.
	 * @param index The index.
	 */
	[index: number]: Table

	/**
	 * Creates a new table.
	 * @param to The location of the new table relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the to value specifies before or after.
	 * @param withProperties Initial values for properties of the new Table
	 */
	add(to?: LocationOptions, reference?: Table | XmlStory | XMLElement | TextFrame | EndnoteTextFrame | Text | InsertionPoint | TextStyleRange | Paragraph | TextColumn | Line | Word | Character | Story | Cell, withProperties?: object): Table

	/**
	 * Returns any Table in the collection.
	 */
	anyItem(): Table

	/**
	 * Displays the number of elements in the Table.
	 */
	count(): number

	/**
	 * Returns every Table in the collection.
	 */
	everyItem(): Table[]

	/**
	 * Returns the first Table in the collection.
	 */
	firstItem(): Table

	/**
	 * Returns the Table with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Table

	/**
	 * Returns the Table with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Table

	/**
	 * Returns the Table with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Table

	/**
	 * Returns the Tables within the specified range.
	 * @param from The Table, index, or name at the beginning of the range.
	 * @param to The Table, index, or name at the end of the range.
	 */
	itemByRange(from: Table | number | string, to: Table | number | string): Table[]

	/**
	 * Returns the last Table in the collection.
	 */
	lastItem(): Table

	/**
	 * Returns the middle Table in the collection.
	 */
	middleItem(): Table

	/**
	 * Returns the Table whose index follows the specified Table in the collection.
	 * @param obj The Table whose index comes before the desired Table.
	 */
	nextItem(obj: Table): Table

	/**
	 * Returns the Table with the index previous to the specified index.
	 * @param obj The index of the Table that follows the desired Table.
	 */
	previousItem(obj: Table): Table

	/**
	 * Generates a string which, if executed, will return the Table.
	 */
	toSource(): string

}

/**
 * A table column.
 */
declare class Column {
	/**
	 * If true, the height of the cell or the cells in the Column can increase or decrease automatically to fit cell content. Note: Allows cells to grow or shrink to the maximum or minimum height, if specified.
	 */
	autoGrow: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number

	/**
	 * If true, the bottom edge border stroke will overprint.
	 */
	bottomEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number

	/**
	 * The stroke type of the bottom edge.
	 */
	bottomEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the bottom edge border stroke.
	 */
	bottomEdgeStrokeWeight: number | string

	/**
	 * The bottom inset of the cell.The API has been deprecated. Use TextBottomInset or GraphicBottomInset
	 */
	bottomInset: number | string

	/**
	 * A collection of table cells.
	 */
	cells: Cells

	/**
	 * If true, clips the cell's content to width and height of the cell. The API has been deprecated. Use ClipContentsToTextCell or ClipContentsToPageItemCell
	 */
	clipContentToCell: boolean

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean

	/**
	 * The number of columns that the object spans.
	 */
	columnSpan: number

	/**
	 * A collection of table columns.
	 */
	columns: Columns

	/**
	 * The text contents. For rows or columns, when specified as a string, the sting populates each cell in the row or column; when specified as an array, the first value in the array populates the left-most cell in the row or the top-most cell in the column; the next value populates the next cell to the right (for rows) or the next lowest cell (for columns), and so on.
	 */
	contents: PageItem | string | SpecialCharacters | string[] | PageItems | NothingEnum

	/**
	 * If true, draws the diagonal line in front of cell contents.
	 */
	diagonalLineInFront: boolean

	/**
	 * The diagonal line color, specified as a swatch.
	 */
	diagonalLineStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch

	/**
	 * If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapTint: number

	/**
	 * If true, the diagonal line stroke will overprint.
	 */
	diagonalLineStrokeOverprint: boolean

	/**
	 * The diagonal line tint (as a percentage). (Range: 0 to 100)
	 */
	diagonalLineStrokeTint: number

	/**
	 * The stroke type of the diagonal line(s).
	 */
	diagonalLineStrokeType: StrokeStyle | string

	/**
	 * The diagonal line stroke weight.
	 */
	diagonalLineStrokeWeight: number | string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the object.
	 */
	fillColor: Swatch | string

	/**
	 * The tint (as a percentage) of the fill of the object.
	 */
	fillTint: number

	/**
	 * The distance between the baseline of the text and the top inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline

	/**
	 * The angle of a linear gradient applied to the fill of the object. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The length (of a linear gradient) or radius (of a radial gradient) applied to the fill of the object.
	 */
	gradientFillLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the Column, in the format [x, y].
	 */
	gradientFillStart: (number | string)[]

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string

	/**
	 * The height of the Column. For a table or column, specifies the sum of the row heights.
	 */
	height: number | string

	/**
	 * The index of the Column within its containing object.
	 */
	index: number

	/**
	 * The color, specified as a swatch, of the inner column border stroke.
	 */
	innerColumnStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner column border stroke. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the inner column border stroke will overprint. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner column border stroke gap color. (Range: 0 to 100) Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapTint: number

	/**
	 * If true, the inner column border stroke will overprint.
	 */
	innerColumnStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner column border stroke. (Range: 0 to 100)
	 */
	innerColumnStrokeTint: number

	/**
	 * The stroke type of the inner column.
	 */
	innerColumnStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the inner column border stroke.
	 */
	innerColumnStrokeWeight: number | string

	/**
	 * The color, specified as a swatch, of the inner row border stroke.
	 */
	innerRowStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner row border stroke. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the inner row border stroke will overprint. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100) Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapTint: number

	/**
	 * If true, the inner row border stroke will overprint.
	 */
	innerRowStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100)
	 */
	innerRowStrokeTint: number

	/**
	 * The stroke type of the inner row.
	 */
	innerRowStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the inner row border strokes.
	 */
	innerRowStrokeWeight: number | string

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * If true, keeps the row with the next row when the table is split across text frames or pages.
	 */
	keepWithNextRow: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number

	/**
	 * If true, the left edge border stroke will overprint.
	 */
	leftEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the left edge border stroke. (Range: 0 to 100)
	 */
	leftEdgeStrokeTint: number

	/**
	 * The stroke type of the left edge.
	 */
	leftEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the left edge border stroke.
	 */
	leftEdgeStrokeWeight: number | string

	/**
	 * The left inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicLeftInset
	 */
	leftInset: number | string

	/**
	 * The maximum height to which cells in the Column may grow. Note: The maximum height cannot be exceeded even when auto grow is set to true. Also, the maximum height can affect redistribution.
	 */
	maximumHeight: number | string

	/**
	 * The space between the baseline of the text and the top inset of the frame or cell.
	 */
	minimumFirstBaselineOffset: number | string

	/**
	 * The minimum height of the cells in the Column. Note: When auto grow is true, cells can automatically grow larger than this amount when content is added. Also, the minimum height can affect redistribution.
	 */
	minimumHeight: number | string

	/**
	 * The name of the Column.
	 */
	name: string

	/**
	 * If true, the story has overset text.
	 */
	overflows: boolean

	/**
	 * If true, the fill of the object will overprint.
	 */
	overprintFill: boolean

	/**
	 * The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified.
	 */
	paragraphSpacingLimit: number | string

	/**
	 * The parent of the Column (a Table).
	 */
	parent: Table

	/**
	 * The parent column of the cell.
	 */
	parentColumn: Column

	/**
	 * The parent row of the cell.
	 */
	parentRow: Row

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The color, specified as a swatch, of the right edge border stroke.
	 */
	rightEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number

	/**
	 * If true, the right edge border stroke will overprint.
	 */
	rightEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the right edge border stroke. (Range: 0 to 100)
	 */
	rightEdgeStrokeTint: number

	/**
	 * The stroke type of the right edge.
	 */
	rightEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the right edge border stroke.
	 */
	rightEdgeStrokeWeight: number | string

	/**
	 * The right inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicRightInset
	 */
	rightInset: number | string

	/**
	 * The rotation angle (in degrees) of the cell, specified as one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number

	/**
	 * The number of rows that the object spans.
	 */
	rowSpan: number

	/**
	 * The row type.
	 */
	rowType: RowTypes

	/**
	 * A collection of table rows.
	 */
	rows: Rows

	/**
	 * Indicates where to start the row.
	 */
	startRow: StartParagraph

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapTint: number

	/**
	 * If true, the top edge border stroke will overprint.
	 */
	topEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the top edge border stroke. (Range: 0 to 100)
	 */
	topEdgeStrokeTint: number

	/**
	 * The stroke type of the top edge.
	 */
	topEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the top edge border stroke.
	 */
	topEdgeStrokeWeight: number | string

	/**
	 * The top inset of the cell. The API has been deprecated. Use TextTopInset or GraphicTopInset
	 */
	topInset: number | string

	/**
	 * If true, draws a diagonal line starting from the top left.
	 */
	topLeftDiagonalLine: boolean

	/**
	 * If true, draws a diagonal line starting from the top right.
	 */
	topRightDiagonalLine: boolean

	/**
	 * The vertical alignment of cell.
	 */
	verticalJustification: VerticalJustification

	/**
	 * The width of the Column. For a table or row, specifies the sum of the column widths.
	 */
	width: number | string

	/**
	 * The direction of the text in the cell.
	 */
	writingDirection: HorizontalOrVertical

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[]

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Column[]

	/**
	 * Merges the cells.
	 * @param with_ The cell(s) to merge with.
	 */
	merge(with_: Cell | Row | Column): Cell

	/**
	 * Recomposes the text in the Column.
	 */
	recompose(): void

	/**
	 * Redistributes the specified range of Columns so that the Columns have a uniform size. Note: The maximum or minimum height or width specified for some of the cells in the range may prevent them from being exactly even.
	 * @param using The direction in which to redistribute.
	 * @param thru The last Column in the range.
	 */
	redistribute(using: HorizontalOrVertical, thru: Cell | Column | Row): void

	/**
	 * Deletes the Column.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Column in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Splits the cell along the specified axis.
	 * @param using The direction in which to split the cell.
	 */
	split(using: HorizontalOrVertical): void

	/**
	 * Generates a string which, if executed, will return the Column.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Unmerges all merged cells in the Column.
	 */
	unmerge(): Cell[]

}

/**
 * A collection of table columns.
 */
declare class Columns {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Column with the specified index.
	 * @param index The index.
	 */
	[index: number]: Column

	/**
	 * Creates a new Column.
	 * @param at The Column's location relative to the reference object or within the table.
	 * @param reference The reference object. Note: The reference object must be within the table. Required only when the at value contains before or after.
	 * @param withProperties Initial values for properties of the new Column
	 */
	add(at?: LocationOptions, reference?: Row | Column | Cell | Table, withProperties?: object): any

	/**
	 * Returns any Column in the collection.
	 */
	anyItem(): Column

	/**
	 * Displays the number of elements in the Column.
	 */
	count(): number

	/**
	 * Returns every Column in the collection.
	 */
	everyItem(): Column[]

	/**
	 * Returns the first Column in the collection.
	 */
	firstItem(): Column

	/**
	 * Returns the Column with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Column

	/**
	 * Returns the Column with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Column

	/**
	 * Returns the Columns within the specified range.
	 * @param from The Column, index, or name at the beginning of the range.
	 * @param to The Column, index, or name at the end of the range.
	 */
	itemByRange(from: Column | number | string, to: Column | number | string): Column[]

	/**
	 * Returns the last Column in the collection.
	 */
	lastItem(): Column

	/**
	 * Returns the middle Column in the collection.
	 */
	middleItem(): Column

	/**
	 * Returns the Column whose index follows the specified Column in the collection.
	 * @param obj The Column whose index comes before the desired Column.
	 */
	nextItem(obj: Column): Column

	/**
	 * Returns the Column with the index previous to the specified index.
	 * @param obj The index of the Column that follows the desired Column.
	 */
	previousItem(obj: Column): Column

	/**
	 * Generates a string which, if executed, will return the Column.
	 */
	toSource(): string

}

/**
 * A table row.
 */
declare class Row {
	/**
	 * If true, the height of the cell or the cells in the Row can increase or decrease automatically to fit cell content. Note: Allows cells to grow or shrink to the maximum or minimum height, if specified.
	 */
	autoGrow: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number

	/**
	 * If true, the bottom edge border stroke will overprint.
	 */
	bottomEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number

	/**
	 * The stroke type of the bottom edge.
	 */
	bottomEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the bottom edge border stroke.
	 */
	bottomEdgeStrokeWeight: number | string

	/**
	 * The bottom inset of the cell.The API has been deprecated. Use TextBottomInset or GraphicBottomInset
	 */
	bottomInset: number | string

	/**
	 * A collection of table cells.
	 */
	cells: Cells

	/**
	 * If true, clips the cell's content to width and height of the cell. The API has been deprecated. Use ClipContentsToTextCell or ClipContentsToPageItemCell
	 */
	clipContentToCell: boolean

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean

	/**
	 * The number of columns that the object spans.
	 */
	columnSpan: number

	/**
	 * A collection of table columns.
	 */
	columns: Columns

	/**
	 * The text contents. For rows or columns, when specified as a string, the sting populates each cell in the row or column; when specified as an array, the first value in the array populates the left-most cell in the row or the top-most cell in the column; the next value populates the next cell to the right (for rows) or the next lowest cell (for columns), and so on.
	 */
	contents: PageItem | string | SpecialCharacters | string[] | PageItems | NothingEnum

	/**
	 * If true, draws the diagonal line in front of cell contents.
	 */
	diagonalLineInFront: boolean

	/**
	 * The diagonal line color, specified as a swatch.
	 */
	diagonalLineStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch

	/**
	 * If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapTint: number

	/**
	 * If true, the diagonal line stroke will overprint.
	 */
	diagonalLineStrokeOverprint: boolean

	/**
	 * The diagonal line tint (as a percentage). (Range: 0 to 100)
	 */
	diagonalLineStrokeTint: number

	/**
	 * The stroke type of the diagonal line(s).
	 */
	diagonalLineStrokeType: StrokeStyle | string

	/**
	 * The diagonal line stroke weight.
	 */
	diagonalLineStrokeWeight: number | string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the object.
	 */
	fillColor: Swatch | string

	/**
	 * The tint (as a percentage) of the fill of the object.
	 */
	fillTint: number

	/**
	 * The distance between the baseline of the text and the top inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline

	/**
	 * The angle of a linear gradient applied to the fill of the object. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The length (of a linear gradient) or radius (of a radial gradient) applied to the fill of the object.
	 */
	gradientFillLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the Row, in the format [x, y].
	 */
	gradientFillStart: (number | string)[]

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string

	/**
	 * The height of the Row. For a table or column, specifies the sum of the row heights.
	 */
	height: number | string

	/**
	 * The index of the Row within its containing object.
	 */
	index: number

	/**
	 * The color, specified as a swatch, of the inner column border stroke.
	 */
	innerColumnStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner column border stroke. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the inner column border stroke will overprint. Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner column border stroke gap color. (Range: 0 to 100) Note: Not valid when inner column stroke type is solid.
	 */
	innerColumnStrokeGapTint: number

	/**
	 * If true, the inner column border stroke will overprint.
	 */
	innerColumnStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner column border stroke. (Range: 0 to 100)
	 */
	innerColumnStrokeTint: number

	/**
	 * The stroke type of the inner column.
	 */
	innerColumnStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the inner column border stroke.
	 */
	innerColumnStrokeWeight: number | string

	/**
	 * The color, specified as a swatch, of the inner row border stroke.
	 */
	innerRowStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the inner row border stroke. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the inner row border stroke will overprint. Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100) Note: Not valid when inner row stroke type is solid.
	 */
	innerRowStrokeGapTint: number

	/**
	 * If true, the inner row border stroke will overprint.
	 */
	innerRowStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the inner row border stroke. (Range: 0 to 100)
	 */
	innerRowStrokeTint: number

	/**
	 * The stroke type of the inner row.
	 */
	innerRowStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the inner row border strokes.
	 */
	innerRowStrokeWeight: number | string

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * If true, keeps the row with the next row when the table is split across text frames or pages.
	 */
	keepWithNextRow: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number

	/**
	 * If true, the left edge border stroke will overprint.
	 */
	leftEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the left edge border stroke. (Range: 0 to 100)
	 */
	leftEdgeStrokeTint: number

	/**
	 * The stroke type of the left edge.
	 */
	leftEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the left edge border stroke.
	 */
	leftEdgeStrokeWeight: number | string

	/**
	 * The left inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicLeftInset
	 */
	leftInset: number | string

	/**
	 * The maximum height to which cells in the Row may grow. Note: The maximum height cannot be exceeded even when auto grow is set to true. Also, the maximum height can affect redistribution.
	 */
	maximumHeight: number | string

	/**
	 * The space between the baseline of the text and the top inset of the frame or cell.
	 */
	minimumFirstBaselineOffset: number | string

	/**
	 * The minimum height of the cells in the Row. Note: When auto grow is true, cells can automatically grow larger than this amount when content is added. Also, the minimum height can affect redistribution.
	 */
	minimumHeight: number | string

	/**
	 * The name of the Row.
	 */
	name: string

	/**
	 * If true, the story has overset text.
	 */
	overflows: boolean

	/**
	 * If true, the fill of the object will overprint.
	 */
	overprintFill: boolean

	/**
	 * The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified.
	 */
	paragraphSpacingLimit: number | string

	/**
	 * The parent of the Row (a Table).
	 */
	parent: Table

	/**
	 * The parent column of the cell.
	 */
	parentColumn: Column

	/**
	 * The parent row of the cell.
	 */
	parentRow: Row

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The color, specified as a swatch, of the right edge border stroke.
	 */
	rightEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number

	/**
	 * If true, the right edge border stroke will overprint.
	 */
	rightEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the right edge border stroke. (Range: 0 to 100)
	 */
	rightEdgeStrokeTint: number

	/**
	 * The stroke type of the right edge.
	 */
	rightEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the right edge border stroke.
	 */
	rightEdgeStrokeWeight: number | string

	/**
	 * The right inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicRightInset
	 */
	rightInset: number | string

	/**
	 * The rotation angle (in degrees) of the cell, specified as one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number

	/**
	 * The number of rows that the object spans.
	 */
	rowSpan: number

	/**
	 * The row type.
	 */
	rowType: RowTypes

	/**
	 * A collection of table rows.
	 */
	rows: Rows

	/**
	 * Indicates where to start the row.
	 */
	startRow: StartParagraph

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapTint: number

	/**
	 * If true, the top edge border stroke will overprint.
	 */
	topEdgeStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the top edge border stroke. (Range: 0 to 100)
	 */
	topEdgeStrokeTint: number

	/**
	 * The stroke type of the top edge.
	 */
	topEdgeStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the top edge border stroke.
	 */
	topEdgeStrokeWeight: number | string

	/**
	 * The top inset of the cell. The API has been deprecated. Use TextTopInset or GraphicTopInset
	 */
	topInset: number | string

	/**
	 * If true, draws a diagonal line starting from the top left.
	 */
	topLeftDiagonalLine: boolean

	/**
	 * If true, draws a diagonal line starting from the top right.
	 */
	topRightDiagonalLine: boolean

	/**
	 * The vertical alignment of cell.
	 */
	verticalJustification: VerticalJustification

	/**
	 * The width of the Row. For a table or row, specifies the sum of the column widths.
	 */
	width: number | string

	/**
	 * The direction of the text in the cell.
	 */
	writingDirection: HorizontalOrVertical

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[]

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Row[]

	/**
	 * Merges the cells.
	 * @param with_ The cell(s) to merge with.
	 */
	merge(with_: Cell | Row | Column): Cell

	/**
	 * Recomposes the text in the Row.
	 */
	recompose(): void

	/**
	 * Redistributes the specified range of Rows so that the Rows have a uniform size. Note: The maximum or minimum height or width specified for some of the cells in the range may prevent them from being exactly even.
	 * @param using The direction in which to redistribute.
	 * @param thru The last Row in the range.
	 */
	redistribute(using: HorizontalOrVertical, thru: Cell | Column | Row): void

	/**
	 * Deletes the Row.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Row in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Splits the cell along the specified axis.
	 * @param using The direction in which to split the cell.
	 */
	split(using: HorizontalOrVertical): void

	/**
	 * Generates a string which, if executed, will return the Row.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

	/**
	 * Unmerges all merged cells in the Row.
	 */
	unmerge(): Cell[]

}

/**
 * A collection of table rows.
 */
declare class Rows {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Row with the specified index.
	 * @param index The index.
	 */
	[index: number]: Row

	/**
	 * Creates a new Row.
	 * @param at The Row's location relative to the reference object or within the table.
	 * @param reference The reference object. Note: The reference object must be within the table. Required only when the at value contains before or after.
	 * @param withProperties Initial values for properties of the new Row
	 */
	add(at?: LocationOptions, reference?: Row | Column | Cell | Table, withProperties?: object): any

	/**
	 * Returns any Row in the collection.
	 */
	anyItem(): Row

	/**
	 * Displays the number of elements in the Row.
	 */
	count(): number

	/**
	 * Returns every Row in the collection.
	 */
	everyItem(): Row[]

	/**
	 * Returns the first Row in the collection.
	 */
	firstItem(): Row

	/**
	 * Returns the Row with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Row

	/**
	 * Returns the Row with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Row

	/**
	 * Returns the Rows within the specified range.
	 * @param from The Row, index, or name at the beginning of the range.
	 * @param to The Row, index, or name at the end of the range.
	 */
	itemByRange(from: Row | number | string, to: Row | number | string): Row[]

	/**
	 * Returns the last Row in the collection.
	 */
	lastItem(): Row

	/**
	 * Returns the middle Row in the collection.
	 */
	middleItem(): Row

	/**
	 * Returns the Row whose index follows the specified Row in the collection.
	 * @param obj The Row whose index comes before the desired Row.
	 */
	nextItem(obj: Row): Row

	/**
	 * Returns the Row with the index previous to the specified index.
	 * @param obj The index of the Row that follows the desired Row.
	 */
	previousItem(obj: Row): Row

	/**
	 * Generates a string which, if executed, will return the Row.
	 */
	toSource(): string

}

/**
 * A table style.
 */
declare class TableStyle {
	/**
	 * The style that this style is based on.
	 */
	basedOn: TableStyle | string

	/**
	 * The cell style of the body region.
	 */
	bodyRegionCellStyle: CellStyle | string

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the bottom border stroke.
	 */
	bottomBorderStrokeColor: Swatch

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the bottom border stroke. Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapColor: Swatch

	/**
	 * If true, the gap of the bottom border stroke will overprint. Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the bottom border stroke. (Range: 0 to 100) Note: Valid only when bottom border stroke type is not solid.
	 */
	bottomBorderStrokeGapTint: number

	/**
	 * If true, the bottom border stroke will overprint.
	 */
	bottomBorderStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the bottom border stroke. (Range: 0 to 100)
	 */
	bottomBorderStrokeTint: number

	/**
	 * The stroke type of the bottom border.
	 */
	bottomBorderStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the bottom border stroke.
	 */
	bottomBorderStrokeWeight: number | string

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean

	/**
	 * If true, hides alternating row fills. If false, hides alternating column fills.
	 */
	columnFillsPriority: boolean

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of columns in the second alternating fill group. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillColor: Swatch

	/**
	 * The number of columns in the second alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillCount: number

	/**
	 * If true, the columns in the second alternating fills group will overprint. Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillOverprint: boolean

	/**
	 * The tint (as a percentage) of the columns in the second alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table columns.
	 */
	endColumnFillTint: number

	/**
	 * The stroke type of columns in the second alternating strokes group.
	 */
	endColumnLineStyle: StrokeStyle | string

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeColor: Swatch

	/**
	 * The number of columns in the second alternating column strokes group.
	 */
	endColumnStrokeCount: number

	/**
	 * The stroke gap color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapColor: Swatch

	/**
	 * If true, the gap of the column border stroke in the second alternating column strokes group will overprint. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of column borders in the second alternating column strokes group. (Range: 0 to 100) Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeGapTint: number

	/**
	 * If true, the column borders in the second alternating column strokes group will overprint. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of column borders in the second alternating column strokes group. (Range: 0 to 100) Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeTint: number

	/**
	 * The stroke weight of column borders in the second alternating column strokes group. Note: Valid when end column stroke count is 1 or greater.
	 */
	endColumnStrokeWeight: number | string

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of rows in the second alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillColor: Swatch

	/**
	 * The number of rows in the second alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillCount: number

	/**
	 * If true, the rows in the second alternating fills group will overprint. Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillOverprint: boolean

	/**
	 * The tint (as a percentage) of the rows in the second alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table rows.
	 */
	endRowFillTint: number

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the second alternating row strokes group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeColor: Swatch

	/**
	 * The number of rows in the second alternating row strokes group.
	 */
	endRowStrokeCount: number

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the second alternating rows group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeGapColor: Swatch

	/**
	 * If true, the gap of the row borders in the second alternating rows group will overprint. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of rows in the second alternating strokes group. (Range: 0 to 100) Note: Valid when end row stroke count is 1 or greater and end row stroke type is not solid.
	 */
	endRowStrokeGapTint: number

	/**
	 * If true, the rows in the second alternating rows group will overprint. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the row borders in the second alternating strokes group. (Range: 0 to 100) Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeTint: number

	/**
	 * The stroke type of rows in the second alternating strokes group.
	 */
	endRowStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of row borders in the second alternating row strokes group. Note: Valid when end row stroke count is 1 or greater.
	 */
	endRowStrokeWeight: number | string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The cell style of the footer region.
	 */
	footerRegionCellStyle: CellStyle | string

	/**
	 * If true, uses the cell style of the body region for the footer region.
	 */
	footerRegionSameAsBodyRegion: boolean

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | string

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | string

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | string

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | string

	/**
	 * The cell style of the header region.
	 */
	headerRegionCellStyle: CellStyle | string

	/**
	 * If true, use the cell style of the body region for the header region.
	 */
	headerRegionSameAsBodyRegion: boolean

	/**
	 * The unique ID of the TableStyle.
	 */
	id: number

	/**
	 * The index of the TableStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the left border stroke.
	 */
	leftBorderStrokeColor: Swatch

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the left border stroke. Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapColor: Swatch

	/**
	 * If true, the gap of the left border stroke will overprint. Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the left border stroke. (Range: 0 to 100) Note: Valid only when left border stroke type is not solid.
	 */
	leftBorderStrokeGapTint: number

	/**
	 * If true, the left border stroke will overprint.
	 */
	leftBorderStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the left border stroke. (Range: 0 to 100)
	 */
	leftBorderStrokeTint: number

	/**
	 * The stroke type of the left border.
	 */
	leftBorderStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the left border stroke.
	 */
	leftBorderStrokeWeight: number | string

	/**
	 * The cell style of the left column region.
	 */
	leftColumnRegionCellStyle: CellStyle | string

	/**
	 * If true, uses the cell style of the body region for the left column region.
	 */
	leftColumnRegionSameAsBodyRegion: boolean

	/**
	 * The name of the TableStyle.
	 */
	name: string

	/**
	 * The parent of the TableStyle (a Document, Application or TableStyleGroup).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the right border stroke.
	 */
	rightBorderStrokeColor: Swatch

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the right border stroke. Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the right border stroke will overprint. Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the right border stroke. (Range: 0 to 100) Note: Valid only when right border stroke type is not solid.
	 */
	rightBorderStrokeGapTint: number

	/**
	 * If true, the right border stroke will overprint.
	 */
	rightBorderStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the right border stroke. (Range: 0 to 100)
	 */
	rightBorderStrokeTint: number

	/**
	 * The stroke type of the right border.
	 */
	rightBorderStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the right border stroke.
	 */
	rightBorderStrokeWeight: number | string

	/**
	 * The cell style of the right column region.
	 */
	rightColumnRegionCellStyle: CellStyle | string

	/**
	 * If true, uses the cell style of the body region for the right column region.
	 */
	rightColumnRegionSameAsBodyRegion: boolean

	/**
	 * The number of columns on the left side of the table to skip before applying the column fill color. Note: Valid when alternating fills are defined for table columns.
	 */
	skipFirstAlternatingFillColumns: number

	/**
	 * The number of body rows at the beginning of the table to skip before applying the row fill color. Note: Valid when alternating fills are defined for table rows.
	 */
	skipFirstAlternatingFillRows: number

	/**
	 * The number of columns on the left of the table in which to skip border stroke formatting. Note: Valid when start column stroke count is 1 or greater and/or end column stroke count is 1 or greater.
	 */
	skipFirstAlternatingStrokeColumns: number

	/**
	 * The number of body rows at the beginning of the table in which to skip border stroke formatting. Note: Valid when start row stroke count is 1 or greater and/or end row stroke count is 1 or greater.
	 */
	skipFirstAlternatingStrokeRows: number

	/**
	 * The number columns on the right side of the table in which to not apply the column fill color. Note: Valid when alternating fills are defined for table columns.
	 */
	skipLastAlternatingFillColumns: number

	/**
	 * The number of body rows at the end of the table in which to not apply the row fill color. Note: Valid when alternating fills are defined for table rows.
	 */
	skipLastAlternatingFillRows: number

	/**
	 * The number of columns on the right side of the table in which to skip border stroke formatting. Note: Valid when start column stroke count is 1 or greater and/or end column stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeColumns: number

	/**
	 * The number of body rows at the end of the table in which to skip border stroke formatting. Note: Valid when start row stroke count is 1 or greater and/or end row stroke count is 1 or greater.
	 */
	skipLastAlternatingStrokeRows: number

	/**
	 * The space below the table.
	 */
	spaceAfter: number | string

	/**
	 * The space above the table.
	 */
	spaceBefore: number | string

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of columns in the first alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillColor: Swatch

	/**
	 * The number of columns in the first alternating fills group. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillCount: number

	/**
	 * If true, the columns in the first alternating fills group will overprint. Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillOverprint: boolean

	/**
	 * The tint (as a percentage) of the columns in the first alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table columns.
	 */
	startColumnFillTint: number

	/**
	 * The stroke color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the first alternating column strokes group.
	 */
	startColumnStrokeColor: Swatch

	/**
	 * The number of columns in the first alternating column strokes group.
	 */
	startColumnStrokeCount: number

	/**
	 * The stroke gap color, specified as a swatch (color, gradient, tint, or mixed ink), of column borders in the first alternating column strokes group. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapColor: Swatch

	/**
	 * If true, the gap of the column borders in the first alternating column strokes group will overprint. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of column borders in the first alternating column strokes group. (Range: 0 to 100) Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeGapTint: number

	/**
	 * If true, the column borders in the first alternating column strokes group will overprint. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of column borders in the first alternating column strokes group. (Range: 0 to 100) Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeTint: number

	/**
	 * The stroke type of columns in the first alternating strokes group.
	 */
	startColumnStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of column borders in the first alternating column strokes group. Note: Valid when start column stroke count is 1 or greater.
	 */
	startColumnStrokeWeight: number | string

	/**
	 * The fill color, specified as a swatch (color, gradient, tint, or mixed ink), of rows in the first alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillColor: Swatch

	/**
	 * The number of rows in the first alternating fills group. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillCount: number

	/**
	 * If true, the rows in the first alternating fills group will overprint. Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillOverprint: boolean

	/**
	 * The tint (as a percentage) of the rows in the first alternating fills group. (Range: 0 to 100) Note: Valid when alternating fills are defined for table rows.
	 */
	startRowFillTint: number

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of row borders in the first alternating row strokes group. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeColor: Swatch

	/**
	 * The number of rows in the first alternating row strokes group.
	 */
	startRowStrokeCount: number

	/**
	 * The stroke gap color of row borders in the first alternating row strokes group, specified as a swatch (color, gradient, tint, or mixed ink). Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapColor: Swatch

	/**
	 * If true, the gap color of the row border stroke in the first alternating row strokes group will overprint. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of row borders in the first alternating rows group. (Range: 0 to 100) Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeGapTint: number

	/**
	 * If true, the row borders in the first alternating row strokes group will overprint. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the borders in the first alternating row strokes group. (Range: 0 to 100) Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeTint: number

	/**
	 * The stroke type of rows in the first alternating strokes group.
	 */
	startRowStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of row borders in the first alternating row strokes group. Note: Valid when start row stroke count is 1 or greater.
	 */
	startRowStrokeWeight: number | string

	/**
	 * The order in which to display row and column strokes at corners.
	 */
	strokeOrder: StrokeOrderTypes

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | string

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | string

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | string

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | string

	/**
	 * The color, specified as a swatch (color, gradient, tint, or mixed ink), of the table's top border stroke.
	 */
	topBorderStrokeColor: Swatch

	/**
	 * The gap color, specified as a swatch (color, gradient, tint, or mixed ink), of the table's top border stroke. Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapColor: Swatch

	/**
	 * If true, the gap of the top border stroke will overprint. Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the table's top border stroke. (Range: 0 to 100) Note: Valid only when top border stroke type is not solid.
	 */
	topBorderStrokeGapTint: number

	/**
	 * If true, the top border strokes will overprint.
	 */
	topBorderStrokeOverprint: boolean

	/**
	 * The tint (as a percentage) of the table's top border stroke. (Range: 0 to 100)
	 */
	topBorderStrokeTint: number

	/**
	 * The stroke type of the top border.
	 */
	topBorderStrokeType: StrokeStyle | string

	/**
	 * The stroke weight of the table's top border stroke.
	 */
	topBorderStrokeWeight: number | string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the TableStyle.
	 */
	duplicate(): TableStyle

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TableStyle[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): TableStyle

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: TableStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TableStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of table styles.
 */
declare class TableStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TableStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: TableStyle

	/**
	 * Creates a new TableStyle.
	 * @param withProperties Initial values for properties of the new TableStyle
	 */
	add(withProperties: object): TableStyle

	/**
	 * Returns any TableStyle in the collection.
	 */
	anyItem(): TableStyle

	/**
	 * Displays the number of elements in the TableStyle.
	 */
	count(): number

	/**
	 * Returns every TableStyle in the collection.
	 */
	everyItem(): TableStyle[]

	/**
	 * Returns the first TableStyle in the collection.
	 */
	firstItem(): TableStyle

	/**
	 * Returns the TableStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TableStyle

	/**
	 * Returns the TableStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TableStyle

	/**
	 * Returns the TableStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TableStyle

	/**
	 * Returns the TableStyles within the specified range.
	 * @param from The TableStyle, index, or name at the beginning of the range.
	 * @param to The TableStyle, index, or name at the end of the range.
	 */
	itemByRange(from: TableStyle | number | string, to: TableStyle | number | string): TableStyle[]

	/**
	 * Returns the last TableStyle in the collection.
	 */
	lastItem(): TableStyle

	/**
	 * Returns the middle TableStyle in the collection.
	 */
	middleItem(): TableStyle

	/**
	 * Returns the TableStyle whose index follows the specified TableStyle in the collection.
	 * @param obj The TableStyle whose index comes before the desired TableStyle.
	 */
	nextItem(obj: TableStyle): TableStyle

	/**
	 * Returns the TableStyle with the index previous to the specified index.
	 * @param obj The index of the TableStyle that follows the desired TableStyle.
	 */
	previousItem(obj: TableStyle): TableStyle

	/**
	 * Generates a string which, if executed, will return the TableStyle.
	 */
	toSource(): string

}

/**
 * A table style group.
 */
declare class TableStyleGroup {
	/**
	 * All Table styles
	 */
	allTableStyles: TableStyle[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the TableStyleGroup.
	 */
	id: number

	/**
	 * The index of the TableStyleGroup within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the TableStyleGroup.
	 */
	name: string

	/**
	 * The parent of the TableStyleGroup (a Document, Application or TableStyleGroup).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of table style groups.
	 */
	tableStyleGroups: TableStyleGroups

	/**
	 * A collection of table styles.
	 */
	tableStyles: TableStyles

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the TableStyleGroup.
	 */
	duplicate(): TableStyleGroup

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TableStyleGroup[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): TableStyleGroup

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle | CharacterStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TableStyleGroup.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of table style groups.
 */
declare class TableStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TableStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: TableStyleGroup

	/**
	 * Creates a new TableStyleGroup.
	 * @param withProperties Initial values for properties of the new TableStyleGroup
	 */
	add(withProperties: object): TableStyleGroup

	/**
	 * Returns any TableStyleGroup in the collection.
	 */
	anyItem(): TableStyleGroup

	/**
	 * Displays the number of elements in the TableStyleGroup.
	 */
	count(): number

	/**
	 * Returns every TableStyleGroup in the collection.
	 */
	everyItem(): TableStyleGroup[]

	/**
	 * Returns the first TableStyleGroup in the collection.
	 */
	firstItem(): TableStyleGroup

	/**
	 * Returns the TableStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TableStyleGroup

	/**
	 * Returns the TableStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TableStyleGroup

	/**
	 * Returns the TableStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TableStyleGroup

	/**
	 * Returns the TableStyleGroups within the specified range.
	 * @param from The TableStyleGroup, index, or name at the beginning of the range.
	 * @param to The TableStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: TableStyleGroup | number | string, to: TableStyleGroup | number | string): TableStyleGroup[]

	/**
	 * Returns the last TableStyleGroup in the collection.
	 */
	lastItem(): TableStyleGroup

	/**
	 * Returns the middle TableStyleGroup in the collection.
	 */
	middleItem(): TableStyleGroup

	/**
	 * Returns the TableStyleGroup whose index follows the specified TableStyleGroup in the collection.
	 * @param obj The TableStyleGroup whose index comes before the desired TableStyleGroup.
	 */
	nextItem(obj: TableStyleGroup): TableStyleGroup

	/**
	 * Returns the TableStyleGroup with the index previous to the specified index.
	 * @param obj The index of the TableStyleGroup that follows the desired TableStyleGroup.
	 */
	previousItem(obj: TableStyleGroup): TableStyleGroup

	/**
	 * Generates a string which, if executed, will return the TableStyleGroup.
	 */
	toSource(): string

}

/**
 * A cell style.
 */
declare class CellStyle {
	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | NothingEnum | string

	/**
	 * The style that this style is based on.
	 */
	basedOn: CellStyle | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the bottom edge border stroke.
	 */
	bottomEdgeStrokeColor: Swatch | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the bottom edge border stroke. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapColor: Swatch | NothingEnum

	/**
	 * If true, the gap color of the bottom edge border stroke will overprint. Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the bottom edge border stroke gap color. (Range: 0 to 100) Note: Not valid when bottom edge stroke type is solid.
	 */
	bottomEdgeStrokeGapTint: number | NothingEnum

	/**
	 * If true, the bottom edge border stroke will overprint.
	 */
	bottomEdgeStrokeOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the bottom edge border stroke.
	 */
	bottomEdgeStrokeTint: number | NothingEnum

	/**
	 * The stroke type of the bottom edge.
	 */
	bottomEdgeStrokeType: StrokeStyle | NothingEnum | string

	/**
	 * The stroke weight of the bottom edge border stroke.
	 */
	bottomEdgeStrokeWeight: number | NothingEnum

	/**
	 * The bottom inset of the cell.The API has been deprecated. Use TextBottomInset or GraphicBottomInset.
	 */
	bottomInset: number | NothingEnum

	/**
	 * If true, clips the cell's content to width and height of the cell. The API has been deprecated. Use ClipContentsToTextCell or ClipContentsToPageItemCell.
	 */
	clipContentToCell: boolean | NothingEnum

	/**
	 * If true, clips the graphic cell's content to width and height of the cell.
	 */
	clipContentToGraphicCell: boolean | NothingEnum

	/**
	 * If true, clips the text cell's content to width and height of the cell.
	 */
	clipContentToTextCell: boolean | NothingEnum

	/**
	 * If true, draws the diagonal line in front of cell contents.
	 */
	diagonalLineInFront: boolean | NothingEnum

	/**
	 * The diagonal line color, specified as a swatch.
	 */
	diagonalLineStrokeColor: Swatch | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the diagonal line stroke. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapColor: Swatch | NothingEnum

	/**
	 * If true, the stroke gap of the diagonal line will overprint. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the diagonal line stroke gap color. Note: Not valid when diagonal line stroke type is solid.
	 */
	diagonalLineStrokeGapTint: number | NothingEnum

	/**
	 * If true, the diagonal line stroke will overprint.
	 */
	diagonalLineStrokeOverprint: boolean | NothingEnum

	/**
	 * The diagonal line tint (as a percentage). (Range: 0 to 100).
	 */
	diagonalLineStrokeTint: number | NothingEnum

	/**
	 * The stroke type of the diagonal line(s).
	 */
	diagonalLineStrokeType: StrokeStyle | NothingEnum | string

	/**
	 * The diagonal line stroke weight.
	 */
	diagonalLineStrokeWeight: number | NothingEnum

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the object.
	 */
	fillColor: Swatch | NothingEnum | string

	/**
	 * The tint (as a percentage) of the fill of the object.
	 */
	fillTint: number | NothingEnum

	/**
	 * The distance between the baseline of the text and the top inset of the cell.
	 */
	firstBaselineOffset: FirstBaseline | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the object. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The length (of a linear gradient) or radius (of a radial gradient) applied to the fill of the object.
	 */
	gradientFillLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the CellStyle, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum

	/**
	 * The bottom inset of the graphic cell.
	 */
	graphicBottomInset: number | NothingEnum

	/**
	 * The left inset of the graphic cell.
	 */
	graphicLeftInset: number | NothingEnum

	/**
	 * The right inset of the graphic cell.
	 */
	graphicRightInset: number | NothingEnum

	/**
	 * The top inset of the graphic cell.
	 */
	graphicTopInset: number | NothingEnum

	/**
	 * The unique ID of the CellStyle.
	 */
	id: number

	/**
	 * The index of the CellStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the left edge border stroke.
	 */
	leftEdgeStrokeColor: Swatch | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the left edge border stroke. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapColor: Swatch | NothingEnum

	/**
	 * If true, the gap color of the left edge border stroke will overprint. Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the left edge border stroke gap color. (Range: 0 to 100) Note: Not valid when left edge stroke type is solid.
	 */
	leftEdgeStrokeGapTint: number | NothingEnum

	/**
	 * If true, the left edge border stroke will overprint.
	 */
	leftEdgeStrokeOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the left edge border stroke. (Range: 0 to 100).
	 */
	leftEdgeStrokeTint: number | NothingEnum

	/**
	 * The stroke type of the left edge.
	 */
	leftEdgeStrokeType: StrokeStyle | NothingEnum | string

	/**
	 * The stroke weight of the left edge border stroke.
	 */
	leftEdgeStrokeWeight: number | NothingEnum

	/**
	 * The left inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicLeftInset.
	 */
	leftInset: number | NothingEnum

	/**
	 * The space between the baseline of the text and the top inset of the frame or cell.
	 */
	minimumFirstBaselineOffset: number | NothingEnum

	/**
	 * The name of the style.
	 */
	name: string

	/**
	 * If true, the fill of the object will overprint.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * The maximum space that can be added between paragraphs in a cell. Note: Valid only when vertical justification is justified.
	 */
	paragraphSpacingLimit: number | NothingEnum

	/**
	 * The parent of the CellStyle (a Document, Application or CellStyleGroup).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The color, specified as a swatch, of the right edge border stroke.
	 */
	rightEdgeStrokeColor: Swatch | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the right edge border stroke. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapColor: Swatch | NothingEnum

	/**
	 * If true, the gap color of the right edge border stroke will overprint. Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the right edge border stroke gap color. (Range: 0 to 100) Note: Not valid when right edge stroke type is solid.
	 */
	rightEdgeStrokeGapTint: number | NothingEnum

	/**
	 * If true, the right edge border stroke will overprint.
	 */
	rightEdgeStrokeOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the right edge border stroke. (Range: 0 to 100).
	 */
	rightEdgeStrokeTint: number | NothingEnum

	/**
	 * The stroke type of the right edge.
	 */
	rightEdgeStrokeType: StrokeStyle | NothingEnum | string

	/**
	 * The stroke weight of the right edge border stroke.
	 */
	rightEdgeStrokeWeight: number | NothingEnum

	/**
	 * The right inset of the cell.The API has been deprecated. Use TextLeftInset or GraphicRightInset.
	 */
	rightInset: number | NothingEnum

	/**
	 * The rotation angle (in degrees) of the cell, specified as one of the following values: 0, 90, 180, or 270.
	 */
	rotationAngle: number | NothingEnum

	/**
	 * Whether the direction of the text in a cell runs against the story direction.
	 */
	rotationRunsAgainstStory: boolean | NothingEnum

	/**
	 * The bottom inset of the text cell.
	 */
	textBottomInset: number | NothingEnum

	/**
	 * The left inset of the text cell.
	 */
	textLeftInset: number | NothingEnum

	/**
	 * The right inset of the text cell.
	 */
	textRightInset: number | NothingEnum

	/**
	 * The top inset of the text cell.
	 */
	textTopInset: number | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the top edge border stroke.
	 */
	topEdgeStrokeColor: Swatch | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the top edge border stroke. Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapColor: Swatch | NothingEnum

	/**
	 * If true, the gap color of the top edge border stroke will overprint. Note: Not valid when top edge stroke type is solid. .
	 */
	topEdgeStrokeGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the top edge border stroke gap color. (Range: 0 to 100) Note: Not valid when top edge stroke type is solid.
	 */
	topEdgeStrokeGapTint: number | NothingEnum

	/**
	 * If true, the top edge border stroke will overprint.
	 */
	topEdgeStrokeOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the top edge border stroke. (Range: 0 to 100).
	 */
	topEdgeStrokeTint: number | NothingEnum

	/**
	 * The stroke type of the top edge.
	 */
	topEdgeStrokeType: StrokeStyle | NothingEnum | string

	/**
	 * The stroke weight of the top edge border stroke.
	 */
	topEdgeStrokeWeight: number | NothingEnum

	/**
	 * The top inset of the cell. The API has been deprecated. Use TextTopInset or GraphicTopInset.
	 */
	topInset: number | NothingEnum

	/**
	 * If true, draws a diagonal line starting from the top left.
	 */
	topLeftDiagonalLine: boolean | NothingEnum

	/**
	 * If true, draws a diagonal line starting from the top right.
	 */
	topRightDiagonalLine: boolean | NothingEnum

	/**
	 * The vertical alignment of cell.
	 */
	verticalJustification: VerticalJustification | NothingEnum

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the CellStyle.
	 */
	duplicate(): CellStyle

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CellStyle[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): CellStyle

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: CellStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CellStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of cell styles.
 */
declare class CellStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number | NothingEnum

	/**
	 * Returns the CellStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: CellStyle

	/**
	 * Creates a new CellStyle.
	 * @param withProperties Initial values for properties of the new CellStyle
	 */
	add(withProperties: object): CellStyle

	/**
	 * Returns any CellStyle in the collection.
	 */
	anyItem(): CellStyle

	/**
	 * Displays the number of elements in the CellStyle.
	 */
	count(): number

	/**
	 * Returns every CellStyle in the collection.
	 */
	everyItem(): CellStyle[]

	/**
	 * Returns the first CellStyle in the collection.
	 */
	firstItem(): CellStyle

	/**
	 * Returns the CellStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CellStyle

	/**
	 * Returns the CellStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CellStyle

	/**
	 * Returns the CellStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CellStyle

	/**
	 * Returns the CellStyles within the specified range.
	 * @param from The CellStyle, index, or name at the beginning of the range.
	 * @param to The CellStyle, index, or name at the end of the range.
	 */
	itemByRange(from: CellStyle | number | string, to: CellStyle | number | string): CellStyle[]

	/**
	 * Returns the last CellStyle in the collection.
	 */
	lastItem(): CellStyle

	/**
	 * Returns the middle CellStyle in the collection.
	 */
	middleItem(): CellStyle

	/**
	 * Returns the CellStyle whose index follows the specified CellStyle in the collection.
	 * @param obj The CellStyle whose index comes before the desired CellStyle.
	 */
	nextItem(obj: CellStyle): CellStyle

	/**
	 * Returns the CellStyle with the index previous to the specified index.
	 * @param obj The index of the CellStyle that follows the desired CellStyle.
	 */
	previousItem(obj: CellStyle): CellStyle

	/**
	 * Generates a string which, if executed, will return the CellStyle.
	 */
	toSource(): string

}

/**
 * A cell style group.
 */
declare class CellStyleGroup {
	/**
	 * All Cell styles
	 */
	allCellStyles: CellStyle[]

	/**
	 * A collection of cell style groups.
	 */
	cellStyleGroups: CellStyleGroups

	/**
	 * A collection of cell styles.
	 */
	cellStyles: CellStyles

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the CellStyleGroup.
	 */
	id: number

	/**
	 * The index of the CellStyleGroup within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the CellStyleGroup.
	 */
	name: string

	/**
	 * The parent of the CellStyleGroup (a Document, Application or CellStyleGroup).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the CellStyleGroup.
	 */
	duplicate(): CellStyleGroup

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CellStyleGroup[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): CellStyleGroup

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle | CharacterStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CellStyleGroup.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of cell style groups.
 */
declare class CellStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CellStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: CellStyleGroup

	/**
	 * Creates a new CellStyleGroup.
	 * @param withProperties Initial values for properties of the new CellStyleGroup
	 */
	add(withProperties: object): CellStyleGroup

	/**
	 * Returns any CellStyleGroup in the collection.
	 */
	anyItem(): CellStyleGroup

	/**
	 * Displays the number of elements in the CellStyleGroup.
	 */
	count(): number

	/**
	 * Returns every CellStyleGroup in the collection.
	 */
	everyItem(): CellStyleGroup[]

	/**
	 * Returns the first CellStyleGroup in the collection.
	 */
	firstItem(): CellStyleGroup

	/**
	 * Returns the CellStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CellStyleGroup

	/**
	 * Returns the CellStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CellStyleGroup

	/**
	 * Returns the CellStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CellStyleGroup

	/**
	 * Returns the CellStyleGroups within the specified range.
	 * @param from The CellStyleGroup, index, or name at the beginning of the range.
	 * @param to The CellStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: CellStyleGroup | number | string, to: CellStyleGroup | number | string): CellStyleGroup[]

	/**
	 * Returns the last CellStyleGroup in the collection.
	 */
	lastItem(): CellStyleGroup

	/**
	 * Returns the middle CellStyleGroup in the collection.
	 */
	middleItem(): CellStyleGroup

	/**
	 * Returns the CellStyleGroup whose index follows the specified CellStyleGroup in the collection.
	 * @param obj The CellStyleGroup whose index comes before the desired CellStyleGroup.
	 */
	nextItem(obj: CellStyleGroup): CellStyleGroup

	/**
	 * Returns the CellStyleGroup with the index previous to the specified index.
	 * @param obj The index of the CellStyleGroup that follows the desired CellStyleGroup.
	 */
	previousItem(obj: CellStyleGroup): CellStyleGroup

	/**
	 * Generates a string which, if executed, will return the CellStyleGroup.
	 */
	toSource(): string

}

/**
 * A nested line style.
 */
declare class NestedLineStyle {
	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the NestedLineStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The number lines to which to apply the nested style.
	 */
	lineCount: number

	/**
	 * The parent of the NestedLineStyle (a TextDefault, Paragraph, ParagraphStyle, Text, InsertionPoint, TextStyleRange, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The number line-style rules to back up.
	 */
	repeatLast: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NestedLineStyle[]

	/**
	 * Deletes the NestedLineStyle.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the NestedLineStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of nested line styles.
 */
declare class NestedLineStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the NestedLineStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: NestedLineStyle

	/**
	 * Creates a new NestedLineStyle.
	 * @param withProperties Initial values for properties of the new NestedLineStyle
	 */
	add(withProperties: object): NestedLineStyle

	/**
	 * Returns any NestedLineStyle in the collection.
	 */
	anyItem(): NestedLineStyle

	/**
	 * Displays the number of elements in the NestedLineStyle.
	 */
	count(): number

	/**
	 * Returns every NestedLineStyle in the collection.
	 */
	everyItem(): NestedLineStyle[]

	/**
	 * Returns the first NestedLineStyle in the collection.
	 */
	firstItem(): NestedLineStyle

	/**
	 * Returns the NestedLineStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NestedLineStyle

	/**
	 * Returns the NestedLineStyles within the specified range.
	 * @param from The NestedLineStyle, index, or name at the beginning of the range.
	 * @param to The NestedLineStyle, index, or name at the end of the range.
	 */
	itemByRange(from: NestedLineStyle | number | string, to: NestedLineStyle | number | string): NestedLineStyle[]

	/**
	 * Returns the last NestedLineStyle in the collection.
	 */
	lastItem(): NestedLineStyle

	/**
	 * Returns the middle NestedLineStyle in the collection.
	 */
	middleItem(): NestedLineStyle

	/**
	 * Returns the NestedLineStyle whose index follows the specified NestedLineStyle in the collection.
	 * @param obj The NestedLineStyle whose index comes before the desired NestedLineStyle.
	 */
	nextItem(obj: NestedLineStyle): NestedLineStyle

	/**
	 * Returns the NestedLineStyle with the index previous to the specified index.
	 * @param obj The index of the NestedLineStyle that follows the desired NestedLineStyle.
	 */
	previousItem(obj: NestedLineStyle): NestedLineStyle

	/**
	 * Generates a string which, if executed, will return the NestedLineStyle.
	 */
	toSource(): string

}

/**
 * A nested GREP style.
 */
declare class NestedGrepStyle {
	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The GREP expression used to apply automatic styling.
	 */
	grepExpression: string

	/**
	 * The index of the NestedGrepStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the NestedGrepStyle (a TextDefault, Paragraph, ParagraphStyle, Text, InsertionPoint, TextStyleRange, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NestedGrepStyle[]

	/**
	 * Deletes the NestedGrepStyle.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the NestedGrepStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of nested GREP styles.
 */
declare class NestedGrepStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the NestedGrepStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: NestedGrepStyle

	/**
	 * Creates a new NestedGrepStyle.
	 * @param withProperties Initial values for properties of the new NestedGrepStyle
	 */
	add(withProperties: object): NestedGrepStyle

	/**
	 * Returns any NestedGrepStyle in the collection.
	 */
	anyItem(): NestedGrepStyle

	/**
	 * Displays the number of elements in the NestedGrepStyle.
	 */
	count(): number

	/**
	 * Returns every NestedGrepStyle in the collection.
	 */
	everyItem(): NestedGrepStyle[]

	/**
	 * Returns the first NestedGrepStyle in the collection.
	 */
	firstItem(): NestedGrepStyle

	/**
	 * Returns the NestedGrepStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NestedGrepStyle

	/**
	 * Returns the NestedGrepStyles within the specified range.
	 * @param from The NestedGrepStyle, index, or name at the beginning of the range.
	 * @param to The NestedGrepStyle, index, or name at the end of the range.
	 */
	itemByRange(from: NestedGrepStyle | number | string, to: NestedGrepStyle | number | string): NestedGrepStyle[]

	/**
	 * Returns the last NestedGrepStyle in the collection.
	 */
	lastItem(): NestedGrepStyle

	/**
	 * Returns the middle NestedGrepStyle in the collection.
	 */
	middleItem(): NestedGrepStyle

	/**
	 * Returns the NestedGrepStyle whose index follows the specified NestedGrepStyle in the collection.
	 * @param obj The NestedGrepStyle whose index comes before the desired NestedGrepStyle.
	 */
	nextItem(obj: NestedGrepStyle): NestedGrepStyle

	/**
	 * Returns the NestedGrepStyle with the index previous to the specified index.
	 * @param obj The index of the NestedGrepStyle that follows the desired NestedGrepStyle.
	 */
	previousItem(obj: NestedGrepStyle): NestedGrepStyle

	/**
	 * Generates a string which, if executed, will return the NestedGrepStyle.
	 */
	toSource(): string

}

/**
 * A text object.
 */
declare class Text {
	/**
	 * Lists all graphics contained by the Text.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the Text.
	 */
	allPageItems: PageItem[]

	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean

	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string

	/**
	 * The applied conditions.
	 */
	appliedConditions: Condition[]

	/**
	 * The font applied to the Text, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | string

	/**
	 * The applied character styles dictated by nested styles.
	 */
	appliedNestedStyles: CharacterStyle[]

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string

	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string

	/**
	 * The maximum ascent of any character in the text.
	 */
	ascent: number | string

	/**
	 * The XML elements associated with the Text.
	 */
	associatedXMLElements: XMLItem[]

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle

	/**
	 * The vertical offset of the text.
	 */
	baseline: number | string

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | string

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number

	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string

	/**
	 * The contents of the text.
	 */
	contents: string | SpecialCharacters

	/**
	 * The maximum descent of any character in the text.
	 */
	descent: number | string

	/**
	 * The desired width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number

	/**
	 * The desired letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500)
	 */
	desiredLetterSpacing: number

	/**
	 * The desired word spacing, specified as a percentage of the font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number

	/**
	 * The character style to apply to the drop cap.
	 */
	dropCapStyle: CharacterStyle | string

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number

	/**
	 * Vertical offset of the end of the text.
	 */
	endBaseline: number | string

	/**
	 * Horizontal offset of the end of the text.
	 */
	endHorizontalOffset: number | string

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin

	/**
	 * A collection of endnote text ranges.
	 */
	endnoteRanges: EndnoteRanges

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the Text. .
	 */
	fillColor: Swatch | string

	/**
	 * The tint (as a percentage) of the fill color of the Text. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | string

	/**
	 * The name of the font style.
	 */
	fontStyle: string

	/**
	 * A collection of footnotes.
	 */
	footnotes: Footnotes

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: (number | string)[]

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[]

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * If true, aligns only the first line to the frame grid or baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of hidden text objects.
	 */
	hiddenTexts: HiddenTexts

	/**
	 * The horizontal offset of the text.
	 */
	horizontalOffset: number | string

	/**
	 * The horizontal scaling applied to the Text.
	 */
	horizontalScale: number

	/**
	 * The relative desirability of better spacing vs. fewer hyphens. A lower value results in greater use of hyphens. (Range: 0 to 100)
	 */
	hyphenWeight: number

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean

	/**
	 * The mininum number of letters at the beginning of a word that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number

	/**
	 * The minimum number of letters at the end of a word that can be broken by a hyphen.
	 */
	hyphenateBeforeLast: number

	/**
	 * If true, allows hyphenation of capitalized words.
	 */
	hyphenateCapitalizedWords: boolean

	/**
	 * The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean

	/**
	 * The minimum number of letters a word must have in order to qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number

	/**
	 * If true, allows hyphenation.
	 */
	hyphenation: boolean

	/**
	 * The amount of white space allowed at the end of a line of non-justified text before hypenation begins. Note: Valid when composer is single-line composer.
	 */
	hyphenationZone: number | string

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean

	/**
	 * The index of the text in the collection or parent object.
	 */
	index: number

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The number of grid squares in which to arrange the text.
	 */
	jidori: number

	/**
	 * The paragraph alignment.
	 */
	justification: Justification

	/**
	 * Use of Kashidas for justification
	 */
	kashidas: KashidasOptions

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean

	/**
	 * The alignment of kenten characters relative to the parent characters.
	 */
	kentenAlignment: KentenAlignment

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenStrokeTint: number

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenTint: number

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number

	/**
	 * The vertical size of kenten charachers as a percent of the original size.
	 */
	kentenYScale: number

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string

	/**
	 * The amount of space to add or remove between characters, specified in thousands of an em.
	 */
	kerningValue: number

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | string

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | string

	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * The maximum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number

	/**
	 * The maximum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number

	/**
	 * The maximum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number

	/**
	 * If true, consecutive para borders with completely similar properties are merged.
	 */
	mergeConsecutiveParaBorders: boolean

	/**
	 * The minimum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number

	/**
	 * The minimum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number

	/**
	 * The minimum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * A collection of nested GREP styles.
	 */
	nestedGrepStyles: NestedGrepStyles

	/**
	 * A collection of nested line styles.
	 */
	nestedLineStyles: NestedLineStyles

	/**
	 * A collection of nested styles.
	 */
	nestedStyles: NestedStyles

	/**
	 * If true, keeps the text on the same line.
	 */
	noBreak: boolean

	/**
	 * A collection of notes.
	 */
	notes: Notes

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number

	/**
	 * Numbering restart policies.
	 */
	numberingRestartPolicies: NumberingRestartPolicy

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number

	/**
	 * OpenType features. Can return: Array of Array of 2 Strings or Long Integers.
	 */
	opentypeFeatures: any[]

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean

	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean

	/**
	 * If true, use overlapping swash forms in OpenType fonts
	 */
	otfOverlapSwash: boolean

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean

	/**
	 * If true, applies italics to half-width alphanumerics.
	 */
	otfRomanItalics: boolean

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean

	/**
	 * If true, use stretched alternate forms in OpenType fonts
	 */
	otfStretchedAlternate: boolean

	/**
	 * If true, use stylistic alternate forms in OpenType fonts
	 */
	otfStylisticAlternate: boolean

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphBorderBottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphBorderBottomLeftCornerRadius: number | string

	/**
	 * The bottom line weight of the border of paragraph.
	 */
	paragraphBorderBottomLineWeight: number | string

	/**
	 * The distance to offset the bottom edge of the paragraph border.
	 */
	paragraphBorderBottomOffset: number | string

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph border.
	 */
	paragraphBorderBottomOrigin: ParagraphBorderBottomOriginEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphBorderBottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphBorderBottomRightCornerRadius: number | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph stroke.
	 */
	paragraphBorderColor: Swatch | string

	/**
	 * If true, then paragraph border is also displayed at the points where the paragraph splits across frames or columns.
	 */
	paragraphBorderDisplayIfSplits: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph border gap. Note: Valid only when the border type is not solid.
	 */
	paragraphBorderGapColor: Swatch | string

	/**
	 * If true, the paragraph border gap will overprint. Note: Valid only when border type is not solid.
	 */
	paragraphBorderGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the paragraph border gap. Note: Valid only when the border type is not solid. (Range: 0 to 100)
	 */
	paragraphBorderGapTint: number

	/**
	 * The left line weight of the border of paragraph.
	 */
	paragraphBorderLeftLineWeight: number | string

	/**
	 * The distance to offset the left edge of the paragraph border.
	 */
	paragraphBorderLeftOffset: number | string

	/**
	 * If true, the paragraph border is on.
	 */
	paragraphBorderOn: boolean

	/**
	 * If true, the paragraph border will overprint.
	 */
	paragraphBorderOverprint: boolean

	/**
	 * The right line weight of the border of paragraph.
	 */
	paragraphBorderRightLineWeight: number | string

	/**
	 * The distance to offset the right edge of the paragraph border.
	 */
	paragraphBorderRightOffset: number | string

	/**
	 * The end shape of an open path.
	 */
	paragraphBorderStrokeEndCap: EndCap

	/**
	 * The corner join applied to the Text.
	 */
	paragraphBorderStrokeEndJoin: EndJoin

	/**
	 * The tint (as a percentage) of the paragraph stroke. (Range: 0 to 100)
	 */
	paragraphBorderTint: number

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphBorderTopLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphBorderTopLeftCornerRadius: number | string

	/**
	 * The top line weight of the border of paragraph.
	 */
	paragraphBorderTopLineWeight: number | string

	/**
	 * The distance to offset the top edge of the paragraph border.
	 */
	paragraphBorderTopOffset: number | string

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph border.
	 */
	paragraphBorderTopOrigin: ParagraphBorderTopOriginEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerRadius: number | string

	/**
	 * The type of the border for the paragraph.
	 */
	paragraphBorderType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph border.
	 */
	paragraphBorderWidth: ParagraphBorderEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long
	 */
	paragraphKashidaWidth: number

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphShadingBottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphShadingBottomLeftCornerRadius: number | string

	/**
	 * The distance to offset the bottom edge of the paragraph.
	 */
	paragraphShadingBottomOffset: number | string

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphShadingBottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphShadingBottomRightCornerRadius: number | string

	/**
	 * If true, forces the shading of the paragraph to be clipped with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph shading.
	 */
	paragraphShadingColor: Swatch | string

	/**
	 * The distance to offset the left edge of the paragraph.
	 */
	paragraphShadingLeftOffset: number | string

	/**
	 * If true, the paragraph shading is On.
	 */
	paragraphShadingOn: boolean

	/**
	 * If true, the paragraph shading will overprint.
	 */
	paragraphShadingOverprint: boolean

	/**
	 * The distance to offset the right edge of the paragraph.
	 */
	paragraphShadingRightOffset: number | string

	/**
	 * If true, suppress printing of the shading of the paragraph.
	 */
	paragraphShadingSuppressPrinting: boolean

	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 0 to 100)
	 */
	paragraphShadingTint: number

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphShadingTopLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphShadingTopLeftCornerRadius: number | string

	/**
	 * The distance to offset the top edge of the paragraph.
	 */
	paragraphShadingTopOffset: number | string

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerRadius: number | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The parent of the Text (a XmlStory, TextPath, TextFrame, EndnoteTextFrame, Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, Story, Cell, XMLElement, Endnote, Footnote, Change, Note or HiddenText).
	 */
	parent: any

	/**
	 * The story that contains the text.
	 */
	parentStory: Story

	/**
	 * An array of the text frames that contain the text.
	 */
	parentTextFrames: TextFrame[] | TextPaths

	/**
	 * The text size.
	 */
	pointSize: number | string

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * The text position relative to the baseline.
	 */
	position: Position

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The hyphenation style chosen for the provider.
	 */
	providerHyphenationStyle: HyphenationStyleEnum

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | string

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string

	/**
	 * If true, ruby is on.
	 */
	rubyFlag: boolean

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount.
	 */
	rubyOverhang: boolean

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number

	/**
	 * The ruby spacing relative to the parent text.
	 */
	rubyParentSpacing: RubyParentSpacing

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition

	/**
	 * The ruby string contents.
	 */
	rubyString: string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100)
	 */
	rubyTint: number

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number

	/**
	 * If true, places a rule above the paragraph.
	 */
	ruleAbove: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule above.
	 */
	ruleAboveColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule above. Note: Valid only when the paragraph rule above type is not solid.
	 */
	ruleAboveGapColor: Swatch | string

	/**
	 * If true, the stroke gap of the paragraph rule above will overprint. Note: Valid only the rule above type is not solid.
	 */
	ruleAboveGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule. (Range: 0 to 100) Note: Valid only when the rule above type is not solid.
	 */
	ruleAboveGapTint: number

	/**
	 * The distance to indent the left edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number | string

	/**
	 * The line weight of the rule above.
	 */
	ruleAboveLineWeight: number | string

	/**
	 * The amount to offset the paragraph rule above from the baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number | string

	/**
	 * If true, the paragraph rule above will overprint.
	 */
	ruleAboveOverprint: boolean

	/**
	 * The distance to indent the right edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveRightIndent: number | string

	/**
	 * The tint (as a percentage) of the paragraph rule above. (Range: 0 to 100)
	 */
	ruleAboveTint: number

	/**
	 * The stroke type of the rule above the paragraph.
	 */
	ruleAboveType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth

	/**
	 * If true, applies a paragraph rule below.
	 */
	ruleBelow: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule below.
	 */
	ruleBelowColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule below. Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapColor: Swatch | string

	/**
	 * If true, the gap color of the rule below will overprint.
	 */
	ruleBelowGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule below. (Range: 0 to 100) Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number

	/**
	 * The distance to indent the left edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number | string

	/**
	 * The line weight of the rule below.
	 */
	ruleBelowLineWeight: number | string

	/**
	 * The amount to offset the the paragraph rule below from the baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number | string

	/**
	 * If true, the rule below will overprint.
	 */
	ruleBelowOverprint: boolean

	/**
	 * The distance to indent the right edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowRightIndent: number | string

	/**
	 * The tint (as a percentage) of the paragraph rule below. (Range: 0 to 100)
	 */
	ruleBelowTint: number

	/**
	 * The stroke type of the rule below the paragraph.
	 */
	ruleBelowType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing

	/**
	 * If true, the line changes size when characters are scaled.
	 */
	scaleAffectsLineHeight: boolean

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification

	/**
	 * The skew angle of the Text.
	 */
	skew: number

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | string

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | string

	/**
	 * The minimum space after a span or a split column
	 */
	spanColumnMinSpaceAfter: number | string

	/**
	 * The minimum space before a span or a split column
	 */
	spanColumnMinSpaceBefore: number | string

	/**
	 * Whether a paragraph should be a single column, span columns or split columns
	 */
	spanColumnType: SpanColumnTypeOptions

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * The inside gutter if the paragraph splits columns
	 */
	splitColumnInsideGutter: number | string

	/**
	 * The outside gutter if the paragraph splits columns
	 */
	splitColumnOutsideGutter: number | string

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | string

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100)
	 */
	strikeThroughTint: number

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | string

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the Text.
	 */
	strokeColor: Swatch | string

	/**
	 * The tint (as a percentage) of the stroke color of the Text. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | string

	/**
	 * If true, the applied style has been overridden with additional attributes.
	 */
	styleOverridden: boolean

	/**
	 * A list of the tab stops in the paragraph. Can return: Array of Arrays of Property Name/Value Pairs.
	 */
	tabList: any[]

	/**
	 * A collection of tab stops.
	 */
	tabStops: TabStops

	/**
	 * A collection of tables.
	 */
	tables: Tables

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text variable instances.
	 */
	textVariableInstances: TextVariableInstances

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number

	/**
	 * If true, underlines the text.
	 */
	underline: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | string

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100)
	 */
	underlineTint: number

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | string

	/**
	 * The vertical scaling applied to the Text.
	 */
	verticalScale: number

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment

	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Apply a character style.
	 * @param using The character style to apply.
	 */
	applyCharacterStyle(using: CharacterStyle): void

	/**
	 * Apply one or more conditions.
	 * @param using The condition(s) to apply
	 * @param removeExisting If true, remove existing conditions.
	 */
	applyConditions(using: Condition[], removeExisting?: boolean): void

	/**
	 * Apply a paragraph style.
	 * @param using The paragraph style to apply.
	 * @param clearingOverrides If true, clear any text attributes before applying the style.
	 */
	applyParagraphStyle(using: ParagraphStyle, clearingOverrides?: boolean): void

	/**
	 * asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Sets the case of the text.
	 * @param using The text case option.
	 */
	changecase(using: ChangecaseMode): void

	/**
	 * Clears the specified types of override.
	 * @param overridesToClear The types of override to clear.
	 */
	clearOverrides(overridesToClear?: OverrideType): void

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void

	/**
	 * Converts the text to a note.
	 */
	convertToNote(): Note

	/**
	 * Converts the text to a table.
	 * @param columnSeparator The character that starts a new column in the new table.
	 * @param rowSeparator The character starts a new row in the new table.
	 * @param numberOfColumns The number of columns in the table. Note: Valid only when the column and row separator characters are the same.
	 */
	convertToTable(columnSeparator: string, rowSeparator: string, numberOfColumns?: number): Table

	/**
	 * Create Email QR Code on the page item or document
	 * @param emailAddress QR code Email Address
	 * @param subject QR code Email Subject
	 * @param body QR code Email Body Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createEmailQRCode(emailAddress: string, subject: string, body: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create Hyperlink QR Code on the page item or document
	 * @param urlLink QR code Hyperlink URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createHyperlinkQRCode(urlLink: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[]

	/**
	 * Create Plain Text QR Code on the page item
	 * @param plainText QR code Plain Text
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createPlainTextQRCode(plainText: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create thumbnail for selected text using the applied style and overrides with the given properties.
	 * @param previewText Text to use as sample
	 * @param pointSize Text font size (in points)
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 * @param to The path to the export file.
	 * @param charOrParaStyle The applied style type to use.
	 */
	createStyleThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number[], to: File, charOrParaStyle: StyleType): boolean

	/**
	 * Create Text Msg QR Code on the page item or document
	 * @param cellNumber QR code Text Phone Number
	 * @param textMessage QR code Text Message
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createTextMsgQRCode(cellNumber: string, textMessage: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Create thumbnail for selected text with the given properties.
	 * @param previewText Text to use as sample
	 * @param pointSize Text font size (in points)
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 * @param to The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number[], to: File): boolean

	/**
	 * Create Business Card QR Code on the page item or load on document's placegun
	 * @param firstName QR code Business Card First Name
	 * @param lastName QR code Business Card Last Name
	 * @param jobTitle QR code Business Card Title
	 * @param cellPhone QR code Business Card Cell Phone Number
	 * @param phone QR code Business Card Phone Number
	 * @param email QR code Business Card Email Address
	 * @param organisation QR code Business Card Organisation
	 * @param streetAddress QR code Business Card Street Address
	 * @param city QR code Business Card City
	 * @param adrState QR code Business Card State
	 * @param country QR code Business Card Country
	 * @param postalCode QR code Business Card Postal Code
	 * @param website QR code Business Card URL
	 * @param qrCodeSwatch Swatch to be applied on generated QR Code Graphic .
	 * @param withProperties Initial values for properties of the new Text. Above parameters can also be passed as properties
	 */
	createVCardQRCode(firstName: string, lastName: string, jobTitle: string, cellPhone: string, phone: string, email: string, organisation: string, streetAddress: string, city: string, adrState: string, country: string, postalCode: string, website: string, qrCodeSwatch: Swatch | string, withProperties: string[]): void

	/**
	 * Duplicates the text in the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	duplicate(to: LocationOptions, reference: Text | Story | Cell | Row | Column | Table | PageItem): Text

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds hyperlink sources that intersecting with specified text range.
	 * @param sortOrder The sort order of found ranges.
	 */
	findHyperlinks(sortOrder: RangeSortOrder): HyperlinkTextSource[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Text[]

	/**
	 * Associates the page item with the specified XML element while preserving existing content.
	 * @param using The XML element.
	 */
	markup(using: XMLElement): void

	/**
	 * Moves the text to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: Text | Story | Cell | Row | Column | Table | PageItem): Text

	/**
	 * Places the file.
	 * @param fileName The file to place
	 * @param showingOptions Whether to display the import options dialog
	 * @param withProperties Initial values for properties of the placed object(s)
	 */
	place(fileName: File, showingOptions?: boolean, withProperties?: object): any[]

	/**
	 * Recomposes the text in the Text.
	 */
	recompose(): void

	/**
	 * Deletes the Text.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the Text in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Jump to the text range.
	 */
	showText(): void

	/**
	 * If true, text has local overrides
	 * @param charOrParaStyle Style type to look at.
	 * @param charStyleAsOverride Whether to consider character styles as overrides or not
	 */
	textHasOverrides(charOrParaStyle: StyleType, charStyleAsOverride?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Text.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of text objects.
 */
declare class Texts {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Text with the specified index.
	 * @param index The index.
	 */
	[index: number]: Text

	/**
	 * Returns any Text in the collection.
	 */
	anyItem(): Text

	/**
	 * Displays the number of elements in the Text.
	 */
	count(): number

	/**
	 * Returns every Text in the collection.
	 */
	everyItem(): Text[]

	/**
	 * Returns the first Text in the collection.
	 */
	firstItem(): Text

	/**
	 * Returns the Text with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Text

	/**
	 * Returns the Texts within the specified range.
	 * @param from The Text, index, or name at the beginning of the range.
	 * @param to The Text, index, or name at the end of the range.
	 */
	itemByRange(from: Text | number | string, to: Text | number | string): Text[]

	/**
	 * Returns the last Text in the collection.
	 */
	lastItem(): Text

	/**
	 * Returns the middle Text in the collection.
	 */
	middleItem(): Text

	/**
	 * Returns the Text whose index follows the specified Text in the collection.
	 * @param obj The Text whose index comes before the desired Text.
	 */
	nextItem(obj: Text): Text

	/**
	 * Returns the Text with the index previous to the specified index.
	 * @param obj The index of the Text that follows the desired Text.
	 */
	previousItem(obj: Text): Text

	/**
	 * Generates a string which, if executed, will return the Text.
	 */
	toSource(): string

}

/**
 * A text character.
 */
declare class Character extends Text {
}

/**
 * A collection of characters.
 */
declare class Characters {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Character with the specified index.
	 * @param index The index.
	 */
	[index: number]: Character

	/**
	 * Returns any Character in the collection.
	 */
	anyItem(): Character

	/**
	 * Displays the number of elements in the Character.
	 */
	count(): number

	/**
	 * Returns every Character in the collection.
	 */
	everyItem(): Character[]

	/**
	 * Returns the first Character in the collection.
	 */
	firstItem(): Character

	/**
	 * Returns the Character with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Character

	/**
	 * Returns the Characters within the specified range.
	 * @param from The Character, index, or name at the beginning of the range.
	 * @param to The Character, index, or name at the end of the range.
	 */
	itemByRange(from: Character | number | string, to: Character | number | string): Character[]

	/**
	 * Returns the last Character in the collection.
	 */
	lastItem(): Character

	/**
	 * Returns the middle Character in the collection.
	 */
	middleItem(): Character

	/**
	 * Returns the Character whose index follows the specified Character in the collection.
	 * @param obj The Character whose index comes before the desired Character.
	 */
	nextItem(obj: Character): Character

	/**
	 * Returns the Character with the index previous to the specified index.
	 * @param obj The index of the Character that follows the desired Character.
	 */
	previousItem(obj: Character): Character

	/**
	 * Generates a string which, if executed, will return the Character.
	 */
	toSource(): string

}

/**
 * A word.
 */
declare class Word extends Text {
}

/**
 * A collection of words.
 */
declare class Words {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Word with the specified index.
	 * @param index The index.
	 */
	[index: number]: Word

	/**
	 * Returns any Word in the collection.
	 */
	anyItem(): Word

	/**
	 * Displays the number of elements in the Word.
	 */
	count(): number

	/**
	 * Returns every Word in the collection.
	 */
	everyItem(): Word[]

	/**
	 * Returns the first Word in the collection.
	 */
	firstItem(): Word

	/**
	 * Returns the Word with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Word

	/**
	 * Returns the Words within the specified range.
	 * @param from The Word, index, or name at the beginning of the range.
	 * @param to The Word, index, or name at the end of the range.
	 */
	itemByRange(from: Word | number | string, to: Word | number | string): Word[]

	/**
	 * Returns the last Word in the collection.
	 */
	lastItem(): Word

	/**
	 * Returns the middle Word in the collection.
	 */
	middleItem(): Word

	/**
	 * Returns the Word whose index follows the specified Word in the collection.
	 * @param obj The Word whose index comes before the desired Word.
	 */
	nextItem(obj: Word): Word

	/**
	 * Returns the Word with the index previous to the specified index.
	 * @param obj The index of the Word that follows the desired Word.
	 */
	previousItem(obj: Word): Word

	/**
	 * Generates a string which, if executed, will return the Word.
	 */
	toSource(): string

}

/**
 * A line of text.
 */
declare class Line extends Text {
}

/**
 * A collection of lines.
 */
declare class Lines {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Line with the specified index.
	 * @param index The index.
	 */
	[index: number]: Line

	/**
	 * Returns any Line in the collection.
	 */
	anyItem(): Line

	/**
	 * Displays the number of elements in the Line.
	 */
	count(): number

	/**
	 * Returns every Line in the collection.
	 */
	everyItem(): Line[]

	/**
	 * Returns the first Line in the collection.
	 */
	firstItem(): Line

	/**
	 * Returns the Line with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Line

	/**
	 * Returns the Lines within the specified range.
	 * @param from The Line, index, or name at the beginning of the range.
	 * @param to The Line, index, or name at the end of the range.
	 */
	itemByRange(from: Line | number | string, to: Line | number | string): Line[]

	/**
	 * Returns the last Line in the collection.
	 */
	lastItem(): Line

	/**
	 * Returns the middle Line in the collection.
	 */
	middleItem(): Line

	/**
	 * Returns the Line whose index follows the specified Line in the collection.
	 * @param obj The Line whose index comes before the desired Line.
	 */
	nextItem(obj: Line): Line

	/**
	 * Returns the Line with the index previous to the specified index.
	 * @param obj The index of the Line that follows the desired Line.
	 */
	previousItem(obj: Line): Line

	/**
	 * Generates a string which, if executed, will return the Line.
	 */
	toSource(): string

}

/**
 * A text column.
 */
declare class TextColumn extends Text {
}

/**
 * A collection of text columns.
 */
declare class TextColumns {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TextColumn with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextColumn

	/**
	 * Returns any TextColumn in the collection.
	 */
	anyItem(): TextColumn

	/**
	 * Displays the number of elements in the TextColumn.
	 */
	count(): number

	/**
	 * Returns every TextColumn in the collection.
	 */
	everyItem(): TextColumn[]

	/**
	 * Returns the first TextColumn in the collection.
	 */
	firstItem(): TextColumn

	/**
	 * Returns the TextColumn with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextColumn

	/**
	 * Returns the TextColumns within the specified range.
	 * @param from The TextColumn, index, or name at the beginning of the range.
	 * @param to The TextColumn, index, or name at the end of the range.
	 */
	itemByRange(from: TextColumn | number | string, to: TextColumn | number | string): TextColumn[]

	/**
	 * Returns the last TextColumn in the collection.
	 */
	lastItem(): TextColumn

	/**
	 * Returns the middle TextColumn in the collection.
	 */
	middleItem(): TextColumn

	/**
	 * Returns the TextColumn whose index follows the specified TextColumn in the collection.
	 * @param obj The TextColumn whose index comes before the desired TextColumn.
	 */
	nextItem(obj: TextColumn): TextColumn

	/**
	 * Returns the TextColumn with the index previous to the specified index.
	 * @param obj The index of the TextColumn that follows the desired TextColumn.
	 */
	previousItem(obj: TextColumn): TextColumn

	/**
	 * Generates a string which, if executed, will return the TextColumn.
	 */
	toSource(): string

}

/**
 * A paragraph.
 */
declare class Paragraph extends Text {
	/**
	 * The current bullets or numbering string.
	 */
	bulletsAndNumberingResultText: string

	/**
	 * The current level number value.
	 */
	numberingResultNumber: number

}

/**
 * A collection of paragraphs.
 */
declare class Paragraphs {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Paragraph with the specified index.
	 * @param index The index.
	 */
	[index: number]: Paragraph

	/**
	 * Returns any Paragraph in the collection.
	 */
	anyItem(): Paragraph

	/**
	 * Displays the number of elements in the Paragraph.
	 */
	count(): number

	/**
	 * Returns every Paragraph in the collection.
	 */
	everyItem(): Paragraph[]

	/**
	 * Returns the first Paragraph in the collection.
	 */
	firstItem(): Paragraph

	/**
	 * Returns the Paragraph with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Paragraph

	/**
	 * Returns the Paragraphs within the specified range.
	 * @param from The Paragraph, index, or name at the beginning of the range.
	 * @param to The Paragraph, index, or name at the end of the range.
	 */
	itemByRange(from: Paragraph | number | string, to: Paragraph | number | string): Paragraph[]

	/**
	 * Returns the last Paragraph in the collection.
	 */
	lastItem(): Paragraph

	/**
	 * Returns the middle Paragraph in the collection.
	 */
	middleItem(): Paragraph

	/**
	 * Returns the Paragraph whose index follows the specified Paragraph in the collection.
	 * @param obj The Paragraph whose index comes before the desired Paragraph.
	 */
	nextItem(obj: Paragraph): Paragraph

	/**
	 * Returns the Paragraph with the index previous to the specified index.
	 * @param obj The index of the Paragraph that follows the desired Paragraph.
	 */
	previousItem(obj: Paragraph): Paragraph

	/**
	 * Generates a string which, if executed, will return the Paragraph.
	 */
	toSource(): string

}

/**
 * A continuous range of identical text formatting attributes.
 */
declare class TextStyleRange extends Text {
}

/**
 * A collection of text style ranges.
 */
declare class TextStyleRanges {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TextStyleRange with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextStyleRange

	/**
	 * Returns any TextStyleRange in the collection.
	 */
	anyItem(): TextStyleRange

	/**
	 * Displays the number of elements in the TextStyleRange.
	 */
	count(): number

	/**
	 * Returns every TextStyleRange in the collection.
	 */
	everyItem(): TextStyleRange[]

	/**
	 * Returns the first TextStyleRange in the collection.
	 */
	firstItem(): TextStyleRange

	/**
	 * Returns the TextStyleRange with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextStyleRange

	/**
	 * Returns the TextStyleRanges within the specified range.
	 * @param from The TextStyleRange, index, or name at the beginning of the range.
	 * @param to The TextStyleRange, index, or name at the end of the range.
	 */
	itemByRange(from: TextStyleRange | number | string, to: TextStyleRange | number | string): TextStyleRange[]

	/**
	 * Returns the last TextStyleRange in the collection.
	 */
	lastItem(): TextStyleRange

	/**
	 * Returns the middle TextStyleRange in the collection.
	 */
	middleItem(): TextStyleRange

	/**
	 * Returns the TextStyleRange whose index follows the specified TextStyleRange in the collection.
	 * @param obj The TextStyleRange whose index comes before the desired TextStyleRange.
	 */
	nextItem(obj: TextStyleRange): TextStyleRange

	/**
	 * Returns the TextStyleRange with the index previous to the specified index.
	 * @param obj The index of the TextStyleRange that follows the desired TextStyleRange.
	 */
	previousItem(obj: TextStyleRange): TextStyleRange

	/**
	 * Generates a string which, if executed, will return the TextStyleRange.
	 */
	toSource(): string

}

/**
 * An insertion point between two characters.
 */
declare class InsertionPoint extends Text {
	/**
	 * A collection of endnotes.
	 */
	endnotes: Endnotes

	/**
	 * Creates a new endnote. Internally it creates the endnote reference and its endnote text range.
	 */
	createEndnote(): Endnote

	/**
	 * Experimental: Place the text fragment fetched from url onto insertion point and create a link
	 * @param linkResourceURI Resource URI for the link.
	 * @param name The tag name for the key.
	 */
	createTextFragmentLink(linkResourceURI: string, name: string): Link

}

/**
 * A collection of insertion points.
 */
declare class InsertionPoints {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the InsertionPoint with the specified index.
	 * @param index The index.
	 */
	[index: number]: InsertionPoint

	/**
	 * Returns any InsertionPoint in the collection.
	 */
	anyItem(): InsertionPoint

	/**
	 * Displays the number of elements in the InsertionPoint.
	 */
	count(): number

	/**
	 * Returns every InsertionPoint in the collection.
	 */
	everyItem(): InsertionPoint[]

	/**
	 * Returns the first InsertionPoint in the collection.
	 */
	firstItem(): InsertionPoint

	/**
	 * Returns the InsertionPoint with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): InsertionPoint

	/**
	 * Returns the InsertionPoints within the specified range.
	 * @param from The InsertionPoint, index, or name at the beginning of the range.
	 * @param to The InsertionPoint, index, or name at the end of the range.
	 */
	itemByRange(from: InsertionPoint | number | string, to: InsertionPoint | number | string): InsertionPoint[]

	/**
	 * Returns the last InsertionPoint in the collection.
	 */
	lastItem(): InsertionPoint

	/**
	 * Returns the middle InsertionPoint in the collection.
	 */
	middleItem(): InsertionPoint

	/**
	 * Returns the InsertionPoint whose index follows the specified InsertionPoint in the collection.
	 * @param obj The InsertionPoint whose index comes before the desired InsertionPoint.
	 */
	nextItem(obj: InsertionPoint): InsertionPoint

	/**
	 * Returns the InsertionPoint with the index previous to the specified index.
	 * @param obj The index of the InsertionPoint that follows the desired InsertionPoint.
	 */
	previousItem(obj: InsertionPoint): InsertionPoint

	/**
	 * Generates a string which, if executed, will return the InsertionPoint.
	 */
	toSource(): string

}

/**
 * A text frame.
 */
declare class TextFrame extends PageItem {
	/**
	 * Anchored object settings.
	 */
	anchoredObjectSettings: AnchoredObjectSetting

	/**
	 * Baseline frame grid option settings.
	 */
	baselineFrameGridOptions: BaselineFrameGridOption

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * The type of content that a frame can contain.
	 */
	contentType: ContentType

	/**
	 * The contents of the text frame.
	 */
	contents: string | TextFrameContents | SpecialCharacters

	/**
	 * The last text frame in the thread.
	 */
	endTextFrame: TextFrame | TextPath

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of footnotes.
	 */
	footnotes: Footnotes

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * Default grid properties. Note: Applies to named, layout, and frame (story) grids.
	 */
	gridData: GridDataInformation

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of hidden text objects.
	 */
	hiddenTexts: HiddenTexts

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The next text frame in the thread.
	 */
	nextTextFrame: TextFrame | TextPath | NothingEnum

	/**
	 * A collection of notes.
	 */
	notes: Notes

	/**
	 * Export options for the object
	 */
	objectExportOptions: ObjectExportOption

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * If true, the story has overset text.
	 */
	overflows: boolean

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The story that contains the text.
	 */
	parentStory: Story

	/**
	 * A collection of paths.
	 */
	paths: Paths

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * The previous text frame in the thread.
	 */
	previousTextFrame: TextFrame | TextPath | NothingEnum

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * The first text frame in the thread.
	 */
	startTextFrame: TextFrame | TextPath

	/**
	 * A collection of tables.
	 */
	tables: Tables

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * The index of the text frame within the story.
	 */
	textFrameIndex: number

	/**
	 * Text frame preference settings.
	 */
	textFramePreferences: TextFramePreference

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of text paths.
	 */
	textPaths: TextPaths

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text variable instances.
	 */
	textVariableInstances: TextVariableInstances

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * Creates a new page item by combining the TextFrame with other objects. Deletes the objects if they do not intersect.
	 * @param with_ The object(s) to add.
	 */
	addPath(with_: PageItem[]): PageItem

	/**
	 * Brings the TextFrame forward one level in its layer.
	 */
	bringForward(): void

	/**
	 * Brings the TextFrame to the front of its layer or in front of a particular item.
	 * @param reference The reference object to bring the object in front of (must have same parent)
	 */
	bringToFront(reference: PageItem): void

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Convert the text frame contents to raw text
	 */
	convertToRawText(): void

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[]

	/**
	 * Creates a new page item by excluding the overlapping areas of the TextFrame and other objects.
	 * @param with_ The object(s) to exclude.
	 */
	excludeOverlapPath(with_: PageItem[]): PageItem

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Creates a new page item by intersecting the TextFrame with other objects. Returns an error if the objects do not intersect.
	 * @param with_ The object(s) with which to intersect.
	 */
	intersectPath(with_: PageItem[]): PageItem

	/**
	 * Creates a compound path by combining the path(s) of the TextFrame with the paths of other objects.
	 * @param with_ The other objects whose paths to include in the new compound path.
	 */
	makeCompoundPath(with_: PageItem[]): PageItem

	/**
	 * Creates a new page item by reverse subtracting the overlapping areas of the TextFrame and other objects.
	 * @param with_ The object(s) to reverse subtract.
	 */
	minusBack(with_: PageItem[]): PageItem

	/**
	 * Deprecated: Use contentPlace method. Original Description: Create a linked story and place it into the target page item.
	 * @param parentStory The story to place and link from.
	 * @param showingOptions Whether to display the link options dialog
	 */
	placeAndLink(parentStory: Story, showingOptions?: boolean): Story

	/**
	 * Recomposes the text in the TextFrame.
	 */
	recompose(): void

	/**
	 * Releases a compound path.
	 */
	releaseCompoundPath(): PageItem[]

	/**
	 * Sends the TextFrame back one level in its layer.
	 */
	sendBackward(): void

	/**
	 * Sends the TextFrame to the back of its layer or behind a particular item (must have same parent).
	 * @param reference The reference object to send the object behind
	 */
	sendToBack(reference: PageItem): void

	/**
	 * Creates a new page item by subtracting the overlapping areas of the TextFrame and other objects.
	 * @param with_ The object(s) to subtract.
	 */
	subtractPath(with_: PageItem[]): PageItem

}

/**
 * A collection of text frames.
 */
declare class TextFrames {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TextFrame with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextFrame

	/**
	 * Creates a new TextFrame
	 * @param layer The layer on which to create the TextFrame.
	 * @param at The location at which to insert the TextFrame relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new TextFrame
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): TextFrame

	/**
	 * Returns any TextFrame in the collection.
	 */
	anyItem(): TextFrame

	/**
	 * Displays the number of elements in the TextFrame.
	 */
	count(): number

	/**
	 * Returns every TextFrame in the collection.
	 */
	everyItem(): TextFrame[]

	/**
	 * Returns the first TextFrame in the collection.
	 */
	firstItem(): TextFrame

	/**
	 * Returns the TextFrame with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextFrame

	/**
	 * Returns the TextFrame with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextFrame

	/**
	 * Returns the TextFrame with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextFrame

	/**
	 * Returns the TextFrames within the specified range.
	 * @param from The TextFrame, index, or name at the beginning of the range.
	 * @param to The TextFrame, index, or name at the end of the range.
	 */
	itemByRange(from: TextFrame | number | string, to: TextFrame | number | string): TextFrame[]

	/**
	 * Returns the last TextFrame in the collection.
	 */
	lastItem(): TextFrame

	/**
	 * Returns the middle TextFrame in the collection.
	 */
	middleItem(): TextFrame

	/**
	 * Returns the TextFrame whose index follows the specified TextFrame in the collection.
	 * @param obj The TextFrame whose index comes before the desired TextFrame.
	 */
	nextItem(obj: TextFrame): TextFrame

	/**
	 * Returns the TextFrame with the index previous to the specified index.
	 * @param obj The index of the TextFrame that follows the desired TextFrame.
	 */
	previousItem(obj: TextFrame): TextFrame

	/**
	 * Generates a string which, if executed, will return the TextFrame.
	 */
	toSource(): string

}

/**
 * A story.
 */
declare class Story {
	/**
	 * Dispatched after a Story is placed. This event bubbles. This event is not cancelable.
	 */
	AFTER_PLACE: string

	/**
	 * Dispatched before a Story is placed. This event bubbles. This event is cancelable.
	 */
	BEFORE_PLACE: string

	/**
	 * Lists all graphics contained by the Story.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the Story.
	 */
	allPageItems: PageItem[]

	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean

	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string

	/**
	 * The font applied to the Story, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | string

	/**
	 * The named grid in use.
	 */
	appliedNamedGrid: NamedGrid

	/**
	 * The applied character styles dictated by nested styles.
	 */
	appliedNestedStyles: CharacterStyle[]

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string

	/**
	 * The paragraph style applied to the text.
	 */
	appliedParagraphStyle: ParagraphStyle | string

	/**
	 * The XML element associated with the Story.
	 */
	associatedXMLElement: XMLItem

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | string

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean

	/**
	 * A collection of buttons.
	 */
	buttons: Buttons

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization

	/**
	 * A collection of cell style mappings.
	 */
	cellStyleMappings: CellStyleMappings

	/**
	 * A collection of changes.
	 */
	changes: Changes

	/**
	 * A collection of char style mappings.
	 */
	charStyleMappings: CharStyleMappings

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number

	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * A collection of checkboxes.
	 */
	checkBoxes: CheckBoxes

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean

	/**
	 * A collection of comboboxes.
	 */
	comboBoxes: ComboBoxes

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string

	/**
	 * The contents of the text.
	 */
	contents: string | SpecialCharacters

	/**
	 * The desired width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number

	/**
	 * The desired letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500)
	 */
	desiredLetterSpacing: number

	/**
	 * The desired word spacing, specified as a percentage of the font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number

	/**
	 * The character style to apply to the drop cap.
	 */
	dropCapStyle: CharacterStyle | string

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin

	/**
	 * A collection of endnote text ranges.
	 */
	endnoteRanges: EndnoteRanges

	/**
	 * A collection of endnote text frames.
	 */
	endnoteTextFrames: EndnoteTextFrames

	/**
	 * A collection of endnotes.
	 */
	endnotes: Endnotes

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the Story. .
	 */
	fillColor: Swatch | string

	/**
	 * The tint (as a percentage) of the fill color of the Story. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | string

	/**
	 * The name of the font style.
	 */
	fontStyle: string

	/**
	 * A collection of footnotes.
	 */
	footnotes: Footnotes

	/**
	 * A collection of form fields.
	 */
	formFields: FormFields

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: (number | string)[]

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[]

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * If true, aligns only the first line to the frame grid or baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment

	/**
	 * Default grid properties. Note: Applies to named, layout, and frame (story) grids.
	 */
	gridData: GridDataInformation

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of hidden text objects.
	 */
	hiddenTexts: HiddenTexts

	/**
	 * The horizontal scaling applied to the Story.
	 */
	horizontalScale: number

	/**
	 * The relative desirability of better spacing vs. fewer hyphens. A lower value results in greater use of hyphens. (Range: 0 to 100)
	 */
	hyphenWeight: number

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean

	/**
	 * The mininum number of letters at the beginning of a word that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number

	/**
	 * The minimum number of letters at the end of a word that can be broken by a hyphen.
	 */
	hyphenateBeforeLast: number

	/**
	 * If true, allows hyphenation of capitalized words.
	 */
	hyphenateCapitalizedWords: boolean

	/**
	 * The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean

	/**
	 * The minimum number of letters a word must have in order to qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number

	/**
	 * If true, allows hyphenation.
	 */
	hyphenation: boolean

	/**
	 * The amount of white space allowed at the end of a line of non-justified text before hypenation begins. Note: Valid when composer is single-line composer.
	 */
	hyphenationZone: number | string

	/**
	 * The unique ID of the Story.
	 */
	id: number

	/**
	 * The IDML component name of the Story.
	 */
	idmlComponentName: string

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean

	/**
	 * Export options for InCopy INCX document format.
	 */
	incopyExportOptions: InCopyExportOption

	/**
	 * The index of the Story within its containing object.
	 */
	index: number

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * returns true if it's an endnote story otherwise returns false.
	 */
	isEndnoteStory: boolean

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The source file of the link.
	 */
	itemLink: Link

	/**
	 * The number of grid squares in which to arrange the text.
	 */
	jidori: number

	/**
	 * The paragraph alignment.
	 */
	justification: Justification

	/**
	 * Use of Kashidas for justification
	 */
	kashidas: KashidasOptions

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean

	/**
	 * The alignment of kenten characters relative to the parent characters.
	 */
	kentenAlignment: KentenAlignment

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenStrokeTint: number

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenTint: number

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number

	/**
	 * The vertical size of kenten charachers as a percent of the original size.
	 */
	kentenYScale: number

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | string

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | string

	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * Linked story options
	 */
	linkedStoryOptions: LinkedStoryOption

	/**
	 * A collection of listboxes.
	 */
	listBoxes: ListBoxes

	/**
	 * The lock state.
	 */
	lockState: LockStateValues

	/**
	 * The maximum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number

	/**
	 * The maximum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number

	/**
	 * The maximum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number

	/**
	 * If true, consecutive para borders with completely similar properties are merged.
	 */
	mergeConsecutiveParaBorders: boolean

	/**
	 * The minimum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number

	/**
	 * The minimum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number

	/**
	 * The minimum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults

	/**
	 * A collection of multi-state objects.
	 */
	multiStateObjects: MultiStateObjects

	/**
	 * The name of the Story; this is an alias to the Story's label property.
	 */
	name: string

	/**
	 * A collection of nested GREP styles.
	 */
	nestedGrepStyles: NestedGrepStyles

	/**
	 * A collection of nested line styles.
	 */
	nestedLineStyles: NestedLineStyles

	/**
	 * A collection of nested styles.
	 */
	nestedStyles: NestedStyles

	/**
	 * If true, keeps the text on the same line.
	 */
	noBreak: boolean

	/**
	 * A collection of notes.
	 */
	notes: Notes

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number

	/**
	 * Numbering restart policies.
	 */
	numberingRestartPolicies: NumberingRestartPolicy

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number

	/**
	 * OpenType features. Can return: Array of Array of 2 Strings or Long Integers.
	 */
	opentypeFeatures: any[]

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean

	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean

	/**
	 * If true, use overlapping swash forms in OpenType fonts
	 */
	otfOverlapSwash: boolean

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean

	/**
	 * If true, applies italics to half-width alphanumerics.
	 */
	otfRomanItalics: boolean

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean

	/**
	 * If true, use stretched alternate forms in OpenType fonts
	 */
	otfStretchedAlternate: boolean

	/**
	 * If true, use stylistic alternate forms in OpenType fonts
	 */
	otfStylisticAlternate: boolean

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * If true, the story has overset text.
	 */
	overflows: boolean

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of para style mappings.
	 */
	paraStyleMappings: ParaStyleMappings

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphBorderBottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphBorderBottomLeftCornerRadius: number | string

	/**
	 * The bottom line weight of the border of paragraph.
	 */
	paragraphBorderBottomLineWeight: number | string

	/**
	 * The distance to offset the bottom edge of the paragraph border.
	 */
	paragraphBorderBottomOffset: number | string

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph border.
	 */
	paragraphBorderBottomOrigin: ParagraphBorderBottomOriginEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphBorderBottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphBorderBottomRightCornerRadius: number | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph stroke.
	 */
	paragraphBorderColor: Swatch | string

	/**
	 * If true, then paragraph border is also displayed at the points where the paragraph splits across frames or columns.
	 */
	paragraphBorderDisplayIfSplits: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph border gap. Note: Valid only when the border type is not solid.
	 */
	paragraphBorderGapColor: Swatch | string

	/**
	 * If true, the paragraph border gap will overprint. Note: Valid only when border type is not solid.
	 */
	paragraphBorderGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the paragraph border gap. Note: Valid only when the border type is not solid. (Range: 0 to 100)
	 */
	paragraphBorderGapTint: number

	/**
	 * The left line weight of the border of paragraph.
	 */
	paragraphBorderLeftLineWeight: number | string

	/**
	 * The distance to offset the left edge of the paragraph border.
	 */
	paragraphBorderLeftOffset: number | string

	/**
	 * If true, the paragraph border is on.
	 */
	paragraphBorderOn: boolean

	/**
	 * If true, the paragraph border will overprint.
	 */
	paragraphBorderOverprint: boolean

	/**
	 * The right line weight of the border of paragraph.
	 */
	paragraphBorderRightLineWeight: number | string

	/**
	 * The distance to offset the right edge of the paragraph border.
	 */
	paragraphBorderRightOffset: number | string

	/**
	 * The end shape of an open path.
	 */
	paragraphBorderStrokeEndCap: EndCap

	/**
	 * The corner join applied to the Story.
	 */
	paragraphBorderStrokeEndJoin: EndJoin

	/**
	 * The tint (as a percentage) of the paragraph stroke. (Range: 0 to 100)
	 */
	paragraphBorderTint: number

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphBorderTopLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphBorderTopLeftCornerRadius: number | string

	/**
	 * The top line weight of the border of paragraph.
	 */
	paragraphBorderTopLineWeight: number | string

	/**
	 * The distance to offset the top edge of the paragraph border.
	 */
	paragraphBorderTopOffset: number | string

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph border.
	 */
	paragraphBorderTopOrigin: ParagraphBorderTopOriginEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerRadius: number | string

	/**
	 * The type of the border for the paragraph.
	 */
	paragraphBorderType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph border.
	 */
	paragraphBorderWidth: ParagraphBorderEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long
	 */
	paragraphKashidaWidth: number

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphShadingBottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphShadingBottomLeftCornerRadius: number | string

	/**
	 * The distance to offset the bottom edge of the paragraph.
	 */
	paragraphShadingBottomOffset: number | string

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphShadingBottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphShadingBottomRightCornerRadius: number | string

	/**
	 * If true, forces the shading of the paragraph to be clipped with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph shading.
	 */
	paragraphShadingColor: Swatch | string

	/**
	 * The distance to offset the left edge of the paragraph.
	 */
	paragraphShadingLeftOffset: number | string

	/**
	 * If true, the paragraph shading is On.
	 */
	paragraphShadingOn: boolean

	/**
	 * If true, the paragraph shading will overprint.
	 */
	paragraphShadingOverprint: boolean

	/**
	 * The distance to offset the right edge of the paragraph.
	 */
	paragraphShadingRightOffset: number | string

	/**
	 * If true, suppress printing of the shading of the paragraph.
	 */
	paragraphShadingSuppressPrinting: boolean

	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 0 to 100)
	 */
	paragraphShadingTint: number

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphShadingTopLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphShadingTopLeftCornerRadius: number | string

	/**
	 * The distance to offset the top edge of the paragraph.
	 */
	paragraphShadingTopOffset: number | string

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerRadius: number | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The parent of the Story (a XMLElement or Document).
	 */
	parent: any

	/**
	 * The text size.
	 */
	pointSize: number | string

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * The text position relative to the baseline.
	 */
	position: Position

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The hyphenation style chosen for the provider.
	 */
	providerHyphenationStyle: HyphenationStyleEnum

	/**
	 * A collection of radio buttons.
	 */
	radioButtons: RadioButtons

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | string

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string

	/**
	 * If true, ruby is on.
	 */
	rubyFlag: boolean

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount.
	 */
	rubyOverhang: boolean

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number

	/**
	 * The ruby spacing relative to the parent text.
	 */
	rubyParentSpacing: RubyParentSpacing

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition

	/**
	 * The ruby string contents.
	 */
	rubyString: string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100)
	 */
	rubyTint: number

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number

	/**
	 * If true, places a rule above the paragraph.
	 */
	ruleAbove: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule above.
	 */
	ruleAboveColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule above. Note: Valid only when the paragraph rule above type is not solid.
	 */
	ruleAboveGapColor: Swatch | string

	/**
	 * If true, the stroke gap of the paragraph rule above will overprint. Note: Valid only the rule above type is not solid.
	 */
	ruleAboveGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule. (Range: 0 to 100) Note: Valid only when the rule above type is not solid.
	 */
	ruleAboveGapTint: number

	/**
	 * The distance to indent the left edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number | string

	/**
	 * The line weight of the rule above.
	 */
	ruleAboveLineWeight: number | string

	/**
	 * The amount to offset the paragraph rule above from the baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number | string

	/**
	 * If true, the paragraph rule above will overprint.
	 */
	ruleAboveOverprint: boolean

	/**
	 * The distance to indent the right edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveRightIndent: number | string

	/**
	 * The tint (as a percentage) of the paragraph rule above. (Range: 0 to 100)
	 */
	ruleAboveTint: number

	/**
	 * The stroke type of the rule above the paragraph.
	 */
	ruleAboveType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth

	/**
	 * If true, applies a paragraph rule below.
	 */
	ruleBelow: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule below.
	 */
	ruleBelowColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule below. Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapColor: Swatch | string

	/**
	 * If true, the gap color of the rule below will overprint.
	 */
	ruleBelowGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule below. (Range: 0 to 100) Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number

	/**
	 * The distance to indent the left edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number | string

	/**
	 * The line weight of the rule below.
	 */
	ruleBelowLineWeight: number | string

	/**
	 * The amount to offset the the paragraph rule below from the baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number | string

	/**
	 * If true, the rule below will overprint.
	 */
	ruleBelowOverprint: boolean

	/**
	 * The distance to indent the right edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowRightIndent: number | string

	/**
	 * The tint (as a percentage) of the paragraph rule below. (Range: 0 to 100)
	 */
	ruleBelowTint: number

	/**
	 * The stroke type of the rule below the paragraph.
	 */
	ruleBelowType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing

	/**
	 * If true, the line changes size when characters are scaled.
	 */
	scaleAffectsLineHeight: boolean

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number

	/**
	 * A collection of signature fields.
	 */
	signatureFields: SignatureFields

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification

	/**
	 * The skew angle of the Story.
	 */
	skew: number

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | string

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | string

	/**
	 * The minimum space after a span or a split column
	 */
	spanColumnMinSpaceAfter: number | string

	/**
	 * The minimum space before a span or a split column
	 */
	spanColumnMinSpaceBefore: number | string

	/**
	 * Whether a paragraph should be a single column, span columns or split columns
	 */
	spanColumnType: SpanColumnTypeOptions

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * The inside gutter if the paragraph splits columns
	 */
	splitColumnInsideGutter: number | string

	/**
	 * The outside gutter if the paragraph splits columns
	 */
	splitColumnOutsideGutter: number | string

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph

	/**
	 * Story preference settings.
	 */
	storyPreferences: StoryPreference

	/**
	 * Title for this InCopy story.
	 */
	storyTitle: string

	/**
	 * The type of story.
	 */
	storyType: StoryTypes

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | string

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100)
	 */
	strikeThroughTint: number

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | string

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the Story.
	 */
	strokeColor: Swatch | string

	/**
	 * The tint (as a percentage) of the stroke color of the Story. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | string

	/**
	 * If true, the applied style has been overridden with additional attributes.
	 */
	styleOverridden: boolean

	/**
	 * A list of the tab stops in the paragraph. Can return: Array of Arrays of Property Name/Value Pairs.
	 */
	tabList: any[]

	/**
	 * A collection of tab stops.
	 */
	tabStops: TabStops

	/**
	 * A collection of table style mappings.
	 */
	tableStyleMappings: TableStyleMappings

	/**
	 * A collection of tables.
	 */
	tables: Tables

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number

	/**
	 * A collection of text boxes.
	 */
	textBoxes: TextBoxes

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * Array of text frames or text paths.
	 */
	textContainers: TextFrame[] | TextPaths

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text variable instances.
	 */
	textVariableInstances: TextVariableInstances

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * If true, track changes is turned on.
	 */
	trackChanges: boolean

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number

	/**
	 * If true, underlines the text.
	 */
	underline: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | string

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100)
	 */
	underlineTint: number

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | string

	/**
	 * Indicates whether the text is user or placeholder text.
	 */
	userText: boolean

	/**
	 * The vertical scaling applied to the Story.
	 */
	verticalScale: number

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment

	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask

	/**
	 * Tag the object or the parent story using default tags defined in XML preference.
	 */
	autoTag(): void

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Sets the case of the text.
	 * @param using The text case option.
	 */
	changecase(using: ChangecaseMode): void

	/**
	 * Checks in the story or stories.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	checkIn(versionComments: string, forceSave?: boolean): boolean

	/**
	 * Checks out the story.
	 */
	checkOut(): boolean

	/**
	 * Clears the specified types of override.
	 * @param overridesToClear The types of override to clear.
	 */
	clearOverrides(overridesToClear?: OverrideType): void

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void

	/**
	 * Converts text to outlines. Each line of text becomes a polygon object. When the converted text is a single letter that has no internal spaces or detached parts, the polygon contains only a single path. Note: To determine whether a font allows the creation of outlines, see allow outlines.
	 * @param deleteOriginal If true, deletes the original text. If false, creates the outlines as separate object(s) on top of the text.
	 */
	createOutlines(deleteOriginal?: boolean): PageItem[]

	/**
	 * Duplicates the text in the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	duplicate(to: LocationOptions, reference: Text | Story | Cell | Row | Column | Table | PageItem): Text

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Story[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Associates the page item with the specified XML element while preserving existing content.
	 * @param using The XML element.
	 */
	markup(using: XMLElement): void

	/**
	 * Moves the text to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: Text | Story | Cell | Row | Column | Table | PageItem): Text

	/**
	 * Places XML content into the specified object. Note: Replaces any existing content.
	 * @param using The XML element whose content you want to place.
	 */
	placeXML(using: XMLElement): void

	/**
	 * Recomposes the text in the Story.
	 */
	recompose(): void

	/**
	 * Deletes the Story.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Reverts the document to its state at the last save operation.
	 */
	revert(): boolean

	/**
	 * Opens the story in a story editor window.
	 */
	storyEdit(): StoryWindow

	/**
	 * Generates a string which, if executed, will return the Story.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of stories.
 */
declare class Stories {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Story with the specified index.
	 * @param index The index.
	 */
	[index: number]: Story

	/**
	 * Returns any Story in the collection.
	 */
	anyItem(): Story

	/**
	 * Displays the number of elements in the Story.
	 */
	count(): number

	/**
	 * Returns every Story in the collection.
	 */
	everyItem(): Story[]

	/**
	 * Returns the first Story in the collection.
	 */
	firstItem(): Story

	/**
	 * Returns the Story with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Story

	/**
	 * Returns the Story with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Story

	/**
	 * Returns the Story with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Story

	/**
	 * Returns the Stories within the specified range.
	 * @param from The Story, index, or name at the beginning of the range.
	 * @param to The Story, index, or name at the end of the range.
	 */
	itemByRange(from: Story | number | string, to: Story | number | string): Story[]

	/**
	 * Returns the last Story in the collection.
	 */
	lastItem(): Story

	/**
	 * Returns the middle Story in the collection.
	 */
	middleItem(): Story

	/**
	 * Returns the Story whose index follows the specified Story in the collection.
	 * @param obj The Story whose index comes before the desired Story.
	 */
	nextItem(obj: Story): Story

	/**
	 * Returns the Story with the index previous to the specified index.
	 * @param obj The index of the Story that follows the desired Story.
	 */
	previousItem(obj: Story): Story

	/**
	 * Generates a string which, if executed, will return the Story.
	 */
	toSource(): string

}

/**
 * A paragraph style.
 */
declare class ParagraphStyle {
	/**
	 * If true, words unassociated with a hyphenation dictionary can break to the next line on any character.
	 */
	allowArbitraryHyphenation: boolean

	/**
	 * The font applied to the ParagraphStyle, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | string

	/**
	 * The list to be part of.
	 */
	appliedNumberingList: NumberingList | string

	/**
	 * The percent of the type size to use for auto leading. (Range: 0 to 500).
	 */
	autoLeading: number

	/**
	 * The number of half-width characters at or below which the characters automatically run horizontally in vertical text.
	 */
	autoTcy: number

	/**
	 * If true, auto tcy includes Roman characters.
	 */
	autoTcyIncludeRoman: boolean

	/**
	 * If true or set to an enumeration value, balances ragged lines. Note: Not valid with a single-line text composer.
	 */
	balanceRaggedLines: boolean | BalanceLinesStyle

	/**
	 * The style that this style is based on.
	 */
	basedOn: ParagraphStyle | string

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | string

	/**
	 * Bullet character.
	 */
	bulletChar: Bullet

	/**
	 * The alignment of the bullet character.
	 */
	bulletsAlignment: ListAlignment

	/**
	 * List type for bullets and numbering.
	 */
	bulletsAndNumberingListType: ListType

	/**
	 * The character style to be used for the text after string.
	 */
	bulletsCharacterStyle: CharacterStyle | string

	/**
	 * The text after string expression for bullets.
	 */
	bulletsTextAfter: string

	/**
	 * If true, adds the double period (..), ellipse (...), and double hyphen (--) to the selected kinsoku set. Note: Valid only when a kinsoku set is in effect.
	 */
	bunriKinshi: boolean

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean

	/**
	 * The text composer to use to compose the text.
	 */
	composer: string

	/**
	 * The desired width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	desiredGlyphScaling: number

	/**
	 * The desired letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500)
	 */
	desiredLetterSpacing: number

	/**
	 * The desired word spacing, specified as a percentage of the font word space value. (Range: 0 to 1000)
	 */
	desiredWordSpacing: number

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions

	/**
	 * The number of characters to drop cap.
	 */
	dropCapCharacters: number

	/**
	 * The number of lines to drop cap.
	 */
	dropCapLines: number

	/**
	 * The character style to apply to the drop cap.
	 */
	dropCapStyle: CharacterStyle | string

	/**
	 * Details about the drop cap based on the glyph outlines. 1 = left side bearing. 2 = descenders. 0x100,0x200,0x400 are used for Japanese frame grid.
	 */
	dropcapDetail: number

	/**
	 * Emit CSS
	 */
	emitCss: boolean

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the ParagraphStyle. .
	 */
	fillColor: Swatch | string

	/**
	 * The tint (as a percentage) of the fill color of the ParagraphStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	fillTint: number

	/**
	 * The amount to indent the first line.
	 */
	firstLineIndent: number | string

	/**
	 * The name of the font style.
	 */
	fontStyle: string

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180)
	 */
	gradientFillAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: (number | string)[]

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180)
	 */
	gradientStrokeAngle: number

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: (number | string)[]

	/**
	 * If true, aligns only the first line to the frame grid or baseline grid. If false, aligns all lines to the grid.
	 */
	gridAlignFirstLineOnly: boolean

	/**
	 * The alignment to the frame grid or baseline grid.
	 */
	gridAlignment: GridAlignment

	/**
	 * The manual gyoudori setting.
	 */
	gridGyoudori: number

	/**
	 * The horizontal scaling applied to the ParagraphStyle.
	 */
	horizontalScale: number

	/**
	 * The relative desirability of better spacing vs. fewer hyphens. A lower value results in greater use of hyphens. (Range: 0 to 100)
	 */
	hyphenWeight: number

	/**
	 * If true, allows the last word in a text column to be hyphenated.
	 */
	hyphenateAcrossColumns: boolean

	/**
	 * The mininum number of letters at the beginning of a word that can be broken by a hyphen.
	 */
	hyphenateAfterFirst: number

	/**
	 * The minimum number of letters at the end of a word that can be broken by a hyphen.
	 */
	hyphenateBeforeLast: number

	/**
	 * If true, allows hyphenation of capitalized words.
	 */
	hyphenateCapitalizedWords: boolean

	/**
	 * The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.
	 */
	hyphenateLadderLimit: number

	/**
	 * If true, allows hyphenation in the last word in a paragraph. Note: Valid only when hyphenation is true.
	 */
	hyphenateLastWord: boolean

	/**
	 * The minimum number of letters a word must have in order to qualify for hyphenation.
	 */
	hyphenateWordsLongerThan: number

	/**
	 * If true, allows hyphenation.
	 */
	hyphenation: boolean

	/**
	 * The amount of white space allowed at the end of a line of non-justified text before hypenation begins. Note: Valid when composer is single-line composer.
	 */
	hyphenationZone: number | string

	/**
	 * The unique ID of the ParagraphStyle.
	 */
	id: number

	/**
	 * If true, ignores optical edge alignment for the paragraph.
	 */
	ignoreEdgeAlignment: boolean

	/**
	 * If true, the style was imported from another document.
	 */
	imported: boolean

	/**
	 * If true, class attribute will be generated for the style
	 */
	includeClass: boolean

	/**
	 * The index of the ParagraphStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The number of grid squares in which to arrange the text.
	 */
	jidori: number

	/**
	 * The paragraph alignment.
	 */
	justification: Justification

	/**
	 * Use of Kashidas for justification
	 */
	kashidas: KashidasOptions

	/**
	 * If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns.
	 */
	keepAllLinesTogether: boolean

	/**
	 * The minimum number of lines to keep together in a paragraph before allowing a page break.
	 */
	keepFirstLines: number

	/**
	 * The minimum number of lines to keep together in a paragraph after a page break.
	 */
	keepLastLines: number

	/**
	 * If true, keeps a specified number of lines together when the paragraph breaks across columns or text frames.
	 */
	keepLinesTogether: boolean

	/**
	 * If true, forces the rule above the paragraph to remain in the frame bounds. Note: Valid only when rule above is true.
	 */
	keepRuleAboveInFrame: boolean

	/**
	 * The minimum number of lines to keep with the next paragraph.
	 */
	keepWithNext: number

	/**
	 * If the first line in the paragraph should be kept with the last line of previous paragraph.
	 */
	keepWithPrevious: boolean

	/**
	 * The alignment of kenten characters relative to the parent characters.
	 */
	kentenAlignment: KentenAlignment

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom.
	 */
	kentenCharacterSet: KentenCharacterSet

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenStrokeTint: number

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100)
	 */
	kentenTint: number

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number

	/**
	 * The vertical size of kenten charachers as a percent of the original size.
	 */
	kentenYScale: number

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions

	/**
	 * The type of hanging punctuation to allow. Note: Valid only when a kinsoku set is in effect.
	 */
	kinsokuHangType: KinsokuHangTypes

	/**
	 * The kinsoku set that determines legitimate line breaks.
	 */
	kinsokuSet: KinsokuTable | KinsokuSet | string

	/**
	 * The type of kinsoku processing for preventing kinsoku characters from beginning or ending a line. Note: Valid only when a kinsoku set is defined.
	 */
	kinsokuType: KinsokuType

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The amount to indent the last line in the paragraph.
	 */
	lastLineIndent: number | string

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number

	/**
	 * The point from which leading is measured from line to line.
	 */
	leadingModel: LeadingModel

	/**
	 * The width of the left indent.
	 */
	leftIndent: number | string

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean

	/**
	 * The maximum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	maximumGlyphScaling: number

	/**
	 * The maximum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	maximumLetterSpacing: number

	/**
	 * The maximum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	maximumWordSpacing: number

	/**
	 * If true, consecutive para borders with completely similar properties are merged.
	 */
	mergeConsecutiveParaBorders: boolean

	/**
	 * The minimum width (as a percentage) of individual characters. (Range: 50 to 200)
	 */
	minimumGlyphScaling: number

	/**
	 * The minimum letter spacing, specified as a percentge of the built-in space between letters in the font. (Range: -100 to 500) Note: Valid only when text is justified.
	 */
	minimumLetterSpacing: number

	/**
	 * The minimum word spacing, specified as a percentage of the font word space value. Note: Valid only when text is justified. (Range: 0 to 1000)
	 */
	minimumWordSpacing: number

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number

	/**
	 * The mojikumi table. For information, see mojikumi table defaults.
	 */
	mojikumi: MojikumiTable | string | MojikumiTableDefaults

	/**
	 * The name of the ParagraphStyle.
	 */
	name: string

	/**
	 * A collection of nested GREP styles.
	 */
	nestedGrepStyles: NestedGrepStyles

	/**
	 * A collection of nested line styles.
	 */
	nestedLineStyles: NestedLineStyles

	/**
	 * A collection of nested styles.
	 */
	nestedStyles: NestedStyles

	/**
	 * The style to apply to new paragraphs that follow paragraphs tagged with this style.
	 */
	nextStyle: ParagraphStyle

	/**
	 * If true, keeps the text on the same line.
	 */
	noBreak: boolean

	/**
	 * The alignment of the number.
	 */
	numberingAlignment: ListAlignment

	/**
	 * If true, apply the numbering restart policy.
	 */
	numberingApplyRestartPolicy: boolean

	/**
	 * The character style to be used for the number string.
	 */
	numberingCharacterStyle: CharacterStyle | string

	/**
	 * Continue the numbering at this level.
	 */
	numberingContinue: boolean

	/**
	 * The number string expression for numbering.
	 */
	numberingExpression: string

	/**
	 * Numbering format options.
	 */
	numberingFormat: NumberingStyle | string

	/**
	 * The level of the paragraph.
	 */
	numberingLevel: number

	/**
	 * Numbering restart policies.
	 */
	numberingRestartPolicies: NumberingRestartPolicy

	/**
	 * Determines starting number in a numbered list.
	 */
	numberingStartAt: number

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical.
	 */
	otfHVKana: boolean

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean

	/**
	 * If true, use alternate justification forms in OpenType fonts
	 */
	otfJustificationAlternate: boolean

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean

	/**
	 * If true, use overlapping swash forms in OpenType fonts
	 */
	otfOverlapSwash: boolean

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean

	/**
	 * If true, applies italics to half-width alphanumerics.
	 */
	otfRomanItalics: boolean

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean

	/**
	 * If true, use stretched alternate forms in OpenType fonts
	 */
	otfStretchedAlternate: boolean

	/**
	 * If true, use stylistic alternate forms in OpenType fonts
	 */
	otfStylisticAlternate: boolean

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphBorderBottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphBorderBottomLeftCornerRadius: number | string

	/**
	 * The bottom line weight of the border of paragraph.
	 */
	paragraphBorderBottomLineWeight: number | string

	/**
	 * The distance to offset the bottom edge of the paragraph border.
	 */
	paragraphBorderBottomOffset: number | string

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph border.
	 */
	paragraphBorderBottomOrigin: ParagraphBorderBottomOriginEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphBorderBottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphBorderBottomRightCornerRadius: number | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph stroke.
	 */
	paragraphBorderColor: Swatch | string

	/**
	 * If true, then paragraph border is also displayed at the points where the paragraph splits across frames or columns.
	 */
	paragraphBorderDisplayIfSplits: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph border gap. Note: Valid only when the border type is not solid.
	 */
	paragraphBorderGapColor: Swatch | string

	/**
	 * If true, the paragraph border gap will overprint. Note: Valid only when border type is not solid.
	 */
	paragraphBorderGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the paragraph border gap. Note: Valid only when the border type is not solid. (Range: 0 to 100)
	 */
	paragraphBorderGapTint: number

	/**
	 * The left line weight of the border of paragraph.
	 */
	paragraphBorderLeftLineWeight: number | string

	/**
	 * The distance to offset the left edge of the paragraph border.
	 */
	paragraphBorderLeftOffset: number | string

	/**
	 * If true, the paragraph border is on.
	 */
	paragraphBorderOn: boolean

	/**
	 * If true, the paragraph border will overprint.
	 */
	paragraphBorderOverprint: boolean

	/**
	 * The right line weight of the border of paragraph.
	 */
	paragraphBorderRightLineWeight: number | string

	/**
	 * The distance to offset the right edge of the paragraph border.
	 */
	paragraphBorderRightOffset: number | string

	/**
	 * The end shape of an open path.
	 */
	paragraphBorderStrokeEndCap: EndCap

	/**
	 * The corner join applied to the ParagraphStyle.
	 */
	paragraphBorderStrokeEndJoin: EndJoin

	/**
	 * The tint (as a percentage) of the paragraph stroke. (Range: 0 to 100)
	 */
	paragraphBorderTint: number

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphBorderTopLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphBorderTopLeftCornerRadius: number | string

	/**
	 * The top line weight of the border of paragraph.
	 */
	paragraphBorderTopLineWeight: number | string

	/**
	 * The distance to offset the top edge of the paragraph border.
	 */
	paragraphBorderTopOffset: number | string

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph border.
	 */
	paragraphBorderTopOrigin: ParagraphBorderTopOriginEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphBorderTopRightCornerRadius: number | string

	/**
	 * The type of the border for the paragraph.
	 */
	paragraphBorderType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph border.
	 */
	paragraphBorderWidth: ParagraphBorderEnum

	/**
	 * Paragraph direction.
	 */
	paragraphDirection: ParagraphDirectionOptions

	/**
	 * If true, the gyoudori mode applies to the entire paragraph. If false, the gyoudori mode applies to each line in the paragraph.
	 */
	paragraphGyoudori: boolean

	/**
	 * Paragraph justification.
	 */
	paragraphJustification: ParagraphJustificationOptions

	/**
	 * Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long
	 */
	paragraphKashidaWidth: number

	/**
	 * The shape to apply to the bottom left corner of rectangular shapes.
	 */
	paragraphShadingBottomLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom left corner of rectangular shapes
	 */
	paragraphShadingBottomLeftCornerRadius: number | string

	/**
	 * The distance to offset the bottom edge of the paragraph.
	 */
	paragraphShadingBottomOffset: number | string

	/**
	 * The basis (descent or baseline) used to calculate the bottom origin of the paragraph shading.
	 */
	paragraphShadingBottomOrigin: ParagraphShadingBottomOriginEnum

	/**
	 * The shape to apply to the bottom right corner of rectangular shapes.
	 */
	paragraphShadingBottomRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the bottom right corner of rectangular shapes
	 */
	paragraphShadingBottomRightCornerRadius: number | string

	/**
	 * If true, forces the shading of the paragraph to be clipped with respect to frame shape.
	 */
	paragraphShadingClipToFrame: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph shading.
	 */
	paragraphShadingColor: Swatch | string

	/**
	 * The distance to offset the left edge of the paragraph.
	 */
	paragraphShadingLeftOffset: number | string

	/**
	 * If true, the paragraph shading is On.
	 */
	paragraphShadingOn: boolean

	/**
	 * If true, the paragraph shading will overprint.
	 */
	paragraphShadingOverprint: boolean

	/**
	 * The distance to offset the right edge of the paragraph.
	 */
	paragraphShadingRightOffset: number | string

	/**
	 * If true, suppress printing of the shading of the paragraph.
	 */
	paragraphShadingSuppressPrinting: boolean

	/**
	 * The tint (as a percentage) of the paragraph shading. (Range: 0 to 100)
	 */
	paragraphShadingTint: number

	/**
	 * The shape to be applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes.Note: corner option differs from end join in which you can set a radius for a corner option, whereas the rounded or beveled effect of an end join depends on the stroke weight.
	 */
	paragraphShadingTopLeftCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top left corner of rectangular shapes and all corners of non-rectangular shapes
	 */
	paragraphShadingTopLeftCornerRadius: number | string

	/**
	 * The distance to offset the top edge of the paragraph.
	 */
	paragraphShadingTopOffset: number | string

	/**
	 * The basis (cap height, ascent or baseline) used to calculate the top origin of the paragraph shading.
	 */
	paragraphShadingTopOrigin: ParagraphShadingTopOriginEnum

	/**
	 * The shape to apply to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerOption: CornerOptions

	/**
	 * The radius in measurement units of the corner effect applied to the top right corner of rectangular shapes
	 */
	paragraphShadingTopRightCornerRadius: number | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph shading.
	 */
	paragraphShadingWidth: ParagraphShadingWidthEnum

	/**
	 * The parent of the ParagraphStyle (a Document, Application or ParagraphStyleGroup).
	 */
	parent: any

	/**
	 * The text size.
	 */
	pointSize: number | string

	/**
	 * The text position relative to the baseline.
	 */
	position: Position

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * The color to use for preview, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	previewColor: [number, number, number] | UIColors | NothingEnum

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The hyphenation style chosen for the provider.
	 */
	providerHyphenationStyle: HyphenationStyleEnum

	/**
	 * If true, disallows line breaks in numbers. If false, lines can break between digits in multi-digit numbers.
	 */
	rensuuji: boolean

	/**
	 * The width of the right indent.
	 */
	rightIndent: number | string

	/**
	 * If true, rotates Roman characters in vertical text.
	 */
	rotateSingleByteCharacters: boolean

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent.
	 */
	rubyAutoScaling: boolean

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount.
	 */
	rubyOverhang: boolean

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number

	/**
	 * The ruby spacing relative to the parent text.
	 */
	rubyParentSpacing: RubyParentSpacing

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100)
	 */
	rubyTint: number

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number

	/**
	 * If true, places a rule above the paragraph.
	 */
	ruleAbove: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule above.
	 */
	ruleAboveColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule above. Note: Valid only when the paragraph rule above type is not solid.
	 */
	ruleAboveGapColor: Swatch | string

	/**
	 * If true, the stroke gap of the paragraph rule above will overprint. Note: Valid only the rule above type is not solid.
	 */
	ruleAboveGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule. (Range: 0 to 100) Note: Valid only when the rule above type is not solid.
	 */
	ruleAboveGapTint: number

	/**
	 * The distance to indent the left edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveLeftIndent: number | string

	/**
	 * The line weight of the rule above.
	 */
	ruleAboveLineWeight: number | string

	/**
	 * The amount to offset the paragraph rule above from the baseline of the first line the paragraph.
	 */
	ruleAboveOffset: number | string

	/**
	 * If true, the paragraph rule above will overprint.
	 */
	ruleAboveOverprint: boolean

	/**
	 * The distance to indent the right edge of the paragraph rule above (based on either the text width or the column width of the first line in the paragraph.
	 */
	ruleAboveRightIndent: number | string

	/**
	 * The tint (as a percentage) of the paragraph rule above. (Range: 0 to 100)
	 */
	ruleAboveTint: number

	/**
	 * The stroke type of the rule above the paragraph.
	 */
	ruleAboveType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule above.
	 */
	ruleAboveWidth: RuleWidth

	/**
	 * If true, applies a paragraph rule below.
	 */
	ruleBelow: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the paragraph rule below.
	 */
	ruleBelowColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke gap of the paragraph rule below. Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapColor: Swatch | string

	/**
	 * If true, the gap color of the rule below will overprint.
	 */
	ruleBelowGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the stroke gap color of the paragraph rule below. (Range: 0 to 100) Note: Valid only when the paragraph rule below type is not solid.
	 */
	ruleBelowGapTint: number

	/**
	 * The distance to indent the left edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowLeftIndent: number | string

	/**
	 * The line weight of the rule below.
	 */
	ruleBelowLineWeight: number | string

	/**
	 * The amount to offset the the paragraph rule below from the baseline of the last line of the paragraph.
	 */
	ruleBelowOffset: number | string

	/**
	 * If true, the rule below will overprint.
	 */
	ruleBelowOverprint: boolean

	/**
	 * The distance to indent the right edge of the paragraph rule below (based on either the text width or the column width of the last line in the paragraph.
	 */
	ruleBelowRightIndent: number | string

	/**
	 * The tint (as a percentage) of the paragraph rule below. (Range: 0 to 100)
	 */
	ruleBelowTint: number

	/**
	 * The stroke type of the rule below the paragraph.
	 */
	ruleBelowType: StrokeStyle | string

	/**
	 * The basis (text width or column width) used to calculate the width of the paragraph rule below.
	 */
	ruleBelowWidth: RuleWidth

	/**
	 * The space between paragraphs using same style.
	 */
	sameParaStyleSpacing: number | Spacing

	/**
	 * If true, the line changes size when characters are scaled.
	 */
	scaleAffectsLineHeight: boolean

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number

	/**
	 * The alignment to use for lines that contain a single word.
	 */
	singleWordJustification: SingleWordJustification

	/**
	 * The skew angle of the ParagraphStyle.
	 */
	skew: number

	/**
	 * The height of the paragraph space below.
	 */
	spaceAfter: number | string

	/**
	 * The height of the paragraph space above.
	 */
	spaceBefore: number | string

	/**
	 * The minimum space after a span or a split column
	 */
	spanColumnMinSpaceAfter: number | string

	/**
	 * The minimum space before a span or a split column
	 */
	spanColumnMinSpaceBefore: number | string

	/**
	 * Whether a paragraph should be a single column, span columns or split columns
	 */
	spanColumnType: SpanColumnTypeOptions

	/**
	 * The number of columns a paragraph spans or the number of split columns.
	 */
	spanSplitColumnCount: number | SpanColumnCountOptions

	/**
	 * The inside gutter if the paragraph splits columns
	 */
	splitColumnInsideGutter: number | string

	/**
	 * The outside gutter if the paragraph splits columns
	 */
	splitColumnOutsideGutter: number | string

	/**
	 * Split Document (EPUB only)
	 */
	splitDocument: boolean

	/**
	 * The location at which to start the paragraph.
	 */
	startParagraph: StartParagraph

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | string

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100)
	 */
	strikeThroughTint: number

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | string

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the ParagraphStyle.
	 */
	strokeColor: Swatch | string

	/**
	 * The tint (as a percentage) of the stroke color of the ParagraphStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.)
	 */
	strokeTint: number

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | string

	/**
	 * A collection of style export tag maps.
	 */
	styleExportTagMaps: StyleExportTagMaps

	/**
	 * A unique id that can be assigned to a style. This can be used to differentiate between the styles. Internal use only.
	 */
	styleUniqueId: string

	/**
	 * A list of the tab stops in the paragraph. Can return: Array of Arrays of Property Name/Value Pairs.
	 */
	tabList: any[]

	/**
	 * A collection of tab stops.
	 */
	tabStops: TabStops

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number

	/**
	 * If true, ideographic spaces will not wrap to the next line like text characters.
	 */
	treatIdeographicSpaceAsSpace: boolean

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number

	/**
	 * If true, underlines the text.
	 */
	underline: boolean

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | string

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100)
	 */
	underlineTint: number

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | string

	/**
	 * The vertical scaling applied to the ParagraphStyle.
	 */
	verticalScale: number

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment

	/**
	 * The minimum number of characters allowed after a line break.
	 */
	warichuCharsAfterBreak: number

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Convert bullets and numbering to text.
	 */
	convertBulletsAndNumberingToText(): void

	/**
	 * Create thumbnail for selected text with the given properties.
	 * @param previewText Text to use as sample
	 * @param pointSize Text font size (in points)
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 * @param to The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number[], to: File): boolean

	/**
	 * Duplicates the ParagraphStyle.
	 */
	duplicate(): ParagraphStyle

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Deletes the paragraph style forcefully. For internal use only.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	forceDelete(replacingWith: ParagraphStyle): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ParagraphStyle[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): ParagraphStyle

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ParagraphStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of paragraph styles.
 */
declare class ParagraphStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ParagraphStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: ParagraphStyle

	/**
	 * Creates a new ParagraphStyle.
	 * @param withProperties Initial values for properties of the new ParagraphStyle
	 */
	add(withProperties: object): ParagraphStyle

	/**
	 * Returns any ParagraphStyle in the collection.
	 */
	anyItem(): ParagraphStyle

	/**
	 * Displays the number of elements in the ParagraphStyle.
	 */
	count(): number

	/**
	 * Returns every ParagraphStyle in the collection.
	 */
	everyItem(): ParagraphStyle[]

	/**
	 * Returns the first ParagraphStyle in the collection.
	 */
	firstItem(): ParagraphStyle

	/**
	 * Returns the ParagraphStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ParagraphStyle

	/**
	 * Returns the ParagraphStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ParagraphStyle

	/**
	 * Returns the ParagraphStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ParagraphStyle

	/**
	 * Returns the ParagraphStyles within the specified range.
	 * @param from The ParagraphStyle, index, or name at the beginning of the range.
	 * @param to The ParagraphStyle, index, or name at the end of the range.
	 */
	itemByRange(from: ParagraphStyle | number | string, to: ParagraphStyle | number | string): ParagraphStyle[]

	/**
	 * Returns the last ParagraphStyle in the collection.
	 */
	lastItem(): ParagraphStyle

	/**
	 * Returns the middle ParagraphStyle in the collection.
	 */
	middleItem(): ParagraphStyle

	/**
	 * Returns the ParagraphStyle whose index follows the specified ParagraphStyle in the collection.
	 * @param obj The ParagraphStyle whose index comes before the desired ParagraphStyle.
	 */
	nextItem(obj: ParagraphStyle): ParagraphStyle

	/**
	 * Returns the ParagraphStyle with the index previous to the specified index.
	 * @param obj The index of the ParagraphStyle that follows the desired ParagraphStyle.
	 */
	previousItem(obj: ParagraphStyle): ParagraphStyle

	/**
	 * Generates a string which, if executed, will return the ParagraphStyle.
	 */
	toSource(): string

}

/**
 * A character style.
 */
declare class CharacterStyle {
	/**
	 * The font applied to the CharacterStyle, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string | NothingEnum

	/**
	 * The language of the text.
	 */
	appliedLanguage: LanguageWithVendors | Language | NothingEnum | string

	/**
	 * The style that this style is based on.
	 */
	basedOn: CharacterStyle | string

	/**
	 * The baseline shift applied to the text.
	 */
	baselineShift: number | NothingEnum

	/**
	 * The capitalization scheme.
	 */
	capitalization: Capitalization | NothingEnum

	/**
	 * The alignment of small characters to the largest character in the line.
	 */
	characterAlignment: CharacterAlignment | NothingEnum

	/**
	 * The direction of the character.
	 */
	characterDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * The rotation angle (in degrees) of individual characters. Note: The rotation is counterclockwise.
	 */
	characterRotation: number | NothingEnum

	/**
	 * If true, uses grid tracking to track non-Roman characters in CJK grids.
	 */
	cjkGridTracking: boolean | NothingEnum

	/**
	 * Position of diacriticical characters.
	 */
	diacriticPosition: DiacriticPositionOptions | NothingEnum

	/**
	 * The digits type.
	 */
	digitsType: DigitsTypeOptions | NothingEnum

	/**
	 * Emit CSS.
	 */
	emitCss: boolean | NothingEnum

	/**
	 * The stroke join type applied to the characters of the text.
	 */
	endJoin: OutlineJoin | NothingEnum

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of the CharacterStyle. .
	 */
	fillColor: Swatch | NothingEnum | string

	/**
	 * The tint (as a percentage) of the fill color of the CharacterStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	fillTint: number | NothingEnum

	/**
	 * The name of the font style.
	 */
	fontStyle: string | NothingEnum

	/**
	 * The glyph variant to substitute for standard glyphs.
	 */
	glyphForm: AlternateGlyphForms | NothingEnum

	/**
	 * The angle of a linear gradient applied to the fill of the text. (Range: -180 to 180).
	 */
	gradientFillAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the fill of the text.
	 */
	gradientFillLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the fill of the text, in the format [x, y].
	 */
	gradientFillStart: [number | string, number | string] | NothingEnum

	/**
	 * The angle of a linear gradient applied to the stroke of the text. (Range: -180 to 180).
	 */
	gradientStrokeAngle: number | NothingEnum

	/**
	 * The length (for a linear gradient) or radius (for a radial gradient) applied to the stroke of the text.
	 */
	gradientStrokeLength: number | NothingEnum

	/**
	 * The starting point (in page coordinates) of a gradient applied to the stroke of the text, in the format [x, y].
	 */
	gradientStrokeStart: [number | string, number | string] | NothingEnum

	/**
	 * The horizontal scaling applied to the CharacterStyle.
	 */
	horizontalScale: number | NothingEnum

	/**
	 * The unique ID of the CharacterStyle.
	 */
	id: number

	/**
	 * If true, the style was imported from another document.
	 */
	imported: boolean | NothingEnum

	/**
	 * If true, class attribute will be generated for the style.
	 */
	includeClass: boolean | NothingEnum

	/**
	 * The index of the CharacterStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The number of grid squares in which to arrange the text. .
	 */
	jidori: number | NothingEnum

	/**
	 * Use of Kashidas for justification.
	 */
	kashidas: KashidasOptions | NothingEnum

	/**
	 * The alignment of kenten characters relative to the parent characters. .
	 */
	kentenAlignment: KentenAlignment | NothingEnum

	/**
	 * The character set used for the custom kenten character. Note: Valid only when kenten kind is custom. .
	 */
	kentenCharacterSet: KentenCharacterSet | NothingEnum

	/**
	 * The character used for kenten. Note: Valid only when kenten kind is custom.
	 */
	kentenCustomCharacter: string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of kenten characters.
	 */
	kentenFillColor: Swatch | string | NothingEnum

	/**
	 * The font to use for kenten characters.
	 */
	kentenFont: Font | string | NothingEnum

	/**
	 * The size (in points) of kenten characters.
	 */
	kentenFontSize: number | NothingEnum

	/**
	 * The font style of kenten characters.
	 */
	kentenFontStyle: string | NothingEnum

	/**
	 * The style of kenten characters.
	 */
	kentenKind: KentenCharacter | NothingEnum

	/**
	 * The method of overprinting the kenten fill.
	 */
	kentenOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the kenten stroke.
	 */
	kentenOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The distance between kenten characters and their parent characters.
	 */
	kentenPlacement: number | NothingEnum

	/**
	 * The kenten position relative to the parent character.
	 */
	kentenPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of kenten characters.
	 */
	kentenStrokeColor: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenStrokeTint: number | NothingEnum

	/**
	 * The fill tint (as a percentage) of kenten characters. (Range: 0 to 100).
	 */
	kentenTint: number | NothingEnum

	/**
	 * The stroke weight (in points) of kenten characters.
	 */
	kentenWeight: number | NothingEnum

	/**
	 * The horizontal size of kenten characters as a percent of the original size.
	 */
	kentenXScale: number | NothingEnum

	/**
	 * The vertical size of kenten charachers as a percent of the original size. .
	 */
	kentenYScale: number | NothingEnum

	/**
	 * The type of pair kerning.
	 */
	kerningMethod: string | NothingEnum

	/**
	 * The keyboard direction of the character.
	 */
	keyboardDirection: CharacterDirectionOptions | NothingEnum

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The leading applied to the text.
	 */
	leading: number | Leading | NothingEnum

	/**
	 * The amount of space before each character.
	 */
	leadingAki: number | NothingEnum

	/**
	 * If true, replaces specific character combinations (e.g., fl, fi) with ligature characters.
	 */
	ligatures: boolean | NothingEnum

	/**
	 * The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join.
	 */
	miterLimit: number | NothingEnum

	/**
	 * The name of the style.
	 */
	name: string

	/**
	 * If true, keeps the text on the same line. .
	 */
	noBreak: boolean | NothingEnum

	/**
	 * If true, uses contextual alternate forms in OpenType fonts.
	 */
	otfContextualAlternate: boolean | NothingEnum

	/**
	 * If true, uses discretionary ligatures in OpenType fonts.
	 */
	otfDiscretionaryLigature: boolean | NothingEnum

	/**
	 * The figure style in OpenType fonts.
	 */
	otfFigureStyle: OTFFigureStyle | NothingEnum

	/**
	 * If true, uses fractions in OpenType fonts.
	 */
	otfFraction: boolean | NothingEnum

	/**
	 * If true, switches hiragana fonts, which have different glyphs for horizontal and vertical. .
	 */
	otfHVKana: boolean | NothingEnum

	/**
	 * If true, use historical forms in OpenType fonts.
	 */
	otfHistorical: boolean | NothingEnum

	/**
	 * If true, use alternate justification forms in OpenType fonts.
	 */
	otfJustificationAlternate: boolean | NothingEnum

	/**
	 * If true, uses localized forms in OpenType fonts.
	 */
	otfLocale: boolean | NothingEnum

	/**
	 * If true, uses mark positioning in OpenType fonts.
	 */
	otfMark: boolean | NothingEnum

	/**
	 * If true, uses ordinals in OpenType fonts.
	 */
	otfOrdinal: boolean | NothingEnum

	/**
	 * If true, use overlapping swash forms in OpenType fonts.
	 */
	otfOverlapSwash: boolean | NothingEnum

	/**
	 * If true, kerns according to proportional CJK metrics in OpenType fonts.
	 */
	otfProportionalMetrics: boolean | NothingEnum

	/**
	 * If true, applies italics to half-width alphanumerics. .
	 */
	otfRomanItalics: boolean | NothingEnum

	/**
	 * If true, use a slashed zeroes in OpenType fonts.
	 */
	otfSlashedZero: boolean | NothingEnum

	/**
	 * If true, use stretched alternate forms in OpenType fonts.
	 */
	otfStretchedAlternate: boolean | NothingEnum

	/**
	 * If true, use stylistic alternate forms in OpenType fonts.
	 */
	otfStylisticAlternate: boolean | NothingEnum

	/**
	 * The stylistic sets to use in OpenType fonts.
	 */
	otfStylisticSets: number | NothingEnum

	/**
	 * If true, uses swash forms in OpenType fonts.
	 */
	otfSwash: boolean | NothingEnum

	/**
	 * If true, uses titling forms in OpenType fonts.
	 */
	otfTitling: boolean | NothingEnum

	/**
	 * If true, the fill color of the characters will overprint.
	 */
	overprintFill: boolean | NothingEnum

	/**
	 * If true, the stroke of the characters will overprint.
	 */
	overprintStroke: boolean | NothingEnum

	/**
	 * The parent of the CharacterStyle (a Document, Application or CharacterStyleGroup).
	 */
	parent: any

	/**
	 * The text size.
	 */
	pointSize: number | NothingEnum

	/**
	 * The text position relative to the baseline.
	 */
	position: Position | NothingEnum

	/**
	 * The OpenType positional form.
	 */
	positionalForm: PositionalForms | NothingEnum

	/**
	 * The color to use for preview, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	previewColor: [number, number, number] | UIColors | NothingEnum

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The ruby alignment.
	 */
	rubyAlignment: RubyAlignments | NothingEnum

	/**
	 * If true, auto aligns ruby.
	 */
	rubyAutoAlign: boolean | NothingEnum

	/**
	 * If true, automatically scales ruby to the specified percent of parent text size. For information on specifying a percent, see ruby parent scaling percent. .
	 */
	rubyAutoScaling: boolean | NothingEnum

	/**
	 * If true, automatically scales glyphs in auto tcy (tate-chuu-yoko) in ruby to fit one em.
	 */
	rubyAutoTcyAutoScale: boolean | NothingEnum

	/**
	 * The number of digits included in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyDigits: number | NothingEnum

	/**
	 * If true, includes Roman characters in auto tcy (tate-chuu-yoko) in ruby.
	 */
	rubyAutoTcyIncludeRoman: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the fill of ruby characters.
	 */
	rubyFill: Swatch | string | NothingEnum

	/**
	 * The font applied to ruby characters.
	 */
	rubyFont: Font | string | NothingEnum

	/**
	 * The size (in points) of ruby characters.
	 */
	rubyFontSize: number | NothingEnum

	/**
	 * The font style of ruby characters.
	 */
	rubyFontStyle: string | NothingEnum

	/**
	 * If true, uses OpenType Pro fonts for ruby.
	 */
	rubyOpenTypePro: boolean | NothingEnum

	/**
	 * If true, constrains ruby overhang to the specified amount. For information on specifying an amount, see ruby parent overhang amount. .
	 */
	rubyOverhang: boolean | NothingEnum

	/**
	 * The method of overprinting the ruby fill.
	 */
	rubyOverprintFill: AdornmentOverprint | NothingEnum

	/**
	 * The method of overprinting the ruby stroke.
	 */
	rubyOverprintStroke: AdornmentOverprint | NothingEnum

	/**
	 * The amount by which ruby characters can overhang the parent text.
	 */
	rubyParentOverhangAmount: RubyOverhang | NothingEnum

	/**
	 * The amount (as a percentage) to scale the parent text size to determine the ruby text size.
	 */
	rubyParentScalingPercent: number | NothingEnum

	/**
	 * The ruby spacing relative to the parent text. .
	 */
	rubyParentSpacing: RubyParentSpacing | NothingEnum

	/**
	 * The position of ruby characters relative to the parent text.
	 */
	rubyPosition: RubyKentenPosition | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of ruby characters.
	 */
	rubyStroke: Swatch | string | NothingEnum

	/**
	 * The stroke tint (as a percentage) of ruby characters.
	 */
	rubyStrokeTint: number | NothingEnum

	/**
	 * The tint (as a percentage) of the ruby fill color. (Range: 0 to 100).
	 */
	rubyTint: number | NothingEnum

	/**
	 * The ruby type.
	 */
	rubyType: RubyTypes | NothingEnum

	/**
	 * The stroke weight (in points) of ruby characters.
	 */
	rubyWeight: number | NothingEnum

	/**
	 * The amount of horizontal space between ruby and parent characters.
	 */
	rubyXOffset: number | NothingEnum

	/**
	 * The horizontal size of ruby characters, specified as a percent of the original size.
	 */
	rubyXScale: number | NothingEnum

	/**
	 * The amount of vertical space between ruby and parent characters.
	 */
	rubyYOffset: number | NothingEnum

	/**
	 * The vertical size of ruby characters, specified as a percent of the original size.
	 */
	rubyYScale: number | NothingEnum

	/**
	 * If true, the line changes size when characters are scaled. .
	 */
	scaleAffectsLineHeight: boolean | NothingEnum

	/**
	 * If true, applies shatai rotation.
	 */
	shataiAdjustRotation: boolean | NothingEnum

	/**
	 * If true, adjusts shatai tsume.
	 */
	shataiAdjustTsume: boolean | NothingEnum

	/**
	 * The shatai lens angle (in degrees).
	 */
	shataiDegreeAngle: number | NothingEnum

	/**
	 * The amount (as a percentage) of shatai obliquing to apply.
	 */
	shataiMagnification: number | NothingEnum

	/**
	 * The skew angle of the CharacterStyle.
	 */
	skew: number | NothingEnum

	/**
	 * Split Document (EPUB only).
	 */
	splitDocument: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the strikethrough stroke.
	 */
	strikeThroughColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the strikethrough stroke.
	 */
	strikeThroughGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the strikethrough stroke will overprint. Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke gap color. (Range: 0 to 100) Note: Valid when strike through type is not solid.
	 */
	strikeThroughGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the strikethrough stroke from the text baseline.
	 */
	strikeThroughOffset: number | NothingEnum

	/**
	 * If true, the strikethrough stroke will overprint.
	 */
	strikeThroughOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the strikethrough stroke. (Range: 0 to 100).
	 */
	strikeThroughTint: number | NothingEnum

	/**
	 * The stroke type of the strikethrough stroke.
	 */
	strikeThroughType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the strikethrough stroke.
	 */
	strikeThroughWeight: number | NothingEnum

	/**
	 * If true, draws a strikethrough line through the text.
	 */
	strikeThru: boolean | NothingEnum

	/**
	 * The stroke alignment applied to the text.
	 */
	strokeAlignment: TextStrokeAlign | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the stroke of the CharacterStyle.
	 */
	strokeColor: Swatch | NothingEnum | string

	/**
	 * The tint (as a percentage) of the stroke color of the CharacterStyle. (To specify a tint percentage, use a number in the range of 0 to 100; to use the inherited or overridden value, use -1.).
	 */
	strokeTint: number | NothingEnum

	/**
	 * The stroke weight applied to the characters of the text.
	 */
	strokeWeight: number | NothingEnum

	/**
	 * A collection of style export tag maps.
	 */
	styleExportTagMaps: StyleExportTagMaps

	/**
	 * A unique id that can be assigned to a style. This can be used to differentiate between the styles. Internal use only.
	 */
	styleUniqueId: string | NothingEnum

	/**
	 * If true, makes the character horizontal in vertical text.
	 */
	tatechuyoko: boolean | NothingEnum

	/**
	 * The horizontal offset for horizontal characters in vertical text.
	 */
	tatechuyokoXOffset: number | NothingEnum

	/**
	 * The vertical offset for horizontal characters in vertical text.
	 */
	tatechuyokoYOffset: number | NothingEnum

	/**
	 * The amount by which to loosen or tighten a block of text, specified in thousands of an em.
	 */
	tracking: number | NothingEnum

	/**
	 * The amount of space after each character.
	 */
	trailingAki: number | NothingEnum

	/**
	 * The amount of horizontal character compression.
	 */
	tsume: number | NothingEnum

	/**
	 * If true, underlines the text.
	 */
	underline: boolean | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the underline stroke. .
	 */
	underlineColor: Swatch | string | NothingEnum

	/**
	 * The swatch (color, gradient, tint, or mixed ink) applied to the gap of the underline stroke. Note: Valid when underline type is not solid.
	 */
	underlineGapColor: Swatch | string | NothingEnum

	/**
	 * If true, the gap color of the underline stroke will overprint.
	 */
	underlineGapOverprint: boolean | NothingEnum

	/**
	 * The tint (as a percentage) of the gap color of the underline stroke. (Range: 0 to 100) Note: Valid when underline type is not solid.
	 */
	underlineGapTint: number | NothingEnum

	/**
	 * The amount by which to offset the underline from the text baseline.
	 */
	underlineOffset: number | NothingEnum

	/**
	 * If true, the underline stroke color will overprint.
	 */
	underlineOverprint: boolean | NothingEnum

	/**
	 * The underline stroke tint (as a percentage). (Range: 0 to 100).
	 */
	underlineTint: number | NothingEnum

	/**
	 * The stroke type of the underline stroke.
	 */
	underlineType: StrokeStyle | string | NothingEnum

	/**
	 * The stroke weight of the underline stroke.
	 */
	underlineWeight: number | NothingEnum

	/**
	 * The vertical scaling applied to the CharacterStyle.
	 */
	verticalScale: number | NothingEnum

	/**
	 * If true, turns on warichu.
	 */
	warichu: boolean | NothingEnum

	/**
	 * The warichu alignment.
	 */
	warichuAlignment: WarichuAlignment | NothingEnum

	/**
	 * The minimum number of characters allowed after a line break. .
	 */
	warichuCharsAfterBreak: number | NothingEnum

	/**
	 * The minimum number of characters allowed before a line break.
	 */
	warichuCharsBeforeBreak: number | NothingEnum

	/**
	 * The gap between lines of warichu characters.
	 */
	warichuLineSpacing: number | NothingEnum

	/**
	 * The number of lines of warichu within a single normal line.
	 */
	warichuLines: number | NothingEnum

	/**
	 * The amount (as a percentage) to scale parent text size to determine warichu size.
	 */
	warichuSize: number | NothingEnum

	/**
	 * The x (horizontal) offset for diacritic adjustment.
	 */
	xOffsetDiacritic: number | NothingEnum

	/**
	 * The y (vertical) offset for diacritic adjustment.
	 */
	yOffsetDiacritic: number | NothingEnum

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Create thumbnail for selected text with the given properties.
	 * @param previewText Text to use as sample
	 * @param pointSize Text font size (in points)
	 * @param space Color space RGB, CMYK or LAB
	 * @param colorValue Color values
	 * @param to The path to the export file.
	 */
	createThumbnailWithProperties(previewText: string, pointSize: number, space: ColorSpace, colorValue: number[], to: File): boolean

	/**
	 * Duplicates the CharacterStyle.
	 */
	duplicate(): CharacterStyle

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CharacterStyle[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): CharacterStyle

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: CharacterStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CharacterStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of character styles.
 */
declare class CharacterStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number | NothingEnum

	/**
	 * Returns the CharacterStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: CharacterStyle

	/**
	 * Creates a new CharacterStyle.
	 * @param withProperties Initial values for properties of the new CharacterStyle
	 */
	add(withProperties: object): CharacterStyle

	/**
	 * Returns any CharacterStyle in the collection.
	 */
	anyItem(): CharacterStyle

	/**
	 * Displays the number of elements in the CharacterStyle.
	 */
	count(): number

	/**
	 * Returns every CharacterStyle in the collection.
	 */
	everyItem(): CharacterStyle[]

	/**
	 * Returns the first CharacterStyle in the collection.
	 */
	firstItem(): CharacterStyle

	/**
	 * Returns the CharacterStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CharacterStyle

	/**
	 * Returns the CharacterStyle with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CharacterStyle

	/**
	 * Returns the CharacterStyle with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CharacterStyle

	/**
	 * Returns the CharacterStyles within the specified range.
	 * @param from The CharacterStyle, index, or name at the beginning of the range.
	 * @param to The CharacterStyle, index, or name at the end of the range.
	 */
	itemByRange(from: CharacterStyle | number | string, to: CharacterStyle | number | string): CharacterStyle[]

	/**
	 * Returns the last CharacterStyle in the collection.
	 */
	lastItem(): CharacterStyle

	/**
	 * Returns the middle CharacterStyle in the collection.
	 */
	middleItem(): CharacterStyle

	/**
	 * Returns the CharacterStyle whose index follows the specified CharacterStyle in the collection.
	 * @param obj The CharacterStyle whose index comes before the desired CharacterStyle.
	 */
	nextItem(obj: CharacterStyle): CharacterStyle

	/**
	 * Returns the CharacterStyle with the index previous to the specified index.
	 * @param obj The index of the CharacterStyle that follows the desired CharacterStyle.
	 */
	previousItem(obj: CharacterStyle): CharacterStyle

	/**
	 * Generates a string which, if executed, will return the CharacterStyle.
	 */
	toSource(): string

}

/**
 * A tab stop.
 */
declare class TabStop {
	/**
	 * The tab stop alignment.
	 */
	alignment: TabStopAlignment

	/**
	 * The tab stop alignment character. Note: Valid when alignment is character align.
	 */
	alignmentCharacter: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the TabStop within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The tab stop leader.
	 */
	leader: string

	/**
	 * The parent of the TabStop (a TextDefault, Paragraph, ParagraphStyle, Text, InsertionPoint, TextStyleRange, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	parent: any

	/**
	 * The position of the tab stop.
	 */
	position: number | string

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TabStop[]

	/**
	 * Deletes the TabStop.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TabStop.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of tab stops.
 */
declare class TabStops {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TabStop with the specified index.
	 * @param index The index.
	 */
	[index: number]: TabStop

	/**
	 * Creates a new TabStop.
	 * @param withProperties Initial values for properties of the new TabStop
	 */
	add(withProperties: object): TabStop

	/**
	 * Returns any TabStop in the collection.
	 */
	anyItem(): TabStop

	/**
	 * Displays the number of elements in the TabStop.
	 */
	count(): number

	/**
	 * Returns every TabStop in the collection.
	 */
	everyItem(): TabStop[]

	/**
	 * Returns the first TabStop in the collection.
	 */
	firstItem(): TabStop

	/**
	 * Returns the TabStop with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TabStop

	/**
	 * Returns the TabStops within the specified range.
	 * @param from The TabStop, index, or name at the beginning of the range.
	 * @param to The TabStop, index, or name at the end of the range.
	 */
	itemByRange(from: TabStop | number | string, to: TabStop | number | string): TabStop[]

	/**
	 * Returns the last TabStop in the collection.
	 */
	lastItem(): TabStop

	/**
	 * Returns the middle TabStop in the collection.
	 */
	middleItem(): TabStop

	/**
	 * Returns the TabStop whose index follows the specified TabStop in the collection.
	 * @param obj The TabStop whose index comes before the desired TabStop.
	 */
	nextItem(obj: TabStop): TabStop

	/**
	 * Returns the TabStop with the index previous to the specified index.
	 * @param obj The index of the TabStop that follows the desired TabStop.
	 */
	previousItem(obj: TabStop): TabStop

	/**
	 * Generates a string which, if executed, will return the TabStop.
	 */
	toSource(): string

}

/**
 * A nested style.
 */
declare class NestedStyle {
	/**
	 * The character style applied to the text.
	 */
	appliedCharacterStyle: CharacterStyle | string

	/**
	 * The delimiting expression that indicates how deeply into the paragraph the nested style is applied.
	 */
	delimiter: string | NestedStyleDelimiters

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the nested style is applied through the last delimiter. If false, the nested style is applied up to the last delimiter.
	 */
	inclusive: boolean

	/**
	 * The index of the NestedStyle within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the NestedStyle (a TextDefault, Paragraph, ParagraphStyle, Text, InsertionPoint, TextStyleRange, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The number instances of the specified delimiter up to which, or through which, to apply the nested style.
	 */
	repetition: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NestedStyle[]

	/**
	 * Deletes the NestedStyle.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the NestedStyle.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of nested styles.
 */
declare class NestedStyles {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the NestedStyle with the specified index.
	 * @param index The index.
	 */
	[index: number]: NestedStyle

	/**
	 * Creates a new NestedStyle.
	 * @param withProperties Initial values for properties of the new NestedStyle
	 */
	add(withProperties: object): NestedStyle

	/**
	 * Returns any NestedStyle in the collection.
	 */
	anyItem(): NestedStyle

	/**
	 * Displays the number of elements in the NestedStyle.
	 */
	count(): number

	/**
	 * Returns every NestedStyle in the collection.
	 */
	everyItem(): NestedStyle[]

	/**
	 * Returns the first NestedStyle in the collection.
	 */
	firstItem(): NestedStyle

	/**
	 * Returns the NestedStyle with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NestedStyle

	/**
	 * Returns the NestedStyles within the specified range.
	 * @param from The NestedStyle, index, or name at the beginning of the range.
	 * @param to The NestedStyle, index, or name at the end of the range.
	 */
	itemByRange(from: NestedStyle | number | string, to: NestedStyle | number | string): NestedStyle[]

	/**
	 * Returns the last NestedStyle in the collection.
	 */
	lastItem(): NestedStyle

	/**
	 * Returns the middle NestedStyle in the collection.
	 */
	middleItem(): NestedStyle

	/**
	 * Returns the NestedStyle whose index follows the specified NestedStyle in the collection.
	 * @param obj The NestedStyle whose index comes before the desired NestedStyle.
	 */
	nextItem(obj: NestedStyle): NestedStyle

	/**
	 * Returns the NestedStyle with the index previous to the specified index.
	 * @param obj The index of the NestedStyle that follows the desired NestedStyle.
	 */
	previousItem(obj: NestedStyle): NestedStyle

	/**
	 * Generates a string which, if executed, will return the NestedStyle.
	 */
	toSource(): string

}

/**
 * An endnote.
 */
declare class Endnote {
	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * The endnote range object.
	 */
	endnoteTextRange: EndnoteRange

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Endnote.
	 */
	id: number

	/**
	 * The index of the Endnote within its containing object.
	 */
	index: number

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * The name of the Endnote; this is an alias to the Endnote's label property.
	 */
	name: string

	/**
	 * The parent of the Endnote (a InsertionPoint, Story, XmlStory, Cell or Table).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The location of the endnote marker in the parent story
	 */
	storyOffset: InsertionPoint

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Deletes the endnote reference and the associated endnote text range.
	 */
	deleteEndnote(): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Endnote[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Insert the text in endnote text range at specified text index. Insertion position should lie within the start and end range indices excluding the markers
	 * @param storyOffset The location within the story, specified as an insertion point.
	 * @param contents The content to insert.
	 */
	insertTextInEndnote(storyOffset: InsertionPoint, contents: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Endnote.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of endnotes.
 */
declare class Endnotes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Endnote with the specified index.
	 * @param index The index.
	 */
	[index: number]: Endnote

	/**
	 * Returns any Endnote in the collection.
	 */
	anyItem(): Endnote

	/**
	 * Displays the number of elements in the Endnote.
	 */
	count(): number

	/**
	 * Returns every Endnote in the collection.
	 */
	everyItem(): Endnote[]

	/**
	 * Returns the first Endnote in the collection.
	 */
	firstItem(): Endnote

	/**
	 * Returns the Endnote with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Endnote

	/**
	 * Returns the Endnote with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Endnote

	/**
	 * Returns the Endnote with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Endnote

	/**
	 * Returns the Endnotes within the specified range.
	 * @param from The Endnote, index, or name at the beginning of the range.
	 * @param to The Endnote, index, or name at the end of the range.
	 */
	itemByRange(from: Endnote | number | string, to: Endnote | number | string): Endnote[]

	/**
	 * Returns the last Endnote in the collection.
	 */
	lastItem(): Endnote

	/**
	 * Returns the middle Endnote in the collection.
	 */
	middleItem(): Endnote

	/**
	 * Returns the Endnote whose index follows the specified Endnote in the collection.
	 * @param obj The Endnote whose index comes before the desired Endnote.
	 */
	nextItem(obj: Endnote): Endnote

	/**
	 * Returns the Endnote with the index previous to the specified index.
	 * @param obj The index of the Endnote that follows the desired Endnote.
	 */
	previousItem(obj: Endnote): Endnote

	/**
	 * Generates a string which, if executed, will return the Endnote.
	 */
	toSource(): string

}

/**
 * An endnote text range.
 */
declare class EndnoteRange {
	/**
	 * EndnoteRange Contents, It will skip the endnote number while setting/replacing the content into endnote range.
	 */
	endnoteRangeContent: string | SpecialCharacters | string[] | NothingEnum

	/**
	 * Ending Index of the endnote range object.
	 */
	endnoteRangeEndIndex: number

	/**
	 * Starting Index of the endnote range object.
	 */
	endnoteRangeStartIndex: number

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the EndnoteRange.
	 */
	id: number

	/**
	 * The index of the EndnoteRange within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the EndnoteRange; this is an alias to the EndnoteRange's label property.
	 */
	name: string

	/**
	 * The parent of the EndnoteRange (a Text, InsertionPoint, TextStyleRange, Paragraph, TextColumn, Line, Word, Character, Story or XmlStory).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The endnote reference corresponding to the endnote text range.
	 */
	sourceEndnote: Endnote

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Deletes the endnote range and the associated endnote anchor.
	 */
	deleteEndnoteRange(): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): EndnoteRange[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the EndnoteRange.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of endnote text ranges.
 */
declare class EndnoteRanges {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the EndnoteRange with the specified index.
	 * @param index The index.
	 */
	[index: number]: EndnoteRange

	/**
	 * Returns any EndnoteRange in the collection.
	 */
	anyItem(): EndnoteRange

	/**
	 * Displays the number of elements in the EndnoteRange.
	 */
	count(): number

	/**
	 * Returns every EndnoteRange in the collection.
	 */
	everyItem(): EndnoteRange[]

	/**
	 * Returns the first EndnoteRange in the collection.
	 */
	firstItem(): EndnoteRange

	/**
	 * Returns the EndnoteRange with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EndnoteRange

	/**
	 * Returns the EndnoteRange with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EndnoteRange

	/**
	 * Returns the EndnoteRange with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EndnoteRange

	/**
	 * Returns the EndnoteRanges within the specified range.
	 * @param from The EndnoteRange, index, or name at the beginning of the range.
	 * @param to The EndnoteRange, index, or name at the end of the range.
	 */
	itemByRange(from: EndnoteRange | number | string, to: EndnoteRange | number | string): EndnoteRange[]

	/**
	 * Returns the last EndnoteRange in the collection.
	 */
	lastItem(): EndnoteRange

	/**
	 * Returns the middle EndnoteRange in the collection.
	 */
	middleItem(): EndnoteRange

	/**
	 * Returns the EndnoteRange whose index follows the specified EndnoteRange in the collection.
	 * @param obj The EndnoteRange whose index comes before the desired EndnoteRange.
	 */
	nextItem(obj: EndnoteRange): EndnoteRange

	/**
	 * Returns the EndnoteRange with the index previous to the specified index.
	 * @param obj The index of the EndnoteRange that follows the desired EndnoteRange.
	 */
	previousItem(obj: EndnoteRange): EndnoteRange

	/**
	 * Generates a string which, if executed, will return the EndnoteRange.
	 */
	toSource(): string

}

/**
 * An endnote text frame.
 */
declare class EndnoteTextFrame extends TextFrame {
}

/**
 * A collection of endnote text frames.
 */
declare class EndnoteTextFrames {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the EndnoteTextFrame with the specified index.
	 * @param index The index.
	 */
	[index: number]: EndnoteTextFrame

	/**
	 * Creates a new EndnoteTextFrame
	 * @param layer The layer on which to create the EndnoteTextFrame.
	 * @param at The location at which to insert the EndnoteTextFrame relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the at parameter is before or after.
	 * @param withProperties Initial values for properties of the new EndnoteTextFrame
	 */
	add(layer: Layer, at?: LocationOptions, reference?: Document | Spread | MasterSpread | Page | Layer | PageItem, withProperties?: object): EndnoteTextFrame

	/**
	 * Returns any EndnoteTextFrame in the collection.
	 */
	anyItem(): EndnoteTextFrame

	/**
	 * Displays the number of elements in the EndnoteTextFrame.
	 */
	count(): number

	/**
	 * Returns every EndnoteTextFrame in the collection.
	 */
	everyItem(): EndnoteTextFrame[]

	/**
	 * Returns the first EndnoteTextFrame in the collection.
	 */
	firstItem(): EndnoteTextFrame

	/**
	 * Returns the EndnoteTextFrame with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EndnoteTextFrame

	/**
	 * Returns the EndnoteTextFrame with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EndnoteTextFrame

	/**
	 * Returns the EndnoteTextFrame with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): EndnoteTextFrame

	/**
	 * Returns the EndnoteTextFrames within the specified range.
	 * @param from The EndnoteTextFrame, index, or name at the beginning of the range.
	 * @param to The EndnoteTextFrame, index, or name at the end of the range.
	 */
	itemByRange(from: EndnoteTextFrame | number | string, to: EndnoteTextFrame | number | string): EndnoteTextFrame[]

	/**
	 * Returns the last EndnoteTextFrame in the collection.
	 */
	lastItem(): EndnoteTextFrame

	/**
	 * Returns the middle EndnoteTextFrame in the collection.
	 */
	middleItem(): EndnoteTextFrame

	/**
	 * Returns the EndnoteTextFrame whose index follows the specified EndnoteTextFrame in the collection.
	 * @param obj The EndnoteTextFrame whose index comes before the desired EndnoteTextFrame.
	 */
	nextItem(obj: EndnoteTextFrame): EndnoteTextFrame

	/**
	 * Returns the EndnoteTextFrame with the index previous to the specified index.
	 * @param obj The index of the EndnoteTextFrame that follows the desired EndnoteTextFrame.
	 */
	previousItem(obj: EndnoteTextFrame): EndnoteTextFrame

	/**
	 * Generates a string which, if executed, will return the EndnoteTextFrame.
	 */
	toSource(): string

}

/**
 * The language on which to base hyphenation rules and spell checking.
 */
declare class Language {
	/**
	 * The double quotes pair for the language.
	 */
	doubleQuotes: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The hyphenation rules source.
	 */
	hyphenationVendor: string

	/**
	 * The full name of the Language object's ICU locale.
	 */
	icuLocaleName: string

	/**
	 * The unique ID of the Language.
	 */
	id: number

	/**
	 * The index of the Language within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Language.
	 */
	name: string

	/**
	 * The parent of the Language (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The single quotes pair for the language.
	 */
	singleQuotes: string

	/**
	 * The spell-checking source.
	 */
	spellingVendor: string

	/**
	 * The untranslated name of the language.
	 */
	untranslatedName: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Language[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Language.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of languages.
 */
declare class Languages {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Language with the specified index.
	 * @param index The index.
	 */
	[index: number]: Language

	/**
	 * Returns any Language in the collection.
	 */
	anyItem(): Language

	/**
	 * Displays the number of elements in the Language.
	 */
	count(): number

	/**
	 * Returns every Language in the collection.
	 */
	everyItem(): Language[]

	/**
	 * Returns the first Language in the collection.
	 */
	firstItem(): Language

	/**
	 * Returns the Language with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Language

	/**
	 * Returns the Language with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Language

	/**
	 * Returns the Language with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Language

	/**
	 * Returns the Languages within the specified range.
	 * @param from The Language, index, or name at the beginning of the range.
	 * @param to The Language, index, or name at the end of the range.
	 */
	itemByRange(from: Language | number | string, to: Language | number | string): Language[]

	/**
	 * Returns the last Language in the collection.
	 */
	lastItem(): Language

	/**
	 * Returns the middle Language in the collection.
	 */
	middleItem(): Language

	/**
	 * Returns the Language whose index follows the specified Language in the collection.
	 * @param obj The Language whose index comes before the desired Language.
	 */
	nextItem(obj: Language): Language

	/**
	 * Returns the Language with the index previous to the specified index.
	 * @param obj The index of the Language that follows the desired Language.
	 */
	previousItem(obj: Language): Language

	/**
	 * Generates a string which, if executed, will return the Language.
	 */
	toSource(): string

}

/**
 * A language that allows the specification of a hyphenation rules source, a spell-checking source, and a thesaurus.
 */
declare class LanguageWithVendors {
	/**
	 * The user dictionaries for the language.
	 */
	dictionaryPaths: string[]

	/**
	 * The double quotes pair for the language.
	 */
	doubleQuotes: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The hyphenation rules source.
	 */
	hyphenationVendor: string

	/**
	 * A list of hyphenation vendors.
	 */
	hyphenationVendorList: string[]

	/**
	 * The full name of the Language object's ICU locale.
	 */
	icuLocaleName: string

	/**
	 * The unique ID of the LanguageWithVendors.
	 */
	id: number

	/**
	 * The index of the LanguageWithVendors within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the LanguageWithVendors.
	 */
	name: string

	/**
	 * The parent of the LanguageWithVendors (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The single quotes pair for the language.
	 */
	singleQuotes: string

	/**
	 * The spell-checking source.
	 */
	spellingVendor: string

	/**
	 * A list of spelling vendors.
	 */
	spellingVendorList: string[]

	/**
	 * The thesaurus source.
	 */
	thesaurusVendor: string

	/**
	 * The untranslated name of the language.
	 */
	untranslatedName: string

	/**
	 * Adds the specified user dictionary.
	 * @param filePath The path to the dictionary file.
	 */
	addDictionaryPath(filePath: string): string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): LanguageWithVendors[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Removes the specified user dictionary.
	 * @param filePath The path to the dictionary file.
	 */
	removeDictionaryPath(filePath: string): string

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the LanguageWithVendors.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of languages with vendors.
 */
declare class LanguagesWithVendors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the LanguageWithVendors with the specified index.
	 * @param index The index.
	 */
	[index: number]: LanguageWithVendors

	/**
	 * Returns any LanguageWithVendors in the collection.
	 */
	anyItem(): LanguageWithVendors

	/**
	 * Displays the number of elements in the LanguageWithVendors.
	 */
	count(): number

	/**
	 * Returns every LanguageWithVendors in the collection.
	 */
	everyItem(): LanguageWithVendors[]

	/**
	 * Returns the first LanguageWithVendors in the collection.
	 */
	firstItem(): LanguageWithVendors

	/**
	 * Returns the LanguageWithVendors with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): LanguageWithVendors

	/**
	 * Returns the LanguageWithVendors with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): LanguageWithVendors

	/**
	 * Returns the LanguageWithVendors with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): LanguageWithVendors

	/**
	 * Returns the LanguagesWithVendors within the specified range.
	 * @param from The LanguageWithVendors, index, or name at the beginning of the range.
	 * @param to The LanguageWithVendors, index, or name at the end of the range.
	 */
	itemByRange(from: LanguageWithVendors | number | string, to: LanguageWithVendors | number | string): LanguageWithVendors[]

	/**
	 * Returns the last LanguageWithVendors in the collection.
	 */
	lastItem(): LanguageWithVendors

	/**
	 * Returns the middle LanguageWithVendors in the collection.
	 */
	middleItem(): LanguageWithVendors

	/**
	 * Returns the LanguageWithVendors whose index follows the specified LanguageWithVendors in the collection.
	 * @param obj The LanguageWithVendors whose index comes before the desired LanguageWithVendors.
	 */
	nextItem(obj: LanguageWithVendors): LanguageWithVendors

	/**
	 * Returns the LanguageWithVendors with the index previous to the specified index.
	 * @param obj The index of the LanguageWithVendors that follows the desired LanguageWithVendors.
	 */
	previousItem(obj: LanguageWithVendors): LanguageWithVendors

	/**
	 * Generates a string which, if executed, will return the LanguageWithVendors.
	 */
	toSource(): string

}

/**
 * A font.
 */
declare class Font {
	/**
	 * If true, the font can be embedded.
	 */
	allowEditableEmbedding: boolean

	/**
	 * If true, the font can be converted to outlines.
	 */
	allowOutlines: boolean

	/**
	 * If true, the font can be embedded in a PDF document.
	 */
	allowPDFEmbedding: boolean

	/**
	 * If true, the can font be printed.
	 */
	allowPrinting: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The name of the font family
	 */
	fontFamily: string

	/**
	 * The name of the font style.
	 */
	fontStyleName: string

	/**
	 * The native name of the font style.
	 */
	fontStyleNameNative: string

	/**
	 * The type of font.
	 */
	fontType: FontTypes

	/**
	 * The full font name.
	 */
	fullName: string

	/**
	 * The full native name of the font.
	 */
	fullNameNative: string

	/**
	 * The index of the Font within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The full path to the Font.
	 */
	location: string

	/**
	 * The name of the Font.
	 */
	name: string

	/**
	 * The ordering of a CID font.
	 */
	ordering: string

	/**
	 * The parent of the Font (a Document or Application).
	 */
	parent: any

	/**
	 * The platform font name.
	 */
	platformName: string

	/**
	 * The PostScript name of the font.
	 */
	postscriptName: string

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The registry of a CID font.
	 */
	registry: string

	/**
	 * If true, the font allows only restricted printing.
	 */
	restrictedPrinting: boolean

	/**
	 * The status of the font.
	 */
	status: FontStatus

	/**
	 * The font version.
	 */
	version: string

	/**
	 * The writing script.
	 */
	writingScript: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Checks whether the font supports the specified OpenType feature.
	 * @param using The OpenType feature to check for, specified either as an OpenType feature or a string.
	 */
	checkOpenTypeFeature(using: OpenTypeFeature | string): boolean

	/**
	 * Create a copy of the font with just enough information to render the list of characters given.
	 * @param charactersForSubset String with all the characters used in the resulting font.
	 * @param fontDestination File location for the new font.
	 */
	createSubsetFont(charactersForSubset: string, fontDestination: File): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Font[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Font.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of fonts.
 */
declare class Fonts {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Font with the specified index.
	 * @param index The index.
	 */
	[index: number]: Font

	/**
	 * Returns any Font in the collection.
	 */
	anyItem(): Font

	/**
	 * Displays the number of elements in the Font.
	 */
	count(): number

	/**
	 * Returns every Font in the collection.
	 */
	everyItem(): Font[]

	/**
	 * Returns the first Font in the collection.
	 */
	firstItem(): Font

	/**
	 * Returns the Font with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Font

	/**
	 * Returns the Font with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Font

	/**
	 * Returns the Fonts within the specified range.
	 * @param from The Font, index, or name at the beginning of the range.
	 * @param to The Font, index, or name at the end of the range.
	 */
	itemByRange(from: Font | number | string, to: Font | number | string): Font[]

	/**
	 * Returns the last Font in the collection.
	 */
	lastItem(): Font

	/**
	 * Returns the middle Font in the collection.
	 */
	middleItem(): Font

	/**
	 * Returns the Font whose index follows the specified Font in the collection.
	 * @param obj The Font whose index comes before the desired Font.
	 */
	nextItem(obj: Font): Font

	/**
	 * Returns the Font with the index previous to the specified index.
	 * @param obj The index of the Font that follows the desired Font.
	 */
	previousItem(obj: Font): Font

	/**
	 * Generates a string which, if executed, will return the Font.
	 */
	toSource(): string

}

/**
 * The kinsoku table.
 */
declare class KinsokuTable {
	/**
	 * The characters in the kinsoku set that cannot be separated.
	 */
	cantBeSeparatedChars: string

	/**
	 * The characters in the kinsoku set that cannot begin lines.
	 */
	cantBeginLineChars: string

	/**
	 * That characters in the kinsoku set that cannot end lines.
	 */
	cantEndLineChars: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The hanging punctuation characters in the kinsoku set.
	 */
	hangingPunctuationChars: string

	/**
	 * The unique ID of the KinsokuTable.
	 */
	id: number

	/**
	 * The index of the KinsokuTable within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the KinsokuTable.
	 */
	name: string

	/**
	 * The parent of the KinsokuTable (a Document or Application).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): KinsokuTable[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the KinsokuTable.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the KinsokuTable.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of kinsoku tables.
 */
declare class KinsokuTables {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the KinsokuTable with the specified index.
	 * @param index The index.
	 */
	[index: number]: KinsokuTable

	/**
	 * Creates a new kinsoku table.
	 * @param name The name of the new kinsoku table.
	 * @param withProperties Initial values for properties of the new KinsokuTable
	 */
	add(name: string, withProperties: object): KinsokuTable

	/**
	 * Returns any KinsokuTable in the collection.
	 */
	anyItem(): KinsokuTable

	/**
	 * Displays the number of elements in the KinsokuTable.
	 */
	count(): number

	/**
	 * Returns every KinsokuTable in the collection.
	 */
	everyItem(): KinsokuTable[]

	/**
	 * Returns the first KinsokuTable in the collection.
	 */
	firstItem(): KinsokuTable

	/**
	 * Returns the KinsokuTable with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): KinsokuTable

	/**
	 * Returns the KinsokuTable with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): KinsokuTable

	/**
	 * Returns the KinsokuTable with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): KinsokuTable

	/**
	 * Returns the KinsokuTables within the specified range.
	 * @param from The KinsokuTable, index, or name at the beginning of the range.
	 * @param to The KinsokuTable, index, or name at the end of the range.
	 */
	itemByRange(from: KinsokuTable | number | string, to: KinsokuTable | number | string): KinsokuTable[]

	/**
	 * Returns the last KinsokuTable in the collection.
	 */
	lastItem(): KinsokuTable

	/**
	 * Returns the middle KinsokuTable in the collection.
	 */
	middleItem(): KinsokuTable

	/**
	 * Returns the KinsokuTable whose index follows the specified KinsokuTable in the collection.
	 * @param obj The KinsokuTable whose index comes before the desired KinsokuTable.
	 */
	nextItem(obj: KinsokuTable): KinsokuTable

	/**
	 * Returns the KinsokuTable with the index previous to the specified index.
	 * @param obj The index of the KinsokuTable that follows the desired KinsokuTable.
	 */
	previousItem(obj: KinsokuTable): KinsokuTable

	/**
	 * Generates a string which, if executed, will return the KinsokuTable.
	 */
	toSource(): string

}

/**
 * The mojikumi table.
 */
declare class MojikumiTable {
	/**
	 * The existing mojikumi set on which to base the new mojikumi set.
	 */
	basedOnMojikumiSet: MojikumiTableDefaults

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the MojikumiTable.
	 */
	id: number

	/**
	 * The index of the MojikumiTable within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the MojikumiTable.
	 */
	name: string

	/**
	 * The mojikumi overrides for aki. Can return: Ordered array containing targetMojikumiClass:Short Integer, sideMojikumiClass:Short Integer, sideIsAfterTarget:Boolean, minimum:Real, desired:Real, maximum:Real, compressionPriority:Short Integer, akiDoesNotFloat:Boolean.
	 */
	overrideMojikumiAkiList: any[]

	/**
	 * The parent of the MojikumiTable (a Document or Application).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MojikumiTable[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the MojikumiTable.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the MojikumiTable.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of mojikumi tables.
 */
declare class MojikumiTables {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MojikumiTable with the specified index.
	 * @param index The index.
	 */
	[index: number]: MojikumiTable

	/**
	 * Creates a new mojikumi table.
	 * @param name The name of the new mojikumi table.
	 * @param withProperties Initial values for properties of the new MojikumiTable
	 */
	add(name: string, withProperties: object): MojikumiTable

	/**
	 * Returns any MojikumiTable in the collection.
	 */
	anyItem(): MojikumiTable

	/**
	 * Displays the number of elements in the MojikumiTable.
	 */
	count(): number

	/**
	 * Returns every MojikumiTable in the collection.
	 */
	everyItem(): MojikumiTable[]

	/**
	 * Returns the first MojikumiTable in the collection.
	 */
	firstItem(): MojikumiTable

	/**
	 * Returns the MojikumiTable with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MojikumiTable

	/**
	 * Returns the MojikumiTable with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MojikumiTable

	/**
	 * Returns the MojikumiTable with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MojikumiTable

	/**
	 * Returns the MojikumiTables within the specified range.
	 * @param from The MojikumiTable, index, or name at the beginning of the range.
	 * @param to The MojikumiTable, index, or name at the end of the range.
	 */
	itemByRange(from: MojikumiTable | number | string, to: MojikumiTable | number | string): MojikumiTable[]

	/**
	 * Returns the last MojikumiTable in the collection.
	 */
	lastItem(): MojikumiTable

	/**
	 * Returns the middle MojikumiTable in the collection.
	 */
	middleItem(): MojikumiTable

	/**
	 * Returns the MojikumiTable whose index follows the specified MojikumiTable in the collection.
	 * @param obj The MojikumiTable whose index comes before the desired MojikumiTable.
	 */
	nextItem(obj: MojikumiTable): MojikumiTable

	/**
	 * Returns the MojikumiTable with the index previous to the specified index.
	 * @param obj The index of the MojikumiTable that follows the desired MojikumiTable.
	 */
	previousItem(obj: MojikumiTable): MojikumiTable

	/**
	 * Generates a string which, if executed, will return the MojikumiTable.
	 */
	toSource(): string

}

/**
 * A hyphenation exceptions list.
 */
declare class HyphenationException {
	/**
	 * A list of words added to the hyphenation exceptions list.
	 */
	addedExceptions: string[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the HyphenationException within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the HyphenationException.
	 */
	name: string

	/**
	 * The parent of the HyphenationException (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A list of words removed from the hyphenation exceptions list.
	 */
	removedExceptions: string[]

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Adds the specified words to the hyphenation exceptions list.
	 * @param addedExceptions The list of words to add.
	 * @param removedList If true, adds the words to the removed exceptions list. If false or unspecified, adds the words to the added exceptions list.
	 */
	addException(addedExceptions: string[], removedList?: boolean): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HyphenationException[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Removes the specified words from the hyphenation exceptions list.
	 * @param removedExceptions The list of words to remove.
	 * @param removedList If true, removes the words from the removed exceptions list. If false or unspecified, adds the words to the added exceptions list.
	 */
	removeException(removedExceptions: string[], removedList?: boolean): void

	/**
	 * Generates a string which, if executed, will return the HyphenationException.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of hyphenation exceptions lists.
 */
declare class HyphenationExceptions {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the HyphenationException with the specified index.
	 * @param index The index.
	 */
	[index: number]: HyphenationException

	/**
	 * Returns any HyphenationException in the collection.
	 */
	anyItem(): HyphenationException

	/**
	 * Displays the number of elements in the HyphenationException.
	 */
	count(): number

	/**
	 * Returns every HyphenationException in the collection.
	 */
	everyItem(): HyphenationException[]

	/**
	 * Returns the first HyphenationException in the collection.
	 */
	firstItem(): HyphenationException

	/**
	 * Returns the HyphenationException with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HyphenationException

	/**
	 * Returns the HyphenationException with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HyphenationException

	/**
	 * Returns the HyphenationExceptions within the specified range.
	 * @param from The HyphenationException, index, or name at the beginning of the range.
	 * @param to The HyphenationException, index, or name at the end of the range.
	 */
	itemByRange(from: HyphenationException | number | string, to: HyphenationException | number | string): HyphenationException[]

	/**
	 * Returns the last HyphenationException in the collection.
	 */
	lastItem(): HyphenationException

	/**
	 * Returns the middle HyphenationException in the collection.
	 */
	middleItem(): HyphenationException

	/**
	 * Returns the HyphenationException whose index follows the specified HyphenationException in the collection.
	 * @param obj The HyphenationException whose index comes before the desired HyphenationException.
	 */
	nextItem(obj: HyphenationException): HyphenationException

	/**
	 * Returns the HyphenationException with the index previous to the specified index.
	 * @param obj The index of the HyphenationException that follows the desired HyphenationException.
	 */
	previousItem(obj: HyphenationException): HyphenationException

	/**
	 * Generates a string which, if executed, will return the HyphenationException.
	 */
	toSource(): string

}

/**
 * A user dictionary.
 */
declare class UserDictionary {
	/**
	 * A list of words added to the user dictionary.
	 */
	addedWords: string[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the UserDictionary within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the UserDictionary.
	 */
	name: string

	/**
	 * The parent of the UserDictionary (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A list of words removed from the user dictionary.
	 */
	removedWords: string[]

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Adds the specified words to the specified list in the dictionary.
	 * @param addedWords The words to add.
	 * @param removedList If true, adds the words to the removed words list. If false or unspecified, adds the words to the added words list.
	 */
	addWord(addedWords: string[], removedList?: boolean): void

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): UserDictionary[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Removes the specified words from the specified list in the dictionary.
	 * @param removedWords The words to remove.
	 * @param removedList If true, removes the words from the removed words list. If false or unspecified, removes the words from the added words list.
	 */
	removeWord(removedWords: string[], removedList?: boolean): void

	/**
	 * Generates a string which, if executed, will return the UserDictionary.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of user dictionaries.
 */
declare class UserDictionaries {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the UserDictionary with the specified index.
	 * @param index The index.
	 */
	[index: number]: UserDictionary

	/**
	 * Returns any UserDictionary in the collection.
	 */
	anyItem(): UserDictionary

	/**
	 * Displays the number of elements in the UserDictionary.
	 */
	count(): number

	/**
	 * Returns every UserDictionary in the collection.
	 */
	everyItem(): UserDictionary[]

	/**
	 * Returns the first UserDictionary in the collection.
	 */
	firstItem(): UserDictionary

	/**
	 * Returns the UserDictionary with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): UserDictionary

	/**
	 * Returns the UserDictionary with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): UserDictionary

	/**
	 * Returns the UserDictionaries within the specified range.
	 * @param from The UserDictionary, index, or name at the beginning of the range.
	 * @param to The UserDictionary, index, or name at the end of the range.
	 */
	itemByRange(from: UserDictionary | number | string, to: UserDictionary | number | string): UserDictionary[]

	/**
	 * Returns the last UserDictionary in the collection.
	 */
	lastItem(): UserDictionary

	/**
	 * Returns the middle UserDictionary in the collection.
	 */
	middleItem(): UserDictionary

	/**
	 * Returns the UserDictionary whose index follows the specified UserDictionary in the collection.
	 * @param obj The UserDictionary whose index comes before the desired UserDictionary.
	 */
	nextItem(obj: UserDictionary): UserDictionary

	/**
	 * Returns the UserDictionary with the index previous to the specified index.
	 * @param obj The index of the UserDictionary that follows the desired UserDictionary.
	 */
	previousItem(obj: UserDictionary): UserDictionary

	/**
	 * Generates a string which, if executed, will return the UserDictionary.
	 */
	toSource(): string

}

/**
 * An auto-correct table.
 */
declare class AutoCorrectTable {
	/**
	 * An auto-correct word pair, specified as a misspelled word and a corrected word. Can return: Array of Arrays of 2 Strings.
	 */
	autoCorrectWordPairList: any[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the AutoCorrectTable within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the AutoCorrectTable.
	 */
	name: string

	/**
	 * The parent of the AutoCorrectTable (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): AutoCorrectTable[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the AutoCorrectTable.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of auto-correct tables.
 */
declare class AutoCorrectTables {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the AutoCorrectTable with the specified index.
	 * @param index The index.
	 */
	[index: number]: AutoCorrectTable

	/**
	 * Returns any AutoCorrectTable in the collection.
	 */
	anyItem(): AutoCorrectTable

	/**
	 * Displays the number of elements in the AutoCorrectTable.
	 */
	count(): number

	/**
	 * Returns every AutoCorrectTable in the collection.
	 */
	everyItem(): AutoCorrectTable[]

	/**
	 * Returns the first AutoCorrectTable in the collection.
	 */
	firstItem(): AutoCorrectTable

	/**
	 * Returns the AutoCorrectTable with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AutoCorrectTable

	/**
	 * Returns the AutoCorrectTable with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): AutoCorrectTable

	/**
	 * Returns the AutoCorrectTables within the specified range.
	 * @param from The AutoCorrectTable, index, or name at the beginning of the range.
	 * @param to The AutoCorrectTable, index, or name at the end of the range.
	 */
	itemByRange(from: AutoCorrectTable | number | string, to: AutoCorrectTable | number | string): AutoCorrectTable[]

	/**
	 * Returns the last AutoCorrectTable in the collection.
	 */
	lastItem(): AutoCorrectTable

	/**
	 * Returns the middle AutoCorrectTable in the collection.
	 */
	middleItem(): AutoCorrectTable

	/**
	 * Returns the AutoCorrectTable whose index follows the specified AutoCorrectTable in the collection.
	 * @param obj The AutoCorrectTable whose index comes before the desired AutoCorrectTable.
	 */
	nextItem(obj: AutoCorrectTable): AutoCorrectTable

	/**
	 * Returns the AutoCorrectTable with the index previous to the specified index.
	 * @param obj The index of the AutoCorrectTable that follows the desired AutoCorrectTable.
	 */
	previousItem(obj: AutoCorrectTable): AutoCorrectTable

	/**
	 * Generates a string which, if executed, will return the AutoCorrectTable.
	 */
	toSource(): string

}

/**
 * A tracked change made to a story.
 */
declare class Change {
	/**
	 * The type of tracked change. Note: Valid only when track changes is true.
	 */
	changeType: ChangeTypes

	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * The date on which the tracked change was made. Note: Valid only when track changes is true.
	 */
	date: Date

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the Change within its containing object.
	 */
	index: number

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The parent of the Change (a Story, XmlStory or Cell).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The location of the first insertion point in the object (relative to the beginning of the story).
	 */
	storyOffset: InsertionPoint

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text variable instances.
	 */
	textVariableInstances: TextVariableInstances

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * The user who made the change. Note: Valid only when track changes is true.
	 */
	userName: string

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * Accepts the tracked change. Note: Valid only when track changes is true.
	 */
	accept(): void

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Change[]

	/**
	 * Rejects the tracked change. Note: Valid only when track changes is true.
	 */
	reject(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Change.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of changes.
 */
declare class Changes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Change with the specified index.
	 * @param index The index.
	 */
	[index: number]: Change

	/**
	 * Returns any Change in the collection.
	 */
	anyItem(): Change

	/**
	 * Displays the number of elements in the Change.
	 */
	count(): number

	/**
	 * Returns every Change in the collection.
	 */
	everyItem(): Change[]

	/**
	 * Returns the first Change in the collection.
	 */
	firstItem(): Change

	/**
	 * Returns the Change with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Change

	/**
	 * Returns the Changes within the specified range.
	 * @param from The Change, index, or name at the beginning of the range.
	 * @param to The Change, index, or name at the end of the range.
	 */
	itemByRange(from: Change | number | string, to: Change | number | string): Change[]

	/**
	 * Returns the last Change in the collection.
	 */
	lastItem(): Change

	/**
	 * Returns the middle Change in the collection.
	 */
	middleItem(): Change

	/**
	 * Returns the Change whose index follows the specified Change in the collection.
	 * @param obj The Change whose index comes before the desired Change.
	 */
	nextItem(obj: Change): Change

	/**
	 * Returns the Change with the index previous to the specified index.
	 * @param obj The index of the Change that follows the desired Change.
	 */
	previousItem(obj: Change): Change

	/**
	 * Generates a string which, if executed, will return the Change.
	 */
	toSource(): string

}

/**
 * A text object that is on a path.
 */
declare class TextPath {
	/**
	 * Dispatched after a TextPath is placed. This event bubbles. This event is not cancelable.
	 */
	AFTER_PLACE: string

	/**
	 * Dispatched before a TextPath is placed. This event bubbles. This event is cancelable.
	 */
	BEFORE_PLACE: string

	/**
	 * The halfway point between the start bracket and the end bracket.
	 */
	centerBracket: number

	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * The contents of the text frame.
	 */
	contents: string | TextFrameContents | SpecialCharacters

	/**
	 * The end of the type on a path. Note: Additional text becomes overset text unless the text is linked to another path or text frame.
	 */
	endBracket: number

	/**
	 * The last text frame in the thread.
	 */
	endTextFrame: TextFrame | TextPath

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The flip effect applied to the type on a path.
	 */
	flipPathEffect: FlipValues

	/**
	 * The unique ID of the TextPath.
	 */
	id: number

	/**
	 * The index of the TextPath within its containing object.
	 */
	index: number

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * The name of the TextPath; this is an alias to the TextPath's label property.
	 */
	name: string

	/**
	 * The next text frame in the thread.
	 */
	nextTextFrame: TextFrame | TextPath | NothingEnum

	/**
	 * If true, the story has overset text.
	 */
	overflows: boolean

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The parent of the TextPath (a SplineItem, Polygon, GraphicLine, Rectangle, Oval, TextFrame, EndnoteTextFrame or EPSText).
	 */
	parent: any

	/**
	 * The story that contains the text.
	 */
	parentStory: Story

	/**
	 * The alignment of the type on a path.
	 */
	pathAlignment: PathTypeAlignments

	/**
	 * The effect applied to the type on a path.
	 */
	pathEffect: TextPathEffects

	/**
	 * The spacing applied to the type on a path.
	 */
	pathSpacing: number

	/**
	 * The previous text frame in the thread.
	 */
	previousTextFrame: TextFrame | TextPath | NothingEnum

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The location of the start of the type on the path, expressed in points. Note: 0 is the first point on the path.
	 */
	startBracket: number

	/**
	 * The first text frame in the thread.
	 */
	startTextFrame: TextFrame | TextPath

	/**
	 * The alignment applied to the type on a path.
	 */
	textAlignment: TextTypeAlignments

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * The index of the text frame within the story.
	 */
	textFrameIndex: number

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Finds glyphs that match the find what value and replaces the glyphs with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Finds glyphs that match the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGlyph(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TextPath[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the TextPath.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TextPath.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of text paths.
 */
declare class TextPaths {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TextPath with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextPath

	/**
	 * Creates a new TextPath.
	 * @param withProperties Initial values for properties of the new TextPath
	 */
	add(withProperties: object): TextPath

	/**
	 * Returns any TextPath in the collection.
	 */
	anyItem(): TextPath

	/**
	 * Displays the number of elements in the TextPath.
	 */
	count(): number

	/**
	 * Returns every TextPath in the collection.
	 */
	everyItem(): TextPath[]

	/**
	 * Returns the first TextPath in the collection.
	 */
	firstItem(): TextPath

	/**
	 * Returns the TextPath with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextPath

	/**
	 * Returns the TextPath with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextPath

	/**
	 * Returns the TextPath with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextPath

	/**
	 * Returns the TextPaths within the specified range.
	 * @param from The TextPath, index, or name at the beginning of the range.
	 * @param to The TextPath, index, or name at the end of the range.
	 */
	itemByRange(from: TextPath | number | string, to: TextPath | number | string): TextPath[]

	/**
	 * Returns the last TextPath in the collection.
	 */
	lastItem(): TextPath

	/**
	 * Returns the middle TextPath in the collection.
	 */
	middleItem(): TextPath

	/**
	 * Returns the TextPath whose index follows the specified TextPath in the collection.
	 * @param obj The TextPath whose index comes before the desired TextPath.
	 */
	nextItem(obj: TextPath): TextPath

	/**
	 * Returns the TextPath with the index previous to the specified index.
	 * @param obj The index of the TextPath that follows the desired TextPath.
	 */
	previousItem(obj: TextPath): TextPath

	/**
	 * Generates a string which, if executed, will return the TextPath.
	 */
	toSource(): string

}

/**
 * A note in a story.
 */
declare class Note {
	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * If true, the note is collapsed in galley view.
	 */
	collapsed: boolean

	/**
	 * The date and time the note was created.
	 */
	creationDate: Date

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * A collection of hidden text objects.
	 */
	hiddenTexts: HiddenTexts

	/**
	 * The unique ID of the Note.
	 */
	id: number

	/**
	 * The index of the Note within its containing object.
	 */
	index: number

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * The date and time the note was last modified.
	 */
	modificationDate: Date

	/**
	 * The name of the Note; this is an alias to the Note's label property.
	 */
	name: string

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The parent of the Note (a XmlStory, Story, TextFrame, EndnoteTextFrame, InsertionPoint or Cell).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	storyOffset: InsertionPoint

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text variable instances.
	 */
	textVariableInstances: TextVariableInstances

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * The user who made the note.
	 */
	userName: string

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Converts the note to story text.
	 */
	convertToText(): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Note[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the note to the specified location.
	 * @param to The new location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: Text | Story): Note

	/**
	 * Deletes the Note.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Note.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of notes.
 */
declare class Notes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Note with the specified index.
	 * @param index The index.
	 */
	[index: number]: Note

	/**
	 * Creates a new note.
	 * @param at The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new Note
	 */
	add(at?: LocationOptions, reference?: Note | InsertionPoint, withProperties?: object): Note

	/**
	 * Returns any Note in the collection.
	 */
	anyItem(): Note

	/**
	 * Displays the number of elements in the Note.
	 */
	count(): number

	/**
	 * Returns every Note in the collection.
	 */
	everyItem(): Note[]

	/**
	 * Returns the first Note in the collection.
	 */
	firstItem(): Note

	/**
	 * Returns the Note with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Note

	/**
	 * Returns the Note with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Note

	/**
	 * Returns the Note with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Note

	/**
	 * Returns the Notes within the specified range.
	 * @param from The Note, index, or name at the beginning of the range.
	 * @param to The Note, index, or name at the end of the range.
	 */
	itemByRange(from: Note | number | string, to: Note | number | string): Note[]

	/**
	 * Returns the last Note in the collection.
	 */
	lastItem(): Note

	/**
	 * Returns the middle Note in the collection.
	 */
	middleItem(): Note

	/**
	 * Returns the Note whose index follows the specified Note in the collection.
	 * @param obj The Note whose index comes before the desired Note.
	 */
	nextItem(obj: Note): Note

	/**
	 * Returns the Note with the index previous to the specified index.
	 * @param obj The index of the Note that follows the desired Note.
	 */
	previousItem(obj: Note): Note

	/**
	 * Generates a string which, if executed, will return the Note.
	 */
	toSource(): string

}

/**
 * A footnote.
 */
declare class Footnote {
	/**
	 * Lists all graphics contained by the Footnote.
	 */
	allGraphics: Graphic[]

	/**
	 * Lists all page items contained by the Footnote.
	 */
	allPageItems: PageItem[]

	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * The text contents of the footnote.
	 */
	contents: string | SpecialCharacters | string[] | NothingEnum

	/**
	 * EPSTexts
	 */
	epstexts: EPSTexts

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * A collection of graphic lines.
	 */
	graphicLines: GraphicLines

	/**
	 * A collection of groups.
	 */
	groups: Groups

	/**
	 * A collection of hidden text objects.
	 */
	hiddenTexts: HiddenTexts

	/**
	 * The unique ID of the Footnote.
	 */
	id: number

	/**
	 * The index of the Footnote within its containing object.
	 */
	index: number

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * The name of the Footnote; this is an alias to the Footnote's label property.
	 */
	name: string

	/**
	 * A collection of ellipses.
	 */
	ovals: Ovals

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The parent of the Footnote (a XmlStory, Cell, Story, TextFrame, EndnoteTextFrame or InsertionPoint).
	 */
	parent: any

	/**
	 * A collection of polygons.
	 */
	polygons: Polygons

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of rectangles.
	 */
	rectangles: Rectangles

	/**
	 * The spline items collection.
	 */
	splineItems: SplineItems

	/**
	 * The location of the footnote marker in the parent story.
	 */
	storyOffset: InsertionPoint

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * A collection of text frames.
	 */
	textFrames: TextFrames

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text variable instances.
	 */
	textVariableInstances: TextVariableInstances

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Converts the footnote to part of the story text and places the converted text at the former location of the footnote marker in the text.
	 */
	convertToText(): Text

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Footnote[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the Footnote.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Footnote.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of footnotes.
 */
declare class Footnotes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Footnote with the specified index.
	 * @param index The index.
	 */
	[index: number]: Footnote

	/**
	 * Creates a new footnote.
	 * @param at The location of the footnote reference number in the main text relative to the reference object or within the story.
	 * @param reference The reference object. Note: Must be an insertion point or a note. Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new Footnote
	 */
	add(at?: LocationOptions, reference?: Note | InsertionPoint, withProperties?: object): Footnote

	/**
	 * Returns any Footnote in the collection.
	 */
	anyItem(): Footnote

	/**
	 * Displays the number of elements in the Footnote.
	 */
	count(): number

	/**
	 * Returns every Footnote in the collection.
	 */
	everyItem(): Footnote[]

	/**
	 * Returns the first Footnote in the collection.
	 */
	firstItem(): Footnote

	/**
	 * Returns the Footnote with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Footnote

	/**
	 * Returns the Footnote with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Footnote

	/**
	 * Returns the Footnote with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Footnote

	/**
	 * Returns the Footnotes within the specified range.
	 * @param from The Footnote, index, or name at the beginning of the range.
	 * @param to The Footnote, index, or name at the end of the range.
	 */
	itemByRange(from: Footnote | number | string, to: Footnote | number | string): Footnote[]

	/**
	 * Returns the last Footnote in the collection.
	 */
	lastItem(): Footnote

	/**
	 * Returns the middle Footnote in the collection.
	 */
	middleItem(): Footnote

	/**
	 * Returns the Footnote whose index follows the specified Footnote in the collection.
	 * @param obj The Footnote whose index comes before the desired Footnote.
	 */
	nextItem(obj: Footnote): Footnote

	/**
	 * Returns the Footnote with the index previous to the specified index.
	 * @param obj The index of the Footnote that follows the desired Footnote.
	 */
	previousItem(obj: Footnote): Footnote

	/**
	 * Generates a string which, if executed, will return the Footnote.
	 */
	toSource(): string

}

/**
 * A text variable definition in a document.
 */
declare class TextVariable {
	/**
	 * Variable instances associated with the text variable.
	 */
	associatedInstances: TextVariableInstance[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the TextVariable within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the TextVariable.
	 */
	name: string

	/**
	 * The parent of the TextVariable (a Application or Document).
	 */
	parent: any

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The preferences associated with the text variable.
	 */
	variableOptions: PageNumberVariablePreference | ChapterNumberVariablePreference | DateVariablePreference | FileNameVariablePreference | MatchCharacterStylePreference | MatchParagraphStylePreference | CustomTextVariablePreference | CaptionMetadataVariablePreference

	/**
	 * The variable type.
	 */
	variableType: VariableTypes

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Convert all of this variable's instances to text.
	 */
	convertToText(): Text[]

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TextVariable[]

	/**
	 * Deletes the TextVariable.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TextVariable.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of text variables.
 */
declare class TextVariables {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TextVariable with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextVariable

	/**
	 * Creates a new TextVariable.
	 * @param withProperties Initial values for properties of the new TextVariable
	 */
	add(withProperties: object): TextVariable

	/**
	 * Returns any TextVariable in the collection.
	 */
	anyItem(): TextVariable

	/**
	 * Displays the number of elements in the TextVariable.
	 */
	count(): number

	/**
	 * Returns every TextVariable in the collection.
	 */
	everyItem(): TextVariable[]

	/**
	 * Returns the first TextVariable in the collection.
	 */
	firstItem(): TextVariable

	/**
	 * Returns the TextVariable with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextVariable

	/**
	 * Returns the TextVariable with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextVariable

	/**
	 * Returns the TextVariables within the specified range.
	 * @param from The TextVariable, index, or name at the beginning of the range.
	 * @param to The TextVariable, index, or name at the end of the range.
	 */
	itemByRange(from: TextVariable | number | string, to: TextVariable | number | string): TextVariable[]

	/**
	 * Returns the last TextVariable in the collection.
	 */
	lastItem(): TextVariable

	/**
	 * Returns the middle TextVariable in the collection.
	 */
	middleItem(): TextVariable

	/**
	 * Returns the TextVariable whose index follows the specified TextVariable in the collection.
	 * @param obj The TextVariable whose index comes before the desired TextVariable.
	 */
	nextItem(obj: TextVariable): TextVariable

	/**
	 * Returns the TextVariable with the index previous to the specified index.
	 * @param obj The index of the TextVariable that follows the desired TextVariable.
	 */
	previousItem(obj: TextVariable): TextVariable

	/**
	 * Generates a string which, if executed, will return the TextVariable.
	 */
	toSource(): string

}

/**
 * A text variable instance in the text.
 */
declare class TextVariableInstance {
	/**
	 * The associated text variable.
	 */
	associatedTextVariable: TextVariable

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the TextVariableInstance.
	 */
	id: number

	/**
	 * The index of the TextVariableInstance within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the TextVariableInstance.
	 */
	name: string

	/**
	 * The parent of the TextVariableInstance (a XmlStory, TextFrame, EndnoteTextFrame, Story, Note, Cell, Footnote or Change).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The text that replaces the variable marker. Note: This property cannot be set; it can be used only to update variables. .
	 */
	resultText: string

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	storyOffset: InsertionPoint

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Converts the footnote to part of the story text and places the converted text at the former location of the footnote marker in the text.
	 */
	convertToText(): Text

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): TextVariableInstance[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the TextVariableInstance.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the TextVariableInstance.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of text variable instances.
 */
declare class TextVariableInstances {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TextVariableInstance with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextVariableInstance

	/**
	 * Creates a text variable instance at the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required only when the to parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new TextVariableInstance
	 */
	add(to?: LocationOptions, reference?: TextVariableInstance | XmlStory | TextFrame | EndnoteTextFrame | Story | Note | Cell | Footnote | Table | TextColumn | TextStyleRange | Text | InsertionPoint | Paragraph | Line | Word | Character | Change, withProperties?: object): TextVariableInstance

	/**
	 * Returns any TextVariableInstance in the collection.
	 */
	anyItem(): TextVariableInstance

	/**
	 * Displays the number of elements in the TextVariableInstance.
	 */
	count(): number

	/**
	 * Returns every TextVariableInstance in the collection.
	 */
	everyItem(): TextVariableInstance[]

	/**
	 * Returns the first TextVariableInstance in the collection.
	 */
	firstItem(): TextVariableInstance

	/**
	 * Returns the TextVariableInstance with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextVariableInstance

	/**
	 * Returns the TextVariableInstance with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextVariableInstance

	/**
	 * Returns the TextVariableInstance with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): TextVariableInstance

	/**
	 * Returns the TextVariableInstances within the specified range.
	 * @param from The TextVariableInstance, index, or name at the beginning of the range.
	 * @param to The TextVariableInstance, index, or name at the end of the range.
	 */
	itemByRange(from: TextVariableInstance | number | string, to: TextVariableInstance | number | string): TextVariableInstance[]

	/**
	 * Returns the last TextVariableInstance in the collection.
	 */
	lastItem(): TextVariableInstance

	/**
	 * Returns the middle TextVariableInstance in the collection.
	 */
	middleItem(): TextVariableInstance

	/**
	 * Returns the TextVariableInstance whose index follows the specified TextVariableInstance in the collection.
	 * @param obj The TextVariableInstance whose index comes before the desired TextVariableInstance.
	 */
	nextItem(obj: TextVariableInstance): TextVariableInstance

	/**
	 * Returns the TextVariableInstance with the index previous to the specified index.
	 * @param obj The index of the TextVariableInstance that follows the desired TextVariableInstance.
	 */
	previousItem(obj: TextVariableInstance): TextVariableInstance

	/**
	 * Generates a string which, if executed, will return the TextVariableInstance.
	 */
	toSource(): string

}

/**
 * A mapping object that maps an export type to an export tag.
 */
declare class StyleExportTagMap {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The attributes to map.
	 */
	exportAttributes: string

	/**
	 * The class to map.
	 */
	exportClass: string

	/**
	 * The tag to map.
	 */
	exportTag: string

	/**
	 * The type of export.
	 */
	exportType: string

	/**
	 * The index of the StyleExportTagMap within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the StyleExportTagMap (a CharacterStyle or ParagraphStyle).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): StyleExportTagMap[]

	/**
	 * Deletes the StyleExportTagMap.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the StyleExportTagMap.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of style export tag maps.
 */
declare class StyleExportTagMaps {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the StyleExportTagMap with the specified index.
	 * @param index The index.
	 */
	[index: number]: StyleExportTagMap

	/**
	 * Create a new mapping
	 * @param exportType The type of export.
	 * @param exportTag The tag to map.
	 * @param exportClass The class to map.
	 * @param exportAttributes The attributes to map.
	 * @param withProperties Initial values for properties of the new StyleExportTagMap
	 */
	add(exportType: string, exportTag: string, exportClass: string, exportAttributes: string, withProperties: object): StyleExportTagMap

	/**
	 * Returns any StyleExportTagMap in the collection.
	 */
	anyItem(): StyleExportTagMap

	/**
	 * Displays the number of elements in the StyleExportTagMap.
	 */
	count(): number

	/**
	 * Returns every StyleExportTagMap in the collection.
	 */
	everyItem(): StyleExportTagMap[]

	/**
	 * Returns the first StyleExportTagMap in the collection.
	 */
	firstItem(): StyleExportTagMap

	/**
	 * Returns the StyleExportTagMap with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StyleExportTagMap

	/**
	 * Returns the StyleExportTagMaps within the specified range.
	 * @param from The StyleExportTagMap, index, or name at the beginning of the range.
	 * @param to The StyleExportTagMap, index, or name at the end of the range.
	 */
	itemByRange(from: StyleExportTagMap | number | string, to: StyleExportTagMap | number | string): StyleExportTagMap[]

	/**
	 * Returns the last StyleExportTagMap in the collection.
	 */
	lastItem(): StyleExportTagMap

	/**
	 * Returns the middle StyleExportTagMap in the collection.
	 */
	middleItem(): StyleExportTagMap

	/**
	 * Returns the StyleExportTagMap whose index follows the specified StyleExportTagMap in the collection.
	 * @param obj The StyleExportTagMap whose index comes before the desired StyleExportTagMap.
	 */
	nextItem(obj: StyleExportTagMap): StyleExportTagMap

	/**
	 * Returns the StyleExportTagMap with the index previous to the specified index.
	 * @param obj The index of the StyleExportTagMap that follows the desired StyleExportTagMap.
	 */
	previousItem(obj: StyleExportTagMap): StyleExportTagMap

	/**
	 * Generates a string which, if executed, will return the StyleExportTagMap.
	 */
	toSource(): string

}

/**
 * A paragraph style group.
 */
declare class ParagraphStyleGroup {
	/**
	 * Lists all paragraph styles (regardless of their group).
	 */
	allParagraphStyles: ParagraphStyle[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the ParagraphStyleGroup.
	 */
	id: number

	/**
	 * The index of the ParagraphStyleGroup within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the ParagraphStyleGroup.
	 */
	name: string

	/**
	 * A collection of paragraph style groups.
	 */
	paragraphStyleGroups: ParagraphStyleGroups

	/**
	 * A collection of paragraph styles.
	 */
	paragraphStyles: ParagraphStyles

	/**
	 * The parent of the ParagraphStyleGroup (a Document, Application or ParagraphStyleGroup).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the ParagraphStyleGroup.
	 */
	duplicate(): ParagraphStyleGroup

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ParagraphStyleGroup[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): ParagraphStyleGroup

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle | CharacterStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ParagraphStyleGroup.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of paragraph style groups.
 */
declare class ParagraphStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ParagraphStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: ParagraphStyleGroup

	/**
	 * Creates a new ParagraphStyleGroup.
	 * @param withProperties Initial values for properties of the new ParagraphStyleGroup
	 */
	add(withProperties: object): ParagraphStyleGroup

	/**
	 * Returns any ParagraphStyleGroup in the collection.
	 */
	anyItem(): ParagraphStyleGroup

	/**
	 * Displays the number of elements in the ParagraphStyleGroup.
	 */
	count(): number

	/**
	 * Returns every ParagraphStyleGroup in the collection.
	 */
	everyItem(): ParagraphStyleGroup[]

	/**
	 * Returns the first ParagraphStyleGroup in the collection.
	 */
	firstItem(): ParagraphStyleGroup

	/**
	 * Returns the ParagraphStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ParagraphStyleGroup

	/**
	 * Returns the ParagraphStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ParagraphStyleGroup

	/**
	 * Returns the ParagraphStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ParagraphStyleGroup

	/**
	 * Returns the ParagraphStyleGroups within the specified range.
	 * @param from The ParagraphStyleGroup, index, or name at the beginning of the range.
	 * @param to The ParagraphStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: ParagraphStyleGroup | number | string, to: ParagraphStyleGroup | number | string): ParagraphStyleGroup[]

	/**
	 * Returns the last ParagraphStyleGroup in the collection.
	 */
	lastItem(): ParagraphStyleGroup

	/**
	 * Returns the middle ParagraphStyleGroup in the collection.
	 */
	middleItem(): ParagraphStyleGroup

	/**
	 * Returns the ParagraphStyleGroup whose index follows the specified ParagraphStyleGroup in the collection.
	 * @param obj The ParagraphStyleGroup whose index comes before the desired ParagraphStyleGroup.
	 */
	nextItem(obj: ParagraphStyleGroup): ParagraphStyleGroup

	/**
	 * Returns the ParagraphStyleGroup with the index previous to the specified index.
	 * @param obj The index of the ParagraphStyleGroup that follows the desired ParagraphStyleGroup.
	 */
	previousItem(obj: ParagraphStyleGroup): ParagraphStyleGroup

	/**
	 * Generates a string which, if executed, will return the ParagraphStyleGroup.
	 */
	toSource(): string

}

/**
 * A character style group.
 */
declare class CharacterStyleGroup {
	/**
	 * Lists all character styles (regardless of their group).
	 */
	allCharacterStyles: CharacterStyle[]

	/**
	 * A collection of character style groups.
	 */
	characterStyleGroups: CharacterStyleGroups

	/**
	 * A collection of character styles.
	 */
	characterStyles: CharacterStyles

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the CharacterStyleGroup.
	 */
	id: number

	/**
	 * The index of the CharacterStyleGroup within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the CharacterStyleGroup.
	 */
	name: string

	/**
	 * The parent of the CharacterStyleGroup (a Document, Application or CharacterStyleGroup).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the CharacterStyleGroup.
	 */
	duplicate(): CharacterStyleGroup

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CharacterStyleGroup[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the style to the specified location.
	 * @param to The location relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after.
	 */
	move(to: LocationOptions, reference: ParagraphStyle | ParagraphStyleGroup | CharacterStyle | CharacterStyleGroup | CellStyle | CellStyleGroup | TableStyle | TableStyleGroup | Document | Application): CharacterStyleGroup

	/**
	 * Deletes the style.
	 * @param replacingWith The style to apply in place of the deleted style.
	 */
	remove(replacingWith: ParagraphStyle | CharacterStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CharacterStyleGroup.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of character style groups.
 */
declare class CharacterStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CharacterStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: CharacterStyleGroup

	/**
	 * Creates a new CharacterStyleGroup.
	 * @param withProperties Initial values for properties of the new CharacterStyleGroup
	 */
	add(withProperties: object): CharacterStyleGroup

	/**
	 * Returns any CharacterStyleGroup in the collection.
	 */
	anyItem(): CharacterStyleGroup

	/**
	 * Displays the number of elements in the CharacterStyleGroup.
	 */
	count(): number

	/**
	 * Returns every CharacterStyleGroup in the collection.
	 */
	everyItem(): CharacterStyleGroup[]

	/**
	 * Returns the first CharacterStyleGroup in the collection.
	 */
	firstItem(): CharacterStyleGroup

	/**
	 * Returns the CharacterStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CharacterStyleGroup

	/**
	 * Returns the CharacterStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CharacterStyleGroup

	/**
	 * Returns the CharacterStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CharacterStyleGroup

	/**
	 * Returns the CharacterStyleGroups within the specified range.
	 * @param from The CharacterStyleGroup, index, or name at the beginning of the range.
	 * @param to The CharacterStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: CharacterStyleGroup | number | string, to: CharacterStyleGroup | number | string): CharacterStyleGroup[]

	/**
	 * Returns the last CharacterStyleGroup in the collection.
	 */
	lastItem(): CharacterStyleGroup

	/**
	 * Returns the middle CharacterStyleGroup in the collection.
	 */
	middleItem(): CharacterStyleGroup

	/**
	 * Returns the CharacterStyleGroup whose index follows the specified CharacterStyleGroup in the collection.
	 * @param obj The CharacterStyleGroup whose index comes before the desired CharacterStyleGroup.
	 */
	nextItem(obj: CharacterStyleGroup): CharacterStyleGroup

	/**
	 * Returns the CharacterStyleGroup with the index previous to the specified index.
	 * @param obj The index of the CharacterStyleGroup that follows the desired CharacterStyleGroup.
	 */
	previousItem(obj: CharacterStyleGroup): CharacterStyleGroup

	/**
	 * Generates a string which, if executed, will return the CharacterStyleGroup.
	 */
	toSource(): string

}

/**
 * A composite font.
 */
declare class CompositeFont {
	/**
	 * A collection of composite font entries.
	 */
	compositeFontEntries: CompositeFontEntries

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the CompositeFont.
	 */
	id: number

	/**
	 * The index of the CompositeFont within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the CompositeFont.
	 */
	name: string

	/**
	 * The parent of the CompositeFont (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CompositeFont[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the CompositeFont.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CompositeFont.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of composite fonts.
 */
declare class CompositeFonts {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CompositeFont with the specified index.
	 * @param index The index.
	 */
	[index: number]: CompositeFont

	/**
	 * Creates a new CompositeFont.
	 * @param withProperties Initial values for properties of the new CompositeFont
	 */
	add(withProperties: object): CompositeFont

	/**
	 * Returns any CompositeFont in the collection.
	 */
	anyItem(): CompositeFont

	/**
	 * Displays the number of elements in the CompositeFont.
	 */
	count(): number

	/**
	 * Returns every CompositeFont in the collection.
	 */
	everyItem(): CompositeFont[]

	/**
	 * Returns the first CompositeFont in the collection.
	 */
	firstItem(): CompositeFont

	/**
	 * Returns the CompositeFont with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CompositeFont

	/**
	 * Returns the CompositeFont with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CompositeFont

	/**
	 * Returns the CompositeFont with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CompositeFont

	/**
	 * Returns the CompositeFonts within the specified range.
	 * @param from The CompositeFont, index, or name at the beginning of the range.
	 * @param to The CompositeFont, index, or name at the end of the range.
	 */
	itemByRange(from: CompositeFont | number | string, to: CompositeFont | number | string): CompositeFont[]

	/**
	 * Returns the last CompositeFont in the collection.
	 */
	lastItem(): CompositeFont

	/**
	 * Returns the middle CompositeFont in the collection.
	 */
	middleItem(): CompositeFont

	/**
	 * Returns the CompositeFont whose index follows the specified CompositeFont in the collection.
	 * @param obj The CompositeFont whose index comes before the desired CompositeFont.
	 */
	nextItem(obj: CompositeFont): CompositeFont

	/**
	 * Returns the CompositeFont with the index previous to the specified index.
	 * @param obj The index of the CompositeFont that follows the desired CompositeFont.
	 */
	previousItem(obj: CompositeFont): CompositeFont

	/**
	 * Generates a string which, if executed, will return the CompositeFont.
	 */
	toSource(): string

}

/**
 * A composite font entry.
 */
declare class CompositeFontEntry {
	/**
	 * The font applied to the CompositeFontEntry, specified as either a font object or the name of font family.
	 */
	appliedFont: Font | string

	/**
	 * The amount of baseline shift.
	 */
	baselineShift: number

	/**
	 * The characters that the set affects.
	 */
	customCharacters: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The name of the font style.
	 */
	fontStyle: string

	/**
	 * The horizontal scaling applied to the CompositeFontEntry.
	 */
	horizontalScale: number

	/**
	 * The unique ID of the CompositeFontEntry.
	 */
	id: number

	/**
	 * The index of the CompositeFontEntry within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * If true, the CompositeFontEntry is locked.
	 */
	locked: boolean

	/**
	 * The name of the CompositeFontEntry.
	 */
	name: string

	/**
	 * The parent of the CompositeFontEntry (a CompositeFont).
	 */
	parent: CompositeFont

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The size of the entry relative to the base entry. Note: The base entry cannot be modified.
	 */
	relativeSize: number

	/**
	 * If true, scales characters from the center.
	 */
	scaleOption: boolean

	/**
	 * The vertical scaling applied to the CompositeFontEntry.
	 */
	verticalScale: number

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): CompositeFontEntry[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the CompositeFontEntry.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the CompositeFontEntry.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of composite font entries.
 */
declare class CompositeFontEntries {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CompositeFontEntry with the specified index.
	 * @param index The index.
	 */
	[index: number]: CompositeFontEntry

	/**
	 * Creates a new CompositeFontEntry.
	 * @param withProperties Initial values for properties of the new CompositeFontEntry
	 */
	add(withProperties: object): CompositeFontEntry

	/**
	 * Returns any CompositeFontEntry in the collection.
	 */
	anyItem(): CompositeFontEntry

	/**
	 * Displays the number of elements in the CompositeFontEntry.
	 */
	count(): number

	/**
	 * Returns every CompositeFontEntry in the collection.
	 */
	everyItem(): CompositeFontEntry[]

	/**
	 * Returns the first CompositeFontEntry in the collection.
	 */
	firstItem(): CompositeFontEntry

	/**
	 * Returns the CompositeFontEntry with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CompositeFontEntry

	/**
	 * Returns the CompositeFontEntry with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CompositeFontEntry

	/**
	 * Returns the CompositeFontEntry with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): CompositeFontEntry

	/**
	 * Returns the CompositeFontEntries within the specified range.
	 * @param from The CompositeFontEntry, index, or name at the beginning of the range.
	 * @param to The CompositeFontEntry, index, or name at the end of the range.
	 */
	itemByRange(from: CompositeFontEntry | number | string, to: CompositeFontEntry | number | string): CompositeFontEntry[]

	/**
	 * Returns the last CompositeFontEntry in the collection.
	 */
	lastItem(): CompositeFontEntry

	/**
	 * Returns the middle CompositeFontEntry in the collection.
	 */
	middleItem(): CompositeFontEntry

	/**
	 * Returns the CompositeFontEntry whose index follows the specified CompositeFontEntry in the collection.
	 * @param obj The CompositeFontEntry whose index comes before the desired CompositeFontEntry.
	 */
	nextItem(obj: CompositeFontEntry): CompositeFontEntry

	/**
	 * Returns the CompositeFontEntry with the index previous to the specified index.
	 * @param obj The index of the CompositeFontEntry that follows the desired CompositeFontEntry.
	 */
	previousItem(obj: CompositeFontEntry): CompositeFontEntry

	/**
	 * Generates a string which, if executed, will return the CompositeFontEntry.
	 */
	toSource(): string

}

/**
 * A named grid.
 */
declare class NamedGrid {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * Default grid properties. Note: Applies to named, layout, and frame (story) grids.
	 */
	gridData: GridDataInformation

	/**
	 * The unique ID of the NamedGrid.
	 */
	id: number

	/**
	 * The index of the NamedGrid within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the NamedGrid.
	 */
	name: string

	/**
	 * The parent of the NamedGrid (a Document or Application).
	 */
	parent: any

	/**
	 * A collection of preferences objects.
	 */
	preferences: Preferences

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NamedGrid[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the NamedGrid.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the NamedGrid.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of named grids.
 */
declare class NamedGrids {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the NamedGrid with the specified index.
	 * @param index The index.
	 */
	[index: number]: NamedGrid

	/**
	 * Creates a new NamedGrid.
	 * @param withProperties Initial values for properties of the new NamedGrid
	 */
	add(withProperties: object): NamedGrid

	/**
	 * Returns any NamedGrid in the collection.
	 */
	anyItem(): NamedGrid

	/**
	 * Displays the number of elements in the NamedGrid.
	 */
	count(): number

	/**
	 * Returns every NamedGrid in the collection.
	 */
	everyItem(): NamedGrid[]

	/**
	 * Returns the first NamedGrid in the collection.
	 */
	firstItem(): NamedGrid

	/**
	 * Returns the NamedGrid with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NamedGrid

	/**
	 * Returns the NamedGrid with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): NamedGrid

	/**
	 * Returns the NamedGrid with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): NamedGrid

	/**
	 * Returns the NamedGrids within the specified range.
	 * @param from The NamedGrid, index, or name at the beginning of the range.
	 * @param to The NamedGrid, index, or name at the end of the range.
	 */
	itemByRange(from: NamedGrid | number | string, to: NamedGrid | number | string): NamedGrid[]

	/**
	 * Returns the last NamedGrid in the collection.
	 */
	lastItem(): NamedGrid

	/**
	 * Returns the middle NamedGrid in the collection.
	 */
	middleItem(): NamedGrid

	/**
	 * Returns the NamedGrid whose index follows the specified NamedGrid in the collection.
	 * @param obj The NamedGrid whose index comes before the desired NamedGrid.
	 */
	nextItem(obj: NamedGrid): NamedGrid

	/**
	 * Returns the NamedGrid with the index previous to the specified index.
	 * @param obj The index of the NamedGrid that follows the desired NamedGrid.
	 */
	previousItem(obj: NamedGrid): NamedGrid

	/**
	 * Generates a string which, if executed, will return the NamedGrid.
	 */
	toSource(): string

}

/**
 * An indexing sort option.
 */
declare class IndexingSortOption {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The header type.
	 */
	headerType: HeaderTypes | NothingEnum

	/**
	 * If true, include this indexing sort option.
	 */
	include: boolean

	/**
	 * The index of the IndexingSortOption within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the IndexingSortOption.
	 */
	name: string

	/**
	 * The parent of the IndexingSortOption (a Application or Document).
	 */
	parent: any

	/**
	 * Priority of this indexing sort option (shuffles prior entries down).
	 */
	priority: number

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): IndexingSortOption[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the IndexingSortOption.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of indexing sort options.
 */
declare class IndexingSortOptions {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the IndexingSortOption with the specified index.
	 * @param index The index.
	 */
	[index: number]: IndexingSortOption

	/**
	 * Returns any IndexingSortOption in the collection.
	 */
	anyItem(): IndexingSortOption

	/**
	 * Displays the number of elements in the IndexingSortOption.
	 */
	count(): number

	/**
	 * Returns every IndexingSortOption in the collection.
	 */
	everyItem(): IndexingSortOption[]

	/**
	 * Returns the first IndexingSortOption in the collection.
	 */
	firstItem(): IndexingSortOption

	/**
	 * Returns the IndexingSortOption with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IndexingSortOption

	/**
	 * Returns the IndexingSortOption with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): IndexingSortOption

	/**
	 * Returns the IndexingSortOptions within the specified range.
	 * @param from The IndexingSortOption, index, or name at the beginning of the range.
	 * @param to The IndexingSortOption, index, or name at the end of the range.
	 */
	itemByRange(from: IndexingSortOption | number | string, to: IndexingSortOption | number | string): IndexingSortOption[]

	/**
	 * Returns the last IndexingSortOption in the collection.
	 */
	lastItem(): IndexingSortOption

	/**
	 * Returns the middle IndexingSortOption in the collection.
	 */
	middleItem(): IndexingSortOption

	/**
	 * Returns the IndexingSortOption whose index follows the specified IndexingSortOption in the collection.
	 * @param obj The IndexingSortOption whose index comes before the desired IndexingSortOption.
	 */
	nextItem(obj: IndexingSortOption): IndexingSortOption

	/**
	 * Returns the IndexingSortOption with the index previous to the specified index.
	 * @param obj The index of the IndexingSortOption that follows the desired IndexingSortOption.
	 */
	previousItem(obj: IndexingSortOption): IndexingSortOption

	/**
	 * Generates a string which, if executed, will return the IndexingSortOption.
	 */
	toSource(): string

}

/**
 * Bullet character.
 */
declare class Bullet extends Preference {
	/**
	 * Font of the bullet character.
	 */
	bulletsFont: Font | string | AutoEnum

	/**
	 * Font style of the bullet character.
	 */
	bulletsFontStyle: string | NothingEnum | AutoEnum

	/**
	 * The type of bullet character.
	 */
	characterType: BulletCharacterType

	/**
	 * The bullet character as a unicode ID or a glyph ID.
	 */
	characterValue: number

}

/**
 * Numbering restart policy.
 */
declare class NumberingRestartPolicy extends Preference {
	/**
	 * The lower numbering level for a numbered list.
	 */
	numberingLowerLevel: number

	/**
	 * The numbering restart policy to use.
	 */
	numberingPolicy: RestartPolicy

	/**
	 * The upper numbering level for a numbered list.
	 */
	numberingUpperLevel: number

}

/**
 * A numbered list.
 */
declare class NumberingList {
	/**
	 * if true, numbering will continue across book documents.
	 */
	continueNumbersAcrossDocuments: boolean

	/**
	 * If true, numbering will continue across stories.
	 */
	continueNumbersAcrossStories: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the NumberingList.
	 */
	id: number

	/**
	 * The index of the NumberingList within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the NumberingList.
	 */
	name: string

	/**
	 * The parent of the NumberingList (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): NumberingList[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Delete the NumberingList.
	 * @param replacingWith The NumberingList to apply in place of this one.
	 */
	remove(replacingWith: NumberingList): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the NumberingList.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of numbered lists.
 */
declare class NumberingLists {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the NumberingList with the specified index.
	 * @param index The index.
	 */
	[index: number]: NumberingList

	/**
	 * Create a new list style.
	 * @param name Name
	 * @param continueNumbersAcrossStories If true, numbering will continue across stories.
	 * @param continueNumbersAcrossDocuments If true, numbering will continue across book documents.
	 * @param withProperties Initial values for properties of the new NumberingList
	 */
	add(name: string, continueNumbersAcrossStories: boolean, continueNumbersAcrossDocuments: boolean, withProperties: object): NumberingList

	/**
	 * Returns any NumberingList in the collection.
	 */
	anyItem(): NumberingList

	/**
	 * Displays the number of elements in the NumberingList.
	 */
	count(): number

	/**
	 * Returns every NumberingList in the collection.
	 */
	everyItem(): NumberingList[]

	/**
	 * Returns the first NumberingList in the collection.
	 */
	firstItem(): NumberingList

	/**
	 * Returns the NumberingList with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): NumberingList

	/**
	 * Returns the NumberingList with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): NumberingList

	/**
	 * Returns the NumberingList with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): NumberingList

	/**
	 * Returns the NumberingLists within the specified range.
	 * @param from The NumberingList, index, or name at the beginning of the range.
	 * @param to The NumberingList, index, or name at the end of the range.
	 */
	itemByRange(from: NumberingList | number | string, to: NumberingList | number | string): NumberingList[]

	/**
	 * Returns the last NumberingList in the collection.
	 */
	lastItem(): NumberingList

	/**
	 * Returns the middle NumberingList in the collection.
	 */
	middleItem(): NumberingList

	/**
	 * Returns the NumberingList whose index follows the specified NumberingList in the collection.
	 * @param obj The NumberingList whose index comes before the desired NumberingList.
	 */
	nextItem(obj: NumberingList): NumberingList

	/**
	 * Returns the NumberingList with the index previous to the specified index.
	 * @param obj The index of the NumberingList that follows the desired NumberingList.
	 */
	previousItem(obj: NumberingList): NumberingList

	/**
	 * Generates a string which, if executed, will return the NumberingList.
	 */
	toSource(): string

}

/**
 * An object style group.
 */
declare class ObjectStyleGroup {
	/**
	 * All object styles contained by the ObjectStyleGroup.
	 */
	allObjectStyles: ObjectStyle[]

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the ObjectStyleGroup.
	 */
	id: number

	/**
	 * The index of the ObjectStyleGroup within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the ObjectStyleGroup.
	 */
	name: string

	/**
	 * A collection of object style groups.
	 */
	objectStyleGroups: ObjectStyleGroups

	/**
	 * A collection of object styles.
	 */
	objectStyles: ObjectStyles

	/**
	 * The parent of the ObjectStyleGroup (a Document, Application or ObjectStyleGroup).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the ObjectStyleGroup.
	 */
	duplicate(): ObjectStyleGroup

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ObjectStyleGroup[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Moves the ObjectStyleGroup to the specified location.
	 * @param to The new location relative to the reference object or within the container object.
	 * @param reference The reference object. Note: Required when the to parameter is before or after.
	 */
	move(to: LocationOptions, reference: ObjectStyle | ObjectStyleGroup | Document | Application): ObjectStyleGroup

	/**
	 * Deletes the ObjectStyleGroup.
	 * @param replacingWith The ObjectStyleGroup to apply in place of the deleted ObjectStyleGroup.
	 */
	remove(replacingWith: ObjectStyle): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ObjectStyleGroup.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of object style groups.
 */
declare class ObjectStyleGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ObjectStyleGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: ObjectStyleGroup

	/**
	 * Creates a new ObjectStyleGroup.
	 * @param withProperties Initial values for properties of the new ObjectStyleGroup
	 */
	add(withProperties: object): ObjectStyleGroup

	/**
	 * Returns any ObjectStyleGroup in the collection.
	 */
	anyItem(): ObjectStyleGroup

	/**
	 * Displays the number of elements in the ObjectStyleGroup.
	 */
	count(): number

	/**
	 * Returns every ObjectStyleGroup in the collection.
	 */
	everyItem(): ObjectStyleGroup[]

	/**
	 * Returns the first ObjectStyleGroup in the collection.
	 */
	firstItem(): ObjectStyleGroup

	/**
	 * Returns the ObjectStyleGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ObjectStyleGroup

	/**
	 * Returns the ObjectStyleGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ObjectStyleGroup

	/**
	 * Returns the ObjectStyleGroup with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ObjectStyleGroup

	/**
	 * Returns the ObjectStyleGroups within the specified range.
	 * @param from The ObjectStyleGroup, index, or name at the beginning of the range.
	 * @param to The ObjectStyleGroup, index, or name at the end of the range.
	 */
	itemByRange(from: ObjectStyleGroup | number | string, to: ObjectStyleGroup | number | string): ObjectStyleGroup[]

	/**
	 * Returns the last ObjectStyleGroup in the collection.
	 */
	lastItem(): ObjectStyleGroup

	/**
	 * Returns the middle ObjectStyleGroup in the collection.
	 */
	middleItem(): ObjectStyleGroup

	/**
	 * Returns the ObjectStyleGroup whose index follows the specified ObjectStyleGroup in the collection.
	 * @param obj The ObjectStyleGroup whose index comes before the desired ObjectStyleGroup.
	 */
	nextItem(obj: ObjectStyleGroup): ObjectStyleGroup

	/**
	 * Returns the ObjectStyleGroup with the index previous to the specified index.
	 * @param obj The index of the ObjectStyleGroup that follows the desired ObjectStyleGroup.
	 */
	previousItem(obj: ObjectStyleGroup): ObjectStyleGroup

	/**
	 * Generates a string which, if executed, will return the ObjectStyleGroup.
	 */
	toSource(): string

}

/**
 * A condition for conditional text.
 */
declare class Condition {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Condition.
	 */
	id: number

	/**
	 * The index of the Condition within its containing object.
	 */
	index: number

	/**
	 * The color for the condition indicator; specified either as an array of three doubles representing RGB values in the range 0 to 255, or as a UI color.
	 */
	indicatorColor: [number, number, number] | UIColors

	/**
	 * The condition indicator method.
	 */
	indicatorMethod: ConditionIndicatorMethod

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Condition.
	 */
	name: string

	/**
	 * The parent of the Condition (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The condition underline indicator appearance.
	 */
	underlineIndicatorAppearance: ConditionUnderlineIndicatorAppearance

	/**
	 * If true, the Condition is visible.
	 */
	visible: boolean

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Condition[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Delete the condition.
	 * @param replacingWith The condition to apply to text in place of the deleted condition. By default, no condition is applied in place of the deleted condition.
	 */
	remove(replacingWith: Condition | string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Condition.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of conditions for conditional text.
 */
declare class Conditions {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Condition with the specified index.
	 * @param index The index.
	 */
	[index: number]: Condition

	/**
	 * Creates a new Condition.
	 * @param withProperties Initial values for properties of the new Condition
	 */
	add(withProperties: object): Condition

	/**
	 * Returns any Condition in the collection.
	 */
	anyItem(): Condition

	/**
	 * Displays the number of elements in the Condition.
	 */
	count(): number

	/**
	 * Returns every Condition in the collection.
	 */
	everyItem(): Condition[]

	/**
	 * Returns the first Condition in the collection.
	 */
	firstItem(): Condition

	/**
	 * Returns the Condition with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Condition

	/**
	 * Returns the Condition with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Condition

	/**
	 * Returns the Condition with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Condition

	/**
	 * Returns the Conditions within the specified range.
	 * @param from The Condition, index, or name at the beginning of the range.
	 * @param to The Condition, index, or name at the end of the range.
	 */
	itemByRange(from: Condition | number | string, to: Condition | number | string): Condition[]

	/**
	 * Returns the last Condition in the collection.
	 */
	lastItem(): Condition

	/**
	 * Returns the middle Condition in the collection.
	 */
	middleItem(): Condition

	/**
	 * Returns the Condition whose index follows the specified Condition in the collection.
	 * @param obj The Condition whose index comes before the desired Condition.
	 */
	nextItem(obj: Condition): Condition

	/**
	 * Returns the Condition with the index previous to the specified index.
	 * @param obj The index of the Condition that follows the desired Condition.
	 */
	previousItem(obj: Condition): Condition

	/**
	 * Generates a string which, if executed, will return the Condition.
	 */
	toSource(): string

}

/**
 * A hidden text object.
 */
declare class HiddenText {
	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the HiddenText.
	 */
	id: number

	/**
	 * The index of the HiddenText within its containing object.
	 */
	index: number

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * The name of the HiddenText; this is an alias to the HiddenText's label property.
	 */
	name: string

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The parent of the HiddenText (a Story, XmlStory, TextFrame, EndnoteTextFrame, InsertionPoint, Note, Cell or Footnote).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	storyOffset: InsertionPoint

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): HiddenText[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the HiddenText.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of hidden text objects.
 */
declare class HiddenTexts {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the HiddenText with the specified index.
	 * @param index The index.
	 */
	[index: number]: HiddenText

	/**
	 * Returns any HiddenText in the collection.
	 */
	anyItem(): HiddenText

	/**
	 * Displays the number of elements in the HiddenText.
	 */
	count(): number

	/**
	 * Returns every HiddenText in the collection.
	 */
	everyItem(): HiddenText[]

	/**
	 * Returns the first HiddenText in the collection.
	 */
	firstItem(): HiddenText

	/**
	 * Returns the HiddenText with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): HiddenText

	/**
	 * Returns the HiddenText with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): HiddenText

	/**
	 * Returns the HiddenText with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): HiddenText

	/**
	 * Returns the HiddenTexts within the specified range.
	 * @param from The HiddenText, index, or name at the beginning of the range.
	 * @param to The HiddenText, index, or name at the end of the range.
	 */
	itemByRange(from: HiddenText | number | string, to: HiddenText | number | string): HiddenText[]

	/**
	 * Returns the last HiddenText in the collection.
	 */
	lastItem(): HiddenText

	/**
	 * Returns the middle HiddenText in the collection.
	 */
	middleItem(): HiddenText

	/**
	 * Returns the HiddenText whose index follows the specified HiddenText in the collection.
	 * @param obj The HiddenText whose index comes before the desired HiddenText.
	 */
	nextItem(obj: HiddenText): HiddenText

	/**
	 * Returns the HiddenText with the index previous to the specified index.
	 * @param obj The index of the HiddenText that follows the desired HiddenText.
	 */
	previousItem(obj: HiddenText): HiddenText

	/**
	 * Generates a string which, if executed, will return the HiddenText.
	 */
	toSource(): string

}

/**
 * A condition set for conditional text.
 */
declare class ConditionSet {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the ConditionSet.
	 */
	id: number

	/**
	 * The index of the ConditionSet within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the ConditionSet.
	 */
	name: string

	/**
	 * The parent of the ConditionSet (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * List of conditions and visibilities in the set. Can return: Ordered array containing condition:Condition, visibility:Boolean.
	 */
	setConditions: any[]

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ConditionSet[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Redefine a condition set with the currently existing conditions and visibilities.
	 */
	redefine(): void

	/**
	 * Delete a condition set for conditional text.
	 * @param replacingWith The condition set to apply to the text in place of the deleted condition set. By default, no condition set is applied in place of the deleted condition set.
	 */
	remove(replacingWith: ConditionSet | string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ConditionSet.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of condition sets for conditional text.
 */
declare class ConditionSets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ConditionSet with the specified index.
	 * @param index The index.
	 */
	[index: number]: ConditionSet

	/**
	 * Creates a new ConditionSet.
	 * @param withProperties Initial values for properties of the new ConditionSet
	 */
	add(withProperties: object): ConditionSet

	/**
	 * Returns any ConditionSet in the collection.
	 */
	anyItem(): ConditionSet

	/**
	 * Displays the number of elements in the ConditionSet.
	 */
	count(): number

	/**
	 * Returns every ConditionSet in the collection.
	 */
	everyItem(): ConditionSet[]

	/**
	 * Returns the first ConditionSet in the collection.
	 */
	firstItem(): ConditionSet

	/**
	 * Returns the ConditionSet with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ConditionSet

	/**
	 * Returns the ConditionSet with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ConditionSet

	/**
	 * Returns the ConditionSet with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ConditionSet

	/**
	 * Returns the ConditionSets within the specified range.
	 * @param from The ConditionSet, index, or name at the beginning of the range.
	 * @param to The ConditionSet, index, or name at the end of the range.
	 */
	itemByRange(from: ConditionSet | number | string, to: ConditionSet | number | string): ConditionSet[]

	/**
	 * Returns the last ConditionSet in the collection.
	 */
	lastItem(): ConditionSet

	/**
	 * Returns the middle ConditionSet in the collection.
	 */
	middleItem(): ConditionSet

	/**
	 * Returns the ConditionSet whose index follows the specified ConditionSet in the collection.
	 * @param obj The ConditionSet whose index comes before the desired ConditionSet.
	 */
	nextItem(obj: ConditionSet): ConditionSet

	/**
	 * Returns the ConditionSet with the index previous to the specified index.
	 * @param obj The index of the ConditionSet that follows the desired ConditionSet.
	 */
	previousItem(obj: ConditionSet): ConditionSet

	/**
	 * Generates a string which, if executed, will return the ConditionSet.
	 */
	toSource(): string

}

/**
 * Pages panel.
 */
declare class PagesPanel extends Panel {
	/**
	 * Page icon size.
	 */
	iconSize: IconSizes

	/**
	 * Master page icon size.
	 */
	masterIconSize: IconSizes

	/**
	 * If true, master page icons will be arranged vertically around the binding spine. If false, master page icons will be arranged horizontally.
	 */
	masterVerticalView: boolean

	/**
	 * If true, display thumbnails of the pages in the master pages area of the panel.
	 */
	mastersThumbnails: boolean

	/**
	 * If true, the pages area of the panel will be drawn above the master pages area.
	 */
	pagesOnTop: boolean

	/**
	 * If true, display thumbnails of the pages in the pages area of the panel.
	 */
	pagesThumbnails: boolean

	/**
	 * View setting for how to arrange the pages in the page section of the panel.
	 */
	pagesViewSetting: PageViewOptions

	/**
	 * Specifies the behavior of the document and master page areas of the panel when the panel is resized.
	 */
	resizeBehavior: PanelLayoutResize

	/**
	 * If true, a rotation icon will display next to spreads with non-zero rotation applied.
	 */
	rotationIcons: boolean

	/**
	 * If true, a page transitions icon will display next to spreads with page transitions applied.
	 */
	transitionsIcons: boolean

	/**
	 * If true, a transparency icon will display next to spreads with elements having transparency applied.
	 */
	transparencyIcons: boolean

}

/**
 * Library panel
 */
declare class LibraryPanel extends Panel {
	/**
	 * The library displayed in this LibraryPanel
	 */
	associatedLibrary: Library

	/**
	 * The selected object(s).
	 */
	selection: object[] | object | NothingEnum

	/**
	 * The sort order of the assets in the LibraryPanel
	 */
	sortOrder: SortAssets

	/**
	 * LibraryPanel view
	 */
	view: LibraryPanelViews

	/**
	 * Selects the specified object(s).
	 * @param selectableItems The objects to select.
	 * @param existingSelection The selection status of the LibraryPanel in relation to previously selected objects.
	 */
	select(selectableItems: object | object[] | NothingEnum | SelectAll, existingSelection?: SelectionOptions): void

	/**
	 * Show all assets
	 */
	showAll(): void

}

/**
 * A menu action.
 */
declare class MenuAction {
	/**
	 * Dispatched after the MenuAction is invoked. This event does not bubble. This event is not cancelable.
	 */
	AFTER_INVOKE: string

	/**
	 * Dispatched before the MenuAction is invoked. This event does not bubble. This event is cancelable.
	 */
	BEFORE_INVOKE: string

	/**
	 * The menu action area.
	 */
	area: string

	/**
	 * If true, the menu item associated with the menu action is checked.
	 */
	checked: boolean

	/**
	 * If true, the MenuAction is enabled.
	 */
	enabled: boolean

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the MenuAction.
	 */
	id: number

	/**
	 * The index of the MenuAction within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the MenuAction.
	 */
	name: string

	/**
	 * The parent of the MenuAction (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The name of the MenuAction for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 */
	title: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MenuAction[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Invoke the action.
	 */
	invoke(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the MenuAction.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of menu actions.
 */
declare class MenuActions {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MenuAction with the specified index.
	 * @param index The index.
	 */
	[index: number]: MenuAction

	/**
	 * Returns any MenuAction in the collection.
	 */
	anyItem(): MenuAction

	/**
	 * Displays the number of elements in the MenuAction.
	 */
	count(): number

	/**
	 * Returns every MenuAction in the collection.
	 */
	everyItem(): MenuAction[]

	/**
	 * Returns the first MenuAction in the collection.
	 */
	firstItem(): MenuAction

	/**
	 * Returns the MenuAction with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MenuAction

	/**
	 * Returns the MenuAction with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MenuAction

	/**
	 * Returns the MenuAction with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MenuAction

	/**
	 * Returns the MenuActions within the specified range.
	 * @param from The MenuAction, index, or name at the beginning of the range.
	 * @param to The MenuAction, index, or name at the end of the range.
	 */
	itemByRange(from: MenuAction | number | string, to: MenuAction | number | string): MenuAction[]

	/**
	 * Returns the last MenuAction in the collection.
	 */
	lastItem(): MenuAction

	/**
	 * Returns the middle MenuAction in the collection.
	 */
	middleItem(): MenuAction

	/**
	 * Returns the MenuAction whose index follows the specified MenuAction in the collection.
	 * @param obj The MenuAction whose index comes before the desired MenuAction.
	 */
	nextItem(obj: MenuAction): MenuAction

	/**
	 * Returns the MenuAction with the index previous to the specified index.
	 * @param obj The index of the MenuAction that follows the desired MenuAction.
	 */
	previousItem(obj: MenuAction): MenuAction

	/**
	 * Generates a string which, if executed, will return the MenuAction.
	 */
	toSource(): string

}

/**
 * A script menu action.
 */
declare class ScriptMenuAction extends MenuAction {
	/**
	 * Dispatched before the ScriptMenuAction is displayed. This event does not bubble. This event is not cancelable.
	 */
	BEFORE_DISPLAY: string

	/**
	 * Dispatched when the ScriptMenuAction is invoked. This event does not bubble. This event is not cancelable.
	 */
	ON_INVOKE: string

	/**
	 * Deletes the ScriptMenuAction.
	 */
	remove(): void

}

/**
 * A collection of script menu actions.
 */
declare class ScriptMenuActions {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ScriptMenuAction with the specified index.
	 * @param index The index.
	 */
	[index: number]: ScriptMenuAction

	/**
	 * Creates a new action.
	 * @param title The name of the ScriptMenuAction for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 * @param withProperties Initial values for properties of the new ScriptMenuAction
	 */
	add(title: string, withProperties: object): ScriptMenuAction

	/**
	 * Returns any ScriptMenuAction in the collection.
	 */
	anyItem(): ScriptMenuAction

	/**
	 * Displays the number of elements in the ScriptMenuAction.
	 */
	count(): number

	/**
	 * Returns every ScriptMenuAction in the collection.
	 */
	everyItem(): ScriptMenuAction[]

	/**
	 * Returns the first ScriptMenuAction in the collection.
	 */
	firstItem(): ScriptMenuAction

	/**
	 * Returns the ScriptMenuAction with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ScriptMenuAction

	/**
	 * Returns the ScriptMenuAction with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): ScriptMenuAction

	/**
	 * Returns the ScriptMenuAction with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): ScriptMenuAction

	/**
	 * Returns the ScriptMenuActions within the specified range.
	 * @param from The ScriptMenuAction, index, or name at the beginning of the range.
	 * @param to The ScriptMenuAction, index, or name at the end of the range.
	 */
	itemByRange(from: ScriptMenuAction | number | string, to: ScriptMenuAction | number | string): ScriptMenuAction[]

	/**
	 * Returns the last ScriptMenuAction in the collection.
	 */
	lastItem(): ScriptMenuAction

	/**
	 * Returns the middle ScriptMenuAction in the collection.
	 */
	middleItem(): ScriptMenuAction

	/**
	 * Returns the ScriptMenuAction whose index follows the specified ScriptMenuAction in the collection.
	 * @param obj The ScriptMenuAction whose index comes before the desired ScriptMenuAction.
	 */
	nextItem(obj: ScriptMenuAction): ScriptMenuAction

	/**
	 * Returns the ScriptMenuAction with the index previous to the specified index.
	 * @param obj The index of the ScriptMenuAction that follows the desired ScriptMenuAction.
	 */
	previousItem(obj: ScriptMenuAction): ScriptMenuAction

	/**
	 * Generates a string which, if executed, will return the ScriptMenuAction.
	 */
	toSource(): string

}

/**
 * A menu.
 */
declare class Menu {
	/**
	 * Dispatched before the Menu is displayed. This event does not bubble. This event is not cancelable.
	 */
	BEFORE_DISPLAY: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the Menu within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A collection of menu elements.
	 */
	menuElements: MenuElements

	/**
	 * A collection of menu items.
	 */
	menuItems: MenuItems

	/**
	 * A collection of menu separators.
	 */
	menuSeparators: MenuSeparators

	/**
	 * The name of the Menu.
	 */
	name: string

	/**
	 * The parent of the Menu (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of submenus.
	 */
	submenus: Submenus

	/**
	 * The name of the Menu for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 */
	title: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Menu[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Menu.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of menus.
 */
declare class Menus {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Menu with the specified index.
	 * @param index The index.
	 */
	[index: number]: Menu

	/**
	 * Returns any Menu in the collection.
	 */
	anyItem(): Menu

	/**
	 * Displays the number of elements in the Menu.
	 */
	count(): number

	/**
	 * Returns every Menu in the collection.
	 */
	everyItem(): Menu[]

	/**
	 * Returns the first Menu in the collection.
	 */
	firstItem(): Menu

	/**
	 * Returns the Menu with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Menu

	/**
	 * Returns the Menu with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Menu

	/**
	 * Returns the Menus within the specified range.
	 * @param from The Menu, index, or name at the beginning of the range.
	 * @param to The Menu, index, or name at the end of the range.
	 */
	itemByRange(from: Menu | number | string, to: Menu | number | string): Menu[]

	/**
	 * Returns the last Menu in the collection.
	 */
	lastItem(): Menu

	/**
	 * Returns the middle Menu in the collection.
	 */
	middleItem(): Menu

	/**
	 * Returns the Menu whose index follows the specified Menu in the collection.
	 * @param obj The Menu whose index comes before the desired Menu.
	 */
	nextItem(obj: Menu): Menu

	/**
	 * Returns the Menu with the index previous to the specified index.
	 * @param obj The index of the Menu that follows the desired Menu.
	 */
	previousItem(obj: Menu): Menu

	/**
	 * Generates a string which, if executed, will return the Menu.
	 */
	toSource(): string

}

/**
 * A menu elements
 */
declare class MenuElement {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the MenuElement within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the MenuElement (a Menu or Submenu).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): MenuElement[]

	/**
	 * Deletes the MenuElement.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the MenuElement.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of menu elements.
 */
declare class MenuElements {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MenuElement with the specified index.
	 * @param index The index.
	 */
	[index: number]: MenuElement

	/**
	 * Returns any MenuElement in the collection.
	 */
	anyItem(): MenuElement

	/**
	 * Displays the number of elements in the MenuElement.
	 */
	count(): number

	/**
	 * Returns every MenuElement in the collection.
	 */
	everyItem(): MenuElement[]

	/**
	 * Returns the first MenuElement in the collection.
	 */
	firstItem(): MenuElement

	/**
	 * Returns the MenuElement with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MenuElement

	/**
	 * Returns the MenuElements within the specified range.
	 * @param from The MenuElement, index, or name at the beginning of the range.
	 * @param to The MenuElement, index, or name at the end of the range.
	 */
	itemByRange(from: MenuElement | number | string, to: MenuElement | number | string): MenuElement[]

	/**
	 * Returns the last MenuElement in the collection.
	 */
	lastItem(): MenuElement

	/**
	 * Returns the middle MenuElement in the collection.
	 */
	middleItem(): MenuElement

	/**
	 * Returns the MenuElement whose index follows the specified MenuElement in the collection.
	 * @param obj The MenuElement whose index comes before the desired MenuElement.
	 */
	nextItem(obj: MenuElement): MenuElement

	/**
	 * Returns the MenuElement with the index previous to the specified index.
	 * @param obj The index of the MenuElement that follows the desired MenuElement.
	 */
	previousItem(obj: MenuElement): MenuElement

	/**
	 * Generates a string which, if executed, will return the MenuElement.
	 */
	toSource(): string

}

/**
 * A submenu.
 */
declare class Submenu extends MenuElement {
	/**
	 * Dispatched before the Submenu is displayed. This event does not bubble. This event is not cancelable.
	 */
	BEFORE_DISPLAY: string

	/**
	 * A collection of menu elements.
	 */
	menuElements: MenuElements

	/**
	 * A collection of menu items.
	 */
	menuItems: MenuItems

	/**
	 * A collection of menu separators.
	 */
	menuSeparators: MenuSeparators

	/**
	 * The name of the Submenu.
	 */
	name: string

	/**
	 * A collection of submenus.
	 */
	submenus: Submenus

	/**
	 * The name of the Submenu for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 */
	title: string

}

/**
 * A collection of submenus.
 */
declare class Submenus {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Submenu with the specified index.
	 * @param index The index.
	 */
	[index: number]: Submenu

	/**
	 * Creates a new submenu.
	 * @param title The name of the Submenu for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 * @param at The location of the submenu relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new Submenu
	 */
	add(title: string, at?: LocationOptions, reference?: MenuElement, withProperties?: object): Submenu

	/**
	 * Returns any Submenu in the collection.
	 */
	anyItem(): Submenu

	/**
	 * Displays the number of elements in the Submenu.
	 */
	count(): number

	/**
	 * Returns every Submenu in the collection.
	 */
	everyItem(): Submenu[]

	/**
	 * Returns the first Submenu in the collection.
	 */
	firstItem(): Submenu

	/**
	 * Returns the Submenu with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Submenu

	/**
	 * Returns the Submenu with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Submenu

	/**
	 * Returns the Submenus within the specified range.
	 * @param from The Submenu, index, or name at the beginning of the range.
	 * @param to The Submenu, index, or name at the end of the range.
	 */
	itemByRange(from: Submenu | number | string, to: Submenu | number | string): Submenu[]

	/**
	 * Returns the last Submenu in the collection.
	 */
	lastItem(): Submenu

	/**
	 * Returns the middle Submenu in the collection.
	 */
	middleItem(): Submenu

	/**
	 * Returns the Submenu whose index follows the specified Submenu in the collection.
	 * @param obj The Submenu whose index comes before the desired Submenu.
	 */
	nextItem(obj: Submenu): Submenu

	/**
	 * Returns the Submenu with the index previous to the specified index.
	 * @param obj The index of the Submenu that follows the desired Submenu.
	 */
	previousItem(obj: Submenu): Submenu

	/**
	 * Generates a string which, if executed, will return the Submenu.
	 */
	toSource(): string

}

/**
 * A menu item.
 */
declare class MenuItem extends MenuElement {
	/**
	 * The menu action that implements the menu item.
	 */
	associatedMenuAction: MenuAction

	/**
	 * If true, the menu item associated with the menu action is checked.
	 */
	checked: boolean

	/**
	 * If true, the MenuItem is enabled.
	 */
	enabled: boolean

	/**
	 * The unique ID of the MenuItem.
	 */
	id: number

	/**
	 * The name of the MenuItem.
	 */
	name: string

	/**
	 * The name of the MenuItem for display in the user interface. The title includes any ampersand characters (&), which are used to tell the Windows OS to underline the following character in the name for use with the Alt key to navigate to a menu item. Double ampersands are used to display an actual ampersand character in the name. The Mac OS ignores and removes the extra ampersand characters.
	 */
	title: string

	/**
	 * Selects the MenuItem.
	 */
	select(): void

}

/**
 * A collection of menu items.
 */
declare class MenuItems {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MenuItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: MenuItem

	/**
	 * Creates a new menu item.
	 * @param associatedMenuAction The menu action that implements themenu item.
	 * @param at The location of the menu item relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new MenuItem
	 */
	add(associatedMenuAction: MenuAction, at?: LocationOptions, reference?: MenuElement, withProperties?: object): MenuItem

	/**
	 * Returns any MenuItem in the collection.
	 */
	anyItem(): MenuItem

	/**
	 * Displays the number of elements in the MenuItem.
	 */
	count(): number

	/**
	 * Returns every MenuItem in the collection.
	 */
	everyItem(): MenuItem[]

	/**
	 * Returns the first MenuItem in the collection.
	 */
	firstItem(): MenuItem

	/**
	 * Returns the MenuItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MenuItem

	/**
	 * Returns the MenuItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MenuItem

	/**
	 * Returns the MenuItem with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): MenuItem

	/**
	 * Returns the MenuItems within the specified range.
	 * @param from The MenuItem, index, or name at the beginning of the range.
	 * @param to The MenuItem, index, or name at the end of the range.
	 */
	itemByRange(from: MenuItem | number | string, to: MenuItem | number | string): MenuItem[]

	/**
	 * Returns the last MenuItem in the collection.
	 */
	lastItem(): MenuItem

	/**
	 * Returns the middle MenuItem in the collection.
	 */
	middleItem(): MenuItem

	/**
	 * Returns the MenuItem whose index follows the specified MenuItem in the collection.
	 * @param obj The MenuItem whose index comes before the desired MenuItem.
	 */
	nextItem(obj: MenuItem): MenuItem

	/**
	 * Returns the MenuItem with the index previous to the specified index.
	 * @param obj The index of the MenuItem that follows the desired MenuItem.
	 */
	previousItem(obj: MenuItem): MenuItem

	/**
	 * Generates a string which, if executed, will return the MenuItem.
	 */
	toSource(): string

}

/**
 * A menu separator.
 */
declare class MenuSeparator extends MenuElement {
	/**
	 * The unique ID of the MenuSeparator.
	 */
	id: number

}

/**
 * A collection of menu separators.
 */
declare class MenuSeparators {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MenuSeparator with the specified index.
	 * @param index The index.
	 */
	[index: number]: MenuSeparator

	/**
	 * Creates a new menu separator.
	 * @param at The location of the menu separator relative to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the at parameter specifies before or after.
	 * @param withProperties Initial values for properties of the new MenuSeparator
	 */
	add(at?: LocationOptions, reference?: MenuElement, withProperties?: object): MenuSeparator

	/**
	 * Returns any MenuSeparator in the collection.
	 */
	anyItem(): MenuSeparator

	/**
	 * Displays the number of elements in the MenuSeparator.
	 */
	count(): number

	/**
	 * Returns every MenuSeparator in the collection.
	 */
	everyItem(): MenuSeparator[]

	/**
	 * Returns the first MenuSeparator in the collection.
	 */
	firstItem(): MenuSeparator

	/**
	 * Returns the MenuSeparator with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MenuSeparator

	/**
	 * Returns the MenuSeparator with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MenuSeparator

	/**
	 * Returns the MenuSeparators within the specified range.
	 * @param from The MenuSeparator, index, or name at the beginning of the range.
	 * @param to The MenuSeparator, index, or name at the end of the range.
	 */
	itemByRange(from: MenuSeparator | number | string, to: MenuSeparator | number | string): MenuSeparator[]

	/**
	 * Returns the last MenuSeparator in the collection.
	 */
	lastItem(): MenuSeparator

	/**
	 * Returns the middle MenuSeparator in the collection.
	 */
	middleItem(): MenuSeparator

	/**
	 * Returns the MenuSeparator whose index follows the specified MenuSeparator in the collection.
	 * @param obj The MenuSeparator whose index comes before the desired MenuSeparator.
	 */
	nextItem(obj: MenuSeparator): MenuSeparator

	/**
	 * Returns the MenuSeparator with the index previous to the specified index.
	 * @param obj The index of the MenuSeparator that follows the desired MenuSeparator.
	 */
	previousItem(obj: MenuSeparator): MenuSeparator

	/**
	 * Generates a string which, if executed, will return the MenuSeparator.
	 */
	toSource(): string

}

/**
 * A panel (possibly within a panel group).
 */
declare class Panel {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the Panel within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the Panel.
	 */
	name: string

	/**
	 * The parent of the Panel (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * If true, the panel is visible.
	 */
	visible: boolean

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Panel[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Panel.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of panels.
 */
declare class Panels {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Panel with the specified index.
	 * @param index The index.
	 */
	[index: number]: Panel

	/**
	 * Returns any Panel in the collection.
	 */
	anyItem(): Panel

	/**
	 * Displays the number of elements in the Panel.
	 */
	count(): number

	/**
	 * Returns every Panel in the collection.
	 */
	everyItem(): Panel[]

	/**
	 * Returns the first Panel in the collection.
	 */
	firstItem(): Panel

	/**
	 * Returns the Panel with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Panel

	/**
	 * Returns the Panel with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Panel

	/**
	 * Returns the Panels within the specified range.
	 * @param from The Panel, index, or name at the beginning of the range.
	 * @param to The Panel, index, or name at the end of the range.
	 */
	itemByRange(from: Panel | number | string, to: Panel | number | string): Panel[]

	/**
	 * Returns the last Panel in the collection.
	 */
	lastItem(): Panel

	/**
	 * Returns the middle Panel in the collection.
	 */
	middleItem(): Panel

	/**
	 * Returns the Panel whose index follows the specified Panel in the collection.
	 * @param obj The Panel whose index comes before the desired Panel.
	 */
	nextItem(obj: Panel): Panel

	/**
	 * Returns the Panel with the index previous to the specified index.
	 * @param obj The index of the Panel that follows the desired Panel.
	 */
	previousItem(obj: Panel): Panel

	/**
	 * Generates a string which, if executed, will return the Panel.
	 */
	toSource(): string

}

/**
 * A dialog.
 */
declare class Dialog {
	/**
	 * If true, creates a Cancel button in the dialog that allows users to close the dialog without saving any selections. If false, the dialog contains an OK button but no Cancel button.
	 */
	canCancel: boolean

	/**
	 * A collection of dialog columns.
	 */
	dialogColumns: DialogColumns

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Dialog.
	 */
	id: number

	/**
	 * The index of the Dialog within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the Dialog.
	 */
	name: string

	/**
	 * The parent of the Dialog (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Destroys the dialog object. Note: Dialog objects remain in memory until you destroy them or quit the program.
	 */
	destroy(): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Dialog[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Displays the dialog.
	 */
	show(): boolean

	/**
	 * Generates a string which, if executed, will return the Dialog.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of dialogs.
 */
declare class Dialogs {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Dialog with the specified index.
	 * @param index The index.
	 */
	[index: number]: Dialog

	/**
	 * Creates a new Dialog.
	 * @param withProperties Initial values for properties of the new Dialog
	 */
	add(withProperties: object): Dialog

	/**
	 * Returns any Dialog in the collection.
	 */
	anyItem(): Dialog

	/**
	 * Displays the number of elements in the Dialog.
	 */
	count(): number

	/**
	 * Returns every Dialog in the collection.
	 */
	everyItem(): Dialog[]

	/**
	 * Returns the first Dialog in the collection.
	 */
	firstItem(): Dialog

	/**
	 * Returns the Dialog with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Dialog

	/**
	 * Returns the Dialog with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Dialog

	/**
	 * Returns the Dialog with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): Dialog

	/**
	 * Returns the Dialogs within the specified range.
	 * @param from The Dialog, index, or name at the beginning of the range.
	 * @param to The Dialog, index, or name at the end of the range.
	 */
	itemByRange(from: Dialog | number | string, to: Dialog | number | string): Dialog[]

	/**
	 * Returns the last Dialog in the collection.
	 */
	lastItem(): Dialog

	/**
	 * Returns the middle Dialog in the collection.
	 */
	middleItem(): Dialog

	/**
	 * Returns the Dialog whose index follows the specified Dialog in the collection.
	 * @param obj The Dialog whose index comes before the desired Dialog.
	 */
	nextItem(obj: Dialog): Dialog

	/**
	 * Returns the Dialog with the index previous to the specified index.
	 * @param obj The index of the Dialog that follows the desired Dialog.
	 */
	previousItem(obj: Dialog): Dialog

	/**
	 * Generates a string which, if executed, will return the Dialog.
	 */
	toSource(): string

}

/**
 * Generic term for an object in a dialog column or dialog row, including dialog controls such as radio button groups, checkboxes, editboxes, dropdowns, and comboboxes; static text objects; enabling groups; border panels; and nested dialog columns and dialog rows. For information, see dialog column, dialog row, static text, border panel, enabling group, radiobutton group, checkbox control, angle editbox, angle combobox, integer editbox, integer combobox, measurement editbox, measurement combobox, percent editbox, percent combobox, real editbox, real combobox, and text editbox.
 */
declare class Widget {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the Widget.
	 */
	id: number

	/**
	 * The index of the Widget within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The width of the control. For an editbox or combobox, specifies the minimum width of the box.
	 */
	minWidth: number

	/**
	 * The parent of the Widget (a DialogColumn, DialogRow, EnablingGroup, BorderPanel or RadiobuttonGroup).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): Widget[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the Widget.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of widgets.
 */
declare class Widgets {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Widget with the specified index.
	 * @param index The index.
	 */
	[index: number]: Widget

	/**
	 * Returns any Widget in the collection.
	 */
	anyItem(): Widget

	/**
	 * Displays the number of elements in the Widget.
	 */
	count(): number

	/**
	 * Returns every Widget in the collection.
	 */
	everyItem(): Widget[]

	/**
	 * Returns the first Widget in the collection.
	 */
	firstItem(): Widget

	/**
	 * Returns the Widget with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Widget

	/**
	 * Returns the Widget with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Widget

	/**
	 * Returns the Widgets within the specified range.
	 * @param from The Widget, index, or name at the beginning of the range.
	 * @param to The Widget, index, or name at the end of the range.
	 */
	itemByRange(from: Widget | number | string, to: Widget | number | string): Widget[]

	/**
	 * Returns the last Widget in the collection.
	 */
	lastItem(): Widget

	/**
	 * Returns the middle Widget in the collection.
	 */
	middleItem(): Widget

	/**
	 * Returns the Widget whose index follows the specified Widget in the collection.
	 * @param obj The Widget whose index comes before the desired Widget.
	 */
	nextItem(obj: Widget): Widget

	/**
	 * Returns the Widget with the index previous to the specified index.
	 * @param obj The index of the Widget that follows the desired Widget.
	 */
	previousItem(obj: Widget): Widget

	/**
	 * Generates a string which, if executed, will return the Widget.
	 */
	toSource(): string

}

/**
 * A text entry field.
 */
declare class TextEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

}

/**
 * A collection of text editboxes.
 */
declare class TextEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the TextEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: TextEditbox

	/**
	 * Creates a new TextEditbox.
	 * @param withProperties Initial values for properties of the new TextEditbox
	 */
	add(withProperties: object): TextEditbox

	/**
	 * Returns any TextEditbox in the collection.
	 */
	anyItem(): TextEditbox

	/**
	 * Displays the number of elements in the TextEditbox.
	 */
	count(): number

	/**
	 * Returns every TextEditbox in the collection.
	 */
	everyItem(): TextEditbox[]

	/**
	 * Returns the first TextEditbox in the collection.
	 */
	firstItem(): TextEditbox

	/**
	 * Returns the TextEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): TextEditbox

	/**
	 * Returns the TextEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): TextEditbox

	/**
	 * Returns the TextEditboxes within the specified range.
	 * @param from The TextEditbox, index, or name at the beginning of the range.
	 * @param to The TextEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: TextEditbox | number | string, to: TextEditbox | number | string): TextEditbox[]

	/**
	 * Returns the last TextEditbox in the collection.
	 */
	lastItem(): TextEditbox

	/**
	 * Returns the middle TextEditbox in the collection.
	 */
	middleItem(): TextEditbox

	/**
	 * Returns the TextEditbox whose index follows the specified TextEditbox in the collection.
	 * @param obj The TextEditbox whose index comes before the desired TextEditbox.
	 */
	nextItem(obj: TextEditbox): TextEditbox

	/**
	 * Returns the TextEditbox with the index previous to the specified index.
	 * @param obj The index of the TextEditbox that follows the desired TextEditbox.
	 */
	previousItem(obj: TextEditbox): TextEditbox

	/**
	 * Generates a string which, if executed, will return the TextEditbox.
	 */
	toSource(): string

}

/**
 * A static text control (typically a label for another control or a set of controls).
 */
declare class StaticText extends Widget {
	/**
	 * Text alignment for the StaticText.
	 */
	staticAlignment: StaticAlignmentOptions

	/**
	 * Text that appears in the StaticText.
	 */
	staticLabel: string

}

/**
 * A collection of static text objects.
 */
declare class StaticTexts {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the StaticText with the specified index.
	 * @param index The index.
	 */
	[index: number]: StaticText

	/**
	 * Creates a new StaticText.
	 * @param withProperties Initial values for properties of the new StaticText
	 */
	add(withProperties: object): StaticText

	/**
	 * Returns any StaticText in the collection.
	 */
	anyItem(): StaticText

	/**
	 * Displays the number of elements in the StaticText.
	 */
	count(): number

	/**
	 * Returns every StaticText in the collection.
	 */
	everyItem(): StaticText[]

	/**
	 * Returns the first StaticText in the collection.
	 */
	firstItem(): StaticText

	/**
	 * Returns the StaticText with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): StaticText

	/**
	 * Returns the StaticText with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): StaticText

	/**
	 * Returns the StaticTexts within the specified range.
	 * @param from The StaticText, index, or name at the beginning of the range.
	 * @param to The StaticText, index, or name at the end of the range.
	 */
	itemByRange(from: StaticText | number | string, to: StaticText | number | string): StaticText[]

	/**
	 * Returns the last StaticText in the collection.
	 */
	lastItem(): StaticText

	/**
	 * Returns the middle StaticText in the collection.
	 */
	middleItem(): StaticText

	/**
	 * Returns the StaticText whose index follows the specified StaticText in the collection.
	 * @param obj The StaticText whose index comes before the desired StaticText.
	 */
	nextItem(obj: StaticText): StaticText

	/**
	 * Returns the StaticText with the index previous to the specified index.
	 * @param obj The index of the StaticText that follows the desired StaticText.
	 */
	previousItem(obj: StaticText): StaticText

	/**
	 * Generates a string which, if executed, will return the StaticText.
	 */
	toSource(): string

}

/**
 * A dropdown control.
 */
declare class Dropdown extends Widget {
	/**
	 * The index of the selection in a dropdown or combobox control.
	 */
	selectedIndex: number

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[]

}

/**
 * A collection of dropdowns.
 */
declare class Dropdowns {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the Dropdown with the specified index.
	 * @param index The index.
	 */
	[index: number]: Dropdown

	/**
	 * Creates a new Dropdown.
	 * @param withProperties Initial values for properties of the new Dropdown
	 */
	add(withProperties: object): Dropdown

	/**
	 * Returns any Dropdown in the collection.
	 */
	anyItem(): Dropdown

	/**
	 * Displays the number of elements in the Dropdown.
	 */
	count(): number

	/**
	 * Returns every Dropdown in the collection.
	 */
	everyItem(): Dropdown[]

	/**
	 * Returns the first Dropdown in the collection.
	 */
	firstItem(): Dropdown

	/**
	 * Returns the Dropdown with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): Dropdown

	/**
	 * Returns the Dropdown with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): Dropdown

	/**
	 * Returns the Dropdowns within the specified range.
	 * @param from The Dropdown, index, or name at the beginning of the range.
	 * @param to The Dropdown, index, or name at the end of the range.
	 */
	itemByRange(from: Dropdown | number | string, to: Dropdown | number | string): Dropdown[]

	/**
	 * Returns the last Dropdown in the collection.
	 */
	lastItem(): Dropdown

	/**
	 * Returns the middle Dropdown in the collection.
	 */
	middleItem(): Dropdown

	/**
	 * Returns the Dropdown whose index follows the specified Dropdown in the collection.
	 * @param obj The Dropdown whose index comes before the desired Dropdown.
	 */
	nextItem(obj: Dropdown): Dropdown

	/**
	 * Returns the Dropdown with the index previous to the specified index.
	 * @param obj The index of the Dropdown that follows the desired Dropdown.
	 */
	previousItem(obj: Dropdown): Dropdown

	/**
	 * Generates a string which, if executed, will return the Dropdown.
	 */
	toSource(): string

}

/**
 * A checkbox control.
 */
declare class CheckboxControl extends Widget {
	/**
	 * If true, the control is checked by default in the dialog.
	 */
	checkedState: boolean

	/**
	 * Text that appears in the CheckboxControl.
	 */
	staticLabel: string

}

/**
 * A collection of checkbox controls.
 */
declare class CheckboxControls {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the CheckboxControl with the specified index.
	 * @param index The index.
	 */
	[index: number]: CheckboxControl

	/**
	 * Creates a new CheckboxControl.
	 * @param withProperties Initial values for properties of the new CheckboxControl
	 */
	add(withProperties: object): CheckboxControl

	/**
	 * Returns any CheckboxControl in the collection.
	 */
	anyItem(): CheckboxControl

	/**
	 * Displays the number of elements in the CheckboxControl.
	 */
	count(): number

	/**
	 * Returns every CheckboxControl in the collection.
	 */
	everyItem(): CheckboxControl[]

	/**
	 * Returns the first CheckboxControl in the collection.
	 */
	firstItem(): CheckboxControl

	/**
	 * Returns the CheckboxControl with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): CheckboxControl

	/**
	 * Returns the CheckboxControl with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): CheckboxControl

	/**
	 * Returns the CheckboxControls within the specified range.
	 * @param from The CheckboxControl, index, or name at the beginning of the range.
	 * @param to The CheckboxControl, index, or name at the end of the range.
	 */
	itemByRange(from: CheckboxControl | number | string, to: CheckboxControl | number | string): CheckboxControl[]

	/**
	 * Returns the last CheckboxControl in the collection.
	 */
	lastItem(): CheckboxControl

	/**
	 * Returns the middle CheckboxControl in the collection.
	 */
	middleItem(): CheckboxControl

	/**
	 * Returns the CheckboxControl whose index follows the specified CheckboxControl in the collection.
	 * @param obj The CheckboxControl whose index comes before the desired CheckboxControl.
	 */
	nextItem(obj: CheckboxControl): CheckboxControl

	/**
	 * Returns the CheckboxControl with the index previous to the specified index.
	 * @param obj The index of the CheckboxControl that follows the desired CheckboxControl.
	 */
	previousItem(obj: CheckboxControl): CheckboxControl

	/**
	 * Generates a string which, if executed, will return the CheckboxControl.
	 */
	toSource(): string

}

/**
 * A borderless column for containing controls in a dialog.
 */
declare class DialogColumn {
	/**
	 * A collection of angle comboboxes.
	 */
	angleComboboxes: AngleComboboxes

	/**
	 * A collection of angle editboxes.
	 */
	angleEditboxes: AngleEditboxes

	/**
	 * A collection of border panels.
	 */
	borderPanels: BorderPanels

	/**
	 * A collection of checkbox controls.
	 */
	checkboxControls: CheckboxControls

	/**
	 * A collection of dialog rows.
	 */
	dialogRows: DialogRows

	/**
	 * A collection of dropdowns.
	 */
	dropdowns: Dropdowns

	/**
	 * A collection of enabling groups.
	 */
	enablingGroups: EnablingGroups

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the DialogColumn.
	 */
	id: number

	/**
	 * The index of the DialogColumn within its containing object.
	 */
	index: number

	/**
	 * A collection of integer comboboxes.
	 */
	integerComboboxes: IntegerComboboxes

	/**
	 * A collection of integer editboxes.
	 */
	integerEditboxes: IntegerEditboxes

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A collection of measurement comboboxes.
	 */
	measurementComboboxes: MeasurementComboboxes

	/**
	 * A collection of measurement editboxes.
	 */
	measurementEditboxes: MeasurementEditboxes

	/**
	 * The parent of the DialogColumn (a Dialog, DialogRow, EnablingGroup or BorderPanel).
	 */
	parent: any

	/**
	 * A collection of percent comboboxes.
	 */
	percentComboboxes: PercentComboboxes

	/**
	 * A collection of percent editboxes.
	 */
	percentEditboxes: PercentEditboxes

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of radiobutton groups.
	 */
	radiobuttonGroups: RadiobuttonGroups

	/**
	 * A collection of real number comboboxes.
	 */
	realComboboxes: RealComboboxes

	/**
	 * A collection of real number editboxes.
	 */
	realEditboxes: RealEditboxes

	/**
	 * A collection of static text objects.
	 */
	staticTexts: StaticTexts

	/**
	 * A collection of text editboxes.
	 */
	textEditboxes: TextEditboxes

	/**
	 * A collection of widgets.
	 */
	widgets: Widgets

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DialogColumn[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the DialogColumn.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of dialog columns.
 */
declare class DialogColumns {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DialogColumn with the specified index.
	 * @param index The index.
	 */
	[index: number]: DialogColumn

	/**
	 * Creates a new DialogColumn.
	 * @param withProperties Initial values for properties of the new DialogColumn
	 */
	add(withProperties: object): DialogColumn

	/**
	 * Returns any DialogColumn in the collection.
	 */
	anyItem(): DialogColumn

	/**
	 * Displays the number of elements in the DialogColumn.
	 */
	count(): number

	/**
	 * Returns every DialogColumn in the collection.
	 */
	everyItem(): DialogColumn[]

	/**
	 * Returns the first DialogColumn in the collection.
	 */
	firstItem(): DialogColumn

	/**
	 * Returns the DialogColumn with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DialogColumn

	/**
	 * Returns the DialogColumn with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DialogColumn

	/**
	 * Returns the DialogColumns within the specified range.
	 * @param from The DialogColumn, index, or name at the beginning of the range.
	 * @param to The DialogColumn, index, or name at the end of the range.
	 */
	itemByRange(from: DialogColumn | number | string, to: DialogColumn | number | string): DialogColumn[]

	/**
	 * Returns the last DialogColumn in the collection.
	 */
	lastItem(): DialogColumn

	/**
	 * Returns the middle DialogColumn in the collection.
	 */
	middleItem(): DialogColumn

	/**
	 * Returns the DialogColumn whose index follows the specified DialogColumn in the collection.
	 * @param obj The DialogColumn whose index comes before the desired DialogColumn.
	 */
	nextItem(obj: DialogColumn): DialogColumn

	/**
	 * Returns the DialogColumn with the index previous to the specified index.
	 * @param obj The index of the DialogColumn that follows the desired DialogColumn.
	 */
	previousItem(obj: DialogColumn): DialogColumn

	/**
	 * Generates a string which, if executed, will return the DialogColumn.
	 */
	toSource(): string

}

/**
 * A single control that contains one or more radiobutton controls.
 */
declare class RadiobuttonGroup extends Widget {
	/**
	 * A collection of individual radiobutton controls.
	 */
	radiobuttonControls: RadiobuttonControls

	/**
	 * The index of the selection in a radiobutton group.
	 */
	selectedButton: number

	/**
	 * A collection of widgets.
	 */
	widgets: Widgets

}

/**
 * A collection of radiobutton groups.
 */
declare class RadiobuttonGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the RadiobuttonGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: RadiobuttonGroup

	/**
	 * Creates a new RadiobuttonGroup.
	 * @param withProperties Initial values for properties of the new RadiobuttonGroup
	 */
	add(withProperties: object): RadiobuttonGroup

	/**
	 * Returns any RadiobuttonGroup in the collection.
	 */
	anyItem(): RadiobuttonGroup

	/**
	 * Displays the number of elements in the RadiobuttonGroup.
	 */
	count(): number

	/**
	 * Returns every RadiobuttonGroup in the collection.
	 */
	everyItem(): RadiobuttonGroup[]

	/**
	 * Returns the first RadiobuttonGroup in the collection.
	 */
	firstItem(): RadiobuttonGroup

	/**
	 * Returns the RadiobuttonGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RadiobuttonGroup

	/**
	 * Returns the RadiobuttonGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RadiobuttonGroup

	/**
	 * Returns the RadiobuttonGroups within the specified range.
	 * @param from The RadiobuttonGroup, index, or name at the beginning of the range.
	 * @param to The RadiobuttonGroup, index, or name at the end of the range.
	 */
	itemByRange(from: RadiobuttonGroup | number | string, to: RadiobuttonGroup | number | string): RadiobuttonGroup[]

	/**
	 * Returns the last RadiobuttonGroup in the collection.
	 */
	lastItem(): RadiobuttonGroup

	/**
	 * Returns the middle RadiobuttonGroup in the collection.
	 */
	middleItem(): RadiobuttonGroup

	/**
	 * Returns the RadiobuttonGroup whose index follows the specified RadiobuttonGroup in the collection.
	 * @param obj The RadiobuttonGroup whose index comes before the desired RadiobuttonGroup.
	 */
	nextItem(obj: RadiobuttonGroup): RadiobuttonGroup

	/**
	 * Returns the RadiobuttonGroup with the index previous to the specified index.
	 * @param obj The index of the RadiobuttonGroup that follows the desired RadiobuttonGroup.
	 */
	previousItem(obj: RadiobuttonGroup): RadiobuttonGroup

	/**
	 * Generates a string which, if executed, will return the RadiobuttonGroup.
	 */
	toSource(): string

}

/**
 * An individual radiobutton control in a radiobutton group.
 */
declare class RadiobuttonControl extends Widget {
	/**
	 * If true, the control is checked by default in the dialog.
	 */
	checkedState: boolean

	/**
	 * Text that appears in the RadiobuttonControl.
	 */
	staticLabel: string

}

/**
 * A collection of individual radiobutton controls.
 */
declare class RadiobuttonControls {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the RadiobuttonControl with the specified index.
	 * @param index The index.
	 */
	[index: number]: RadiobuttonControl

	/**
	 * Creates a new RadiobuttonControl.
	 * @param withProperties Initial values for properties of the new RadiobuttonControl
	 */
	add(withProperties: object): RadiobuttonControl

	/**
	 * Returns any RadiobuttonControl in the collection.
	 */
	anyItem(): RadiobuttonControl

	/**
	 * Displays the number of elements in the RadiobuttonControl.
	 */
	count(): number

	/**
	 * Returns every RadiobuttonControl in the collection.
	 */
	everyItem(): RadiobuttonControl[]

	/**
	 * Returns the first RadiobuttonControl in the collection.
	 */
	firstItem(): RadiobuttonControl

	/**
	 * Returns the RadiobuttonControl with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RadiobuttonControl

	/**
	 * Returns the RadiobuttonControl with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RadiobuttonControl

	/**
	 * Returns the RadiobuttonControls within the specified range.
	 * @param from The RadiobuttonControl, index, or name at the beginning of the range.
	 * @param to The RadiobuttonControl, index, or name at the end of the range.
	 */
	itemByRange(from: RadiobuttonControl | number | string, to: RadiobuttonControl | number | string): RadiobuttonControl[]

	/**
	 * Returns the last RadiobuttonControl in the collection.
	 */
	lastItem(): RadiobuttonControl

	/**
	 * Returns the middle RadiobuttonControl in the collection.
	 */
	middleItem(): RadiobuttonControl

	/**
	 * Returns the RadiobuttonControl whose index follows the specified RadiobuttonControl in the collection.
	 * @param obj The RadiobuttonControl whose index comes before the desired RadiobuttonControl.
	 */
	nextItem(obj: RadiobuttonControl): RadiobuttonControl

	/**
	 * Returns the RadiobuttonControl with the index previous to the specified index.
	 * @param obj The index of the RadiobuttonControl that follows the desired RadiobuttonControl.
	 */
	previousItem(obj: RadiobuttonControl): RadiobuttonControl

	/**
	 * Generates a string which, if executed, will return the RadiobuttonControl.
	 */
	toSource(): string

}

/**
 * A numeric entry field that rounds to the nearest whole number. Note: .5 is rounded up.
 */
declare class IntegerEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

}

/**
 * A collection of integer editboxes.
 */
declare class IntegerEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the IntegerEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: IntegerEditbox

	/**
	 * Creates a new IntegerEditbox.
	 * @param withProperties Initial values for properties of the new IntegerEditbox
	 */
	add(withProperties: object): IntegerEditbox

	/**
	 * Returns any IntegerEditbox in the collection.
	 */
	anyItem(): IntegerEditbox

	/**
	 * Displays the number of elements in the IntegerEditbox.
	 */
	count(): number

	/**
	 * Returns every IntegerEditbox in the collection.
	 */
	everyItem(): IntegerEditbox[]

	/**
	 * Returns the first IntegerEditbox in the collection.
	 */
	firstItem(): IntegerEditbox

	/**
	 * Returns the IntegerEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IntegerEditbox

	/**
	 * Returns the IntegerEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): IntegerEditbox

	/**
	 * Returns the IntegerEditboxes within the specified range.
	 * @param from The IntegerEditbox, index, or name at the beginning of the range.
	 * @param to The IntegerEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: IntegerEditbox | number | string, to: IntegerEditbox | number | string): IntegerEditbox[]

	/**
	 * Returns the last IntegerEditbox in the collection.
	 */
	lastItem(): IntegerEditbox

	/**
	 * Returns the middle IntegerEditbox in the collection.
	 */
	middleItem(): IntegerEditbox

	/**
	 * Returns the IntegerEditbox whose index follows the specified IntegerEditbox in the collection.
	 * @param obj The IntegerEditbox whose index comes before the desired IntegerEditbox.
	 */
	nextItem(obj: IntegerEditbox): IntegerEditbox

	/**
	 * Returns the IntegerEditbox with the index previous to the specified index.
	 * @param obj The index of the IntegerEditbox that follows the desired IntegerEditbox.
	 */
	previousItem(obj: IntegerEditbox): IntegerEditbox

	/**
	 * Generates a string which, if executed, will return the IntegerEditbox.
	 */
	toSource(): string

}

/**
 * An integer entry control featuring both a pop-up menu and an entry field. Note: .5 is rounded up.
 */
declare class IntegerCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[]

}

/**
 * A collection of integer comboboxes.
 */
declare class IntegerComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the IntegerCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: IntegerCombobox

	/**
	 * Creates a new IntegerCombobox.
	 * @param withProperties Initial values for properties of the new IntegerCombobox
	 */
	add(withProperties: object): IntegerCombobox

	/**
	 * Returns any IntegerCombobox in the collection.
	 */
	anyItem(): IntegerCombobox

	/**
	 * Displays the number of elements in the IntegerCombobox.
	 */
	count(): number

	/**
	 * Returns every IntegerCombobox in the collection.
	 */
	everyItem(): IntegerCombobox[]

	/**
	 * Returns the first IntegerCombobox in the collection.
	 */
	firstItem(): IntegerCombobox

	/**
	 * Returns the IntegerCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): IntegerCombobox

	/**
	 * Returns the IntegerCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): IntegerCombobox

	/**
	 * Returns the IntegerComboboxes within the specified range.
	 * @param from The IntegerCombobox, index, or name at the beginning of the range.
	 * @param to The IntegerCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: IntegerCombobox | number | string, to: IntegerCombobox | number | string): IntegerCombobox[]

	/**
	 * Returns the last IntegerCombobox in the collection.
	 */
	lastItem(): IntegerCombobox

	/**
	 * Returns the middle IntegerCombobox in the collection.
	 */
	middleItem(): IntegerCombobox

	/**
	 * Returns the IntegerCombobox whose index follows the specified IntegerCombobox in the collection.
	 * @param obj The IntegerCombobox whose index comes before the desired IntegerCombobox.
	 */
	nextItem(obj: IntegerCombobox): IntegerCombobox

	/**
	 * Returns the IntegerCombobox with the index previous to the specified index.
	 * @param obj The index of the IntegerCombobox that follows the desired IntegerCombobox.
	 */
	previousItem(obj: IntegerCombobox): IntegerCombobox

	/**
	 * Generates a string which, if executed, will return the IntegerCombobox.
	 */
	toSource(): string

}

/**
 * A bordered panel that contains an enabling checkbox. A user makes the enabling group active or inactive by clicking the checkbox. An enabling group can contain any type and number of controls.
 */
declare class EnablingGroup extends Widget {
	/**
	 * A collection of angle comboboxes.
	 */
	angleComboboxes: AngleComboboxes

	/**
	 * A collection of angle editboxes.
	 */
	angleEditboxes: AngleEditboxes

	/**
	 * A collection of border panels.
	 */
	borderPanels: BorderPanels

	/**
	 * A collection of checkbox controls.
	 */
	checkboxControls: CheckboxControls

	/**
	 * If true, the control is checked by default in the dialog.
	 */
	checkedState: boolean

	/**
	 * A collection of dialog columns.
	 */
	dialogColumns: DialogColumns

	/**
	 * A collection of dropdowns.
	 */
	dropdowns: Dropdowns

	/**
	 * A collection of enabling groups.
	 */
	enablingGroups: EnablingGroups

	/**
	 * A collection of integer comboboxes.
	 */
	integerComboboxes: IntegerComboboxes

	/**
	 * A collection of integer editboxes.
	 */
	integerEditboxes: IntegerEditboxes

	/**
	 * A collection of measurement comboboxes.
	 */
	measurementComboboxes: MeasurementComboboxes

	/**
	 * A collection of measurement editboxes.
	 */
	measurementEditboxes: MeasurementEditboxes

	/**
	 * A collection of percent comboboxes.
	 */
	percentComboboxes: PercentComboboxes

	/**
	 * A collection of percent editboxes.
	 */
	percentEditboxes: PercentEditboxes

	/**
	 * A collection of radiobutton groups.
	 */
	radiobuttonGroups: RadiobuttonGroups

	/**
	 * A collection of real number comboboxes.
	 */
	realComboboxes: RealComboboxes

	/**
	 * A collection of real number editboxes.
	 */
	realEditboxes: RealEditboxes

	/**
	 * Text that appears in the EnablingGroup.
	 */
	staticLabel: string

	/**
	 * A collection of static text objects.
	 */
	staticTexts: StaticTexts

	/**
	 * A collection of text editboxes.
	 */
	textEditboxes: TextEditboxes

	/**
	 * A collection of widgets.
	 */
	widgets: Widgets

}

/**
 * A collection of enabling groups.
 */
declare class EnablingGroups {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the EnablingGroup with the specified index.
	 * @param index The index.
	 */
	[index: number]: EnablingGroup

	/**
	 * Creates a new EnablingGroup.
	 * @param withProperties Initial values for properties of the new EnablingGroup
	 */
	add(withProperties: object): EnablingGroup

	/**
	 * Returns any EnablingGroup in the collection.
	 */
	anyItem(): EnablingGroup

	/**
	 * Displays the number of elements in the EnablingGroup.
	 */
	count(): number

	/**
	 * Returns every EnablingGroup in the collection.
	 */
	everyItem(): EnablingGroup[]

	/**
	 * Returns the first EnablingGroup in the collection.
	 */
	firstItem(): EnablingGroup

	/**
	 * Returns the EnablingGroup with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): EnablingGroup

	/**
	 * Returns the EnablingGroup with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): EnablingGroup

	/**
	 * Returns the EnablingGroups within the specified range.
	 * @param from The EnablingGroup, index, or name at the beginning of the range.
	 * @param to The EnablingGroup, index, or name at the end of the range.
	 */
	itemByRange(from: EnablingGroup | number | string, to: EnablingGroup | number | string): EnablingGroup[]

	/**
	 * Returns the last EnablingGroup in the collection.
	 */
	lastItem(): EnablingGroup

	/**
	 * Returns the middle EnablingGroup in the collection.
	 */
	middleItem(): EnablingGroup

	/**
	 * Returns the EnablingGroup whose index follows the specified EnablingGroup in the collection.
	 * @param obj The EnablingGroup whose index comes before the desired EnablingGroup.
	 */
	nextItem(obj: EnablingGroup): EnablingGroup

	/**
	 * Returns the EnablingGroup with the index previous to the specified index.
	 * @param obj The index of the EnablingGroup that follows the desired EnablingGroup.
	 */
	previousItem(obj: EnablingGroup): EnablingGroup

	/**
	 * Generates a string which, if executed, will return the EnablingGroup.
	 */
	toSource(): string

}

/**
 * A degree entry control featuring both a pop-up menu and and entry field.
 */
declare class AngleCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[]

}

/**
 * A collection of angle comboboxes.
 */
declare class AngleComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the AngleCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: AngleCombobox

	/**
	 * Creates a new AngleCombobox.
	 * @param withProperties Initial values for properties of the new AngleCombobox
	 */
	add(withProperties: object): AngleCombobox

	/**
	 * Returns any AngleCombobox in the collection.
	 */
	anyItem(): AngleCombobox

	/**
	 * Displays the number of elements in the AngleCombobox.
	 */
	count(): number

	/**
	 * Returns every AngleCombobox in the collection.
	 */
	everyItem(): AngleCombobox[]

	/**
	 * Returns the first AngleCombobox in the collection.
	 */
	firstItem(): AngleCombobox

	/**
	 * Returns the AngleCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AngleCombobox

	/**
	 * Returns the AngleCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): AngleCombobox

	/**
	 * Returns the AngleComboboxes within the specified range.
	 * @param from The AngleCombobox, index, or name at the beginning of the range.
	 * @param to The AngleCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: AngleCombobox | number | string, to: AngleCombobox | number | string): AngleCombobox[]

	/**
	 * Returns the last AngleCombobox in the collection.
	 */
	lastItem(): AngleCombobox

	/**
	 * Returns the middle AngleCombobox in the collection.
	 */
	middleItem(): AngleCombobox

	/**
	 * Returns the AngleCombobox whose index follows the specified AngleCombobox in the collection.
	 * @param obj The AngleCombobox whose index comes before the desired AngleCombobox.
	 */
	nextItem(obj: AngleCombobox): AngleCombobox

	/**
	 * Returns the AngleCombobox with the index previous to the specified index.
	 * @param obj The index of the AngleCombobox that follows the desired AngleCombobox.
	 */
	previousItem(obj: AngleCombobox): AngleCombobox

	/**
	 * Generates a string which, if executed, will return the AngleCombobox.
	 */
	toSource(): string

}

/**
 * A percentage entry control featuring both a pop-up menu and an entry field.
 */
declare class PercentCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[]

}

/**
 * A collection of percent comboboxes.
 */
declare class PercentComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PercentCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: PercentCombobox

	/**
	 * Creates a new PercentCombobox.
	 * @param withProperties Initial values for properties of the new PercentCombobox
	 */
	add(withProperties: object): PercentCombobox

	/**
	 * Returns any PercentCombobox in the collection.
	 */
	anyItem(): PercentCombobox

	/**
	 * Displays the number of elements in the PercentCombobox.
	 */
	count(): number

	/**
	 * Returns every PercentCombobox in the collection.
	 */
	everyItem(): PercentCombobox[]

	/**
	 * Returns the first PercentCombobox in the collection.
	 */
	firstItem(): PercentCombobox

	/**
	 * Returns the PercentCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PercentCombobox

	/**
	 * Returns the PercentCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PercentCombobox

	/**
	 * Returns the PercentComboboxes within the specified range.
	 * @param from The PercentCombobox, index, or name at the beginning of the range.
	 * @param to The PercentCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: PercentCombobox | number | string, to: PercentCombobox | number | string): PercentCombobox[]

	/**
	 * Returns the last PercentCombobox in the collection.
	 */
	lastItem(): PercentCombobox

	/**
	 * Returns the middle PercentCombobox in the collection.
	 */
	middleItem(): PercentCombobox

	/**
	 * Returns the PercentCombobox whose index follows the specified PercentCombobox in the collection.
	 * @param obj The PercentCombobox whose index comes before the desired PercentCombobox.
	 */
	nextItem(obj: PercentCombobox): PercentCombobox

	/**
	 * Returns the PercentCombobox with the index previous to the specified index.
	 * @param obj The index of the PercentCombobox that follows the desired PercentCombobox.
	 */
	previousItem(obj: PercentCombobox): PercentCombobox

	/**
	 * Generates a string which, if executed, will return the PercentCombobox.
	 */
	toSource(): string

}

/**
 * A high-precision numeric entry field.
 */
declare class RealEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

}

/**
 * A collection of real number editboxes.
 */
declare class RealEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the RealEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: RealEditbox

	/**
	 * Creates a new RealEditbox.
	 * @param withProperties Initial values for properties of the new RealEditbox
	 */
	add(withProperties: object): RealEditbox

	/**
	 * Returns any RealEditbox in the collection.
	 */
	anyItem(): RealEditbox

	/**
	 * Displays the number of elements in the RealEditbox.
	 */
	count(): number

	/**
	 * Returns every RealEditbox in the collection.
	 */
	everyItem(): RealEditbox[]

	/**
	 * Returns the first RealEditbox in the collection.
	 */
	firstItem(): RealEditbox

	/**
	 * Returns the RealEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RealEditbox

	/**
	 * Returns the RealEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RealEditbox

	/**
	 * Returns the RealEditboxes within the specified range.
	 * @param from The RealEditbox, index, or name at the beginning of the range.
	 * @param to The RealEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: RealEditbox | number | string, to: RealEditbox | number | string): RealEditbox[]

	/**
	 * Returns the last RealEditbox in the collection.
	 */
	lastItem(): RealEditbox

	/**
	 * Returns the middle RealEditbox in the collection.
	 */
	middleItem(): RealEditbox

	/**
	 * Returns the RealEditbox whose index follows the specified RealEditbox in the collection.
	 * @param obj The RealEditbox whose index comes before the desired RealEditbox.
	 */
	nextItem(obj: RealEditbox): RealEditbox

	/**
	 * Returns the RealEditbox with the index previous to the specified index.
	 * @param obj The index of the RealEditbox that follows the desired RealEditbox.
	 */
	previousItem(obj: RealEditbox): RealEditbox

	/**
	 * Generates a string which, if executed, will return the RealEditbox.
	 */
	toSource(): string

}

/**
 * A percentage entry field.
 */
declare class PercentEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

}

/**
 * A collection of percent editboxes.
 */
declare class PercentEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the PercentEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: PercentEditbox

	/**
	 * Creates a new PercentEditbox.
	 * @param withProperties Initial values for properties of the new PercentEditbox
	 */
	add(withProperties: object): PercentEditbox

	/**
	 * Returns any PercentEditbox in the collection.
	 */
	anyItem(): PercentEditbox

	/**
	 * Displays the number of elements in the PercentEditbox.
	 */
	count(): number

	/**
	 * Returns every PercentEditbox in the collection.
	 */
	everyItem(): PercentEditbox[]

	/**
	 * Returns the first PercentEditbox in the collection.
	 */
	firstItem(): PercentEditbox

	/**
	 * Returns the PercentEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): PercentEditbox

	/**
	 * Returns the PercentEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): PercentEditbox

	/**
	 * Returns the PercentEditboxes within the specified range.
	 * @param from The PercentEditbox, index, or name at the beginning of the range.
	 * @param to The PercentEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: PercentEditbox | number | string, to: PercentEditbox | number | string): PercentEditbox[]

	/**
	 * Returns the last PercentEditbox in the collection.
	 */
	lastItem(): PercentEditbox

	/**
	 * Returns the middle PercentEditbox in the collection.
	 */
	middleItem(): PercentEditbox

	/**
	 * Returns the PercentEditbox whose index follows the specified PercentEditbox in the collection.
	 * @param obj The PercentEditbox whose index comes before the desired PercentEditbox.
	 */
	nextItem(obj: PercentEditbox): PercentEditbox

	/**
	 * Returns the PercentEditbox with the index previous to the specified index.
	 * @param obj The index of the PercentEditbox that follows the desired PercentEditbox.
	 */
	previousItem(obj: PercentEditbox): PercentEditbox

	/**
	 * Generates a string which, if executed, will return the PercentEditbox.
	 */
	toSource(): string

}

/**
 * A degree entry field.
 */
declare class AngleEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

}

/**
 * A collection of angle editboxes.
 */
declare class AngleEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the AngleEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: AngleEditbox

	/**
	 * Creates a new AngleEditbox.
	 * @param withProperties Initial values for properties of the new AngleEditbox
	 */
	add(withProperties: object): AngleEditbox

	/**
	 * Returns any AngleEditbox in the collection.
	 */
	anyItem(): AngleEditbox

	/**
	 * Displays the number of elements in the AngleEditbox.
	 */
	count(): number

	/**
	 * Returns every AngleEditbox in the collection.
	 */
	everyItem(): AngleEditbox[]

	/**
	 * Returns the first AngleEditbox in the collection.
	 */
	firstItem(): AngleEditbox

	/**
	 * Returns the AngleEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): AngleEditbox

	/**
	 * Returns the AngleEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): AngleEditbox

	/**
	 * Returns the AngleEditboxes within the specified range.
	 * @param from The AngleEditbox, index, or name at the beginning of the range.
	 * @param to The AngleEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: AngleEditbox | number | string, to: AngleEditbox | number | string): AngleEditbox[]

	/**
	 * Returns the last AngleEditbox in the collection.
	 */
	lastItem(): AngleEditbox

	/**
	 * Returns the middle AngleEditbox in the collection.
	 */
	middleItem(): AngleEditbox

	/**
	 * Returns the AngleEditbox whose index follows the specified AngleEditbox in the collection.
	 * @param obj The AngleEditbox whose index comes before the desired AngleEditbox.
	 */
	nextItem(obj: AngleEditbox): AngleEditbox

	/**
	 * Returns the AngleEditbox with the index previous to the specified index.
	 * @param obj The index of the AngleEditbox that follows the desired AngleEditbox.
	 */
	previousItem(obj: AngleEditbox): AngleEditbox

	/**
	 * Generates a string which, if executed, will return the AngleEditbox.
	 */
	toSource(): string

}

/**
 * A high-precision numeric entry control featuring both a pop-up menu and an entry field.
 */
declare class RealCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[]

}

/**
 * A collection of real number comboboxes.
 */
declare class RealComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the RealCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: RealCombobox

	/**
	 * Creates a new RealCombobox.
	 * @param withProperties Initial values for properties of the new RealCombobox
	 */
	add(withProperties: object): RealCombobox

	/**
	 * Returns any RealCombobox in the collection.
	 */
	anyItem(): RealCombobox

	/**
	 * Displays the number of elements in the RealCombobox.
	 */
	count(): number

	/**
	 * Returns every RealCombobox in the collection.
	 */
	everyItem(): RealCombobox[]

	/**
	 * Returns the first RealCombobox in the collection.
	 */
	firstItem(): RealCombobox

	/**
	 * Returns the RealCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): RealCombobox

	/**
	 * Returns the RealCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): RealCombobox

	/**
	 * Returns the RealComboboxes within the specified range.
	 * @param from The RealCombobox, index, or name at the beginning of the range.
	 * @param to The RealCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: RealCombobox | number | string, to: RealCombobox | number | string): RealCombobox[]

	/**
	 * Returns the last RealCombobox in the collection.
	 */
	lastItem(): RealCombobox

	/**
	 * Returns the middle RealCombobox in the collection.
	 */
	middleItem(): RealCombobox

	/**
	 * Returns the RealCombobox whose index follows the specified RealCombobox in the collection.
	 * @param obj The RealCombobox whose index comes before the desired RealCombobox.
	 */
	nextItem(obj: RealCombobox): RealCombobox

	/**
	 * Returns the RealCombobox with the index previous to the specified index.
	 * @param obj The index of the RealCombobox that follows the desired RealCombobox.
	 */
	previousItem(obj: RealCombobox): RealCombobox

	/**
	 * Generates a string which, if executed, will return the RealCombobox.
	 */
	toSource(): string

}

/**
 * A measurement entry control featuring both a pop-up menu and an entry field.
 */
declare class MeasurementCombobox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The measurement units to display in the measurement control.
	 */
	editUnits: MeasurementUnits

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

	/**
	 * The menu items on a dropdown or combobox control, as an array of strings.
	 */
	stringList: string[]

}

/**
 * A collection of measurement comboboxes.
 */
declare class MeasurementComboboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MeasurementCombobox with the specified index.
	 * @param index The index.
	 */
	[index: number]: MeasurementCombobox

	/**
	 * Creates a new MeasurementCombobox.
	 * @param withProperties Initial values for properties of the new MeasurementCombobox
	 */
	add(withProperties: object): MeasurementCombobox

	/**
	 * Returns any MeasurementCombobox in the collection.
	 */
	anyItem(): MeasurementCombobox

	/**
	 * Displays the number of elements in the MeasurementCombobox.
	 */
	count(): number

	/**
	 * Returns every MeasurementCombobox in the collection.
	 */
	everyItem(): MeasurementCombobox[]

	/**
	 * Returns the first MeasurementCombobox in the collection.
	 */
	firstItem(): MeasurementCombobox

	/**
	 * Returns the MeasurementCombobox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MeasurementCombobox

	/**
	 * Returns the MeasurementCombobox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MeasurementCombobox

	/**
	 * Returns the MeasurementComboboxes within the specified range.
	 * @param from The MeasurementCombobox, index, or name at the beginning of the range.
	 * @param to The MeasurementCombobox, index, or name at the end of the range.
	 */
	itemByRange(from: MeasurementCombobox | number | string, to: MeasurementCombobox | number | string): MeasurementCombobox[]

	/**
	 * Returns the last MeasurementCombobox in the collection.
	 */
	lastItem(): MeasurementCombobox

	/**
	 * Returns the middle MeasurementCombobox in the collection.
	 */
	middleItem(): MeasurementCombobox

	/**
	 * Returns the MeasurementCombobox whose index follows the specified MeasurementCombobox in the collection.
	 * @param obj The MeasurementCombobox whose index comes before the desired MeasurementCombobox.
	 */
	nextItem(obj: MeasurementCombobox): MeasurementCombobox

	/**
	 * Returns the MeasurementCombobox with the index previous to the specified index.
	 * @param obj The index of the MeasurementCombobox that follows the desired MeasurementCombobox.
	 */
	previousItem(obj: MeasurementCombobox): MeasurementCombobox

	/**
	 * Generates a string which, if executed, will return the MeasurementCombobox.
	 */
	toSource(): string

}

/**
 * A measurement entry field.
 */
declare class MeasurementEditbox extends Widget {
	/**
	 * The default value in an editbox control. Note: Do not specify both edit contents and edit value. If both are specified, the one that occurs later in the script is used.
	 */
	editContents: string

	/**
	 * The measurement units to display in the measurement control.
	 */
	editUnits: MeasurementUnits

	/**
	 * The real number default value of the editbox or combobox. Note: For measurement controls, the value is interpreted in points. The points value is converted to edit units when the dialog opens. Note: Do not specify both edit value and edit contents. If both are specified, the one that occurs later in the script is used.
	 */
	editValue: number

	/**
	 * The amount to increment/decrement the value when a user selects the control and holds down the Shift key while pressing an arrow key on the keyboard.
	 */
	largeNudge: number

	/**
	 * The maximum value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	maximumValue: number

	/**
	 * The minumim value that a user is allowed to type in a numeric editbox or combobox. Note: The value for a measurement editbox or combobox is interpreted in points, regardless of the edit units specified for the control. The points value is converted automatically to the edit unit when the dialog is opened.
	 */
	minimumValue: number

	/**
	 * The amount to increment/decrement the value when the user selects the control and presses an arrow key on the keyboard.
	 */
	smallNudge: number

}

/**
 * A collection of measurement editboxes.
 */
declare class MeasurementEditboxes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the MeasurementEditbox with the specified index.
	 * @param index The index.
	 */
	[index: number]: MeasurementEditbox

	/**
	 * Creates a new MeasurementEditbox.
	 * @param withProperties Initial values for properties of the new MeasurementEditbox
	 */
	add(withProperties: object): MeasurementEditbox

	/**
	 * Returns any MeasurementEditbox in the collection.
	 */
	anyItem(): MeasurementEditbox

	/**
	 * Displays the number of elements in the MeasurementEditbox.
	 */
	count(): number

	/**
	 * Returns every MeasurementEditbox in the collection.
	 */
	everyItem(): MeasurementEditbox[]

	/**
	 * Returns the first MeasurementEditbox in the collection.
	 */
	firstItem(): MeasurementEditbox

	/**
	 * Returns the MeasurementEditbox with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): MeasurementEditbox

	/**
	 * Returns the MeasurementEditbox with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): MeasurementEditbox

	/**
	 * Returns the MeasurementEditboxes within the specified range.
	 * @param from The MeasurementEditbox, index, or name at the beginning of the range.
	 * @param to The MeasurementEditbox, index, or name at the end of the range.
	 */
	itemByRange(from: MeasurementEditbox | number | string, to: MeasurementEditbox | number | string): MeasurementEditbox[]

	/**
	 * Returns the last MeasurementEditbox in the collection.
	 */
	lastItem(): MeasurementEditbox

	/**
	 * Returns the middle MeasurementEditbox in the collection.
	 */
	middleItem(): MeasurementEditbox

	/**
	 * Returns the MeasurementEditbox whose index follows the specified MeasurementEditbox in the collection.
	 * @param obj The MeasurementEditbox whose index comes before the desired MeasurementEditbox.
	 */
	nextItem(obj: MeasurementEditbox): MeasurementEditbox

	/**
	 * Returns the MeasurementEditbox with the index previous to the specified index.
	 * @param obj The index of the MeasurementEditbox that follows the desired MeasurementEditbox.
	 */
	previousItem(obj: MeasurementEditbox): MeasurementEditbox

	/**
	 * Generates a string which, if executed, will return the MeasurementEditbox.
	 */
	toSource(): string

}

/**
 * A bordered panel on a dialog that can contain any type and number of controls.
 */
declare class BorderPanel extends Widget {
	/**
	 * A collection of angle comboboxes.
	 */
	angleComboboxes: AngleComboboxes

	/**
	 * A collection of angle editboxes.
	 */
	angleEditboxes: AngleEditboxes

	/**
	 * A collection of border panels.
	 */
	borderPanels: BorderPanels

	/**
	 * A collection of checkbox controls.
	 */
	checkboxControls: CheckboxControls

	/**
	 * A collection of dialog columns.
	 */
	dialogColumns: DialogColumns

	/**
	 * A collection of dropdowns.
	 */
	dropdowns: Dropdowns

	/**
	 * A collection of enabling groups.
	 */
	enablingGroups: EnablingGroups

	/**
	 * A collection of integer comboboxes.
	 */
	integerComboboxes: IntegerComboboxes

	/**
	 * A collection of integer editboxes.
	 */
	integerEditboxes: IntegerEditboxes

	/**
	 * A collection of measurement comboboxes.
	 */
	measurementComboboxes: MeasurementComboboxes

	/**
	 * A collection of measurement editboxes.
	 */
	measurementEditboxes: MeasurementEditboxes

	/**
	 * A collection of percent comboboxes.
	 */
	percentComboboxes: PercentComboboxes

	/**
	 * A collection of percent editboxes.
	 */
	percentEditboxes: PercentEditboxes

	/**
	 * A collection of radiobutton groups.
	 */
	radiobuttonGroups: RadiobuttonGroups

	/**
	 * A collection of real number comboboxes.
	 */
	realComboboxes: RealComboboxes

	/**
	 * A collection of real number editboxes.
	 */
	realEditboxes: RealEditboxes

	/**
	 * A collection of static text objects.
	 */
	staticTexts: StaticTexts

	/**
	 * A collection of text editboxes.
	 */
	textEditboxes: TextEditboxes

	/**
	 * A collection of widgets.
	 */
	widgets: Widgets

}

/**
 * A collection of border panels.
 */
declare class BorderPanels {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the BorderPanel with the specified index.
	 * @param index The index.
	 */
	[index: number]: BorderPanel

	/**
	 * Creates a new BorderPanel.
	 * @param withProperties Initial values for properties of the new BorderPanel
	 */
	add(withProperties: object): BorderPanel

	/**
	 * Returns any BorderPanel in the collection.
	 */
	anyItem(): BorderPanel

	/**
	 * Displays the number of elements in the BorderPanel.
	 */
	count(): number

	/**
	 * Returns every BorderPanel in the collection.
	 */
	everyItem(): BorderPanel[]

	/**
	 * Returns the first BorderPanel in the collection.
	 */
	firstItem(): BorderPanel

	/**
	 * Returns the BorderPanel with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): BorderPanel

	/**
	 * Returns the BorderPanel with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): BorderPanel

	/**
	 * Returns the BorderPanels within the specified range.
	 * @param from The BorderPanel, index, or name at the beginning of the range.
	 * @param to The BorderPanel, index, or name at the end of the range.
	 */
	itemByRange(from: BorderPanel | number | string, to: BorderPanel | number | string): BorderPanel[]

	/**
	 * Returns the last BorderPanel in the collection.
	 */
	lastItem(): BorderPanel

	/**
	 * Returns the middle BorderPanel in the collection.
	 */
	middleItem(): BorderPanel

	/**
	 * Returns the BorderPanel whose index follows the specified BorderPanel in the collection.
	 * @param obj The BorderPanel whose index comes before the desired BorderPanel.
	 */
	nextItem(obj: BorderPanel): BorderPanel

	/**
	 * Returns the BorderPanel with the index previous to the specified index.
	 * @param obj The index of the BorderPanel that follows the desired BorderPanel.
	 */
	previousItem(obj: BorderPanel): BorderPanel

	/**
	 * Generates a string which, if executed, will return the BorderPanel.
	 */
	toSource(): string

}

/**
 * A borderless row for containing controls in a dialog.
 */
declare class DialogRow {
	/**
	 * A collection of angle comboboxes.
	 */
	angleComboboxes: AngleComboboxes

	/**
	 * A collection of angle editboxes.
	 */
	angleEditboxes: AngleEditboxes

	/**
	 * A collection of border panels.
	 */
	borderPanels: BorderPanels

	/**
	 * A collection of checkbox controls.
	 */
	checkboxControls: CheckboxControls

	/**
	 * A collection of dialog columns.
	 */
	dialogColumns: DialogColumns

	/**
	 * A collection of dropdowns.
	 */
	dropdowns: Dropdowns

	/**
	 * A collection of enabling groups.
	 */
	enablingGroups: EnablingGroups

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the DialogRow.
	 */
	id: number

	/**
	 * The index of the DialogRow within its containing object.
	 */
	index: number

	/**
	 * A collection of integer comboboxes.
	 */
	integerComboboxes: IntegerComboboxes

	/**
	 * A collection of integer editboxes.
	 */
	integerEditboxes: IntegerEditboxes

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A collection of measurement comboboxes.
	 */
	measurementComboboxes: MeasurementComboboxes

	/**
	 * A collection of measurement editboxes.
	 */
	measurementEditboxes: MeasurementEditboxes

	/**
	 * The parent of the DialogRow (a DialogColumn).
	 */
	parent: DialogColumn

	/**
	 * A collection of percent comboboxes.
	 */
	percentComboboxes: PercentComboboxes

	/**
	 * A collection of percent editboxes.
	 */
	percentEditboxes: PercentEditboxes

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * A collection of radiobutton groups.
	 */
	radiobuttonGroups: RadiobuttonGroups

	/**
	 * A collection of real number comboboxes.
	 */
	realComboboxes: RealComboboxes

	/**
	 * A collection of real number editboxes.
	 */
	realEditboxes: RealEditboxes

	/**
	 * A collection of static text objects.
	 */
	staticTexts: StaticTexts

	/**
	 * A collection of text editboxes.
	 */
	textEditboxes: TextEditboxes

	/**
	 * A collection of widgets.
	 */
	widgets: Widgets

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): DialogRow[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the DialogRow.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of dialog rows.
 */
declare class DialogRows {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DialogRow with the specified index.
	 * @param index The index.
	 */
	[index: number]: DialogRow

	/**
	 * Creates a new DialogRow.
	 * @param withProperties Initial values for properties of the new DialogRow
	 */
	add(withProperties: object): DialogRow

	/**
	 * Returns any DialogRow in the collection.
	 */
	anyItem(): DialogRow

	/**
	 * Displays the number of elements in the DialogRow.
	 */
	count(): number

	/**
	 * Returns every DialogRow in the collection.
	 */
	everyItem(): DialogRow[]

	/**
	 * Returns the first DialogRow in the collection.
	 */
	firstItem(): DialogRow

	/**
	 * Returns the DialogRow with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DialogRow

	/**
	 * Returns the DialogRow with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DialogRow

	/**
	 * Returns the DialogRows within the specified range.
	 * @param from The DialogRow, index, or name at the beginning of the range.
	 * @param to The DialogRow, index, or name at the end of the range.
	 */
	itemByRange(from: DialogRow | number | string, to: DialogRow | number | string): DialogRow[]

	/**
	 * Returns the last DialogRow in the collection.
	 */
	lastItem(): DialogRow

	/**
	 * Returns the middle DialogRow in the collection.
	 */
	middleItem(): DialogRow

	/**
	 * Returns the DialogRow whose index follows the specified DialogRow in the collection.
	 * @param obj The DialogRow whose index comes before the desired DialogRow.
	 */
	nextItem(obj: DialogRow): DialogRow

	/**
	 * Returns the DialogRow with the index previous to the specified index.
	 * @param obj The index of the DialogRow that follows the desired DialogRow.
	 */
	previousItem(obj: DialogRow): DialogRow

	/**
	 * Generates a string which, if executed, will return the DialogRow.
	 */
	toSource(): string

}

/**
 * An XML element.
 */
declare class XMLElement extends XMLItem {
	/**
	 * A collection of table cells.
	 */
	cells: Cells

	/**
	 * A collection of characters.
	 */
	characters: Characters

	/**
	 * The contents of the text.
	 */
	contents: string | SpecialCharacters

	/**
	 * A collection of EPS files.
	 */
	epss: EPSs

	/**
	 * A collection of imported graphics in any graphic file format (vector, metafile, or bitmap).
	 */
	graphics: Graphics

	/**
	 * A collection of bitmap images in any bitmap file format (including TIFF, JPEG, or GIF).
	 */
	images: Images

	/**
	 * A collection of insertion points.
	 */
	insertionPoints: InsertionPoints

	/**
	 * A collection of lines.
	 */
	lines: Lines

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: XMLTag | string

	/**
	 * The page items collection, which can be used to process all page items in a container (such as a document, page, or group), regardless of type.
	 */
	pageItems: PageItems

	/**
	 * A collection of paragraphs.
	 */
	paragraphs: Paragraphs

	/**
	 * The story that contains the text.
	 */
	parentStory: Story

	/**
	 * A collection of PDF files.
	 */
	pdfs: PDFs

	/**
	 * A collection of PICT graphics.
	 */
	picts: PICTs

	/**
	 * A collection of stories.
	 */
	stories: Stories

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	storyOffset: InsertionPoint

	/**
	 * A collection of tables.
	 */
	tables: Tables

	/**
	 * A collection of text columns.
	 */
	textColumns: TextColumns

	/**
	 * A collection of text style ranges.
	 */
	textStyleRanges: TextStyleRanges

	/**
	 * A collection of text objects.
	 */
	texts: Texts

	/**
	 * A collection of WMF graphics.
	 */
	wmfs: WMFs

	/**
	 * A collection of words.
	 */
	words: Words

	/**
	 * A collection of XML attributes.
	 */
	xmlAttributes: XMLAttributes

	/**
	 * A collection of XML comments.
	 */
	xmlComments: XMLComments

	/**
	 * The text content or page item referred to by the element.
	 */
	xmlContent: Text | Story | PageItem | Movie | Sound | Graphic | Table | Cell

	/**
	 * A collection of XML elements.
	 */
	xmlElements: XMLElements

	/**
	 * A collection of XML instructions.
	 */
	xmlInstructions: XMLInstructions

	/**
	 * A collection of XML items.
	 */
	xmlItems: XMLItems

	/**
	 * Applies a cell style to the table cells associated with the XMLElement.
	 * @param using The cell style to apply.
	 * @param clearingOverrides If true, removes local formatting before applying the cell style.
	 */
	applyCellStyle(using: string | CellStyle, clearingOverrides?: boolean): void

	/**
	 * Applies the specified character style to the text content of the XMLElement.
	 * @param using The character style to apply.
	 */
	applyCharacterStyle(using: string | CharacterStyle): void

	/**
	 * Applies an object style to the frame associated with the XMLElement.
	 * @param using The object style to apply.
	 * @param clearingOverrides If true, removes local formatting before applying the object style.
	 * @param clearingOverridesThroughRootObjectStyle If true, clears unchecked category attributes through the root style.
	 */
	applyObjectStyle(using: string | ObjectStyle, clearingOverrides?: boolean, clearingOverridesThroughRootObjectStyle?: boolean): void

	/**
	 * Applies the specified paragraph style to the text content of the XMLElement.
	 * @param using The paragraph style to apply.
	 * @param clearingOverrides If true, clears any attributes before applying the style.
	 */
	applyParagraphStyle(using: string | ParagraphStyle, clearingOverrides?: boolean): void

	/**
	 * Applies a table style to the table associated with the XMLElement.
	 * @param using The table style to apply.
	 * @param clearingOverrides If true, removes local formatting before applying the table style.
	 */
	applyTableStyle(using: string | TableStyle, clearingOverrides?: boolean): void

	/**
	 * asynchronously exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	asynchronousExportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): BackgroundTask

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value and replaces the text with the change to value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value and replaces the text with the change character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	changeTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Converts the content of the XML element to a table.
	 * @param rowTag The XML tag that indicates a table row.
	 * @param cellTag The XML tag that indicates a table cell.
	 */
	convertElementToTable(rowTag: XMLTag, cellTag: XMLTag): Table

	/**
	 * Converts the XMLElement to an attribute of its parent element.
	 * @param using The name to give to the new attribute.
	 */
	convertToAttribute(using: string): XMLAttribute

	/**
	 * Evaluates an XPath expression starting at this XML element in the structure.
	 * @param using The XPath expression.
	 * @param prefixMappingTable The namespace mapping table. Can accept: Array of Arrays of 2 Strings.
	 */
	evaluateXPathExpression(using: string, prefixMappingTable: any[]): XMLItem[]

	/**
	 * Exports the object(s) to a file.
	 * @param format The export format, specified as an enumeration value or as an extension that appears in the Save as type or Format menu in the Export dialog.
	 * @param to The path to the export file.
	 * @param showingOptions If true, displays the export options dialog.
	 * @param using The export style.
	 * @param versionComments The comment for this version.
	 * @param forceSave If true, forcibly saves a version.
	 */
	exportFile(format: ExportFormat | string, to: File, showingOptions?: boolean, using?: PDFExportPreset, versionComments?: string, forceSave?: boolean): void

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findGrep(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find what value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findText(reverseOrder: boolean): Text[]

	/**
	 * Finds text that matches the find character type value.
	 * @param reverseOrder If true, returns the results in reverse order.
	 */
	findTransliterate(reverseOrder: boolean): Text[]

	/**
	 * Imports the specified XML file into an InDesign document.
	 * @param from The XML file.
	 */
	importXML(from: File): void

	/**
	 * Inserts the specified text as content before, in, or after the XML element.
	 * @param using The text to be inserted.
	 * @param position The position at which to insert the text. Note that text inserted before or after the element does not become part of the content of the element. Instead, it becomes content of the parent of the element.
	 */
	insertTextAsContent(using: string | SpecialCharacters, position: XMLElementPosition): Text

	/**
	 * Associates the object with the specified XML element while preserving existing content.
	 * @param using The object to mark up.
	 */
	markup(using: PageItem | Movie | Sound | Graphic | Story | Text | Table): void

	/**
	 * Moves the element to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: XMLItem | Text): XMLElement

	/**
	 * Associates the XML element with a copy of a page item.
	 * @param on The page or spread on which to create the new page item.
	 * @param placePoint The page coordinates of the top left corner of the page item, in the format [y1, x1]
	 * @param copyItem The page item to copy.
	 * @param retainExistingFrame If true, associates the XML element with the existing page item and moves the page item (rather than a copy of the page item).
	 */
	placeIntoCopy(on: Spread | Page | MasterSpread, placePoint: (number | string)[], copyItem: PageItem, retainExistingFrame?: boolean): PageItem

	/**
	 * Places the XML element into a new rectangular page item. If the XML element was already associated with a page item, that page item is deleted.
	 * @param on The page or spread on which to create the new page item.
	 * @param geometricBounds The bounds of the page item excluding the stroke width, in the format [y1, x1, y2, x2].
	 */
	placeIntoFrame(on: Spread | Page | MasterSpread, geometricBounds: (number | string)[]): PageItem

	/**
	 * Associates an existing page item with the XML element and places it into an inline frame.
	 * @param copyItem The page item to copy.
	 * @param retainExistingFrame If true, moves the existing page item. If false, moves a copy of the page item.
	 */
	placeIntoInlineCopy(copyItem: PageItem, retainExistingFrame?: boolean): PageItem

	/**
	 * Places an XML element into an inline frame.
	 * @param dimensions The dimensions of the inline frame in the format [width, height].
	 */
	placeIntoInlineFrame(dimensions: (number | string)[]): PageItem

	/**
	 * Places XML content into the story, replacing the existing content.
	 * @param using The object to place into.
	 */
	placeXML(using: Story | PageItem | Graphic | Movie | Sound): void

	/**
	 * Replaces the content of XML element with content imported from a file.
	 * @param using The file path to the import file.
	 * @param relativeBasePath Base path used to resolve relative paths.
	 */
	setContent(using: string, relativeBasePath: string): PageItem

	/**
	 * Stores the object in the specified library.
	 * @param using The library in which to store the object.
	 * @param withProperties Initial values for properties of the new XMLElement
	 */
	store(using: Library, withProperties: object): Asset

	/**
	 * Untags an element.
	 */
	untag(): void

	/**
	 * Validates the element against a DTD.
	 * @param maximumErrors The maximum number of validation errors to generate.
	 */
	validate(maximumErrors?: number): ValidationError[]

}

/**
 * A collection of XML elements.
 */
declare class XMLElements {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XMLElement with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLElement

	/**
	 * Creates a new XML element.
	 * @param markupTag The XML tag used to identify the element.
	 * @param xmlContent The content to be marked up.
	 * @param withProperties Initial values for properties of the new XMLElement
	 */
	add(markupTag: string | XMLTag, xmlContent: Text | Story | PageItem | Movie | Sound | Graphic | Table | Cell, withProperties: object): XMLElement

	/**
	 * Returns any XMLElement in the collection.
	 */
	anyItem(): XMLElement

	/**
	 * Displays the number of elements in the XMLElement.
	 */
	count(): number

	/**
	 * Returns every XMLElement in the collection.
	 */
	everyItem(): XMLElement[]

	/**
	 * Returns the first XMLElement in the collection.
	 */
	firstItem(): XMLElement

	/**
	 * Returns the XMLElement with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLElement

	/**
	 * Returns the XMLElement with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLElement

	/**
	 * Returns the XMLElements within the specified range.
	 * @param from The XMLElement, index, or name at the beginning of the range.
	 * @param to The XMLElement, index, or name at the end of the range.
	 */
	itemByRange(from: XMLElement | number | string, to: XMLElement | number | string): XMLElement[]

	/**
	 * Returns the last XMLElement in the collection.
	 */
	lastItem(): XMLElement

	/**
	 * Returns the middle XMLElement in the collection.
	 */
	middleItem(): XMLElement

	/**
	 * Returns the XMLElement whose index follows the specified XMLElement in the collection.
	 * @param obj The XMLElement whose index comes before the desired XMLElement.
	 */
	nextItem(obj: XMLElement): XMLElement

	/**
	 * Returns the XMLElement with the index previous to the specified index.
	 * @param obj The index of the XMLElement that follows the desired XMLElement.
	 */
	previousItem(obj: XMLElement): XMLElement

	/**
	 * Generates a string which, if executed, will return the XMLElement.
	 */
	toSource(): string

}

/**
 * An XML attribute.
 */
declare class XMLAttribute {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the XMLAttribute within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The name of the XMLAttribute.
	 */
	name: string

	/**
	 * The parent of the XMLAttribute (a XMLElement).
	 */
	parent: XMLElement

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The value of the XMLAttribute.
	 */
	value: string

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Converts the XML attribute to a child element of its parent element.
	 * @param located The location of the new XML element within the parent XML element of the XML attribute.
	 * @param markupTag The XML tag to apply to the new XML element.
	 */
	convertToElement(located?: XMLElementLocation, markupTag?: XMLTag): XMLElement

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLAttribute[]

	/**
	 * Deletes the XMLAttribute.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the XMLAttribute in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Generates a string which, if executed, will return the XMLAttribute.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of XML attributes.
 */
declare class XMLAttributes {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XMLAttribute with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLAttribute

	/**
	 * Creates a new XML attribute.
	 * @param name The name of the attribute.
	 * @param value The value of the attribute.
	 * @param withProperties Initial values for properties of the new XMLAttribute
	 */
	add(name: string, value: string, withProperties: object): XMLAttribute

	/**
	 * Returns any XMLAttribute in the collection.
	 */
	anyItem(): XMLAttribute

	/**
	 * Displays the number of elements in the XMLAttribute.
	 */
	count(): number

	/**
	 * Returns every XMLAttribute in the collection.
	 */
	everyItem(): XMLAttribute[]

	/**
	 * Returns the first XMLAttribute in the collection.
	 */
	firstItem(): XMLAttribute

	/**
	 * Returns the XMLAttribute with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLAttribute

	/**
	 * Returns the XMLAttribute with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): XMLAttribute

	/**
	 * Returns the XMLAttributes within the specified range.
	 * @param from The XMLAttribute, index, or name at the beginning of the range.
	 * @param to The XMLAttribute, index, or name at the end of the range.
	 */
	itemByRange(from: XMLAttribute | number | string, to: XMLAttribute | number | string): XMLAttribute[]

	/**
	 * Returns the last XMLAttribute in the collection.
	 */
	lastItem(): XMLAttribute

	/**
	 * Returns the middle XMLAttribute in the collection.
	 */
	middleItem(): XMLAttribute

	/**
	 * Returns the XMLAttribute whose index follows the specified XMLAttribute in the collection.
	 * @param obj The XMLAttribute whose index comes before the desired XMLAttribute.
	 */
	nextItem(obj: XMLAttribute): XMLAttribute

	/**
	 * Returns the XMLAttribute with the index previous to the specified index.
	 * @param obj The index of the XMLAttribute that follows the desired XMLAttribute.
	 */
	previousItem(obj: XMLAttribute): XMLAttribute

	/**
	 * Generates a string which, if executed, will return the XMLAttribute.
	 */
	toSource(): string

}

/**
 * An XML markup tag.
 */
declare class XMLTag {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the XMLTag.
	 */
	id: number

	/**
	 * The index of the XMLTag within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the XMLTag.
	 */
	name: string

	/**
	 * The parent of the XMLTag (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The color of the tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 */
	tagColor: [number, number, number] | UIColors

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLTag[]

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the tag.
	 * @param replacingWith The tag to substitute.
	 */
	remove(replacingWith: XMLTag | string): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the XMLTag.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of XML tags.
 */
declare class XMLTags {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XMLTag with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLTag

	/**
	 * Creates a tag.
	 * @param name The name of the tag.
	 * @param tagColor The dolor of the tag, specified either as an array of three doubles, each in the range 0 to 255 and representing R, G, and B values, or as a UI color.
	 * @param withProperties Initial values for properties of the new XMLTag
	 */
	add(name: string, tagColor: [number, number, number] | UIColors, withProperties: object): XMLTag

	/**
	 * Returns any XMLTag in the collection.
	 */
	anyItem(): XMLTag

	/**
	 * Displays the number of elements in the XMLTag.
	 */
	count(): number

	/**
	 * Returns every XMLTag in the collection.
	 */
	everyItem(): XMLTag[]

	/**
	 * Returns the first XMLTag in the collection.
	 */
	firstItem(): XMLTag

	/**
	 * Returns the XMLTag with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLTag

	/**
	 * Returns the XMLTag with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLTag

	/**
	 * Returns the XMLTag with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): XMLTag

	/**
	 * Returns the XMLTags within the specified range.
	 * @param from The XMLTag, index, or name at the beginning of the range.
	 * @param to The XMLTag, index, or name at the end of the range.
	 */
	itemByRange(from: XMLTag | number | string, to: XMLTag | number | string): XMLTag[]

	/**
	 * Returns the last XMLTag in the collection.
	 */
	lastItem(): XMLTag

	/**
	 * Returns the middle XMLTag in the collection.
	 */
	middleItem(): XMLTag

	/**
	 * Returns the XMLTag whose index follows the specified XMLTag in the collection.
	 * @param obj The XMLTag whose index comes before the desired XMLTag.
	 */
	nextItem(obj: XMLTag): XMLTag

	/**
	 * Returns the XMLTag with the index previous to the specified index.
	 * @param obj The index of the XMLTag that follows the desired XMLTag.
	 */
	previousItem(obj: XMLTag): XMLTag

	/**
	 * Generates a string which, if executed, will return the XMLTag.
	 */
	toSource(): string

}

/**
 * A mapping object that maps an XML tag to a style (paragraph, character, table, or cell).
 */
declare class XMLImportMap {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the XMLImportMap within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The style mapped to the XML tag.
	 */
	mappedStyle: ParagraphStyle | CharacterStyle | TableStyle | CellStyle | string

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: XMLTag | string

	/**
	 * The parent of the XMLImportMap (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLImportMap[]

	/**
	 * Deletes the XMLImportMap.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the XMLImportMap.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of XML import maps.
 */
declare class XMLImportMaps {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XMLImportMap with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLImportMap

	/**
	 * Create a new mapping
	 * @param markupTag The tag to map.
	 * @param mappedStyle the mapped style.
	 * @param withProperties Initial values for properties of the new XMLImportMap
	 */
	add(markupTag: XMLTag | string, mappedStyle: ParagraphStyle | CharacterStyle | TableStyle | CellStyle | string, withProperties: object): XMLImportMap

	/**
	 * Returns any XMLImportMap in the collection.
	 */
	anyItem(): XMLImportMap

	/**
	 * Displays the number of elements in the XMLImportMap.
	 */
	count(): number

	/**
	 * Returns every XMLImportMap in the collection.
	 */
	everyItem(): XMLImportMap[]

	/**
	 * Returns the first XMLImportMap in the collection.
	 */
	firstItem(): XMLImportMap

	/**
	 * Returns the XMLImportMap with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLImportMap

	/**
	 * Returns the XMLImportMaps within the specified range.
	 * @param from The XMLImportMap, index, or name at the beginning of the range.
	 * @param to The XMLImportMap, index, or name at the end of the range.
	 */
	itemByRange(from: XMLImportMap | number | string, to: XMLImportMap | number | string): XMLImportMap[]

	/**
	 * Returns the last XMLImportMap in the collection.
	 */
	lastItem(): XMLImportMap

	/**
	 * Returns the middle XMLImportMap in the collection.
	 */
	middleItem(): XMLImportMap

	/**
	 * Returns the XMLImportMap whose index follows the specified XMLImportMap in the collection.
	 * @param obj The XMLImportMap whose index comes before the desired XMLImportMap.
	 */
	nextItem(obj: XMLImportMap): XMLImportMap

	/**
	 * Returns the XMLImportMap with the index previous to the specified index.
	 * @param obj The index of the XMLImportMap that follows the desired XMLImportMap.
	 */
	previousItem(obj: XMLImportMap): XMLImportMap

	/**
	 * Generates a string which, if executed, will return the XMLImportMap.
	 */
	toSource(): string

}

/**
 * A mapping object that maps a style (paragraph, character, table, or cell) to an XML tag.
 */
declare class XMLExportMap {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, includes empty stories when mapping styles to tags.
	 */
	includeEmptyStories: boolean

	/**
	 * If true, includes stories on master spreads when mapping styles to tags.
	 */
	includeMasterPageStories: boolean

	/**
	 * If true, includes stories on the pasteboard when mapping styles to tags.
	 */
	includePasteboardStories: boolean

	/**
	 * The index of the XMLExportMap within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The style mapped to the XML tag.
	 */
	mappedStyle: ParagraphStyle | CharacterStyle | TableStyle | CellStyle | string

	/**
	 * The XML tag applied to the element.
	 */
	markupTag: XMLTag | string

	/**
	 * The parent of the XMLExportMap (a Application or Document).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLExportMap[]

	/**
	 * Deletes the XMLExportMap.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the XMLExportMap.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of XML export maps.
 */
declare class XMLExportMaps {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XMLExportMap with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLExportMap

	/**
	 * Create a new mapping
	 * @param mappedStyle The mapped style.
	 * @param markupTag The tag to map.
	 * @param withProperties Initial values for properties of the new XMLExportMap
	 */
	add(mappedStyle: ParagraphStyle | CharacterStyle | TableStyle | CellStyle | string, markupTag: XMLTag | string, withProperties: object): XMLExportMap

	/**
	 * Returns any XMLExportMap in the collection.
	 */
	anyItem(): XMLExportMap

	/**
	 * Displays the number of elements in the XMLExportMap.
	 */
	count(): number

	/**
	 * Returns every XMLExportMap in the collection.
	 */
	everyItem(): XMLExportMap[]

	/**
	 * Returns the first XMLExportMap in the collection.
	 */
	firstItem(): XMLExportMap

	/**
	 * Returns the XMLExportMap with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLExportMap

	/**
	 * Returns the XMLExportMaps within the specified range.
	 * @param from The XMLExportMap, index, or name at the beginning of the range.
	 * @param to The XMLExportMap, index, or name at the end of the range.
	 */
	itemByRange(from: XMLExportMap | number | string, to: XMLExportMap | number | string): XMLExportMap[]

	/**
	 * Returns the last XMLExportMap in the collection.
	 */
	lastItem(): XMLExportMap

	/**
	 * Returns the middle XMLExportMap in the collection.
	 */
	middleItem(): XMLExportMap

	/**
	 * Returns the XMLExportMap whose index follows the specified XMLExportMap in the collection.
	 * @param obj The XMLExportMap whose index comes before the desired XMLExportMap.
	 */
	nextItem(obj: XMLExportMap): XMLExportMap

	/**
	 * Returns the XMLExportMap with the index previous to the specified index.
	 * @param obj The index of the XMLExportMap that follows the desired XMLExportMap.
	 */
	previousItem(obj: XMLExportMap): XMLExportMap

	/**
	 * Generates a string which, if executed, will return the XMLExportMap.
	 */
	toSource(): string

}

/**
 * An XML validation error.
 */
declare class ValidationError {
	/**
	 * The attribute name if the validation error refers to an attribute.
	 */
	attributeName: string

	/**
	 * The element that caused the validation error.
	 */
	element: XMLElement

	/**
	 * The validation error message.
	 */
	errorMessage: string

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the ValidationError within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the ValidationError (a Document).
	 */
	parent: Document

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): ValidationError[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the ValidationError.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of XML validation errors.
 */
declare class ValidationErrors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the ValidationError with the specified index.
	 * @param index The index.
	 */
	[index: number]: ValidationError

	/**
	 * Returns any ValidationError in the collection.
	 */
	anyItem(): ValidationError

	/**
	 * Displays the number of elements in the ValidationError.
	 */
	count(): number

	/**
	 * Returns every ValidationError in the collection.
	 */
	everyItem(): ValidationError[]

	/**
	 * Returns the first ValidationError in the collection.
	 */
	firstItem(): ValidationError

	/**
	 * Returns the ValidationError with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): ValidationError

	/**
	 * Returns the ValidationErrors within the specified range.
	 * @param from The ValidationError, index, or name at the beginning of the range.
	 * @param to The ValidationError, index, or name at the end of the range.
	 */
	itemByRange(from: ValidationError | number | string, to: ValidationError | number | string): ValidationError[]

	/**
	 * Returns the last ValidationError in the collection.
	 */
	lastItem(): ValidationError

	/**
	 * Returns the middle ValidationError in the collection.
	 */
	middleItem(): ValidationError

	/**
	 * Returns the ValidationError whose index follows the specified ValidationError in the collection.
	 * @param obj The ValidationError whose index comes before the desired ValidationError.
	 */
	nextItem(obj: ValidationError): ValidationError

	/**
	 * Returns the ValidationError with the index previous to the specified index.
	 * @param obj The index of the ValidationError that follows the desired ValidationError.
	 */
	previousItem(obj: ValidationError): ValidationError

	/**
	 * Generates a string which, if executed, will return the ValidationError.
	 */
	toSource(): string

}

/**
 * An XML comment.
 */
declare class XMLComment extends XMLItem {
	/**
	 * The insertion point before the table in the story containing the table.
	 */
	storyOffset: InsertionPoint

	/**
	 * The text of the XML comment.
	 */
	value: string

	/**
	 * Moves the element to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: XMLItem | Text): XMLComment

}

/**
 * A collection of XML comments.
 */
declare class XMLComments {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XMLComment with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLComment

	/**
	 * Creates a new XML comment.
	 * @param value The value of the comment.
	 * @param storyOffset The location within the story, specified as an insertion point.
	 * @param withProperties Initial values for properties of the new XMLComment
	 */
	add(value?: string, storyOffset?: InsertionPoint | number, withProperties?: object): XMLComment

	/**
	 * Returns any XMLComment in the collection.
	 */
	anyItem(): XMLComment

	/**
	 * Displays the number of elements in the XMLComment.
	 */
	count(): number

	/**
	 * Returns every XMLComment in the collection.
	 */
	everyItem(): XMLComment[]

	/**
	 * Returns the first XMLComment in the collection.
	 */
	firstItem(): XMLComment

	/**
	 * Returns the XMLComment with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLComment

	/**
	 * Returns the XMLComment with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLComment

	/**
	 * Returns the XMLComments within the specified range.
	 * @param from The XMLComment, index, or name at the beginning of the range.
	 * @param to The XMLComment, index, or name at the end of the range.
	 */
	itemByRange(from: XMLComment | number | string, to: XMLComment | number | string): XMLComment[]

	/**
	 * Returns the last XMLComment in the collection.
	 */
	lastItem(): XMLComment

	/**
	 * Returns the middle XMLComment in the collection.
	 */
	middleItem(): XMLComment

	/**
	 * Returns the XMLComment whose index follows the specified XMLComment in the collection.
	 * @param obj The XMLComment whose index comes before the desired XMLComment.
	 */
	nextItem(obj: XMLComment): XMLComment

	/**
	 * Returns the XMLComment with the index previous to the specified index.
	 * @param obj The index of the XMLComment that follows the desired XMLComment.
	 */
	previousItem(obj: XMLComment): XMLComment

	/**
	 * Generates a string which, if executed, will return the XMLComment.
	 */
	toSource(): string

}

/**
 * An XML processing instruction.
 */
declare class XMLInstruction extends XMLItem {
	/**
	 * A value that tells the application reading the exported XML file what to do with the processing instruction.
	 */
	data: string

	/**
	 * The insertion point before the table in the story containing the table.
	 */
	storyOffset: InsertionPoint

	/**
	 * A name that identifies the processing instruction to an application reading the exported XML file.
	 */
	target: string

	/**
	 * Moves the element to the specified location.
	 * @param to The location in relation to the reference object or within the containing object.
	 * @param reference The reference object. Note: Required when the to parameter specifies before or after. .
	 */
	move(to: LocationOptions, reference: XMLItem | Text): XMLInstruction

}

/**
 * A collection of XML instructions.
 */
declare class XMLInstructions {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XMLInstruction with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLInstruction

	/**
	 * Creates a new XML processing instruction.
	 * @param target A name that identifies the processing instruction to an application reading the exported XML file.
	 * @param data A value that tells the application what to do with the processing instruction identified in the target.
	 * @param storyOffset The location within the story, specified as an insertion point.
	 * @param withProperties Initial values for properties of the new XMLInstruction
	 */
	add(target: string, data?: string, storyOffset?: InsertionPoint | number, withProperties?: object): XMLInstruction

	/**
	 * Returns any XMLInstruction in the collection.
	 */
	anyItem(): XMLInstruction

	/**
	 * Displays the number of elements in the XMLInstruction.
	 */
	count(): number

	/**
	 * Returns every XMLInstruction in the collection.
	 */
	everyItem(): XMLInstruction[]

	/**
	 * Returns the first XMLInstruction in the collection.
	 */
	firstItem(): XMLInstruction

	/**
	 * Returns the XMLInstruction with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLInstruction

	/**
	 * Returns the XMLInstruction with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLInstruction

	/**
	 * Returns the XMLInstructions within the specified range.
	 * @param from The XMLInstruction, index, or name at the beginning of the range.
	 * @param to The XMLInstruction, index, or name at the end of the range.
	 */
	itemByRange(from: XMLInstruction | number | string, to: XMLInstruction | number | string): XMLInstruction[]

	/**
	 * Returns the last XMLInstruction in the collection.
	 */
	lastItem(): XMLInstruction

	/**
	 * Returns the middle XMLInstruction in the collection.
	 */
	middleItem(): XMLInstruction

	/**
	 * Returns the XMLInstruction whose index follows the specified XMLInstruction in the collection.
	 * @param obj The XMLInstruction whose index comes before the desired XMLInstruction.
	 */
	nextItem(obj: XMLInstruction): XMLInstruction

	/**
	 * Returns the XMLInstruction with the index previous to the specified index.
	 * @param obj The index of the XMLInstruction that follows the desired XMLInstruction.
	 */
	previousItem(obj: XMLInstruction): XMLInstruction

	/**
	 * Generates a string which, if executed, will return the XMLInstruction.
	 */
	toSource(): string

}

/**
 * An XML item.
 */
declare class XMLItem {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The unique ID of the XMLItem.
	 */
	id: number

	/**
	 * The index of the XMLItem within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The parent of the XMLItem (a Document or XMLElement).
	 */
	parent: any

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Duplicates the XMLItem.
	 */
	duplicate(): XMLItem

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLItem[]

	/**
	 * Deletes the XMLItem.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Selects the object.
	 * @param existingSelection The selection status of the XMLItem in relation to previously selected objects.
	 */
	select(existingSelection?: SelectionOptions): void

	/**
	 * Generates a string which, if executed, will return the XMLItem.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of XML items.
 */
declare class XMLItems {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XMLItem with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLItem

	/**
	 * Returns any XMLItem in the collection.
	 */
	anyItem(): XMLItem

	/**
	 * Displays the number of elements in the XMLItem.
	 */
	count(): number

	/**
	 * Returns every XMLItem in the collection.
	 */
	everyItem(): XMLItem[]

	/**
	 * Returns the first XMLItem in the collection.
	 */
	firstItem(): XMLItem

	/**
	 * Returns the XMLItem with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLItem

	/**
	 * Returns the XMLItem with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLItem

	/**
	 * Returns the XMLItems within the specified range.
	 * @param from The XMLItem, index, or name at the beginning of the range.
	 * @param to The XMLItem, index, or name at the end of the range.
	 */
	itemByRange(from: XMLItem | number | string, to: XMLItem | number | string): XMLItem[]

	/**
	 * Returns the last XMLItem in the collection.
	 */
	lastItem(): XMLItem

	/**
	 * Returns the middle XMLItem in the collection.
	 */
	middleItem(): XMLItem

	/**
	 * Returns the XMLItem whose index follows the specified XMLItem in the collection.
	 * @param obj The XMLItem whose index comes before the desired XMLItem.
	 */
	nextItem(obj: XMLItem): XMLItem

	/**
	 * Returns the XMLItem with the index previous to the specified index.
	 * @param obj The index of the XMLItem that follows the desired XMLItem.
	 */
	previousItem(obj: XMLItem): XMLItem

	/**
	 * Generates a string which, if executed, will return the XMLItem.
	 */
	toSource(): string

}

/**
 * The document DTD.
 */
declare class DTD extends XMLItem {
	/**
	 * The contents of the text.
	 */
	contents: string | SpecialCharacters

	/**
	 * The public ID of the DOCTYPE declaration. Note: Valid only when the DTD is an external subset.
	 */
	publicId: string

	/**
	 * The tag of the root object.
	 */
	rootTag: XMLTag

	/**
	 * The system ID of the DOCTYPE declaration. Note: Valid only when the DTD is an external subset.
	 */
	systemId: string

}

/**
 * A collection of DTDs.
 */
declare class DTDs {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the DTD with the specified index.
	 * @param index The index.
	 */
	[index: number]: DTD

	/**
	 * Returns any DTD in the collection.
	 */
	anyItem(): DTD

	/**
	 * Displays the number of elements in the DTD.
	 */
	count(): number

	/**
	 * Returns every DTD in the collection.
	 */
	everyItem(): DTD[]

	/**
	 * Returns the first DTD in the collection.
	 */
	firstItem(): DTD

	/**
	 * Returns the DTD with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): DTD

	/**
	 * Returns the DTD with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): DTD

	/**
	 * Returns the DTDs within the specified range.
	 * @param from The DTD, index, or name at the beginning of the range.
	 * @param to The DTD, index, or name at the end of the range.
	 */
	itemByRange(from: DTD | number | string, to: DTD | number | string): DTD[]

	/**
	 * Returns the last DTD in the collection.
	 */
	lastItem(): DTD

	/**
	 * Returns the middle DTD in the collection.
	 */
	middleItem(): DTD

	/**
	 * Returns the DTD whose index follows the specified DTD in the collection.
	 * @param obj The DTD whose index comes before the desired DTD.
	 */
	nextItem(obj: DTD): DTD

	/**
	 * Returns the DTD with the index previous to the specified index.
	 * @param obj The index of the DTD that follows the desired DTD.
	 */
	previousItem(obj: DTD): DTD

	/**
	 * Generates a string which, if executed, will return the DTD.
	 */
	toSource(): string

}

/**
 * XML text content that has not yet been placed in the layout.
 */
declare class XmlStory extends Story {
}

/**
 * A collection of xml stories.
 */
declare class XmlStories {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XmlStory with the specified index.
	 * @param index The index.
	 */
	[index: number]: XmlStory

	/**
	 * Returns any XmlStory in the collection.
	 */
	anyItem(): XmlStory

	/**
	 * Displays the number of elements in the XmlStory.
	 */
	count(): number

	/**
	 * Returns every XmlStory in the collection.
	 */
	everyItem(): XmlStory[]

	/**
	 * Returns the first XmlStory in the collection.
	 */
	firstItem(): XmlStory

	/**
	 * Returns the XmlStory with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XmlStory

	/**
	 * Returns the XmlStory with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XmlStory

	/**
	 * Returns the XmlStory with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): XmlStory

	/**
	 * Returns the XmlStories within the specified range.
	 * @param from The XmlStory, index, or name at the beginning of the range.
	 * @param to The XmlStory, index, or name at the end of the range.
	 */
	itemByRange(from: XmlStory | number | string, to: XmlStory | number | string): XmlStory[]

	/**
	 * Returns the last XmlStory in the collection.
	 */
	lastItem(): XmlStory

	/**
	 * Returns the middle XmlStory in the collection.
	 */
	middleItem(): XmlStory

	/**
	 * Returns the XmlStory whose index follows the specified XmlStory in the collection.
	 * @param obj The XmlStory whose index comes before the desired XmlStory.
	 */
	nextItem(obj: XmlStory): XmlStory

	/**
	 * Returns the XmlStory with the index previous to the specified index.
	 * @param obj The index of the XmlStory that follows the desired XmlStory.
	 */
	previousItem(obj: XmlStory): XmlStory

	/**
	 * Generates a string which, if executed, will return the XmlStory.
	 */
	toSource(): string

}

/**
 * An XML rule processor.
 */
declare class XMLRuleProcessor {
	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * If true, the XML rule process has halted.
	 */
	halted: boolean

	/**
	 * The unique ID of the XMLRuleProcessor.
	 */
	id: number

	/**
	 * The index of the XMLRuleProcessor within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * A property that can be set to any string.
	 */
	label: string

	/**
	 * The name of the XMLRuleProcessor; this is an alias to the XMLRuleProcessor's label property.
	 */
	name: string

	/**
	 * The parent of the XMLRuleProcessor (a Application).
	 */
	parent: Application

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * The XPath condition paths of the rules in the rule set.
	 */
	rulePaths: string[]

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Stop processing XML rule set.
	 */
	endProcessingRuleSet(): void

	/**
	 * Gets the label value associated with the specified key.
	 * @param key The key.
	 */
	extractLabel(key: string): string

	/**
	 * Finds the next matching XML element.
	 */
	findNextMatch(): XMLRuleMatchData

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLRuleProcessor[]

	/**
	 * Halt the XML rule processor.
	 */
	halt(): void

	/**
	 * Sets the label to the value associated with the specified key.
	 * @param key The key.
	 * @param value The value.
	 */
	insertLabel(key: string, value: string): void

	/**
	 * Deletes the XMLRuleProcessor.
	 */
	remove(): void

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Do not process XML elements (children) of the current XML element.
	 */
	skipChildren(): void

	/**
	 * Start processing an XML rule set.
	 * @param initialElement The XML element at which to start processing the rule set.
	 */
	startProcessingRuleSet(initialElement: XMLElement): XMLRuleMatchData

	/**
	 * Process the XML elements of the current XML element.
	 */
	startProcessingSubtree(): XMLRuleMatchData

	/**
	 * Generates a string which, if executed, will return the XMLRuleProcessor.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A collection of XML rule processors.
 */
declare class XMLRuleProcessors {
	/**
	 * The number of objects in the collection.
	 */
	length: number

	/**
	 * Returns the XMLRuleProcessor with the specified index.
	 * @param index The index.
	 */
	[index: number]: XMLRuleProcessor

	/**
	 * Create a new XMLRuleProcessor
	 * @param rulePaths The XPath condition paths of the rules in the rule set.
	 * @param prefixMappingTable The namespace mapping table. Can accept: Array of Arrays of 2 Strings.
	 * @param withProperties Initial values for properties of the new XMLRuleProcessor
	 */
	add(rulePaths: string[], prefixMappingTable: any[], withProperties: object): XMLRuleProcessor

	/**
	 * Returns any XMLRuleProcessor in the collection.
	 */
	anyItem(): XMLRuleProcessor

	/**
	 * Displays the number of elements in the XMLRuleProcessor.
	 */
	count(): number

	/**
	 * Returns every XMLRuleProcessor in the collection.
	 */
	everyItem(): XMLRuleProcessor[]

	/**
	 * Returns the first XMLRuleProcessor in the collection.
	 */
	firstItem(): XMLRuleProcessor

	/**
	 * Returns the XMLRuleProcessor with the specified index or name.
	 * @param index The index or name.
	 */
	item(index: number | string): XMLRuleProcessor

	/**
	 * Returns the XMLRuleProcessor with the specified ID.
	 * @param id The ID.
	 */
	itemByID(id: number): XMLRuleProcessor

	/**
	 * Returns the XMLRuleProcessor with the specified name.
	 * @param name The name.
	 */
	itemByName(name: string): XMLRuleProcessor

	/**
	 * Returns the XMLRuleProcessors within the specified range.
	 * @param from The XMLRuleProcessor, index, or name at the beginning of the range.
	 * @param to The XMLRuleProcessor, index, or name at the end of the range.
	 */
	itemByRange(from: XMLRuleProcessor | number | string, to: XMLRuleProcessor | number | string): XMLRuleProcessor[]

	/**
	 * Returns the last XMLRuleProcessor in the collection.
	 */
	lastItem(): XMLRuleProcessor

	/**
	 * Returns the middle XMLRuleProcessor in the collection.
	 */
	middleItem(): XMLRuleProcessor

	/**
	 * Returns the XMLRuleProcessor whose index follows the specified XMLRuleProcessor in the collection.
	 * @param obj The XMLRuleProcessor whose index comes before the desired XMLRuleProcessor.
	 */
	nextItem(obj: XMLRuleProcessor): XMLRuleProcessor

	/**
	 * Returns the XMLRuleProcessor with the index previous to the specified index.
	 * @param obj The index of the XMLRuleProcessor that follows the desired XMLRuleProcessor.
	 */
	previousItem(obj: XMLRuleProcessor): XMLRuleProcessor

	/**
	 * Generates a string which, if executed, will return the XMLRuleProcessor.
	 */
	toSource(): string

}

/**
 * An XML element matched by a rule or rules in the current XML rule set.
 */
declare class XMLRuleMatchData {
	/**
	 * An XML element matched by a rule or rules in the current XML rule set.
	 */
	element: XMLItem

	/**
	 * A collection of event listeners.
	 */
	eventListeners: EventListeners

	/**
	 * A collection of events.
	 */
	events: Events

	/**
	 * The index of the XMLRuleMatchData within its containing object.
	 */
	index: number

	/**
	 * Returns true if the object specifier resolves to valid objects.
	 */
	isValid: boolean

	/**
	 * The indices of matching XML rules in the rule set.
	 */
	matchRules: number[]

	/**
	 * The parent of the XMLRuleMatchData (a XMLRuleProcessor).
	 */
	parent: XMLRuleProcessor

	/**
	 * A property that allows setting of several properties at the same time.
	 */
	properties: object

	/**
	 * Adds an event listener.
	 * @param eventType The event type.
	 * @param handler The event handler.
	 * @param captures This parameter is obsolete.
	 */
	addEventListener(eventType: string, handler: File | Function, captures?: boolean): EventListener

	/**
	 * Resolves the object specifier, creating an array of object references.
	 */
	getElements(): XMLRuleMatchData[]

	/**
	 * Removes the event listener.
	 * @param eventType The registered event type.
	 * @param handler The registered event handler.
	 * @param captures This parameter is obsolete.
	 */
	removeEventListener(eventType: string, handler: File | Function, captures?: boolean): boolean

	/**
	 * Generates a string which, if executed, will return the XMLRuleMatchData.
	 */
	toSource(): string

	/**
	 * Retrieves the object specifier.
	 */
	toSpecifier(): string

}

/**
 * A global class containing central information about ScriptUI. Not instantiable.
 */
declare class ScriptUI {
  /**
   * Collects the enumerated values that can be used in the alignment and alignChildren properties of controls and containers.
   * Predefined alignment values are: TOP, BOTTOM, LEFT, RIGHT, FILL, CENTER
   */
  static readonly Alignment: string

  /**
   * Collects the enumerated values that can be used as the style argument to the ScriptUI.newFont() method.
   * Predefined styles are REGULAR, BOLD, ITALIC, BOLDITALIC.
   */
  static readonly FontStyle: object

  /**
   * The font constants defined by the host application.
   */
  static readonly applicationFonts: object

  /**
   * An object whose properties are the names of compatability modes supported by the host application.
   * The presence of ScriptUI.compatability.su1PanelCoordinates means that the application allows backward compatibility with the coordinate system of Panel elements in ScriptUI version 1.
   */
  static readonly compatibility: object

  /**
   * A string containing the internal version number of the ScriptUI module.
   */
  static readonly coreVersion: string

  /**
   * An object whose properties define attributes of the environment in which ScriptUI operates.
   */
  static readonly environment: Environment

  /**
   * An object whose properties and methods provide access to objects used in the ScriptUI event system.
   * It contains one function, createEvent(), which allows you to create event objects in order to simulate user-interaction event
   */
  static readonly events: Events

  /**
   * A string containing the name of the UI component framework with which this version of ScriptUI is compatible.
   */
  static readonly frameworkName: string

  /**
   * A string containing the version number of the ScriptUI component framework
   */
  static readonly version: any

  /**
   * Finds and returns the resource for a given text string from the host application's resource data.
   * If no string resource matches the given text, the text itself is returned.
   * @param text The text to match.
   */
  static getResourceText(text: string): string

  /**
   * Creates a new font object for use in text controls and titles.
   * @param name The font name, or the font family name.
   * @param style The font style; can be string, or one of the values of ScriptUI.FontStyle.
   * @param size The font size in points.
   */
  static newFont(name: string, style: string, size: number): ScriptUIFont

  /**
   * Loads a new image from resources or disk files into an image object.
   * Creates a new global image object for use in controls that can display images, loading the associated images from the specified resources or image files.
   * @param normal The resource name or the disk file path to the image used for the normal state.
   * @param disabled The resource name, or the disk file path to the image used for the disabled state.
   * @param pressed The resource name, or the file-system path to the image used for the pressed state.
   * @param rollover The resource name, or the file-system path to the image used for the rollover state.
   */
  static newImage(
    normal: string,
    disabled?: string,
    pressed?: string,
    rollover?: string,
  ): ScriptUIImage
}

/**
 * The instance represents a top-level window or dialog box, which contains user-interface elements.
 * The globally available Window object provides access to predefined and script-defined windows.
 */
declare class Window extends _Control {
  /**
   * Set to true to make this window active.
   * A modal dialog that is visible is by definition the active dialog.
   * An active palette is the front-most window.
   * An active control is the one with focus—that is, the one that accepts keystrokes, or in the case of a Button, be selected when the user typesReturn or Enter.
   */
  active: boolean

  /**
   * Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.
   * Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.
   */
  alignChildren: string

  /**
   * For windows of type dialog, the UI element to notify when the user presses a cancellation key combination.
   * The cancellation key is the Esc key. By default, looks for a button whose name or text is "cancel" (case disregarded).
   */
  cancelElement: object

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the window.
   */
  characters: number

  /**
   * The collection of UI elements that have been added to this container.
   * An array indexed by number or by a string containing an element's name. The length property of this array is the number of child elements for container elements, and is zero for controls.
   */
  readonly children: object[]

  /**
   * For windows of type dialog, the UI element to notify when the user presses a Enter key.
   * By default, looks for a button whose name or text is "ok" (case disregarded).
   */
  defaultElement: object

  /**
   * The bounds of the window frame in screen coordinates.
   * The frame consists of the title bar and borders that enclose the content region of a window, depending on the windowing system.
   */
  readonly frameBounds: Bounds | [number, number, number, number]

  /**
   * The top left corner of the window frame in screen coordinates.
   * The same as [frameBounds.x, frameBounds.y]. Set this value to move the window frame to the specified location on the screen. The frameBounds value changes accordingly.
   */
  frameLocation: Point | [number, number]

  /**
   * The size and location of the window's frame in screen coordinates.
   */
  readonly frameSize: Dimension | [number, number]

  /**
   * Deprecated. Use ScriptUI.frameworkName instead.
   */
  static readonly frameworkName: string

  /**
   * The graphics object that can be used to customize the window’s appearance, in response to the onDraw event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number

  /**
   * True if the window is expanded.
   */
  maximized: boolean

  /**
   * True if the window is minimized or iconified.
   */
  minimized: boolean

  /**
   * The opacity of the window, in the range [0..1].
   * A value of 1.0 (the default) makes the window completely opaque, a value of 0 makes it completely transparent. Intermediate values make it partially transparent to any degree.
   */
  opacity: number

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string

  /**
   * The keypress combination that invokes this element's onShortcutKey() callback.
   */
  shortcutKey: string

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number

  /**
   * The title, label, or displayed text, a localizeable string.
   * Does not apply to containers of type group.
   */
  text: string

  /**
   * Deprecated. Use ScriptUI.version instead.
   */
  static readonly version: any

  /**
   * Creates a new window.
   * @param type The window type. One of: window: Creates a simple window that can be used as a main window for an application. (Not supported by Photoshop CS3.) palette: Creates a modeless dialog, also called a floating palette. (Not supported by Photoshop CS3.) dialog: Creates a modal dialog. This argument can also be a ScriptUI resource specification; in that case, all other arguments are ignored.
   * @param title The window title, a localizable string.
   * @param bounds The window's position and size.
   * @param properties An object containing creation-only properties.
   */
  constructor(
    type: string,
    title?: string,
    bounds?: Bounds | [number, number, number, number],
    properties?: Partial<_ControlPropertiesMap["window"]>,
  )

  /**
   * Creates and returns a new control or container object and adds it to the children of this window.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd

  /**
   * Displays a platform-standard dialog containing a short message and an OK button.
   * @param message TThe string for the displayed message.
   * @param title A string to appear as the title of the dialog, if the platform supports a title. Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is "Script Alert".
   * @param errorIcon When true, the platform-standard alert icon is replaced by the platform-standard error icon in the dialog. Ignored in Mac OS, which does not support icons for alert dialogs.
   */
  static alert(message: string, title?: string, errorIcon?: boolean): void

  /**
   * Centers this window on screen or with repect to another window.
   * @param window The relative window. If not specified, centers on the screen.
   */
  center(window?: Window): void

  /**
   * Closes this window.
   * . If an onClose() callback is defined for the window, calls that function before closing the window.
   * @param return_ A number to be returned from the show() method that invoked this window as a modal dialog.
   */
  close(return_?: any): void

  /**
   * Displays a platform-standard dialog containing a short message and two buttons labeled Yes and No.
   * Returns true if the user clicked Yes, false if the user clicked No.
   * @param message The string for the displayed message.
   * @param noAsDefault When true, the No button is the default choice, selected when the user types Enter. Default is false, meaning that Yes is the default choice.
   * @param title A string to appear as the title of the dialog, if the platform supports a title. Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is "Script Alert".
   */
  static confirm(message: string, noAsDefault: boolean, title?: string): boolean

  /**
   * Use this method to find an existing window.
   * This includes windows defined by ScriptUI resource strings, windows already created by a script, and windows created by the application (if the application supports this case). This function is not supported by all applications. Returns a Window object found or generated from the resource, or null if no such window or resource exists.
   * @param type The name of a predefined resource available to JavaScript in the current application; or the window type. If a title is specified, the type is used if more than one window with that title is found. Can be null or the empty string.
   * @param title The window title.
   */
  static find(type: string, title: string): Window

  /**
   * Sends a notification message to all listeners, simulating the specified user interaction event.
   * @param eventName The event name; if omitted, the default event is sent. One of: onClose, onMove, onMoving, onResize, onResizing, onShow
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the window acquires the keyboard focus.
   * Called when the user gives the window the keyboard focus by clicking it or otherwise making it the active window.
   */
  onActivate(): void

  /**
   * An event-handler callback function, calledwhen the window is about to be closed.
   * Called when a request is made to close the window, either by an explicit call to the close() function or by a user action (clicking the OS-specific close icon in the title bar). The function is called before the window actually closes; it can return false to cancel the close operation.
   */
  onClose(): boolean

  /**
   * An event-handler callback function, called when the window loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active window to another window.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, calledwhen the windowhas been moved
   */
  onMove(): void

  /**
   * An event-handler callback function, calledwhen the window is being moved
   * Called while a window in being moved, each time the position changes. A handler can monitor the move operation.
   */
  onMoving(): void

  /**
   * An event-handler callback function, called after the window has been resized
   */
  onResize(): void

  /**
   * An event-handler callback function, called while a window is being resized
   * Called while a window is being resized, each time the height or width changes. A handler can monitor the resize operation.
   */
  onResizing(): void

  /**
   * In Windows only, an event-handler callback function, called a shortcut-key sequence is typed that matches the shortcutKey value for this window.
   */
  onShortcutKey(): void

  /**
   * An event-handler callback function, called just before the window is displayed
   * Called when a request is made to open the window using the show() method, before the window is made visible, but after automatic layout is complete. A handler can modify the results of the automatic layout.
   */
  onShow(): void

  /**
   * Displays a modal dialog that returns the user’s text input.
   * Returns the value of the text edit field if the user clicked OK, null if the user clicked Cancel.
   * @param prompt The string for the displayed message.
   * @param default_ The initial value to be displayed in the text edit field.
   * @param title A string to appear as the title of the dialog. In Windows, this appears in the window’s frame; in Mac OS it appears above the message. The default title string is "Script Prompt".
   */
  static prompt(prompt: string, default_?: string, title?: string): string

  /**
   * Removes the specified child control from this window’s children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void
}

/**
 * Controls the automatic layout behavior for a window or container.
 * The subclass AutoLayoutManager implements the default automatic layout behavior.
 */
declare class LayoutManager {
  /**
   * Invokes the automatic layout behavior for the managed container.
   * Adjusts sizes and positions of the child elements of this window or container according to the placement and alignment property values in the parent and children.
   * Invoked automatically the first time the window is displayed. Thereafter, the script must invoke it explicitly to change the layout in case of changes in the size or position of the parent or children.
   */
  layout(): void

  /**
   * Performs a layout after a Window is resized, based on the new size.
   * Resizes the child elements of the managed container with a given alignment type, after the window has been resized by the user.
   */
  resize(): void
}

/**
 * A drawing pen that defines a color and line width used to stroke paths.
 * Create with ScriptUIGraphics.newPen(). Use as a value of  foregroundColor properties, and pass as an argument to drawString() and strokePath() methods.
 */
declare class ScriptUIPen {
  /**
   * The pen color.
   * The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.
   */
  readonly color: number[]

  /**
   * The pixel width of the drawing line.
   */
  lineWidth: number

  /**
   * The theme name.
   * The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.
   */
  readonly theme: string

  /**
   * The pen type, solid or theme.
   * One of these constants: ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR
   */
  readonly type: string
}

/**
 * A painting brush that encapsulates a color or pattern used to fill paths.
 * Create with ScriptUIGraphics.newBrush(). Use as a value of  backgroundColor properties, and pass as an argument to the fillPath() method.
 */
declare class ScriptUIBrush {
  /**
   * The brush color.
   * The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.
   */
  readonly color: number[]

  /**
   * The theme name.
   * The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.
   */
  readonly theme: string

  /**
   * The brush type, solid or theme.
   * One of these constants: ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR
   */
  readonly type: number
}

/**
 * A helper object that encapsulates a drawing path for a figure to be drawn into a window or control.
 * Create with the newPath(), moveto(), lineto(), rectPath(), and ellipsePath() methods.Used as value of currentPath, where it is acted upon by methods such as closePath().Pass as optional argument to fillPath() and strokePath(), which otherwise act upon the current path.
 */
declare class ScriptUIPath {}

/**
 * An object used to draw custom graphics, found in the graphics property of window, container, and control objects.
 * Allows a script to customize aspects of the element’s appearance, such as the color and font. Use an onDraw callback function to set these properties or call the functions.All measurements are in pixels.
 */
declare class ScriptUIGraphics {
  /**
   * Contains the enumerated constants for the type argument of newBrush().
   * Type constants are: SOLID_COLOR, THEME_COLOR.
   */
  static readonly BrushType: object

  /**
   * Contains the enumerated constants for the type argument of newPen().
   * Type constants are: SOLID_COLOR, THEME_COLOR.
   */
  static readonly PenType: object

  /**
   * The background color for containers; for non-containers, the parent background color.
   * The paint color and style is defined in this brush object.This property is only supported for controls likedropdownlist, edittext, and listbox.
   */
  backgroundColor: ScriptUIBrush

  /**
   * The current drawing path, encapsulated in a path object.
   */
  readonly currentPath: ScriptUIPath

  /**
   * The current position in the current drawing path.
   */
  readonly currentPoint: Point | [number, number]

  /**
   * The background color for containers when disabled or inactive; for non-containers, the parent background color.
   * The paint color and style is defined in this brush object.This property is only supported for controls likedropdownlist, edittext, and listbox.
   */
  disabledBackgroundColor: ScriptUIBrush

  /**
   * The text color when the element is disabled or inactive.
   * The paint color and style is defined in this pen object.
   */
  disabledForegroundColor: ScriptUIPen

  /**
   * The default font to use for displaying text.
   */
  font: ScriptUIFont

  /**
   * The text color.
   * The paint color and style is defined in this pen object.
   */
  foregroundColor: ScriptUIPen

  /**
   * Closes the current path.
   * Defines a line from the current postion (currentPoint) to the start point of the current path (the value of currentPath).
   */
  closePath(): void

  /**
   * Draws a focus ring within a region of this element.
   * @param left The left coordinate of the region. Value is relative to the origin of this element.
   * @param top The top coordinate of the region. Value is relative to the origin of this element.
   * @param width The width of the region in pixels.
   * @param height The height of the region in pixels.
   */
  drawFocusRing(left: number, top: number, width: number, height: number): void

  /**
   * Draws an image within a given region of the element.
   * Uses the version of the image that is appropriate to the element's current state.
   * @param image The image to draw. This object contains different versions of an image appropriate to various element states, such as a dimmed version for the disabled state.
   * @param left The left coordinate of the region, relative to the origin of this element.
   * @param top The top coordinate of the region, relative to the origin of this element.
   * @param width The width in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image width.
   * @param height The height in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image height.
   */
  drawImage(image: ScriptUIImage, left: number, top: number, width?: number, height?: number): void

  /**
   * Draw the platform-specific control associated with this element.
   */
  drawOSControl(): void

  /**
   * Draw a string of text starting at a given point in this element, using a given drawing pen and font.
   * @param text The text string.
   * @param pen The drawing pen to use.
   * @param x The left coordinate, relative to the origin of this element.
   * @param y The top coordinate, relative to the origin of this element.
   * @param font The font to use. Default is the  font value in this object.
   */
  drawString(text: string, pen: ScriptUIPen, x: number, y: number, font?: ScriptUIFont): void

  /**
   * Defines an elliptical path within a given rectangular area in the currentPath object, which can be filled using fillPath() or stroked using strokePath().
   * Returns a Point object for the upper left corner of the area, which is the new currentPoint.
   * @param left The left coordinate of the region, relative to the origin of this element.
   * @param top The top coordinate of the region, relative to the origin of this element.
   * @param width The width of the region in pixels.
   * @param height The height of the region in pixels.
   */
  ellipsePath(left: number, top: number, width: number, height: number): Point | [number, number]

  /**
   * Fills a path using a given painting brush.
   * @param brush The brush object that defines the fill color.
   * @param path The path object. Default is the currentPath.
   */
  fillPath(brush: ScriptUIBrush, path?: ScriptUIPath): void

  /**
   * Adds a path segment to the currentPath.
   * The line is defined from the currentPoint to the specified destination point. Returns the Point objectfor the destination point, which becomes the new value of currentPoint.
   * @param x The X coordinate for the destination point, relative to the origin of this element.
   * @param y The Y coordinate for the destination point, relative to the origin of this element.
   */
  lineTo(x: number, y: number): Point | [number, number]

  /**
   * Calculates the size needed to display a string using the given font.
   * Returns a Dimension object that contains the height and width of the string in pixels.
   * @param text The text string to measure.
   * @param font The font to use. Default is the font value in this object.
   * @param boundingWidth The bounding width.
   */
  measureString(text: string, font?: ScriptUIFont, boundingWidth?: number): Dimension | [number, number]

  /**
   * Adds a given point to the currentPath, and makes it the current drawing position.
   * Returns the Point object which is the new value of currentPoint.
   * @param x The X coordinate for the new point, relative to the origin of this element.
   * @param y The Y coordinate for the new point, relative to the origin of this element.
   */
  moveTo(x: number, y: number): Point | [number, number]

  /**
   * Creates a new painting brush object.
   * @param type The brush type, solid or theme. One of the constants ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR.
   * @param color The brush color. If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque. If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application.
   */
  newBrush(type: number, color: number[]): ScriptUIBrush

  /**
   * Creates a new, empty path object.
   * Replaces any existing path in currentPath.
   */
  newPath(): ScriptUIPath

  /**
   * Creates a new drawing pen object.
   * @param type The pen type, solid or theme. One of the constants ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR.
   * @param color The pen color. If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque. If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application.
   * @param width The width of the pen line in pixels. The line is centered around the current point. For example, if the value is 2, drawing a line from (0, 10) to (5, 10) paints the two rows of pixels directly above and below y-position 10.
   */
  newPen(type: number, color: number[], width: number): ScriptUIPen

  /**
   * Defines a rectangular path in the currentPath object.
   * The rectangle can be filled using fillPath() or stroked using strokePath().Returns the Point objectfor the upper left corner of the rectangle, which becomes the new value of currentPoint.
   * @param left The left coordinate relative to the origin of this element.
   * @param top The top coordinate relative to the origin of this element.
   * @param width The width in pixels.
   * @param height The height in pixels.
   */
  rectPath(left: number, top: number, width: number, height: number): Point | [number, number]

  /**
   * Strokes the path segments of a path with a given drawing pen.
   * @param pen The drawing pen that defines the color and line width.
   * @param path The path object. Default is the currentPath.
   */
  strokePath(pen: ScriptUIPen, path?: ScriptUIPath): void
}

/**
 * Describes an input state at the time of the triggering  ScriptUIGraphics.onDraw() event.
 * Contains properties that report whether the current control has the input focus, and the particular mouse button and keypress state. Passed in as argument to ScriptUIGraphics.onDraw().
 */
declare class DrawState {
  /**
   * True if the Alt key is being pressed (in Windows only).
   */
  readonly altKeyPressed: boolean

  /**
   * True if the Caps Lock key is being pressed.
   */
  readonly capsLockKeyPressed: boolean

  /**
   * True if the Command key is being pressed (in Mac OS only).
   */
  readonly cmdKeyPressed: boolean

  /**
   * True if the Ctrl key is being pressed.
   */
  readonly ctrlKeyPressed: boolean

  /**
   * True if the element has the input focus.
   */
  readonly hasFocus: boolean

  /**
   * True if the left mouse button is being pressed.
   */
  readonly leftButtonPressed: boolean

  /**
   * True if the middle mouse button is being pressed.
   */
  readonly middleButtonPressed: boolean

  /**
   * True if the cursor is hovering over this element.
   */
  readonly mouseOver: boolean

  /**
   * True if the Num Lock key is being pressed.
   */
  readonly numLockKeyPressed: boolean

  /**
   * True if the Option key is being pressed (in Mac OS only).
   */
  readonly optKeyPressed: boolean

  /**
   * True if the right mouse button is being pressed.
   */
  readonly rightButtonPressed: boolean

  /**
   * True if the Shift key is being pressed.
   */
  readonly shiftKeyPressed: boolean
}

/**
 * Encapsulates the qualities of a font used to draw text into a control.
 * Create with the newFont() method.Used as a value of font. Passed as an argument to drawString() and measureString().
 */
declare class ScriptUIFont {
  /**
   * The font family name.
   */
  readonly family: string

  /**
   * The complete font name, consisting of the family and style, if specified.
   */
  readonly name: string

  /**
   * The font point size.
   */
  readonly size: number

  /**
   * The font style. One of the constants in ScriptUIGraphics.FontStyle.
   */
  readonly style: object

  /**
   * The name of a substitution font, a fallback font to substitute for this font if the requested font family or style is not available.
   */
  readonly substitute: string
}

/**
 * Encapsulates a set of images that can be drawn into a control.
 * Different images can reflect the current state, such as a dimmed version for a disabled control. Create with the newImage() method. Passed as an argument to drawImage().
 */
declare class ScriptUIImage {
  /**
   * The image format. One of: resource, JPEG, GIF, TIFF, PNG, or PICT (Macintosh).
   */
  readonly format: string

  /**
   * The image name. Either the file name, or the resource name.
   */
  readonly name: string

  /**
   * The full path to the file that contains the image.
   */
  readonly pathname: string

  /**
   * The image size in pixels.
   */
  readonly size: Dimension | [number, number]
}

/**
 * A text label that the user cannot change.
 */
declare class StaticText extends _Control {
  /**
   * Always false. This element cannot have input focus.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * The text to display, a localizable string.
   */
  text: string

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void
}

/**
 * A pushbutton element containing a mouse-sensitive text string.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class Button extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * The text to display, a localizable string.
   */
  text: string

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the element has been clicked
   */
  onClick(): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void
}

/**
 * Amouse-sensitive pushbutton that displays an image instead of text.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class IconButton extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The image object that defines the image to be drawn.
   */
  image: ScriptUIImage

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void
}

/**
 * An editable text field that the user can select and change.
 * Calls the onChange() callback if the text is changed and the user types Enter or the control loses focus, or if its notify() method is called. Calls the onChanging() callback when any change is made to the text. The textselection property contains currently selected text.
 */
declare class EditText extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * The current text displayed in the field, a localizable string.
   */
  text: string

  /**
   * The currently selected text, or the empty string if there is no text selected.
   * Setting the value replaces the current text selection and modifies the value of the text property. If there is no current selection, inserts the new value into the text string at the current insertion point. The textselection value is reset to an empty string after it modifies the text value. Note that setting the textselection property before the element’s parent Window exists is an undefined operation.
   */
  textselection: string

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the content of the element has been changed
   * The handler is called only when the change is complete—that is, when focus moves to another control, or the user types Enter. The exact behavior depends on the creation parameter enterKeySignalsOnChange;see the properties property.
   */
  onChange(): void

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for each keypress while this control has the input focus.
   */
  onChanging(): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void
}

/**
 * Displays a list of choices, represented by ListItem objects.
 * When you create the object, you specify whether it allows the user to select only one or multiple items. If a list contains more items than can be displayed in the available area, a scrollbar may appear that allows the user to scroll through all the list items.You can specify the items on creation of the list object, or afterward using the list object’s add() method. You can remove items programmatically with the list object’s remove() and removeAll() methods. You can create a list box with multiple columns; in this case, each row is a selectable choice, and each ListItem represents one row.
 */
declare class ListBox extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * An array of child ListItem elements.
   */
  readonly children: object[]

  /**
   * For a multi-column list box, the column properties.
   * A JavaScript object with two read-only properties whose values are set by the creation parameters:
   * titles: An array of column title strings, whose length matches the number of columns specified at creation.
   * preferredWidths: An array of column widths, whose length matches the number of columns specified at creation.
   * visible: An array of boolean visible attributes, whose length matches the number of columns specified at creation.This property can be used to show/hide a column. Avaiblable in ScriptUI Version 6.0 or later provided ScriptUI.frameworkName == 'Flex'.
   */
  readonly columns: object

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number]

  /**
   * The array of choice items displayed in the list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method. Each item has a selected property that is true when it is in the selected state.
   */
  readonly items: ListItem[]

  /**
   * The currently selected item for a single-selection list, or an array of items for current selection in a multi-selection list.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items. You can set the value using the index of an item or an array of indices, rather than object references. If set to an index value that is out of range, the operation is ignored. When set with index values, the property still returns object references.
   * If you set the value to an array for a single-selection list, only the first item in the array is selected.
   * If you set the value to a single item for a multi-selection list, that item is added to the current selection.
   */
  selection: ListItem

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * Adds an item to the choices in this list.
   * Returns the item control object. If this is a multi-column list box, each added ListItem represents one selectable row.Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
   * @param type The type of the child element, the string "item".
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when an item in the listbox is double-clicked
   * Check the selection property to identify the item that was double-clicked.
   */
  onDoubleClick(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index, text value, or as a ListItem object.
   */
  remove(what: any): void

  /**
   * Removes all child items from the list.
   */
  removeAll(): void
}

/**
 * Displays a single visible item. When you click the control, a list drops down or pops up, and allows you to select one of the other items in the list.
 * Drop-down lists can have nonselectable separator items for visually separating groups of related items, as in a menu. You can specify the items on creation of the list object, or afterward using the list object’s add() method. You can remove items programmatically with the list object’s remove() and removeAll() methods. Calls the onChange() callback if the item selection is changed or if its notify() method is called.
 */
declare class DropDownList extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number]

  /**
   * The array of choice items displayed in the drop-down or pop-up list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method. Items in a drop-down list can be of type separator, in which case they cannot be selected, and are shown as a horizontal line. Each item has a selected property that is true when it is in the selected state.
   */
  readonly items: ListItem[]

  /**
   * The currently selectedlist item.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.
   */
  selection: ListItem | number

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * Adds an item or separator to the choices in this list.
   * Returns the item control object for type="item", or null for type="separator".
   * @param type The type of the child element. Either item (a basic, selectable item with a text label) or separator
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index, text value, or as a ListItem object.
   */
  remove(what: any): void

  /**
   * Removes all child items from the list.
   */
  removeAll(): void
}

/**
 * An item in a list box, drop-down list, or tree view.
 * You can specify initial items in the creation parameters when creating the parent list. Create new items using the add() method (ListBox.add(), DropDownList.add(), TreeView.add()) in the parent list with control type="item", or, for DropDownList controls, type="separator".For a multi-column list box, the object represents one selectable row. Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
 */
declare class ListItem {
  /**
   * The checked state of an item in a list.
   * When true, the item is marked with the platform-appropriate checkmark. When false, no checkmark is drawn, but space is reserved for it in the left margin, so that the item lines up with other checkable items. When undefined, no space is reserved for a checkmark.
   */
  checked: boolean

  /**
   * The expansion state of an item of type node that is a child of a TreeView list control.
   * When true, the item is in the expanded state and its children are shown, when false, it is collapsed and children are hidden.
   */
  expanded: boolean

  /**
   * An image object for an icon to display in the item.
   * When specified, the image appropriate to the selections state is drawn to the left of the text label. If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the subitems property.
   */
  image: ScriptUIImage

  /**
   * The 0-based index of this item in the items collection of its parent list control.
   */
  readonly index: number

  /**
   * The parent element, a list control.
   */
  readonly parent: object

  /**
   * The selection state of this item.
   * When true, the item is part of the selection for its parent list. When false, the item is not selected. Set to true to select this item in a single-selection list, or to add it to the selection array for a multi-selection list.
   */
  selected: boolean

  /**
   * When the parent is a multi-column ListBox, this describes the labels for this selectable row in additional columns.
   * A array of JavaScript objects whose length is one less than the number of columns. The first member describes the label in the second column. Each member object has two properties, of which you can specify one or both:
   * text: A display string for the corresponding label.
   * image: An ScriptUIImage object for the corresponding label.
   */
  readonly subItems: any[]

  /**
   * The label text to display for the item, a localizable string.
   * If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the subitems property.
   */
  text: string

  /**
   * The element type.
   * Normally "item", but an item whose parent is a DropDownList control can have type "separator". A separator item is not mouse-sensitive and is drawn as a horizontal line across the drop-down or pop-up menu.
   */
  readonly type: string
}

/**
 * A dual-state control showing a box that has a checkmark when the value is true, and is empty when the value is false.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class Checkbox extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * The text to display, a localizable string.
   */
  text: string

  /**
   * The selection state of the control.
   * When true, the control is in the selected or set state and displays the check mark. When false, shows an empty box.
   */
  value: boolean

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void
}

/**
 * A scrollbar with a draggable scroll indicator and stepper buttons to move the indicator.
 * The scrollbar control has a horizontal orientation if the width is greater than the height at creation time, or vertical if its height is greater than its width.
 * Calls the onChange() callback after the position of the indicator is changed or if its notify() method is called. Calls the onChanging() callback repeatedly while the user is moving the indicator. Scrollbars are often created with an associated EditText field to display the current value of the scrollbar, and to allow setting the scrollbar's position to a specific value.
 */
declare class Scrollbar extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The amount to increment or decrement a scrollbar indicator's position when the user clicks ahead or behind the moveable element.
   * Default is 20% of the range between the maxvalue and minvalue property values.
   */
  jumpdelta: number

  /**
   * The maximum value allowed in the value property.
   * Together with minvalue, sets the scrolling range. Default is 100.
   */
  maxvalue: number

  /**
   * The minimum value allowed in the value property.
   * Together with  maxvalue, sets the scrolling range.Default is 0.
   */
  minvalue: number

  /**
   * The key sequence that invokes the  onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * The amount by which to increment or decrement a scrollbar element's position when the user clicks a stepper button.
   */
  stepdelta: number

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.
   */
  value: number

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control.
   */
  onChange(): void

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for any motion of the position indicator while this control has the input focus.
   */
  onChanging(): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void
}

/**
 * A dual-state control, grouped with other radiobuttons, of which only one can be in the selected state.
 * Shows the selected state when value=true, empty when value=false. Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class RadioButton extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * The label text for this button, a localizable string.
   */
  text: string

  /**
   * The selection state of this button, selected when true.
   */
  value: boolean

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void
}

/**
 * A slider bar that indicates a numeric value with a moveable position indicator.
 * All slider controls have a horizontal orientation. Calls the onChange() callback after the position of the indicator is changed or if its notify() method is called. Calls the onChanging() callback repeatedly while the user is moving the indicator. The value property contains the current position of the indicator within the range of minvalue to maxvalue.
 */
declare class Slider extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The maximum value allowed in the value property.
   * Together with minvalue, sets therange.Default is 100.
   */
  maxvalue: number

  /**
   * The minimum value allowed in the value property.
   * Together with maxvalue, sets the range.Default is 0.
   */
  minvalue: number

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.
   */
  value: number

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control.
   */
  onChange(): void

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for any motion of the position indicator while this control has the input focus.
   */
  onChanging(): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void
}

/**
 * A horizontal bar with an indicator that shows the progress of an operation.
 * All progressbar controls have a horizontal orientation. The value property contains the current position of the progress indicator; the default is 0. There is a minvalue property, but it is always 0; attempts to set it to a different value are silently ignored.
 */
declare class Progressbar extends _Control {
  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The maximum value in the range. Default is 100.
   */
  maxvalue: number

  /**
   * The minimum value in the range; always 0. If set to a different value, it is ignored.
   */
  minvalue: number

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by 0 to maxvalue, it is automatically reset to the closest boundary.
   */
  value: number

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void
}

/**
 * A hierarchical list whose items can contain child items.
 * The ListItem children of this control (in the items array) can be of type node, which means that they can contain child items. An item with child items can expanded, so that the child items are displayed, or collapsed, so that the child items are hidden Individual items can be selected at any level of the tree.
 */
declare class TreeView extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number]

  /**
   * The array of top-level items displayed in the list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method.
   */
  readonly items: ListItem[]

  /**
   * The currently selectedlist item.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.
   */
  selection: ListItem

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string

  /**
   * Adds an item to the top-level choices in this list.
   * Returns the item control object.
   * @param type The type of the child element, the string "item".
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void

  /**
   * An event-handler callback function, called when the user collapses (closes) an expanded node in the treeview.
   * @param item The ListItem node that collapsed.
   */
  onCollapse(item: ListItem): void

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * An event-handler callback function, called when the user expands (opens) a collapsed node in the treeview.
   * @param item The ListItem node that expanded.
   */
  onExpand(item: ListItem): void

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index in the top-level item list, text value, or as a ListItem object.
   */
  remove(what: any): void

  /**
   * Removes all child items from the list.
   */
  removeAll(): void
}

/**
 * A control that contains a Flash Player, which can load and play Flash movies stored in SWF files.
 * The ScriptUI FlashPlayer element runs the Flash application within an Adobe application. The Flash application runs ActionScript, a different implementation of JavaScript from the ExtendScript version of JavaScript that Adobe applications run. A control object of this type contains functions that allow your script to load SWF files, control movie playback, and communicate with the ActionScript environment.
 */
declare class FlashPlayer extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean

  /**
   * A function definition for a callback from the Flash ActionScript environment.
   * The Flash ActionScript code can call any callback function defined on the ExtendScript side of the FlashPlayer object, invoking it by name as a property of the control object. The function can take any arguments of a supported data types, and can return any value of a supported data type. data types:Number, String, Boolean, null, undefined, Object, Array.
   */
  callback(): void

  /**
   * Invokes an ActionScript function defined in the Flash application.
   * Returns the result of the invoked function, which must be one of the allowed types. The ActionScript class and date objects are not supported as return values.
   * @param name The name of a Flash ActionScript function that has been registered with the ExternalInterface object by the currently loaded SWF file.
   * @param argument An argument to pass through to the function. There can be any number of arguments. An argument must be one of these data types:Number, String, Boolean, null, undefined, Object, Array. No other data types are supported.
   */
  invokePlayerFunction(name: string, argument?: any): any

  /**
   * Loads a movie into the Flash Player, and begins playing it.
   * @param file The File object for the SWF file to load.
   */
  loadMovie(file: File): void

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void

  /**
   * Restarts a movie that has been stopped.
   * Do not use on a movie that is currently playing.The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented).
   * @param rewind When true, restarts the movie from the beginning; otherwise, starts playing from the	point where it was stopped.
   */
  playMovie(rewind: boolean): void

  /**
   * Halts playback of the current movie.
   * The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented).Using stopMovie() from the player's hosting environment has no effect on an SWF file playing in a ScriptUI Flash Player element. It is, however, possible to produce an SWF using Flash Authoring that can stop itself in response to user interaction.
   */
  stopMovie(): void
}

/**
 * A container for other controls within a window.
 * A group can specify layout options for its child elements. Hiding a group hides all its children. Making it visible makes visible those children that are not individually hidden.
 */
declare class Group extends _Control {
  /**
   * Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.
   * Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.
   */
  alignChildren: string

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number

  /**
   * Adds a child element to this container.
   * Creates and returns a new control or container object and adds it to the children of this group.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd

  /**
   * An event-handler callback function, called when the group is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * Removes the specified child control from this group's children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void
}

/**
 * A container for other types of controls, with an optional frame.
 * A panel can specify layout options for its child elements. Hiding a panel hides all its children. Making it visible makes visible those children that are not individually hidden.
 */
declare class Panel extends _Control {
  /**
   * Specifies how to align the child elements.
   */
  alignChildren: string

  /**
   * Reserve space for the specified number of characters; affects calculation of preferredSize .
   */
  characters: number

  /**
   * An array of child elements.
   */
  readonly children: object[]

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number

  /**
   * The title or label text, a localizable string.
   */
  text: string

  /**
   * Adds a child element to this container.
   * Creates and returns a new control or container object and adds it to the children of this group.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd

  /**
   * An event-handler callback function, called when the panel is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void

  /**
   * Removes the specified child control from this group's children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void
}

/**
 * Defines the location of a window or UI element. Contains a 2-element array.
 * Specifies the origin point of an element as horizontal and vertical pixel offsets from the origin of the element's coordinate space.
 * A Point object is created when you set an element’s location property. You can set the property using a JavaScript object with properties named x and y, or an array with 2 values in the order [x, y].
 */
declare class Point {
  /**
   * The left coordinate.
   */
  left: number

  /**
   * The array length.
   */
  readonly length: number

  /**
   * The top coordinate.
   */
  top: number

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  x: number

  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  y: number;

  [0]: number;

  [1]: number
}

/**
 * Defines the size of a window or UI element. Contains a 2-element array.
 * Specifies the height and width of an element in pixels. A Dimension object is created when you set an element’s size property. You can set the property using a JavaScript object with named properties {width: wd, height: ht}, or an array with 2 values in the order [wd, ht].
 */
declare class Dimension {
  /**
   * The height in pixels.
   */
  height: number

  /**
   * The array length.
   */
  readonly length: number

  /**
   * The width in pixels.
   */
  width: number;

  [0]: number;

  [1]: number
}

/**
 * Defines the boundaries of a window within the screen’s coordinate space, or of a UI element within the container’s coordinate space.
 * A Bounds object is created when you set an element’s bounds property. You can set the property using a JavaScript object with properties named left, top, right, bottom or x, y, width, height, or an array with 4 values in the order [x, y, wd, ht].
 */
declare class Bounds {
  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  bottom: number

  /**
   * The height in pixels.
   */
  height: number

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  left: number

  /**
   * The array length.
   */
  readonly length: number

  /**
   * The width in pixels.
   */
  right: number

  /**
   * The height in pixels.
   */
  top: number

  /**
   * The width in pixels.
   */
  width: number

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  x: number

  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  y: number;

  [0]: number;

  [1]: number;

  [2]: number;

  [3]: number
}

/**
 * Encapsulates input event information for an event that propagates through a container and control hierarchy.
 * Implements W3C standard event handling. This object is passed to a function that you register to respond to events of a certain type that occur in a window or control. Use windowObj.addEventListener() or controlObj.addEventListener() to register a handler function.
 */
declare class UIEvent {
  /**
   * True if the event is of a type that bubbles.
   */
  readonly bubbles: boolean

  /**
   * True if the default action associated with the event can be canceled with preventDefault().
   */
  readonly cancelable: boolean

  /**
   * True if this event can be captured.
   */
  readonly captures: boolean

  /**
   * The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.
   */
  readonly currentTarget: boolean

  /**
   * The click count for a mouse-click event.
   */
  readonly detail: any

  /**
   * The current phase of event propagation; one of none, target, capture, bubble.
   */
  readonly eventPhase: string

  /**
   * The event target object for this event.
   */
  readonly target: object

  /**
   * The date and time at which the event occurred.
   */
  readonly timeStamp: Date

  /**
   * The name of the event that thisobject represents.
   * Event types are listed in the JavaScript Tools Guide.
   */
  readonly type: string

  /**
   * The ScriptUI element that this event relates to.
   */
  readonly view: any

  /**
   * Creates an event.
   * The UIEvent object is normally created by ScriptUI and passed to your event handler. However, you can simulate a user action by constructing an event object and sending it to a target object’s dispatchEvent() function.
   * @param type The event type. See UIEvent.type property.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param view The ScriptUI element that this event relates to.
   * @param detail The click count for a mouse-click event.
   */
  constructor(type: string, captures: boolean, bubbles: boolean, view?: object, detail?: number)

  /**
   * Initializes a UI event as a core W3C event.
   * @param type The event type.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param cancelable Set to true if the default action is cancelable.
   */
  initEvent(type: string, captures: boolean, bubbles: boolean, cancelable: boolean): void

  /**
   * Initializes an event.
   * @param type The event type.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param view The ScriptUI element that this event relates to.
   * @param detail The click count for a mouse-click event.
   */
  initUIEvent(
    type: string,
    captures: boolean,
    bubbles: boolean,
    view?: object,
    detail?: number,
  ): void

  /**
   * Prevents the default action associated with this event from being called.
   */
  preventDefault(): void

  /**
   * Stops the propagation of this event.
   */
  stopPropagation(): void
}

/**
 * Base class for UIEvent.
 * Encapsulates input event information for an event that propagates through a container and control hierarchy.Implements W3C standard event handling.
 */
declare class Event {
  /**
   *
   */
  static readonly AT_TARGET: any

  /**
   *
   */
  static readonly BUBBLING_PHASE: any

  /**
   *
   */
  static readonly CAPTURING_PHASE: any

  /**
   *
   */
  static readonly NOT_DISPATCHING: any

  /**
   * True if the event is of a type that bubbles.
   */
  readonly bubbles: boolean

  /**
   * True if the default action associated with the event can be canceled with preventDefault().
   */
  readonly cancelable: boolean

  /**
   * True if this event can be captured.
   */
  readonly captures: boolean

  /**
   * The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.
   */
  readonly currentTarget: boolean

  /**
   * The current phase of event propagation; one of none, target, capture, bubble.
   */
  readonly eventPhase: string

  /**
   * The event target object for this event.
   */
  readonly target: object

  /**
   * The date and time at which the event occurred.
   */
  readonly timeStamp: Date

  /**
   * The name of the event that this object represents.
   * Event types are listed in the JavaScript Tools Guide.
   */
  readonly type: string

  /**
   * Prevents the default action associated with this event from being called.
   */
  preventDefault(): void

  /**
   * Stops the propagation of this event.
   */
  stopPropagation(): void
}

/**
 * Defines attributes of the ScriptUI environment.
 * Access through the ScriptUI.environment property.
 */
declare class Environment {
  /**
   * An object that reports the active state of the keyboard at any time.
   * Provides access to the key state independent of the event-handling framework.
   */
  readonly keyboardState: KeyboardState
}

/**
 * Provides access to objects used in the ScriptUI event system.
 * Access through the ScriptUI.events property.
 */
declare class Events {
  /**
   * Creates an instance of the specified Event subclass.
   * The Event returned is a UIEvent,
   * KeyboardEvent or MouseEvent object,
   * depending on the requested type. This object can be passed as a parameter to an element's dispatchEvent
   * function in order to simulate a user-interaction event.
   * @param eventType The name of an event type: one of "UIEvent", "KeyboardEvent", or "MouseEvent".
   */
  createEvent(eventType: string): Event
}

/**
 * Reports the active state of the keyboard.
 * Access through the ScriptUI.environment.keyboardState property.
 * Query the properties of this object at any time to determine the current key that is down and any modifiers that are pressed.
 */
declare class KeyboardState {
  /**
   * True if the Alt or Option key is pressed.
   */
  readonly altKey: boolean

  /**
   * True if the Ctrl key is pressed.
   */
  readonly ctrlKey: boolean

  /**
   * A string containing the name of the currently pressed key, such as "a", or an empty string.
   */
  readonly keyName: string

  /**
   * True if the Cmd key (in Mac OS) or Windows key (in Windows) is pressed.
   */
  readonly metaKey: boolean

  /**
   * True if the Shift key is pressed.
   */
  readonly shiftKey: boolean
}

/**
 * Added by types-for-adobe
 */
declare class _Control {
  /**
   * The alignment style for child elements of a container. If defined, this value overrides the alignChildren setting for the parent container.
   * This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive.
   * For orientation=row:top, bottom, fill
   * For orientation=column: left, right, fill
   * For orientation=stack:top, bottom, left, right, fill
   */
  alignment: string

  /**
   * The boundaries of the element, in parent-relative coordinates.
   * Setting an element's size or location changes its bounds property, and vice-versa.
   */
  bounds: Bounds | [number, number, number, number]

  /**
   * True if this element is enabled.
   * An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.
   */
  enabled: boolean

  /**
   * The help text that is displayed when the mouse hovers over the element.
   */
  helpTip: string

  /**
   * The number of pixels to indent the element during automatic layout.
   * Applies for column orientation and left alignment, or row orientation and top alignment.
   */
  indent: number

  /**
   * The upper left corner of this element relative to its parent.
   * The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.
   */
  location: Point | [number, number]

  /**
   * The maximum height and width to which the element can be resized.
   */
  maximumSize: Dimension | [number, number]

  /**
   * The minimum height and width to which the element can be resized.
   */
  minimumSize: Dimension | [number, number]

  /**
   * The parent element.
   */
  readonly parent: object

  /**
   * The preferred size, used by layout managers to determine the best size for each element.
   * If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes. A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.
   * To set a specific value for only one dimension, specify the other dimension as -1.
   */
  preferredSize: Dimension | [number, number]

  /**
   * The current dimensions of this element.
   * Initially undefined, and unless explicitly set by a script, it is defined by a LayoutManager . A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.
   */
  size: Dimension | [number, number]

  /**
   * The element type.
   */
  readonly type: string

  /**
   * True if this element is shown, false if it is hidden.
   * When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.
   */
  visible: boolean

  /**
   * The window that this element belongs to.
   */
  readonly window: Window

  /**
   * The bounds of this element relative to the top-level parent window.
   */
  readonly windowBounds: Bounds | [number, number, number, number]

  /**
   * Registers an event handler for a particular type of event occuring in this element.
   * @param eventName The name of the event. Event names are listed in the JavaScript Tools Guide.
   * @param handler The function that handles the event. This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the UIEvent object.
   * @param capturePhase When true, the handler is called only in the capturing phase of the event propagation. Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.
   */
  addEventListener(eventName: string, handler: Function, capturePhase?: boolean): boolean

  /**
   * Simulates the occurrence of an event in this target.
   * A script can create a UIEvent object for a specific event and pass it to this method to start the event propagation for the event.
   */
  dispatchEvent(): Event

  /**
   * Hides this element.
   */
  hide(): void

  /**
   * Unregisters an event handler for a particular type of event occuring in this element.
   * All arguments must be identical to those that were used to register the event handler.
   * @param eventName The name of the event.
   * @param handler The function that handles the event.
   * @param capturePhase Whether to call the handler only in the capturing phase of the event propagation.
   */
  removeEventListener(eventName: string, handler: Function, capturePhase?: boolean): boolean

  /**
   * Shows this element.
   * When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states.
   * If an onShow() callback is defined for a window, calls that function before showing the window.When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states. For a modal dialog, opens the dialog and does not return until the dialog is dismissed. If it is dismissed via the close() method, this method returns any result value passed to that method. Otherwise, returns 0.
   */
  show(): number | undefined
}

/**
 * Creation properties map
 * An object that contains one or more creation properties of the element (properties used only when the element is created).
 */
interface _ControlPropertiesMap {
  /**
   * Creation properties of a Button
   * But the third argument to the add() method that creates it can be the initial text value.
   * @param name A unique name for the control. Special name "ok" makes the button primary for parent dialog, and the special name "cancel" makes the button default cancel button for parent dialog.
   */
  button: {
    name: string
  }

  /**
   * Creation properties of a CheckBox
   * The third argument to the add() method that creates it is the text to be displayed.
   * @param name A unique name for the control.
   */
  checkbox: {
    name: string
  }

  /**
   * Creation properties of a DropDownList
   * @param name A unique name for the control.
   * @param items An array of strings for the text of each list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   */
  dropdownlist: {
    name: string
    items: string[]
  }

  /**
   * Creation properties of an EditText
   * @param name A unique name for the control.
   * @param multiline When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.
   * @param borderless When true, the control is drawn with no border. Default is false.
   * @param scrollable For multiline elements only. When true (the default), the text field has a vertical scrollbar that is enabled when the element contains more text than fits in the visible area. When false, no vertical scrollbar appears; if the element contains more text than fits in the visible area, the arrow keys can be used to scroll the text up and down.
   * @param readonly When false (the default), the control accepts text input. When true, the control does not accept input but only displays the contents of the text property.
   * @param noecho When false (the default), the control displays input text. When true, the control does not display input text (used for password input fields).
   * @param enterKeySignalsOnChange When false (the default), the control signals an onChange event when the editable text is changed and the control loses the keyboard focus (that is, the user tabs to another control, clicks outside the control, or types Enter). When true, the control only signals an onChange() event when the editable text is changed and the user types Enter; other changes to the keyboard focus do not signal the event.
   * @param wantReturn Only applies to multiple line edit controls in ScriptUI Version 6.0 or later. When true the RETURN/ENTER keystroke is considered as text-input advancing the cursor to the next line. The default value is false.
   */
  edittext: {
    name: string
    multiline: boolean
    borderless: boolean
    scrollable: boolean
    readonly: boolean
    noecho: boolean
    enterKeySignalsOnChange: boolean
    wantReturn: boolean
  }

  /**
   * Creation properties of a FlashPlayer
   * @param name A unique name for the control.
   */
  flashplayer: {
    name: string
  }

  /**
   * Creation properties of a Group
   * @param name A unique name for the control.
   */
  group: {
    name: string
  }

  /**
   * Creation properties of an IconButton
   * @param name A unique name for the control.
   * @param style A string for the visual style, either "button", which has a visible border with a raised or 3D appearance, or "toolbutton", which has a flat appearance, appropriate for inclusion in a toolbar.
   * @param toggle For a button-style control, a value of true causes it to get a button-pressed appearance the first time it is clicked, and alternate with the unpressed appearance each time it is clicked. The toggle state is reflected in the control’s value property.
   */
  iconbutton: {
    name: string
    style: "button" | "toolbutton"
    toggle: boolean
  }

  /**
   * Creation properties of a ListBox
   * @param name A unique name for the control.
   * @param multiselect When false (the default), only one item can be selected. When true, multiple items can be selected.
   * @param selected When true, multiple items can be selected.
   * @param items An array of strings for the text of each list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   * @param numberOfColumns A number of columns in which to display the items; default is 1. When there are multiple columns, each ListItem object represents a selectable row. Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
   * @param showHeaders True to display column titles.
   * @param columnWidths An array of numbers for the preferred width in pixels of each column.
   * @param columnTitles A corresponding array of strings for the title of each column, to be shown if showHeaders is true.
   */
  listbox: {
    name: string
    multiselect: boolean
    selected: boolean
    items: string[]
    numberOfColumns: number
    showHeaders: boolean
    columnWidths: number[]
    columnTitles: string[]
  }

  /**
   * Creation properties of a Panel
   * @param name A unique name for the control.
   * @param borderStyle A string that specifies the appearance of the border drawn around the panel. One of black, etched, gray, raised, sunken. Default is etched.
   * @param su1PanelCoordinates Photoshop only. When true, this panel automatically adjusts the positions of its children for compatability with Photoshop CS. Default is false, meaning that the panel does not adjust the positions of its children, even if the parent window has automatic adjustment enabled.
   */
  panel: {
    name: string
    borderStyle: string
    su1PanelCoordinates: boolean
  }

  /**
   * Creation properties of a ProgressBar
   * The third argument of the add() method that creates it is the initial value (default 0), and the fourth argument is the maximum value of the range (default 100).
   * @param name A unique name for the control.
   */
  progressbar: {
    name: string
  }

  /**
   * Creation properties of a RadioButton
   * The third argument of the add() method that creates can be the label text.
   * @param name A unique name for the control.
   */
  radiobutton: {
    name: string
  }

  /**
   * Creation properties of a Scrollbar
   * The third argument of the add() method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.
   * @param name A unique name for the control.
   */
  scrollbar: {
    name: string
  }

  /**
   * Creation properties of a Slider
   * The third argument of the add() method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.
   * @param name A unique name for the control.
   */
  slider: {
    name: string
  }

  /**
   * Creation properties of a StaticText
   * @param name A unique name for the control.
   * @param multiline When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.
   * @param scrolling When false (the default), the displayed text cannot be scrolled. When true, the displayed text can be vertically scrolled using the Up Arrow and Down Arrow; this case implies multiline=true.
   * @param truncate If middle or end, defines where to remove characters from the text and replace them with an ellipsis if the specified title does not fit within the space reserved for it. If none, and the text does not fit, characters are removed from the end, without any replacement ellipsis character.
   */
  statictext: {
    name: string
    multiline: boolean
    scrolling: boolean
    truncate: string
  }

  /**
   * Creation properties of a TreeView
   * @param name A unique name for the control.
   * @param items An array of strings for the text of each top-level list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   */
  treeview: {
    name: string
    items: string[]
  }

  /**
   * Creation properties of a Window
   * @param resizeable When true, the window can be resized by the user. Default is false.
   * @param su1PanelCoordinates Photoshop only. When true, the child panels of this window automatically adjust the positions of their children for compatability with Photoshop CS (in which the vertical coordinate was measured from outside the frame). Default is false. Individual panels can override the parent window’s setting.
   * @param closeButton Bridge only. When true, the title bar includes a button to close the window, if the platform and window type allow it. When false, it does not. Default is true. Not used for dialogs.
   * @param maximizeButton Bridge only. When true, the title bar includes a button to expand the window to its maximum size (typically, the entire screen), if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Not used for dialogs.
   * @param minimizeButton Bridge only. When true, the title bar includes a button to minimize or iconify the window, if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Main windows cannot have a minimize button in Mac OS. Not used for dialogs.
   * @param independent When true, a window of type window is independent of other application windows, and can be hidden behind them in Windows. In Mac OS, has no effect. Default is false.
   * @param borderless When true, the window has no title bar or borders. Properties that control those features are ignored.
   */
  window: {
    resizeable: boolean
    su1PanelCoordinates: boolean
    closeButton: boolean
    maximizeButton: boolean
    minimizeButton: boolean
    independent: boolean
    borderless: boolean
  }

  /**
   * A ListItem object has no creation properties.
   */
  listitem: {}
}

interface _WindowPanelGroupAdd {
  (
    type: "button",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["button"]>,
  ): Button
  (
    type: "checkbox",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["checkbox"]>,
  ): Checkbox
  (
    type: "dropdownlist",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["dropdownlist"]>,
  ): DropDownList
  (
    type: "edittext",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["edittext"]>,
  ): EditText
  (
    type: "flashplayer",
    bounds?: Bounds | [number, number, number, number],
    movieToLoad?: string | File,
    properties?: Partial<_ControlPropertiesMap["flashplayer"]>,
  ): FlashPlayer
  (type: "group", bounds?: Bounds | [number, number, number, number], properties?: Partial<_ControlPropertiesMap["group"]>): Group
  (
    type: "iconbutton",
    bounds?: Bounds | [number, number, number, number],
    icon?: string | File,
    properties?: Partial<_ControlPropertiesMap["iconbutton"]>,
  ): IconButton
  (
    type: "listbox",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["listbox"]>,
  ): ListBox
  (
    type: "panel",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["panel"]>,
  ): Panel
  (
    type: "progressbar",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["progressbar"]>,
  ): Progressbar
  (
    type: "radiobutton",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["radiobutton"]>,
  ): RadioButton
  (
    type: "scrollbar",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    min?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["scrollbar"]>,
  ): Scrollbar
  (
    type: "slider",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    min?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["slider"]>,
  ): Slider
  (
    type: "statictext",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["statictext"]>,
  ): StaticText
  (
    type: "treeview",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["treeview"]>,
  ): TreeView
}

interface ExternalObjectConstructor {
  readonly prototype: ExternalObject

  /**
   * Creates a new ExternalObject object.
   */
  new (lib: string): ExternalObject
  (lib: string): ExternalObject
}
declare const ExternalObject: ExternalObjectConstructor

interface ExternalObject {
  /**
   * Set to true to write status information to standard output (the
   * JavaScript Console in the ExtendScript Toolkit). Set to false to turn
   * logging off. Default is false.
   */
  log: boolean

  /**
   * A set of alternate paths in which to search for the shared library files, a
   * single string with multiple path specifications delimited by semicolons
   * (;). Paths can be absolute or relative to the Folder.startup location.
   */
  searchFolders: string

  /**
   * The version of the library, as returned by ESGetVersion()
   */
  version: number

  /**
   * Reports whether a compiled C/C++ library can be found, but does not load it. If logging is on, the
   * paths searched are reported to the JavaScript Console in the ExtendScript Toolkit.
   * Returns true if the library is found, false otherwise.
   * @param spec The file specification for the compiled library, with or without path information.
   */
  search(spec: string): boolean

  /**
   * Explicitly shuts down the ExternalObject dynamic library wrapped by this instance.
   * It can be helpful to force a shutdown of the external library if termination of external libraries during
   * the shutdown of the hosting application does not occur in the correct order.
   */
  terminate(): undefined
}

interface CSXSEventConstructor {
  readonly prototype: CSXSEvent

  /**
   * Creates a new CSXSEvent object.
   */
  new (type?: string, scope?: string, data?: string): CSXSEvent
  (type?: string, scope?: string, data?: string): CSXSEvent
}
declare const CSXSEvent: CSXSEventConstructor

interface CSXSEvent {
  /**
   * Retrieves the unique identifier of the application from which this event was dispatched.
   */
  readonly appId: string

  /**
   * Retrieves or sets the payload of this event.
   */
  data: string

  /**
   * Retrieves the unique identifier of the extension from which this event was dispatched.
   */
  readonly extensionId: string

  /**
   * Retrieves the scope of this event.
   */
  scope: string

  /**
   * Retrieves the type of this event.
   */
  type: string

  /**
   * Dispatch the event
   */
  dispatch(): void
}
`;

let AUDTshim = `/**
 * The $ object provides a number of debugging facilities and informational methods.
 */
interface $ {
  /**
   * The ExtendScript build information.
   */
  readonly build: string;

  /**
   * The ExtendScript build date.
   */
  readonly buildDate: Date;

  /**
   * The character used as the decimal point character in formatted numeric output.
   */
  decimalPoint: string;

  /**
   * The name of the current ExtendScript engine, if set.
   */
  readonly engineName: string;

  /**
   * The most recent run-time error information.
   * Assigning error text to this property generates a run-time error; however, the preferred way to generate a run-time error is to throw an Error object.
   */
  error: Error;

  /**
   * The file name of the current script.
   */
  readonly fileName: string;

  /**
   * Gets or sets low-level debug output flags.
   * A logical AND of bit flag values:
   * 0x0002 (2): Displays each line with its line number as it is executed.
   * 0x0040 (64): Enables excessive garbage collection. Usually, garbage collection starts when the number of objects has increased by a certain amount since the last garbage collection. This flag causes ExtendScript to garbage collect after almost every statement. This impairs performance severely, but is useful when you suspect that an object gets released too soon.
   * 0x0080 (128): Displays all calls with their arguments and the return value.
   * 0x0100 (256): Enables extended error handling (see strict).
   * 0x0200 (512): Enables the localization feature of the toString method. Equivalent to the localize property.
   */
  flags: number;

  /**
   * A reference to the global object, which contains the JavaScript global namespace.
   */
  readonly global: any;

  /**
   * A high-resolution timer, measuring the time in microseconds. The timer starts when ExtendScript is
   * initialized during the application startup sequence. Every read access resets the timer to Zero.
   */
  readonly hiresTimer: number;

  /**
   * The path for include files for the current script.
   */
  readonly includePath: string;

  /**
   * The current debugging level, which enables or disables the JavaScript debugger.
   * One of 0 (no debugging), 1 (break on runtime errors), or 2 (full debug mode).
   */
  level: number;

  /**
   * The current line number of the currently executing script.
   */
  readonly line: number;

  /**
   * Gets or sets the current locale.
   * The string contains five characters in the form LL_RR, where LL is an ISO 639 language specifier, and RR is an ISO 3166 region specifier.Initially, this is the value that the application or the platform returns for the current user. You can set it to temporarily change the locale for testing. To return to the application or platform setting, set to undefined, null, or the empty string.
   */
  locale: string;

  /**
   * Set to true to enable the extended localization features of the built-in toString() method.
   */
  localize: boolean;

  /**
   * The ExtendScript memory cache size, in bytes.
   */
  memCache: number;

  /**
   * The current operating system version information.
   */
  readonly os: string;

  /**
   * An array of objects containing information about the display screens attached to your computer.
   * Each object has the properties left, top, right, bottom, which contain the four corners of each screen in global coordinates.A property primary is true if that object describes the primary display.
   */
  readonly screens: object[];

  /**
   * The current stack trace.
   */
  readonly stack: string;

  /**
   * Sets or clears strict mode for object modification.
   * When true, any attempt to write to a read-only property causes a runtime error. Some objects do not permit the creation of new properties when true.
   */
  strict: any;

  /**
   * The version number of the ExtendScript engine.
   * Formatted as a three-part number and description; for example: "3.92.95 (debug)".
   */
  readonly version: string;

  /**
   * Shows an About box for the ExtendScript component, and returns the text for the box.
   */
  about(): string;

  /**
   * Breaks execution at the current position.
   * @param condition A string containing a JavaScript statement to be used as a condition. If the statement evaluates to true or nonzero when this point is reached, execution stops.
   */
  bp(condition?: any): void;

  /**
   * Invokes the platform-specific color selection dialog, and returns the selected color.
   * @param color The color to be preselected in the dialog, as 0xRRGGBB, or -1 for the platform default.
   */
  colorPicker(color: number): number;

  /**
   * Loads and evaluates a file.
   * @param file The file to load.
   * @param timeout An optional timeout in milliseconds.
   */
  evalFile(file: File, timeout?: number): any;

  /**
   * Initiates garbage collection in the ExtendScript engine.
   */
  gc(): void;

  /**
   * Retrieves the value of an environment variable.
   * @param name The name of the variable.
   */
  getenv(name: string): string;

  /**
   * Sets the value of an environment variable.
   * @param name The name of the variable.
   * @param value The value of the variable.
   */
  setenv(name: string, value: string): void;

  /**
   * Suspends the calling thread for a number of milliseconds.
   * During a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated. This can happen if there is a break request, or if the script timeout has expired.
   * @param msecs Number of milliseconds to sleep.
   */
  sleep(msecs: number): void;

  /**
   * Converts this object to a string.
   */
  toString(): string;

  /**
   * Prints text to the Console.
   * @param text The text to print. All arguments are concatenated.
   */
  write(text: any): void;

  /**
   * Prints text to the Console, and adds a newline character.
   * @param text The text to print. All arguments are concatenated.
   */
  writeln(text: any): void;
}
declare const $: $;

/**
 * The global BridgeTalk object.
 */
declare var BridgeTalk: any;

/**
 * The Infinity global property is a predefined variable with the value for infinity.
 */
declare var Infinity: number;

/**
 * The NaN global property is a predefined variable with the value NaN (Not-a-Number), as specified by the IEEE-754 standard.
 */
declare var NaN: number;

/**
 * The application object
 */
declare var app: Application;
declare interface Application {}

/**
 * Displays an alert box
 * @param message The text to display
 * @param title The title of the alert; ignored on the Macintosh
 * @param errorIcon Display an Error icon; ignored on the Macintosh
 */
declare function alert(
  message: string,
  title?: string,
  errorIcon?: boolean
): void;

/**
 * Displays an alert box with Yes and No buttons; returns true for Yes
 * @param message The text to display
 * @param noAsDefault Set to true to set the No button as the default button
 * @param title The title of the alert; ignored on the Macintosh
 */
declare function confirm(
  message: string,
  noAsDefault?: boolean,
  title?: string
): boolean;

/**
 * Decodes a string created with encodeURI().
 * @param uri The text to decode.
 */
declare function decodeURI(uri: string): string;

/**
 * Decodes a string created with encodeURIComponent().
 * @param uri The text to decode.
 */
declare function decodeURIComponent(uri: string): string;

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'();/?:@&=+$,#. The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURI(text: string): string;

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'(). The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURIComponent(text: string): string;

/**
 * Creates a URL-encoded string from aString.
 * In the new string, characters of aString that require URL encoding are replaced with the format %xx, where xx is the hexadecimal value of the character code in the Unicode character set.This format is used to transmit information appended to a URL during, for example, execution of the GET method.Use the unescape() global function to translate the string back into its original format. Returns a string which is aString URL-encoded.
 * @param aString The string to be encoded.
 */
declare function escape(aString: string): string;

/**
 * Evaluates its argument as a JavaScript script, and returns the result of evaluation.
 * You can pass the result of an object's toSource() method to reconstruct that object.
 * @param stringExpression The string to evaluate.
 */
declare function eval(stringExpression: string): any;

/**
 * Evaluates an expression and reports whether the result is a finite number.
 * Returns true if the expression is a finite number, false otherwise. False if the value is infinity or negative infinity.
 * @param expression Any valid JavaScript expression.
 */
declare function isFinite(expression: number): boolean;

/**
 * Evaluates an expression and reports whether the result is "Not-a-Number" (NaN).
 * Returns true if the result of evaluation is not a number (NaN), false if the value is a number.
 * @param expression Any valid JavaScript expression.
 */
declare function isNaN(expression: number): boolean;

/**
 * Returns true if the supplied string is a valid XML name.
 * @param name The XML name to test.
 */
declare function isXMLName(name: string): boolean;

/**
 * Localizes a ZString-encoded string and merges additional arguments into the string.
 * @param what The string to localize. A ZString-encoded string that can contain placeholder for additional arguments in the form %1 to %n.
 * @param arguments Optional argument(s) to be merged into the string. There may be more than one argument.
 */
declare function localize(what: string, ...arguments: any[]): string;

/**
 * Extracts a floating-point number from a string.
 * Parses a string to find the first set of characters that can be converted to a floating point number, and returns that number, or NaN if it does not encounter characters that it can converted to a number.The function supports exponential notation.
 * @param text The string from which to extract a floating point number.
 */
declare function parseFloat(text: string): number;

/**
 * Extracts an integer from a string.
 * Parses a string to find the first set of characters, in a specified base, that can be converted to an integer, and returns that integer, or NaN if it does not encounter characters that it can convert to a number.
 * @param text The string from which to extract an integer.
 * @param base The base of the string to parse (from base 2 to base 36). If not supplied, base is determined by the format of string.
 */
declare function parseInt(text: string, base?: number): number;

/**
 * Displays a dialog allowing the user to enter text
 * Returns null if the user cancelled the dialog, the text otherwise
 * @param prompt The text to display
 * @param default_ The default text to preset the edit field with
 * @param title The title of the dialog;
 */
declare function prompt(
  prompt: string,
  default_?: string,
  title?: string
): string;

/**
 * Defines the default XML namespace.
 * This is a replacement function for the standard JavaScript statement set default xml namespace.
 * @param namespace The namespace to use. Omit this parameter to return to the empty namespace. This is either a Namespace object or a string.
 */
declare function setDefaultXMLNamespace(namespace: Namespace): void;

/**
 * Translates URL-encoded string into a regular string, and returns that string.
 * Use the escape() global function to URL-encode strings.
 * @param stringExpression The URL-encoded string to convert.
 */
declare function unescape(stringExpression: string): string;

/**
 * Creates a source code representation of the supplied argument, and returns it as a string.
 * @param what The object to uneval.
 */
declare function uneval(what: any): string;

/**
 * The Metadata class provides access to document metadata
 */
declare class Metadata {
  /**
   * XMP metatdata string of the according document
   */
  xmp: string;
}

/**
 * DynamicLink provides access to DynamicLink objects.
 */
declare class DynamicLink {
  /**
   * AMEServer object identifier
   */
  static readonly AMEServer: string;

  /**
   *
   */
  static __(): any;

  /**
   *
   * @param name Create connection to the named DynaicLink object Create Connection.
   */
  static createConnection(name: string): object;
}

/**
 * An event to inform about connection status changes
 */
declare class DynamicLinkConnectionEvent {
  /**
   * An event with this type is propagated if the connection state to a DynamikLink server object has changed
   * Connection state to DynamikLink server object changed event type
   */
  static readonly EVENT_CONNECTION: string;

  /**
   * Return connection status.
   */
  readonly isConnected: boolean;

  /**
   * Return server name.
   */
  readonly serverName: string;

  /**
   *
   */
  static __(): any;
}

/**
 * UIControl event object
 */
declare class UIControlEvent {
  /**
   * A UI control is about to change its value.
   */
  static readonly EVENT_VALUE_CHANGED: string;

  /**
   * Absolut path to UI control.
   */
  readonly ctrlPath: string;

  /**
   *
   */
  static __(): any;
}

/**
 * An object that represents a particular multitrack document.
 */
declare class MultitrackDocument {
  /**
   * Collection of all currently selected audio clips of this multitrack document.
   */
  readonly audioClipSelection: AudioClipSelectionCollection;

  /**
   * Collection of all audio tracks of the multitrack document.
   */
  readonly audioTracks: MixedAudioTrackCollection;

  /**
   * Display name of the document as shown in the UI. It doesn't necessarily refers to the file name without filename extension.
   */
  readonly displayName: string;

  /**
   * Duration in samples
   */
  readonly duration: number;

  /**
   * Unique identifier of this document.
   */
  readonly id: string;

  /**
   * Returns an array of marker objects. Each marker object consists of the properties 'start' 'length' 'name' 'description' and 'type'.
   */
  readonly markers: any[];

  /**
   * Returns the document's current metadata as a vanilla Object. Each property is readonly and represents an metadata entry.
   */
  readonly metadata: Metadata;

  /**
   * Returns a platform-specific path to the document on disk or empty if it doesn't currently have a path.
   */
  readonly path: string;

  /**
   * The current playhead position in samples
   */
  playheadPosition: number;

  /**
   * The audio sample rate (Hz) of the current document.
   */
  readonly sampleRate: number;

  /**
   * Makes the current document the active (front-most) document.
   */
  activate(): boolean;

  /**
   *
   * @param start
   * @param duration
   * @param name
   * @param type
   * @param description Add a new marker to the document. Possible marker types are 'cue' 'track' 'cart' 'subclip'
   */
  addMarker(
    start: number,
    duration: number,
    name: string,
    type: string,
    description: string
  ): boolean;

  /**
   * Close the document. Returns false if the document can't be closed right now (e.g. due to ongoing document operations)
   */
  closeDocument(): boolean;
}

/**
 * Represents any waveform document
 */
declare class WaveDocument {
  /**
   * The audio format of the document (sample rate bit depth channel layout)
   */
  readonly audioFormat: object;

  /**
   * Returns that amount of progress from 0 to 100 for the document's current operation.
   */
  readonly busyProgress: number;

  /**
   * Display name of the document as shown in the UI. It doesn't necessarily refers to the file name without filename extension.
   */
  readonly displayName: string;

  /**
   * Duration in samples
   */
  readonly duration: number;

  /**
   * true if the document exists.
   */
  readonly exists: boolean;

  /**
   * Unique identifier of this document.
   */
  readonly id: string;

  /**
   * true if the document is busy (e.g. in the process of being saved).
   */
  readonly isBusy: boolean;

  /**
   * Returns an array of marker objects. Each marker object consists of the properties 'start' 'length' 'name' 'description' and 'type'.
   */
  readonly markers: any[];

  /**
   * Returns the document's current metadata as a vanilla Object. Each property is readonly and represents an metadata entry.
   */
  readonly metadata: Metadata;

  /**
   * Returns a platform-specific path to the document on disk or empty if it doesn't currently have a path.
   */
  readonly path: string;

  /**
   * The current playhead position in samples
   */
  playheadPosition: number;

  /**
   * The audio sample rate (Hz) of the current document.
   */
  readonly sampleRate: number;

  /**
   * Makes the current document the active (front-most) document.
   */
  activate(): boolean;

  /**
   *
   * @param start
   * @param duration
   * @param name
   * @param type
   * @param description Add a new marker to the document. Possible marker types are 'cue' 'track' 'cart' 'subclip'
   */
  addMarker(
    start: number,
    duration: number,
    name: string,
    type: string,
    description: string
  ): boolean;

  /**
   *
   * @param name Apply a registered favorite to this document
   */
  applyFavorite(name: string): boolean;

  /**
   * Close the document. Returns false if the document can't be closed right now (e.g. due to ongoing document operations)
   */
  closeDocument(): boolean;

  /**
   *
   * @param path
   * @param export_ Save the document at the given location. Do an export if the parameter 'export' is true. Returns true on success.
   */
  saveAs(path: string, export_: boolean): boolean;
}

/**
 * Collection of audio tracks of the according multitrack document.
 */
declare class AudioTrackCollection {
  /**
   * Returns an audio track by its index
   */
  readonly index: AudioTrack;

  /**
   * Number of audio tracks.
   */
  readonly length: number;

  /**
   *
   * @param layout Add new track
   */
  add(layout: AudioChannelLayout): AudioTrack;

  /**
   *
   * @param name Return audio track by its name
   */
  getAudioTrack(name: string): AudioTrack;

  /**
   *
   * @param track Remove track
   */
  remove(track: AudioTrack): boolean;
}

/**
 * Represents a single audio track of a multitrack document.
 */
declare class AudioTrack {
  /**
   * Audio bus track type.
   */
  static readonly AUDIOTRACKTYPE_BUS: number;

  /**
   * Audio clip track type.
   */
  static readonly AUDIOTRACKTYPE_CLIP: number;

  /**
   * Audio master track type.
   */
  static readonly AUDIOTRACKTYPE_MASTER: number;

  /**
   * Unknown track type
   */
  static readonly AUDIOTRACKTYPE_UNKOWN: number;

  /**
   *
   */
  readonly ancestor: any;

  /**
   * True if this track is armed for record
   */
  armed: boolean;

  /**
   * Collection of all currently selected audio clips of this track.
   */
  readonly audioClipSelection: AudioClipSelectionCollection;

  /**
   * Collection of all audio clips of this track.
   */
  readonly audioClips: AudioClipCollection;

  /**
   * The audio format of the track (sample rate bit depth channel layout)
   */
  readonly audioFormat: object;

  /**
   * Unique id of the track.
   */
  readonly id: number;

  /**
   * True if this track is muted
   */
  mute: boolean;

  /**
   * Get the name of this track.
   */
  name: string;

  /**
   * Selection state of the track.
   */
  selected: boolean;

  /**
   * True if this track is soloed
   */
  solo: boolean;

  /**
   * Type of the track. The value is one of AUDIOTRACKTYPE_CLIP AUDIOTRACKTYPE_BUS AUDIOTRACKTYPE_MASTER or AUDIOTRACKTYPE_UNKOWN
   */
  readonly type: number;

  /**
   *
   */
  static __(): any;

  /**
   *
   */
  static addEventListener(): any;

  /**
   *
   */
  static removeEventListener(): any;
}

/**
 * AudioFormat describes the format in the form of the sample rate, the bit depth and the channel layout.
 */
declare class AudioFormat {
  /**
   * 16 bit signed integer
   */
  static readonly SAMPLETYPE_16: number;

  /**
   * 24 bit signed integer
   */
  static readonly SAMPLETYPE_24: number;

  /**
   * 32 bit floating point
   */
  static readonly SAMPLETYPE_32: number;

  /**
   * 8 bit unsigned integer
   */
  static readonly SAMPLETYPE_8: number;

  /**
   * Bit depth of a sample as well as its data format. Always normalized to 8 bit unsigned integer 16 bit signed integer little endian 24 bit signed integer little endian packed or 32 bit floating point (range -1.0 to 1.0)
   */
  bitDepth: number;

  /**
   * Channel layout
   */
  channelLayout: object;

  /**
   * Samplerate
   */
  sampleRate: number;

  /**
   *
   * @param samplerate
   * @param bitDepth
   * @param channelLayout Constructs a new AudioFormat object.
   */
  constructor(
    samplerate: number,
    bitDepth: number,
    channelLayout: AudioChannelLayout
  );

  /**
   *
   */
  static __(): any;
}

/**
 * Collection of selected audio clips.
 */
declare class AudioClipSelectionCollection {
  /**
   * Returns an audio clip by its index
   */
  readonly index: AudioClipCollection;

  /**
   * Number of audio clips.
   */
  readonly length: number;

  /**
   *
   * @param AudioClip Add clip to the selection.
   */
  add(AudioClip: any): object;

  /**
   * Clear the selection
   */
  clear(): boolean;

  /**
   *
   * @param AudioClipSelectionCollection Remove clip from the selection.
   */
  remove(AudioClipSelectionCollection: any): boolean;
}

/**
 * This events is fired if one or more documents related event happened.
 */
declare class AudioClipEvent {
  /**
   * This event is fired after a clip was added to a multitrack document.
   */
  static readonly EVENT_ADDED: string;

  /**
   * This event is fired after a clip was moved within a multitrack document.
   */
  static readonly EVENT_MOVED: string;

  /**
   * This event is fired after a clip was removed from a multitrack document.
   */
  static readonly EVENT_REMOVED: string;

  /**
   * Unique clip ID.
   */
  readonly clipID: string;

  /**
   * Unique document ID.
   */
  readonly documentID: string;

  /**
   * Document file path.
   */
  readonly path: string;

  /**
   * Unique track ID.
   */
  readonly trackID: number;

  /**
   * Track name.
   */
  readonly trackName: string;

  /**
   *
   */
  static __(): any;
}

/**
 * Collection of audio clips of the according audio track.
 */
declare class AudioClipCollection {
  /**
   * Returns an audio clip by its index
   */
  readonly index: AudioClipCollection;

  /**
   * Number of audio clips.
   */
  readonly length: number;

  /**
   *
   * @param AudioClip
   * @param sourceChannelRouting Add new clip to the track based on the passed in document or move the passed in clip to this track.
   */
  add(AudioClip: any, sourceChannelRouting: any): object;

  /**
   *
   * @param AudioClipCollection Remove clip from this track.
   */
  remove(AudioClipCollection: any): boolean;
}

/**
 * An object representing a particular audio clip as part of a multitrack session.
 */
declare class AudioClip {
  /**
   *
   */
  readonly ancestor: any;

  /**
   * The audio format of the clip (sample rate bit depth channel layout)
   */
  readonly audioFormat: object;

  /**
   * The end time of the clip measured in samples (exclusive) at the multitrack document's sample rate.
   */
  readonly endTime: number;

  /**
   * Unique id of the clip.
   */
  readonly id: string;

  /**
   * Document associated with this clip.
   */
  link: object;

  /**
   * The name of the clip.
   */
  readonly name: string;

  /**
   * Selection state of this audio clip.
   */
  readonly selected: boolean;

  /**
   * Mapping of source channels to clip channels. The array contains indices of source channels which are routed to the according clip channels. The array has to have as many source channel indices as there are clip channels. Each source channel can be routed to exactly one clip channel.
   */
  sourceChannelRouting: any[];

  /**
   * The start time of the clip measured in samples at the multitrack document's sample rate.
   */
  startTime: number;
}

/**
 * AudioChannelLayout represents a channel layout with named channels proved as constants AUDIOCHANNELLABEL_ ... An AudioChannelLayout can be created using an Array of these constants or it could be created using one of the constants CHANNELLAYOUT_ ... to create a common layout.
 */
declare class AudioChannelLayout {
  /**
   * Ambisonic-W
   */
  static readonly AUDIOCHANNELLABEL_AMBISONIC_W: number;

  /**
   * Ambisonic-X
   */
  static readonly AUDIOCHANNELLABEL_AMBISONIC_X: number;

  /**
   * Ambisonic-Y
   */
  static readonly AUDIOCHANNELLABEL_AMBISONIC_Y: number;

  /**
   * Ambisonic-Z
   */
  static readonly AUDIOCHANNELLABEL_AMBISONIC_Z: number;

  /**
   * Back-Center
   */
  static readonly AUDIOCHANNELLABEL_BACKCENTER: number;

  /**
   * Back-Left
   */
  static readonly AUDIOCHANNELLABEL_BACKLEFT: number;

  /**
   * Back-Right
   */
  static readonly AUDIOCHANNELLABEL_BACKRIGHT: number;

  /**
   * Bottom-Front-Center
   */
  static readonly AUDIOCHANNELLABEL_BOTTOMFRONTCENTER: number;

  /**
   * Bottom-Front-Left
   */
  static readonly AUDIOCHANNELLABEL_BOTTOMFRONTLEFT: number;

  /**
   * Bottom-Front-Right
   */
  static readonly AUDIOCHANNELLABEL_BOTTOMFRONTRIGHT: number;

  /**
   * Discrete
   */
  static readonly AUDIOCHANNELLABEL_DISCRETE: number;

  /**
   * Front-Center
   */
  static readonly AUDIOCHANNELLABEL_FRONTCENTER: number;

  /**
   * Front-Left
   */
  static readonly AUDIOCHANNELLABEL_FRONTLEFT: number;

  /**
   * Front-Left-Of-Center
   */
  static readonly AUDIOCHANNELLABEL_FRONTLEFTOFCENTER: number;

  /**
   * Front-Left-Wide
   */
  static readonly AUDIOCHANNELLABEL_FRONTLEFTWIDE: number;

  /**
   * Front-Right
   */
  static readonly AUDIOCHANNELLABEL_FRONTRIGHT: number;

  /**
   * Front-Right-Of-Center
   */
  static readonly AUDIOCHANNELLABEL_FRONTRIGHTOFCENTER: number;

  /**
   * Front-Right-Wide
   */
  static readonly AUDIOCHANNELLABEL_FRONTRIGHTWIDE: number;

  /**
   * Left-Height
   */
  static readonly AUDIOCHANNELLABEL_LEFTHEIGHT: number;

  /**
   * Left-Total
   */
  static readonly AUDIOCHANNELLABEL_LEFTTOTAL: number;

  /**
   * LFE2
   */
  static readonly AUDIOCHANNELLABEL_LFE2: number;

  /**
   * Low-Frequency
   */
  static readonly AUDIOCHANNELLABEL_LOWFREQUENCY: number;

  /**
   * Proximity-Left
   */
  static readonly AUDIOCHANNELLABEL_PROXIMITYLEFT: number;

  /**
   * Proximity-Right
   */
  static readonly AUDIOCHANNELLABEL_PROXIMITYRIGHT: number;

  /**
   * Rear-Surround-Left
   */
  static readonly AUDIOCHANNELLABEL_REARSURROUNDLEFT: number;

  /**
   * Rear-Surround-Right
   */
  static readonly AUDIOCHANNELLABEL_REARSURROUNDRIGHT: number;

  /**
   * Right-Height
   */
  static readonly AUDIOCHANNELLABEL_RIGHTHEIGHT: number;

  /**
   * Right-Total
   */
  static readonly AUDIOCHANNELLABEL_RIGHTTOTAL: number;

  /**
   * Side-Left
   */
  static readonly AUDIOCHANNELLABEL_SIDELEFT: number;

  /**
   * Side-Right
   */
  static readonly AUDIOCHANNELLABEL_SIDERIGHT: number;

  /**
   * Top-Back-Center
   */
  static readonly AUDIOCHANNELLABEL_TOPBACKCENTER: number;

  /**
   * Top-Back-Left
   */
  static readonly AUDIOCHANNELLABEL_TOPBACKLEFT: number;

  /**
   * Top-Back-Right
   */
  static readonly AUDIOCHANNELLABEL_TOPBACKRIGHT: number;

  /**
   * Top-Center
   */
  static readonly AUDIOCHANNELLABEL_TOPCENTER: number;

  /**
   * Top-Front-Center
   */
  static readonly AUDIOCHANNELLABEL_TOPFRONTCENTER: number;

  /**
   * Top-Front-Left
   */
  static readonly AUDIOCHANNELLABEL_TOPFRONTLEFT: number;

  /**
   * Top-Front-Right
   */
  static readonly AUDIOCHANNELLABEL_TOPFRONTRIGHT: number;

  /**
   * 6 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right
   */
  static readonly CHANNELLAYOUT_51: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Front-Left-Of-Center Front-Right-Of-Center
   */
  static readonly CHANNELLAYOUT_7_1: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Back-Left Back-Right Front-Center Low-Frequency Front-Left-Of-Center Front-Right-Of-Center
   */
  static readonly CHANNELLAYOUT_7_1EMAGIC: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Rear-Surround-Left Rear-Surround-Right
   */
  static readonly CHANNELLAYOUT_7_1ITU: number;

  /**
   * 8 Channel Configuration Front-Center Front-Left-Of-Center Front-Right-Of-Center Front-Left Front-Right Back-Left Back-Right Low-Frequency
   */
  static readonly CHANNELLAYOUT_7_1MPEG: number;

  /**
   * 4 Channel Configuration Ambisonic-W Ambisonic-X Ambisonic-Y Ambisonic-Z
   */
  static readonly CHANNELLAYOUT_AMBISONICSBFORMAT: number;

  /**
   * 2 Channel Configuration Bottom-Front-Left Bottom-Front-Right
   */
  static readonly CHANNELLAYOUT_BFL_BFR: number;

  /**
   * 6 Channel Configuration Front-LeftFront-Right Front-Center Low-Frequency Back-Left Back-Right
   */
  static readonly CHANNELLAYOUT_BROADCAST51: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Back-Left Back-Right Top-Front-Left Top-Front-Right Top-Back-Left Top-Back-Right
   */
  static readonly CHANNELLAYOUT_CUBE: number;

  /**
   * 2 Channel Configuration Front-Center Low-Frequency
   */
  static readonly CHANNELLAYOUT_C_LFE: number;

  /**
   * 3 Channel Configuration Front-Center Front-Left Front-Right
   */
  static readonly CHANNELLAYOUT_C_L_R: number;

  /**
   * 4 Channel Configuration Front-Center Front-Left Front-Right Back-Center
   */
  static readonly CHANNELLAYOUT_C_L_R_CS: number;

  /**
   * 5 Channel Configuration Front-Center Front-Left Front-Right Back-Left Back-Right
   */
  static readonly CHANNELLAYOUT_C_L_R_LS_RS: number;

  /**
   * 6 Channel Configuration Front-Center Front-Left Front-Right Back-Left Back-Right Back-Center
   */
  static readonly CHANNELLAYOUT_C_L_R_LS_RS_CS: number;

  /**
   * 7 Channel Configuration Front-Center Front-Left Front-Right Back-Left Back-Right Back-Center Low-Frequency
   */
  static readonly CHANNELLAYOUT_C_L_R_LS_RS_CS_LFE: number;

  /**
   * 6 Channel Configuration Front-Center Front-Left Front-Right Back-Left Back-Right Low-Frequency
   */
  static readonly CHANNELLAYOUT_C_L_R_LS_RS_LFE: number;

  /**
   * 7 Channel Configuration Front-Center Front-Left Front-Right Back-Left Back-Right Rear-Surround-Left Rear-Surround-Right
   */
  static readonly CHANNELLAYOUT_C_L_R_LS_RS_RLS_RRS: number;

  /**
   * 8 Channel Configuration Front-Center Front-Left Front-Right Back-Left Back-Right Rear-Surround-Left Rear-Surround-Right Back-Center
   */
  static readonly CHANNELLAYOUT_C_L_R_LS_RS_RLS_RRS_CS: number;

  /**
   * 6 Channel Configuration Front-Left Front-Right Back-Left Back-Right Front-Center Back-Center
   */
  static readonly CHANNELLAYOUT_HEXAGONAL: number;

  /**
   * 2 Channel Configuration Front-Left-Of-Center Front-Right-Of-Center
   */
  static readonly CHANNELLAYOUT_LC_RC: number;

  /**
   * 6 Channel Configuration Front-Left Front-Right Back-Left Back-Right Front-Center Low-Frequency
   */
  static readonly CHANNELLAYOUT_LEGACY51: number;

  /**
   * 2 Channel Configuration Side-Left Side-Right
   */
  static readonly CHANNELLAYOUT_LSD_RSD: number;

  /**
   * 2 Channel Configuration Back-Left Back-Right
   */
  static readonly CHANNELLAYOUT_LS_RS: number;

  /**
   * 3 Channel Configuration Front-Left Front-Center Front-Right
   */
  static readonly CHANNELLAYOUT_L_C_R: number;

  /**
   * 4 Channel Configuration Front-Left Front-Center Front-Right Back-Center
   */
  static readonly CHANNELLAYOUT_L_C_R_CS: number;

  /**
   * 5 Channel Configuration Front-Left Front-Center Front-Right Back-Center Low-Frequency
   */
  static readonly CHANNELLAYOUT_L_C_R_CS_LFE: number;

  /**
   * 4 Channel Configuration Front-Left Front-Center Front-Right Low-Frequency
   */
  static readonly CHANNELLAYOUT_L_C_R_LFE: number;

  /**
   * 5 Channel Configuration Front-Left Front-Center Front-Right Back-Left Back-Right
   */
  static readonly CHANNELLAYOUT_L_C_R_LS_RS: number;

  /**
   * 6 Channel Configuration Front-Left Front-Center Front-Right Back-Left Back-Right Low-Frequency
   */
  static readonly CHANNELLAYOUT_L_C_R_LS_RS_LFE: number;

  /**
   * 3 Channel Configuration Front-Left Front-Right Front-Center
   */
  static readonly CHANNELLAYOUT_L_R_C: number;

  /**
   * 3 Channel Configuration Front-Left Front-Right Back-Center
   */
  static readonly CHANNELLAYOUT_L_R_CS: number;

  /**
   * 4 Channel Configuration Front-Left Front-Right Back-Center Low-Frequency
   */
  static readonly CHANNELLAYOUT_L_R_CS_LFE: number;

  /**
   * 4 Channel Configuration Front-Left Front-Right Front-Center Back-Center
   */
  static readonly CHANNELLAYOUT_L_R_C_CS: number;

  /**
   * 4 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE: number;

  /**
   * 5 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Center
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_CS: number;

  /**
   * 7 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Back-Center
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_CS: number;

  /**
   * 9 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Back-Center Side-Left Side-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_CS_LSD_RSD: number;

  /**
   * 14 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Back-Center Top-Center Top-Front-Left Top-Front-Center Top-Front-Right Top-Back-Left Top-Back-Center Top-Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_CS_TS_VHL_VHC_VHR_TBL_TBR: number;

  /**
   * 9 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Front-Left-Of-Center Front-Right-Of-Center Back-Center
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_LC_RC_CS: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Side-Left Side-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_LSD_RSD: number;

  /**
   * 10 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Side-Left Side-Right Left-Height Right-Height
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_LSD_RSD_TSL_TSR: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Proximity-Left Proximity-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_PL_PR: number;

  /**
   * 12 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Top-Center Top-Front-Left Top-Front-Center Top-Front-Right Top-Back-Left Top-Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_TS_VHL_VHC_VHR_TBL_TBR: number;

  /**
   * 11 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Top-Center Top-Front-Left Top-Front-Right Top-Back-Left Top-Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_TS_VHL_VHR_TBL_TBR: number;

  /**
   * 10 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Top-Front-Left Top-Front-Right Top-Back-Left Top-Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LFE_LS_RS_VHL_VHR_TBL_TBR: number;

  /**
   * 5 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS: number;

  /**
   * 6 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right Back-Center
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS_CS: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right Back-Center Side-Left Side-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS_CS_LSD_RSD: number;

  /**
   * 13 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right Back-Center Top-Center Top-Front-Left Top-Front-Center Top-Front-Right Top-Back-Left Top-Back-Center Top-Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS_CS_TS_VHL_VHC_VHR_TBL_TBR: number;

  /**
   * 7 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right Front-Left-Of-Center Front-Right-Of-Center
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS_LC_RC: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right Front-Left-Of-Center Front-Right-Of-Center Back-Center
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS_LC_RC_CS: number;

  /**
   * 7 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right Side-Left Side-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS_LSD_RSD: number;

  /**
   * 11 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right Top-Center Top-Front-Left Top-Front-Center Top-Front-Right Top-Back-Left Top-Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS_TS_VHL_VHC_VHR_TBL_TBR: number;

  /**
   * 10 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right Top-Center Top-Front-Left Top-Front-Right Top-Back-Left Top-Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS_TS_VHL_VHR_TBL_TBR: number;

  /**
   * 9 Channel Configuration Front-Left Front-Right Front-Center Back-Left Back-Right Top-Front-Left Top-Front-Right Top-Back-Left Top-Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_C_LS_RS_VHL_VHR_TBL_TBR: number;

  /**
   * 3 Channel Configuration Front-Left Front-Right Low-Frequency
   */
  static readonly CHANNELLAYOUT_L_R_LFE: number;

  /**
   * 4 Channel Configuration Front-Left Front-Right Low-Frequency Back-Center
   */
  static readonly CHANNELLAYOUT_L_R_LFE_CS: number;

  /**
   * 5 Channel Configuration Front-Left Front-Right Low-Frequency Back-Left Back-Right
   */
  static readonly CHANNELLAYOUT_L_R_LFE_LS_RS: number;

  /**
   * 7 Channel Configuration Front-Left Front-Right Low-Frequency Back-Left Back-Right Side-Left Side-Right
   */
  static readonly CHANNELLAYOUT_L_R_LFE_LS_RS_LSD_RSD: number;

  /**
   * 9 Channel Configuration Front-Left Front-Right Low-Frequency Back-Left Back-Right Top-Front-Left Top-Front-Center Top-Front-Right Bottom-Front-Center
   */
  static readonly CHANNELLAYOUT_L_R_LFE_LS_RS_VHL_VHC_VHR_BFC: number;

  /**
   * 5 Channel Configuration Front-Left Front-Right Back-Left Back-Right Front-Center
   */
  static readonly CHANNELLAYOUT_L_R_LS_RS_C: number;

  /**
   * 7 Channel Configuration Front-Left Front-Right Back-Left Back-Right Front-Center Front-Left-Of-Center Front-Right-Of-Center
   */
  static readonly CHANNELLAYOUT_L_R_LS_RS_C_LC_RC: number;

  /**
   * 7 Channel Configuration Front-Left Front-Right Back-Left Back-Right Front-Center Rear-Surround-Left Rear-Surround-Right
   */
  static readonly CHANNELLAYOUT_L_R_LS_RS_C_RLS_RRS: number;

  /**
   * 5 Channel Configuration Front-Left Front-Right Back-Left Back-Right Low-Frequency
   */
  static readonly CHANNELLAYOUT_L_R_LS_RS_LFE: number;

  /**
   * 6 Channel Configuration Front-Left Front-Right Back-Left Back-Right Side-Left Side-Right
   */
  static readonly CHANNELLAYOUT_L_R_LS_RS_LSD_RSD: number;

  /**
   * 2 Channel Configuration Left-Total Right-Total
   */
  static readonly CHANNELLAYOUT_MATRIXSTEREO: number;

  /**
   * 1 Channel Configuration Discrete
   */
  static readonly CHANNELLAYOUT_MONO: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Back-Left Back-Right Front-Center Back-Center Side-Left Side-Right
   */
  static readonly CHANNELLAYOUT_OCTAGONAL: number;

  /**
   * 5 Channel Configuration Front-Left Front-Right Back-Left Back-Right Front-Center
   */
  static readonly CHANNELLAYOUT_PENTAGONAL: number;

  /**
   * 4 Channel Configuration Front-Left Front-Right Back-Left Back-Right
   */
  static readonly CHANNELLAYOUT_QUADRAPHONIC: number;

  /**
   * 16 Channel Configuration Discrete Discrete Front-Center Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete
   */
  static readonly CHANNELLAYOUT_SMPTEDIGITALCINEMA1: number;

  /**
   * 16 Channel Configuration Left-Total Right-Total Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete
   */
  static readonly CHANNELLAYOUT_SMPTEDIGITALCINEMA2: number;

  /**
   * 16 Channel Configuration Front-Left Front-Right Front-Center Discrete Back-Center Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete
   */
  static readonly CHANNELLAYOUT_SMPTEDIGITALCINEMA4: number;

  /**
   * 16 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete
   */
  static readonly CHANNELLAYOUT_SMPTEDIGITALCINEMA6: number;

  /**
   * 16 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Discrete Discrete Back-Center Discrete Discrete Discrete Discrete Discrete Discrete Discrete
   */
  static readonly CHANNELLAYOUT_SMPTEDIGITALCINEMA7: number;

  /**
   * 16 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Front-Left-Of-Center Front-Right-Of-Center Discrete Discrete Discrete Discrete Discrete Discrete Discrete Discrete
   */
  static readonly CHANNELLAYOUT_SMPTEDIGITALCINEMA8: number;

  /**
   * 16 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Front-Left-Of-Center Front-Right-Of-Center Back-Center Discrete Discrete Discrete Discrete Discrete Discrete Discrete
   */
  static readonly CHANNELLAYOUT_SMPTEDIGITALCINEMA9: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Left-Total Right-Total
   */
  static readonly CHANNELLAYOUT_SMPTEDTV: number;

  /**
   * 2 Channel Configuration Front-Left Front-Right
   */
  static readonly CHANNELLAYOUT_STEREO: number;

  /**
   * 2 Channel Configuration Top-Back-Left Top-Back-Right
   */
  static readonly CHANNELLAYOUT_TBL_TBR: number;

  /**
   * 2 Channel Configuration Left-Height Right-Height
   */
  static readonly CHANNELLAYOUT_TSL_TSR: number;

  /**
   * 2 Channel Configuration Top-Front-Left Top-Front-Right
   */
  static readonly CHANNELLAYOUT_VHL_VHR: number;

  /**
   * 12 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Top-Front-Left Top-Front-Center Top-Front-Right Top-Back-Left Top-Back-Right LFE2
   */
  static readonly CHANNELLAYOUT_VST10_2: number;

  /**
   * 14 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Front-Left-Of-Center Front-Right-Of-Center Top-Front-Left Top-Front-Center Top-Front-Right Top-Back-Left Top-Back-Right LFE2
   */
  static readonly CHANNELLAYOUT_VST10_2_PLUS: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Back-Center Top-Front-Center
   */
  static readonly CHANNELLAYOUT_VST_7_1_CINE_CENTER_HIGH: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Top-Front-Left Top-Front-Right
   */
  static readonly CHANNELLAYOUT_VST_7_1_CINE_FRONT_HIGH: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Left-Height Right-Height
   */
  static readonly CHANNELLAYOUT_VST_7_1_CINE_SIDE_HIGH: number;

  /**
   * 8 Channel Configuration Front-Left Front-Right Front-Center Low-Frequency Back-Left Back-Right Back-Center Top-Center
   */
  static readonly CHANNELLAYOUT_VST_7_1_CINE_TOP_CENTER: number;

  /**
   * Audio channel layout description
   */
  readonly description: string;

  /**
   * Returns an audio channel label.
   */
  readonly index: number;

  /**
   * Number of audio channels.
   */
  readonly length: number;

  /**
   *
   */
  static __(): any;

  /**
   *
   * @param labels Create a audio channel layout.
   */
  static createAudioChannelLayout(labels: any[]): AudioChannelLayout;

  /**
   *
   * @param layout Create a common audio channel layout.
   */
  static createCommonAudioChannelLayout(layout: number): AudioChannelLayout;

  /**
   *
   * @param label Label string of a single audio channel label
   */
  static label(label: number): string;
}

/**
 * This events is fired if one or more documents related event happened.
 */
declare class AudioTrackEvent {
  /**
   * This event is fired after a track was added to a multitrack document.
   */
  static readonly EVENT_ADDED: string;

  /**
   * This event is fired after a track was removed from a multitrack document.
   */
  static readonly EVENT_REMOVED: string;

  /**
   * Unique document ID.
   */
  readonly documentID: string;

  /**
   * Track name.
   */
  readonly name: string;

  /**
   * Document file path.
   */
  readonly path: string;

  /**
   * Unique track ID.
   */
  readonly trackID: number;

  /**
   *
   */
  static __(): any;
}

/**
 * An object representing a particular clip as part of a multitrack session.
 */
declare class Clip {
  /**
   *
   */
  readonly ancestor: any;

  /**
   * The end time of the clip measured in samples (exclusive) at the multitrack document's sample rate.
   */
  readonly endTime: number;

  /**
   * Unique id of the clip.
   */
  readonly id: string;

  /**
   * Document associated with this clip.
   */
  link: object;

  /**
   * The name of the clip.
   */
  readonly name: string;

  /**
   * Selection state of this audio clip.
   */
  readonly selected: boolean;

  /**
   * The start time of the clip measured in samples at the multitrack document's sample rate.
   */
  readonly startTime: number;
}

/**
 * An object representing the state of the running application.
 */
declare class Application {
  /**
   * Performs a scan in the amplitude statistics panel.
   */
  static readonly COMMAND_ANALYSIS_SCANAMPLITUDESTATISTICS: string;

  /**
   * Performs a scan in the frequency analysis panel.
   */
  static readonly COMMAND_ANALYSIS_SCANFREQUENCYANALYSIS: string;

  /**
   * Aligns the speech of one clip to the speech in another clip.
   */
  static readonly COMMAND_CLIP_ALIGNWITHRUBBADUB: string;

  /**
   * Prepare the clip to be ready for Remix.
   */
  static readonly COMMAND_CLIP_ANALYZEFORRETARGETING: string;

  /**
   * Toggle whether or not crossfades are automatically created when the selected clip is moved or trimmed.
   */
  static readonly COMMAND_CLIP_AUTOMATICCROSSFADESENABLED: string;

  /**
   * Sets the selected clip in front of all other clips.
   */
  static readonly COMMAND_CLIP_BRINGTOFRONT: string;

  /**
   * Shows the Clip Color dialog for changing the selected clip or group color.
   */
  static readonly COMMAND_CLIP_CLIPCOLORDIALOG: string;

  /**
   * Set the clip gain using Properties panel.
   */
  static readonly COMMAND_CLIP_CLIPGAIN: string;

  /**
   * Create new trimmed files for the selected clips to refer to.
   */
  static readonly COMMAND_CLIP_CONVERTTOUNIQUECOPY: string;

  /**
   * Edit the source file which the selected clip references.
   */
  static readonly COMMAND_CLIP_EDITSOURCEFILE: string;

  /**
   * Choose the Asymmetrical crossfade link type for the clip fade in.
   */
  static readonly COMMAND_CLIP_FADEINASYMMETRICAL: string;

  /**
   * Choose the Cosine style for the clip fade in.
   */
  static readonly COMMAND_CLIP_FADEINCOSINE: string;

  /**
   * Create the crossfade at the left edge of the selected clip.
   */
  static readonly COMMAND_CLIP_FADEINCROSSFADE: string;

  /**
   * Choose the Linear | Logarithmic style for the clip fade in.
   */
  static readonly COMMAND_CLIP_FADEINLINEAR: string;

  /**
   * Remove the fade in for the selected clip.
   */
  static readonly COMMAND_CLIP_FADEINNONE: string;

  /**
   * Create the fade in for the selected clip.
   */
  static readonly COMMAND_CLIP_FADEINNORMAL: string;

  /**
   * Choose the Symmetrical crossfade link type for the clip fade in.
   */
  static readonly COMMAND_CLIP_FADEINSYMMETRICAL: string;

  /**
   * Choose the Asymmetrical crossfade link type for the clip fade out.
   */
  static readonly COMMAND_CLIP_FADEOUTASYMMETRICAL: string;

  /**
   * Choose the Cosine style for the clip fade out.
   */
  static readonly COMMAND_CLIP_FADEOUTCOSINE: string;

  /**
   * Create the crossfade at the right edge of the selected clip.
   */
  static readonly COMMAND_CLIP_FADEOUTCROSSFADE: string;

  /**
   * Choose the Linear | Logarithmic style for the clip fade out.
   */
  static readonly COMMAND_CLIP_FADEOUTLINEAR: string;

  /**
   * Remove the fade out for the selected clip.
   */
  static readonly COMMAND_CLIP_FADEOUTNONE: string;

  /**
   * Create the fade out for the selected clip.
   */
  static readonly COMMAND_CLIP_FADEOUTNORMAL: string;

  /**
   * Choose the Symmetrical crossfade link type for the clip fade out.
   */
  static readonly COMMAND_CLIP_FADEOUTSYMMETRICAL: string;

  /**
   * Toggles whether the selected clips belong to a group.
   */
  static readonly COMMAND_CLIP_GROUPCLIPS: string;

  /**
   * Reconnect all offline clips with media.
   */
  static readonly COMMAND_CLIP_LINKALLMEDIA: string;

  /**
   * Reconnect the selected offline clip with media.
   */
  static readonly COMMAND_CLIP_LINKMEDIA: string;

  /**
   * Locks the start time of the selected clips.
   */
  static readonly COMMAND_CLIP_LOCKINTIME: string;

  /**
   * Enables clip looping.
   */
  static readonly COMMAND_CLIP_LOOP: string;

  /**
   * Matches the loudness of a group of clips.
   */
  static readonly COMMAND_CLIP_MATCHCLIPVOLUME: string;

  /**
   * Merge the selected clips.
   */
  static readonly COMMAND_CLIP_MERGECLIPS: string;

  /**
   * Mutes the selected clips.
   */
  static readonly COMMAND_CLIP_MUTE: string;

  /**
   * Nudge the selected clips to the left (by frames when snapping to frames is enabled).
   */
  static readonly COMMAND_CLIP_NUDGELEFT: string;

  /**
   * Nudge the selected clips to the left by 5 (by frames when snapping to frames is enabled).
   */
  static readonly COMMAND_CLIP_NUDGELEFT5: string;

  /**
   * Nudge the selected clips to the right (by frames when snapping to frames is enabled).
   */
  static readonly COMMAND_CLIP_NUDGERIGHT: string;

  /**
   * Nudge the selected clips to the right by 5 (by frames when snapping to frames is enabled).
   */
  static readonly COMMAND_CLIP_NUDGERIGHT5: string;

  /**
   * Remove the focus clip from its current group.
   */
  static readonly COMMAND_CLIP_REMOVEFOCUSCLIPFROMGROUP: string;

  /**
   * Rename the selected clip using Properties panel.
   */
  static readonly COMMAND_CLIP_RENAME: string;

  /**
   * Adjust clip remix parameters using Properties panel.
   */
  static readonly COMMAND_CLIP_RETARGETPROPERTIES: string;

  /**
   * Reveal sources of selected clips in the files panel.
   */
  static readonly COMMAND_CLIP_REVEALCLIPSINFILESPANEL: string;

  /**
   * Revert remixed clip into original.
   */
  static readonly COMMAND_CLIP_REVERTRETARGETEDCLIPTOORIGINAL: string;

  /**
   * Sets the selected clip behind all other clips.
   */
  static readonly COMMAND_CLIP_SENDTOBACK: string;

  /**
   * Silence Selected Clips in Time Selection.
   */
  static readonly COMMAND_CLIP_SILENCESELECTEDCLIPSINRANGE: string;

  /**
   * Split the selected clips.
   */
  static readonly COMMAND_CLIP_SPLIT: string;

  /**
   * Split all clips under the playhead ignoring currently selected clip(s).
   */
  static readonly COMMAND_CLIP_SPLITALL: string;

  /**
   * Split the remixed clip into its original segments.
   */
  static readonly COMMAND_CLIP_SPLITRETARGETEDCLIPINTOSEGMENTS: string;

  /**
   * Adjust clip stretch properties using Properties panel.
   */
  static readonly COMMAND_CLIP_STRETCHPROPERTIES: string;

  /**
   * A global toggle to suspend the auto-selection of groups.This allows individual selection of clips within a group.
   */
  static readonly COMMAND_CLIP_SUSPENDGROUPINGTOGGLE: string;

  /**
   * Trim the selected clips to the time selection.
   */
  static readonly COMMAND_CLIP_TRIMTOTIMESELECTION: string;

  /**
   * Remove the selected clips from their respective groups.
   */
  static readonly COMMAND_CLIP_UNGROUPSELECTEDCLIPS: string;

  /**
   * Sets the current clipboard to be clipboard 1.
   */
  static readonly COMMAND_EDIT_ACTIVATECLIPBOARD1: string;

  /**
   * Sets the current clipboard to be clipboard 2.
   */
  static readonly COMMAND_EDIT_ACTIVATECLIPBOARD2: string;

  /**
   * Sets the current clipboard to be clipboard 3.
   */
  static readonly COMMAND_EDIT_ACTIVATECLIPBOARD3: string;

  /**
   * Sets the current clipboard to be clipboard 4.
   */
  static readonly COMMAND_EDIT_ACTIVATECLIPBOARD4: string;

  /**
   * Sets the current clipboard to be clipboard 5.
   */
  static readonly COMMAND_EDIT_ACTIVATECLIPBOARD5: string;

  /**
   * Adds a cart timer marker.
   */
  static readonly COMMAND_EDIT_ADDCARTMARKER: string;

  /**
   * Adds a cue marker.
   */
  static readonly COMMAND_EDIT_ADDCUEMARKER: string;

  /**
   * Adds a cue point marker.
   */
  static readonly COMMAND_EDIT_ADDCUEPOINTMARKER: string;

  /**
   * Adds a cue range marker.
   */
  static readonly COMMAND_EDIT_ADDCUERANGEMARKER: string;

  /**
   * Adds a subclip marker.
   */
  static readonly COMMAND_EDIT_ADDSUBCLIPMARKER: string;

  /**
   * Adds a CD track marker.
   */
  static readonly COMMAND_EDIT_ADDTRACKMARKER: string;

  /**
   * Adjust the selection in point to the beginning.
   */
  static readonly COMMAND_EDIT_ADJUSTINPOINTTOBEGINNING: string;

  /**
   * Adjust the selection in point to the end.
   */
  static readonly COMMAND_EDIT_ADJUSTINPOINTTOEND: string;

  /**
   * Adjust the selection in point to the left.
   */
  static readonly COMMAND_EDIT_ADJUSTINPOINTTOLEFT: string;

  /**
   * Adjust the selection in point to the right.
   */
  static readonly COMMAND_EDIT_ADJUSTINPOINTTORIGHT: string;

  /**
   * Adjust Left Side To Left.
   */
  static readonly COMMAND_EDIT_ADJUSTLEFTSIDETOLEFT: string;

  /**
   * Adjust Left Side To Right.
   */
  static readonly COMMAND_EDIT_ADJUSTLEFTSIDETORIGHT: string;

  /**
   * Adjust the selection out point to the beginning.
   */
  static readonly COMMAND_EDIT_ADJUSTOUTPOINTTOBEGINNING: string;

  /**
   * Adjust the selection out point to the end.
   */
  static readonly COMMAND_EDIT_ADJUSTOUTPOINTTOEND: string;

  /**
   * Adjust the selection out point to the left.
   */
  static readonly COMMAND_EDIT_ADJUSTOUTPOINTTOLEFT: string;

  /**
   * Adjust the selection out point to the right.
   */
  static readonly COMMAND_EDIT_ADJUSTOUTPOINTTORIGHT: string;

  /**
   * Adjust Right Side To Left.
   */
  static readonly COMMAND_EDIT_ADJUSTRIGHTSIDETOLEFT: string;

  /**
   * Adjust Right Side To Right.
   */
  static readonly COMMAND_EDIT_ADJUSTRIGHTSIDETORIGHT: string;

  /**
   * Adjust Selection Inward.
   */
  static readonly COMMAND_EDIT_ADJUSTSELECTIONINWARD: string;

  /**
   * Adjust Selection Outward.
   */
  static readonly COMMAND_EDIT_ADJUSTSELECTIONOUTWARD: string;

  /**
   * Opens the Batch Process panel.
   */
  static readonly COMMAND_EDIT_BATCHPROCESS: string;

  /**
   * Change the current selected clips stretch mode to Off.
   */
  static readonly COMMAND_EDIT_CHANGESTRETCHMODE_OFF: string;

  /**
   * Change the current selected clips stretch mode to Realtime.
   */
  static readonly COMMAND_EDIT_CHANGESTRETCHMODE_REALTIME: string;

  /**
   * Change the current selected clips stretch mode to Rendered.
   */
  static readonly COMMAND_EDIT_CHANGESTRETCHMODE_RENDERED: string;

  /**
   * Clear the time selection without changing the playhead position.
   */
  static readonly COMMAND_EDIT_CLEARTIMESELECTION: string;

  /**
   * Converts the sample type of the current file.
   */
  static readonly COMMAND_EDIT_CONVERTSAMPLETYPE: string;

  /**
   * Copy the current selection to the clipboard.
   */
  static readonly COMMAND_EDIT_COPY: string;

  /**
   * Copy the current selection to the clipboard and then paste it into a new file.
   */
  static readonly COMMAND_EDIT_COPYTONEW: string;

  /**
   * Crop the current file using the current selection.
   */
  static readonly COMMAND_EDIT_CROP: string;

  /**
   * Cut the current selection.
   */
  static readonly COMMAND_EDIT_CUT: string;

  /**
   * Delete the current selection - depends on the context.
   */
  static readonly COMMAND_EDIT_DELETE: string;

  /**
   * Deletes all markers from the current file.
   */
  static readonly COMMAND_EDIT_DELETEALLMARKERS: string;

  /**
   * Deletes selected markers in the Markers panel.
   */
  static readonly COMMAND_EDIT_DELETESELECTEDMARKERS: string;

  /**
   * Delete the currently selected track keyframes.
   */
  static readonly COMMAND_EDIT_DELETETRACKKEYFRAMES: string;

  /**
   * Remove the selection.In the Multitrack Editor deselect all clips.In the Waveform Editor deselect all audio samples.
   */
  static readonly COMMAND_EDIT_DESELECTALL: string;

  /**
   * Open the original project that created this file.
   */
  static readonly COMMAND_EDIT_EDITORIGINAL: string;

  /**
   * Export the audio of selected range markers to separate files.
   */
  static readonly COMMAND_EDIT_EXPORTMARKERRANGES: string;

  /**
   * Split Frequency Bands to Files.
   */
  static readonly COMMAND_EDIT_FREQUENCYBANDSPLITTER: string;

  /**
   * Imports the specified files and inserts them into the active CD Layout as a CD tracks.
   */
  static readonly COMMAND_EDIT_IMPORTANDINSERTFILESASCDTRACKS: string;

  /**
   * Inserts the active file into a new CD Layout.
   */
  static readonly COMMAND_EDIT_INSERTINTONEWCDLAYOUT: string;

  /**
   * Inserts the active file into a new multitrack session.
   */
  static readonly COMMAND_EDIT_INSERTINTONEWSESSION: string;

  /**
   * Inserts the active file or selection into the most recently used session or a new one if no sessions exist.
   */
  static readonly COMMAND_EDIT_INSERTINTOSESSION: string;

  /**
   * Inserts the selected range markers in the Markers panel into the playlist.
   */
  static readonly COMMAND_EDIT_INSERTSELECTEDRANGEMARKERSINTOPLAYLIST: string;

  /**
   * Inserts silence into the current file.
   */
  static readonly COMMAND_EDIT_INSERTSILENCE: string;

  /**
   * Interprets the sample rate of the current file for playback.
   */
  static readonly COMMAND_EDIT_INTERPRETSAMPLERATE: string;

  /**
   * Merges the selected markers in the Markers panel into one (or more) range markers.
   */
  static readonly COMMAND_EDIT_MERGESELECTEDMARKERS: string;

  /**
   * Mixes the clipboard's contents into the file.
   */
  static readonly COMMAND_EDIT_MIXPASTE: string;

  /**
   * Paste the clipboard's contents into the file.
   */
  static readonly COMMAND_EDIT_PASTE: string;

  /**
   * Paste the clipboard's contents into a new file.
   */
  static readonly COMMAND_EDIT_PASTETONEW: string;

  /**
   * Switches all clips with rendered stretches to realtime.
   */
  static readonly COMMAND_EDIT_REALTIMEALLSTRETCHEDCLIPS: string;

  /**
   * Redo the last operation.
   */
  static readonly COMMAND_EDIT_REDO: string;

  /**
   * Renames the selected marker in the Markers panel.
   */
  static readonly COMMAND_EDIT_RENAMESELECTEDMARKER: string;

  /**
   * Switches all clips with realtime stretches to rendered.
   */
  static readonly COMMAND_EDIT_RENDERALLSTRETCHEDCLIPS: string;

  /**
   * Repeats the last command chosen.If appropriate will show dialog so you can adjust settings before applying.
   */
  static readonly COMMAND_EDIT_REPEATLASTCOMMAND: string;

  /**
   * Repeats the last command chosen.Will not show any dialogs.
   */
  static readonly COMMAND_EDIT_REPEATLASTCOMMANDNOUI: string;

  /**
   * Deletes the gap at the current playhead position in the selected track and shifts the content to fill the gap.
   */
  static readonly COMMAND_EDIT_RIPPLEDELETEGAPINSELECTEDTRACK: string;

  /**
   * Deletes the selected clips and shifts the content to fill the gaps.
   */
  static readonly COMMAND_EDIT_RIPPLEDELETESELECTEDCLIPS: string;

  /**
   * Deletes the time selection in all tracks and shifts the content to fill the gap.
   */
  static readonly COMMAND_EDIT_RIPPLEDELETETIMESELECTIONINALLTRACKS: string;

  /**
   * Deletes the time selection in selected clips and shifts the content to fill the gaps.
   */
  static readonly COMMAND_EDIT_RIPPLEDELETETIMESELECTIONINSELECTEDCLIPS: string;

  /**
   * Deletes the time selection in the selected track and shifts the content to fill the gap.
   */
  static readonly COMMAND_EDIT_RIPPLEDELETETIMESELECTIONINSELECTEDTRACK: string;

  /**
   * Select all content in the active panel.In the Multitrack Editor select all clips.In the Waveform Editor select all audio samples.
   */
  static readonly COMMAND_EDIT_SELECTALL: string;

  /**
   * Selects all clips in the selected track.
   */
  static readonly COMMAND_EDIT_SELECTALLCLIPSINSELECTEDTRACK: string;

  /**
   * Create a time selection across all content in the active panel.
   */
  static readonly COMMAND_EDIT_SELECTALLTIME: string;

  /**
   * Selects all Clips of the Audio Type Ambience.
   */
  static readonly COMMAND_EDIT_SELECTCLIPSOFMIXTYPE_AMBIENCE: string;

  /**
   * Selects all Clips of the Audio Type Dialogue.
   */
  static readonly COMMAND_EDIT_SELECTCLIPSOFMIXTYPE_DIALOG: string;

  /**
   * Selects all Clips of the Audio Type Music.
   */
  static readonly COMMAND_EDIT_SELECTCLIPSOFMIXTYPE_MUSIC: string;

  /**
   * Selects all Clips of the Audio Type Sound Effects.
   */
  static readonly COMMAND_EDIT_SELECTCLIPSOFMIXTYPE_SFX: string;

  /**
   * Selects clips after the playhead in the selected track.
   */
  static readonly COMMAND_EDIT_SELECTCLIPSTOENDOFSELECTEDTRACK: string;

  /**
   * Selects clips after the playhead to the end of the session.
   */
  static readonly COMMAND_EDIT_SELECTCLIPSTOENDOFSESSION: string;

  /**
   * Selects clips before the playhead to the start of the session.
   */
  static readonly COMMAND_EDIT_SELECTCLIPSTOSTARTOFSESSION: string;

  /**
   * Create a time selection across the visible content in the active panel.
   */
  static readonly COMMAND_EDIT_SELECTCURRENTVIEWTIME: string;

  /**
   * Invert the spectral selection.
   */
  static readonly COMMAND_EDIT_SELECTINVERSE: string;

  /**
   * Selects the next clip in the selected track.
   */
  static readonly COMMAND_EDIT_SELECTNEXTCLIPINSELECTEDTRACK: string;

  /**
   * Create a time selection that spans all selected clips.
   */
  static readonly COMMAND_EDIT_SELECTTIMEAROUNDCLIPS: string;

  /**
   * Move the selection in point to the playhead position.
   */
  static readonly COMMAND_EDIT_SETINPOINTTOCTI: string;

  /**
   * Move the selection out point to the playhead position.
   */
  static readonly COMMAND_EDIT_SETOUTPOINTTOCTI: string;

  /**
   * Customize the keyboard shortcuts.
   */
  static readonly COMMAND_EDIT_SHORTCUTS: string;

  /**
   * Extract Channels to Mono Files.
   */
  static readonly COMMAND_EDIT_SPLITTOMONO: string;

  /**
   * Toggle the enable state of all channels.
   */
  static readonly COMMAND_EDIT_TOGGLEALLCHANNELS: string;

  /**
   * Toggle the enable state of the center channel.
   */
  static readonly COMMAND_EDIT_TOGGLECENTERCHANNEL: string;

  /**
   * Toggle the visibility of clip stretch handles.
   */
  static readonly COMMAND_EDIT_TOGGLECLIPSTRETCHING: string;

  /**
   * Toggle the enable state of the front left channel.
   */
  static readonly COMMAND_EDIT_TOGGLEFRONTLEFTCHANNEL: string;

  /**
   * Toggle the enable state of the front right channel.
   */
  static readonly COMMAND_EDIT_TOGGLEFRONTRIGHTCHANNEL: string;

  /**
   * Toggle the enable state of the left surround channel.
   */
  static readonly COMMAND_EDIT_TOGGLELEFTSURROUNDCHANNEL: string;

  /**
   * Toggle the enable state of the low frequency effect channel.
   */
  static readonly COMMAND_EDIT_TOGGLELFECHANNEL: string;

  /**
   * Toggle the enable state of the right surround channel.
   */
  static readonly COMMAND_EDIT_TOGGLERIGHTSURROUNDCHANNEL: string;

  /**
   * Toggle all timeline snapping on|off.
   */
  static readonly COMMAND_EDIT_TOGGLESNAPPING: string;

  /**
   * Toggle snapping to clips.
   */
  static readonly COMMAND_EDIT_TOGGLESNAPTOCLIPS: string;

  /**
   * Toggle snapping to frames when viewing a frame time format.
   */
  static readonly COMMAND_EDIT_TOGGLESNAPTOFRAMES: string;

  /**
   * Toggle snapping to loop boundaries.
   */
  static readonly COMMAND_EDIT_TOGGLESNAPTOLOOPS: string;

  /**
   * Toggle snapping to markers.
   */
  static readonly COMMAND_EDIT_TOGGLESNAPTOMARKERS: string;

  /**
   * Toggle snapping to major ruler tick marks.
   */
  static readonly COMMAND_EDIT_TOGGLESNAPTORULERCOARSE: string;

  /**
   * Toggle snapping to all ruler tick marks.
   */
  static readonly COMMAND_EDIT_TOGGLESNAPTORULERFINE: string;

  /**
   * Toggle snapping to zero crossings.
   */
  static readonly COMMAND_EDIT_TOGGLESNAPTOZEROCROSSINGS: string;

  /**
   * Undo the last operation.
   */
  static readonly COMMAND_EDIT_UNDO: string;

  /**
   * Processes an adaptive noise reduction.
   */
  static readonly COMMAND_EFFECTS_ADAPTIVENOISEREDUCTION: string;

  /**
   * Amplifies channels of the waveform.
   */
  static readonly COMMAND_EFFECTS_AMPLIFY: string;

  /**
   * Add Analog Delay to waveform.
   */
  static readonly COMMAND_EFFECTS_ANALOGDELAY: string;

  /**
   * Removes clicks from the waveform.
   */
  static readonly COMMAND_EFFECTS_AUTOCLICKREMOVER: string;

  /**
   * Corrects the phase in a stereo waveform.
   */
  static readonly COMMAND_EFFECTS_AUTOPHASECORRECTION: string;

  /**
   * Learns sound model from the waveform selection.
   */
  static readonly COMMAND_EFFECTS_CAPTUREDYNAMICNOISEREMOVALPROFILE: string;

  /**
   * Captures noise print from the waveform.
   */
  static readonly COMMAND_EFFECTS_CAPTURENOISEREDUCTIONPROFILE: string;

  /**
   * Extract Center Channel.
   */
  static readonly COMMAND_EFFECTS_CENTERCHANNELEXTRACT: string;

  /**
   * Mixing Channels.
   */
  static readonly COMMAND_EFFECTS_CHANNELMIXER: string;

  /**
   * Add Chorus to waveform.
   */
  static readonly COMMAND_EFFECTS_CHORUS: string;

  /**
   * Add Chorus|Flanger to waveform.
   */
  static readonly COMMAND_EFFECTS_CHORUSFLANGER: string;

  /**
   * Clears the contents of the Effects Rack panel.
   */
  static readonly COMMAND_EFFECTS_CLEAREFFECTSRACK: string;

  /**
   * Apply the Click|Pop Eliminator effect.
   */
  static readonly COMMAND_EFFECTS_CLICKPOPELIMINATOR: string;

  /**
   * Analyzes and fixes click|pop defects from the waveform.
   */
  static readonly COMMAND_EFFECTS_CLICKPOPELIMINATORANALYSIS: string;

  /**
   * Analyzes and fixes clipped samples from the waveform.
   */
  static readonly COMMAND_EFFECTS_CLIPRESTORATIONANALYSIS: string;

  /**
   * Add Convolution Reverb to waveform.
   */
  static readonly COMMAND_EFFECTS_CONVOLUTIONREVERB: string;

  /**
   * Add DeEsser to waveform.
   */
  static readonly COMMAND_EFFECTS_DEESSER: string;

  /**
   * Add DeHummer to waveform.
   */
  static readonly COMMAND_EFFECTS_DEHUMMER: string;

  /**
   * Add Delay to waveform.
   */
  static readonly COMMAND_EFFECTS_DELAY: string;

  /**
   * Deletes all effects from the Effects Rack.
   */
  static readonly COMMAND_EFFECTS_DELETEALLEFFECTS: string;

  /**
   * Deletes selected effects from the Effects Rack.
   */
  static readonly COMMAND_EFFECTS_DELETESELECTEDEFFECTS: string;

  /**
   * Analyzes and removes silence from the waveform.
   */
  static readonly COMMAND_EFFECTS_DELETESILENCEANALYSIS: string;

  /**
   * Add Distortion to waveform.
   */
  static readonly COMMAND_EFFECTS_DISTORTION: string;

  /**
   * Apply Doppler effect to waveform.
   */
  static readonly COMMAND_EFFECTS_DOPPLER: string;

  /**
   * Processes the dynamics of the waveform.
   */
  static readonly COMMAND_EFFECTS_DYNAMICS: string;

  /**
   * Add echo to waveform.
   */
  static readonly COMMAND_EFFECTS_ECHO: string;

  /**
   * Enables the Effects Rack panel to edit clip effects.
   */
  static readonly COMMAND_EFFECTS_EDITCLIPEFFECTS: string;

  /**
   * Edits the selected effect in the Effects Rack.
   */
  static readonly COMMAND_EFFECTS_EDITSELECTEDEFFECT: string;

  /**
   * Enables the Effects Rack panel to edit track effects.
   */
  static readonly COMMAND_EFFECTS_EDITTRACKEFFECTS: string;

  /**
   *
   */
  static readonly COMMAND_EFFECTS_EFFECTSRACKPANELTOFRONTANDACTIVE: string;

  /**
   * Processes a fade envelope using an amplification percentage scale.
   */
  static readonly COMMAND_EFFECTS_FADEENVELOPE: string;

  /**
   * Apply FFT Filter to waveform.
   */
  static readonly COMMAND_EFFECTS_FFTFILTER: string;

  /**
   * Add Flanger to waveform.
   */
  static readonly COMMAND_EFFECTS_FLANGER: string;

  /**
   * Add reverb to waveform.
   */
  static readonly COMMAND_EFFECTS_FULLREVERB: string;

  /**
   * Processes a gain envelope using a decibel scale.
   */
  static readonly COMMAND_EFFECTS_GAINENVELOPE: string;

  /**
   * Creates specified noise as a new file.
   */
  static readonly COMMAND_EFFECTS_GENERATENOISE: string;

  /**
   * Creates specified speech as a new file.
   */
  static readonly COMMAND_EFFECTS_GENERATESPEECH: string;

  /**
   * Creates specified tone as a new file.
   */
  static readonly COMMAND_EFFECTS_GENERATETONES: string;

  /**
   * Apply graphic EQ to waveform.
   */
  static readonly COMMAND_EFFECTS_GRAPHICEQ10BANDS: string;

  /**
   * Apply graphic EQ to waveform.
   */
  static readonly COMMAND_EFFECTS_GRAPHICEQ20BANDS: string;

  /**
   * Apply graphic EQ to waveform.
   */
  static readonly COMMAND_EFFECTS_GRAPHICEQ30BANDS: string;

  /**
   * Apply the Graphic Phase Shifter effect.
   */
  static readonly COMMAND_EFFECTS_GRAPHICPHASESHIFTER: string;

  /**
   * Add GuitarSuite to waveform.
   */
  static readonly COMMAND_EFFECTS_GUITARSUITE: string;

  /**
   * Hard limits the waveform.
   */
  static readonly COMMAND_EFFECTS_HARDLIMIT: string;

  /**
   * Processes a hiss reduction.
   */
  static readonly COMMAND_EFFECTS_HISSREDUCTIONPROCESS: string;

  /**
   * Corrects the leveling of a waveform (best for speech).
   */
  static readonly COMMAND_EFFECTS_INTRACLIP: string;

  /**
   * Inverts the audio in the current selection.
   */
  static readonly COMMAND_EFFECTS_INVERT: string;

  /**
   * Analyzes and marks non-silence in the waveform.
   */
  static readonly COMMAND_EFFECTS_MARKAUDIOANALYSIS: string;

  /**
   * Add Mastering to waveform.
   */
  static readonly COMMAND_EFFECTS_MASTERING: string;

  /**
   * Opens the Match Loudness panel.
   */
  static readonly COMMAND_EFFECTS_MATCHVOLUME: string;

  /**
   * Add Multiband Compressor to waveform.
   */
  static readonly COMMAND_EFFECTS_MULTIBANDCOMPRESSOR: string;

  /**
   * Processes a noise reduction.
   */
  static readonly COMMAND_EFFECTS_NOISEREDUCTIONPROCESS: string;

  /**
   * Normalizes the waveform.
   */
  static readonly COMMAND_EFFECTS_NORMALIZE: string;

  /**
   * Apply Notch Filter to waveform.
   */
  static readonly COMMAND_EFFECTS_NOTCHFILTER: string;

  /**
   * Processes the dynamics of the waveform.
   */
  static readonly COMMAND_EFFECTS_PARAMETRICDYNAMICS: string;

  /**
   * Apply Parametric EQ to waveform.
   */
  static readonly COMMAND_EFFECTS_PARAMETRICEQ: string;

  /**
   * Add Phaser to waveform.
   */
  static readonly COMMAND_EFFECTS_PHASER: string;

  /**
   * Processes a pitch envelope over time.
   */
  static readonly COMMAND_EFFECTS_PITCHBENDER: string;

  /**
   * Automatically correct the pitch.
   */
  static readonly COMMAND_EFFECTS_PITCHCORRECT: string;

  /**
   * Correct pitch manually over time with an envelope.
   */
  static readonly COMMAND_EFFECTS_PITCHCORRECTMANUAL: string;

  /**
   * Shift or stretch the pitch.
   */
  static readonly COMMAND_EFFECTS_PITCHSHIFTER: string;

  /**
   * Opens the Audio plug-in manager dialog.
   */
  static readonly COMMAND_EFFECTS_PLUGINMANAGER: string;

  /**
   * Toggles the power state of the entire effects rack.
   */
  static readonly COMMAND_EFFECTS_POWEREFFECTSRACK: string;

  /**
   * Toggles the power state of selected effects in the effects rack.
   */
  static readonly COMMAND_EFFECTS_POWERSELECTEDEFFECTS: string;

  /**
   * Add Loudness Radar Meter to waveform.
   */
  static readonly COMMAND_EFFECTS_RADARMETER: string;

  /**
   * Renders all effects from the Effects Rack into the current audio file.
   */
  static readonly COMMAND_EFFECTS_RENDEREFFECTSRACK: string;

  /**
   * Replace unwanted selected sound with surrounding material.
   */
  static readonly COMMAND_EFFECTS_REPAIR: string;

  /**
   * Add reverb to waveform.
   */
  static readonly COMMAND_EFFECTS_REVERB: string;

  /**
   * Reverses the audio in the current selection.
   */
  static readonly COMMAND_EFFECTS_REVERSE: string;

  /**
   * Apply Scientific Filter to waveform.
   */
  static readonly COMMAND_EFFECTS_SCIENTIFICFILTER: string;

  /**
   * Silences the audio in the current selection.
   */
  static readonly COMMAND_EFFECTS_SILENCE: string;

  /**
   * Add Single-band Compressor to waveform.
   */
  static readonly COMMAND_EFFECTS_SINGLEBANDCOMPRESSOR: string;

  /**
   * Removes a specified sound.
   */
  static readonly COMMAND_EFFECTS_SOUNDREMOVALPROCESS: string;

  /**
   * Position and expand the stereo image.
   */
  static readonly COMMAND_EFFECTS_STEREOEXPANDER: string;

  /**
   * Stretch waveform.
   */
  static readonly COMMAND_EFFECTS_STRETCH: string;

  /**
   * Add reverb to waveform.
   */
  static readonly COMMAND_EFFECTS_STUDIOREVERB: string;

  /**
   * Add Surround Reverb to waveform.
   */
  static readonly COMMAND_EFFECTS_SURROUNDREVERB: string;

  /**
   * Add Tube-modeled Compressor to waveform.
   */
  static readonly COMMAND_EFFECTS_TUBEMODELEDCOMPRESSOR: string;

  /**
   * Add Vocal Enhancer to waveform.
   */
  static readonly COMMAND_EFFECTS_VOCALENHANCER: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_AUTO_HEAL: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_CONVERT_TO_5_1: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_CONVERT_TO_MONO: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_CONVERT_TO_STEREO: string;

  /**
   * Allows the user to delete a favorite.
   */
  static readonly COMMAND_FAVORITES_DELETEFAVORITE: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_DE_ESSER: string;

  /**
   * Open the Favorites panel to edit favorites.
   */
  static readonly COMMAND_FAVORITES_EDITFAVORITES: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_FADE_IN: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_FADE_OUT: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_HARD_LIMIT_TO__0_1_DB: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_LOWER_PITCH: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_NORMALIZE_TO__0_1_DB: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_NORMALIZE_TO__3_DB: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_RAISE_PITCH: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_REMOVE_60_HZ_HUM: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_REMOVE_VOCALS: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_REPAIR_DC_OFFSET: string;

  /**
   * Start recording editor actions into a favorite.
   */
  static readonly COMMAND_FAVORITES_STARTRECORDINGFAVORITE: string;

  /**
   * Stop recording editor actions and create a new favorite.
   */
  static readonly COMMAND_FAVORITES_STOPRECORDINGFAVORITE: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_TELEPHONE_VOICE: string;

  /**
   *
   */
  static readonly COMMAND_FAVORITES_VOICE_OVER_COMPRESSOR: string;

  /**
   * Clear the recent files listed.
   */
  static readonly COMMAND_FILE_CLEARRECENT: string;

  /**
   * Close the current file.
   */
  static readonly COMMAND_FILE_CLOSE: string;

  /**
   * Close all files.
   */
  static readonly COMMAND_FILE_CLOSEALL: string;

  /**
   * Close current session and its referenced media.
   */
  static readonly COMMAND_FILE_CLOSESESSIONANDITSMEDIA: string;

  /**
   * Close files that are not referenced by any open session.
   */
  static readonly COMMAND_FILE_CLOSEUNUSEDMEDIA: string;

  /**
   * Exports application settings to chosen file.
   */
  static readonly COMMAND_FILE_EXPORTAPPLICATIONSETTINGS: string;

  /**
   * Export the audio of all range markers to separate files.
   */
  static readonly COMMAND_FILE_EXPORT_ALLMARKERRANGES: string;

  /**
   * Burn the audio file to a blank compact disc.
   */
  static readonly COMMAND_FILE_EXPORT_BURNAUDIOTOCD: string;

  /**
   * Export the current session to a new XML file that can be opened by Adobe Premiere Pro.
   */
  static readonly COMMAND_FILE_EXPORT_EXPORTTOADOBEPREMIEREPRO: string;

  /**
   * Mixdown the output of a track selection and export it with Adobe Media Encoder.
   */
  static readonly COMMAND_FILE_EXPORT_EXPORTWITHADOBEMEDIAENCODER: string;

  /**
   * Export the current session to FCP XML Interchange Format.
   */
  static readonly COMMAND_FILE_EXPORT_FCXML: string;

  /**
   * Export the current file to a new file.
   */
  static readonly COMMAND_FILE_EXPORT_FILE: string;

  /**
   * Export selected markers to file.
   */
  static readonly COMMAND_FILE_EXPORT_MARKERS: string;

  /**
   * Mixdown the entire output of master track to new file.
   */
  static readonly COMMAND_FILE_EXPORT_MULTITRACKMIXDOWNALL: string;

  /**
   * Mixdown the output of the master track in the selected clips to a new file.
   */
  static readonly COMMAND_FILE_EXPORT_MULTITRACKMIXDOWNSELECTEDCLIPS: string;

  /**
   * Mixdown to one or more files the output of the master track in regions corresponding to the selected range markers.
   */
  static readonly COMMAND_FILE_EXPORT_MULTITRACKMIXDOWNSELECTEDMARKERRANGES: string;

  /**
   * Mixdown the output of the master track in the time selection to a new file.
   */
  static readonly COMMAND_FILE_EXPORT_MULTITRACKMIXDOWNSELECTION: string;

  /**
   * Export the current session to a new OMF file.
   */
  static readonly COMMAND_FILE_EXPORT_OMF: string;

  /**
   * Export the current session to a new file.
   */
  static readonly COMMAND_FILE_EXPORT_SESSION: string;

  /**
   * Export the current session as a template for creating future sessions.
   */
  static readonly COMMAND_FILE_EXPORT_SESSIONASTEMPLATE: string;

  /**
   * Extracts audio from audio CD tracks.
   */
  static readonly COMMAND_FILE_EXTRACTAUDIOFROMCD: string;

  /**
   * Imports application settings from chosen file.
   */
  static readonly COMMAND_FILE_IMPORTAPPLICATIONSETTINGS: string;

  /**
   * Imports chosen file.
   */
  static readonly COMMAND_FILE_IMPORTFILE: string;

  /**
   * Imports chosen files with a user-specified data type.
   */
  static readonly COMMAND_FILE_IMPORTRAWDATA: string;

  /**
   * Imports markers from chosen file.
   */
  static readonly COMMAND_FILE_IMPORT_MARKERS: string;

  /**
   * Creates an empty audio file.
   */
  static readonly COMMAND_FILE_NEWAUDIOFILE: string;

  /**
   * Creates an empty CD Layout.
   */
  static readonly COMMAND_FILE_NEWCDLAYOUT: string;

  /**
   * Creates an empty session.
   */
  static readonly COMMAND_FILE_NEWSESSION: string;

  /**
   * Open an existing file.
   */
  static readonly COMMAND_FILE_OPEN: string;

  /**
   * Open existing files and append them to the end of the current open file.
   */
  static readonly COMMAND_FILE_OPENAPPENDTOCURRENT: string;

  /**
   * Open existing files and append them to the end of a new file.
   */
  static readonly COMMAND_FILE_OPENAPPENDTONEW: string;

  /**
   * Opens the most recently used file.
   */
  static readonly COMMAND_FILE_OPENMRUFILE: string;

  /**
   * Opens the most recently used session.
   */
  static readonly COMMAND_FILE_OPENMRUSESSION: string;

  /**
   * Exit the application.
   */
  static readonly COMMAND_FILE_QUIT: string;

  /**
   * Reveal chosen file in the OS.
   */
  static readonly COMMAND_FILE_REVEAL: string;

  /**
   * Reveal chosen file in the Media Browser panel.
   */
  static readonly COMMAND_FILE_REVEALINMEDIABROWSER: string;

  /**
   * Save the current file.
   */
  static readonly COMMAND_FILE_SAVE: string;

  /**
   * Save all files.
   */
  static readonly COMMAND_FILE_SAVEALL: string;

  /**
   * Save all audio files to a specific format.
   */
  static readonly COMMAND_FILE_SAVEALLAUDIOASBATCHPROCESS: string;

  /**
   * Save the current file to a new file.
   */
  static readonly COMMAND_FILE_SAVEAS: string;

  /**
   * Save the current selection to a new file.
   */
  static readonly COMMAND_FILE_SAVESELECTIONAS: string;

  /**
   * Switch to the next opened File.
   */
  static readonly COMMAND_FILE_SWITCHTONEXTFILE: string;

  /**
   * Switch to the previous opened File.
   */
  static readonly COMMAND_FILE_SWITCHTOPREVIOUSFILE: string;

  /**
   * Open the About dialog.
   */
  static readonly COMMAND_HELP_ABOUT: string;

  /**
   * Browse Addons.
   */
  static readonly COMMAND_HELP_ADDONS: string;

  /**
   * Open Audition Help.
   */
  static readonly COMMAND_HELP_ADOBEAUDITIONHELP: string;

  /**
   * Download SDKs and other developer resources.
   */
  static readonly COMMAND_HELP_DEVELOPERCENTER: string;

  /**
   * Download Effects and other content.
   */
  static readonly COMMAND_HELP_DOWNLOAD: string;

  /**
   * Launch Improvement Program Options Dialog.
   */
  static readonly COMMAND_HELP_IMPROVEMENTPROGRAM: string;

  /**
   * Go to Audition Keyboard Shortcuts Help.
   */
  static readonly COMMAND_HELP_KEYBOARDSHORTCUTS: string;

  /**
   * Open Audition Learn.
   */
  static readonly COMMAND_HELP_ONBOARDING: string;

  /**
   * Reveals the log files for Adobe Audition in the OS.
   */
  static readonly COMMAND_HELP_REVEALLOGFILES: string;

  /**
   * Submit a bug report or feature request.
   */
  static readonly COMMAND_HELP_SENDFEEDBACK: string;

  /**
   * Go to Audition Support Center.
   */
  static readonly COMMAND_HELP_SUPPORTCENTER: string;

  /**
   * Go to Audition User Forums.
   */
  static readonly COMMAND_HELP_USERFORUMS: string;

  /**
   * Executes the End key.
   */
  static readonly COMMAND_KEYBOARD_END: string;

  /**
   * Executes the Enter key.
   */
  static readonly COMMAND_KEYBOARD_ENTER: string;

  /**
   * Executes the ESC key.
   */
  static readonly COMMAND_KEYBOARD_ESCAPE: string;

  /**
   * Executes the Home key.
   */
  static readonly COMMAND_KEYBOARD_HOME: string;

  /**
   * Show Dynamic Peaks.
   */
  static readonly COMMAND_METERING_DYNAMICPEAKS: string;

  /**
   * Resets Clip Indicators.
   */
  static readonly COMMAND_METERING_RESETINDICATORS: string;

  /**
   * Sets the range of level meter to 120dB.
   */
  static readonly COMMAND_METERING_SET120DBRANGE: string;

  /**
   * Sets the range of level meter to 24dB.
   */
  static readonly COMMAND_METERING_SET24DBRANGE: string;

  /**
   * Sets the range of level meter to 48dB.
   */
  static readonly COMMAND_METERING_SET48DBRANGE: string;

  /**
   * Sets the range of level meter to 60dB.
   */
  static readonly COMMAND_METERING_SET60DBRANGE: string;

  /**
   * Sets the range of level meter to 72dB.
   */
  static readonly COMMAND_METERING_SET72DBRANGE: string;

  /**
   * Sets the range of level meter to 96dB.
   */
  static readonly COMMAND_METERING_SET96DBRANGE: string;

  /**
   * Displays LED like meter bars.
   */
  static readonly COMMAND_METERING_SHOWLEDMETERS: string;

  /**
   * Displays the meter bars with a color gradient.
   */
  static readonly COMMAND_METERING_SHOWMETERBARSGRADIENT: string;

  /**
   * Show Valleys.
   */
  static readonly COMMAND_METERING_SHOWVALLEYS: string;

  /**
   * Show Static Peaks.
   */
  static readonly COMMAND_METERING_STATICPEAKS: string;

  /**
   * Enable Input Metering.
   */
  static readonly COMMAND_METERING_TOGGLEMETERINPUTSIGNAL: string;

  /**
   * Add a new 5.1 audio track.
   */
  static readonly COMMAND_MULTITRACK_ADD51AUDIOTRACK: string;

  /**
   * Add a new 5.1 bus track.
   */
  static readonly COMMAND_MULTITRACK_ADD51BUSTRACK: string;

  /**
   * Add a new mono audio track.
   */
  static readonly COMMAND_MULTITRACK_ADDMONOAUDIOTRACK: string;

  /**
   * Add a new mono bus track.
   */
  static readonly COMMAND_MULTITRACK_ADDMONOBUSTRACK: string;

  /**
   * Add a new stereo audio track.
   */
  static readonly COMMAND_MULTITRACK_ADDSTEREOAUDIOTRACK: string;

  /**
   * Add a new stereo bus track.
   */
  static readonly COMMAND_MULTITRACK_ADDSTEREOBUSTRACK: string;

  /**
   * Add a new video track.
   */
  static readonly COMMAND_MULTITRACK_ADDVIDEOTRACK: string;

  /**
   * Bounce selected track to a new track.
   */
  static readonly COMMAND_MULTITRACK_BOUNCESELECTEDTRACKTONEWTRACK: string;

  /**
   * Bounce selected clips in the time selection to a new track.
   */
  static readonly COMMAND_MULTITRACK_BOUNCETONEWTRACKSELECTEDCLIPSINRANGE: string;

  /**
   * Bounce selected clips only to a new track.
   */
  static readonly COMMAND_MULTITRACK_BOUNCETONEWTRACKSELECTEDCLIPSONLY: string;

  /**
   * Bounce a time selection to a new track.
   */
  static readonly COMMAND_MULTITRACK_BOUNCETONEWTRACKTIMESELECTIONRANGE: string;

  /**
   * Delete the currently selected track.
   */
  static readonly COMMAND_MULTITRACK_DELETETRACK: string;

  /**
   * Duplicate a track.
   */
  static readonly COMMAND_MULTITRACK_DUPLICATETRACK: string;

  /**
   * Edit the metronome pattern.
   */
  static readonly COMMAND_MULTITRACK_EDITMETRONOMEPATTERN: string;

  /**
   * Show clip keyframe nodes and allow editing.
   */
  static readonly COMMAND_MULTITRACK_ENABLECLIPKEYFRAMEEDITING: string;

  /**
   * Toggle Solo for the Selected Track Exclusively.
   */
  static readonly COMMAND_MULTITRACK_EXCLUSIVELYTOGGLESOLOFORSELECTED: string;

  /**
   * Imports the specified files and inserts them into the active session as a clips.
   */
  static readonly COMMAND_MULTITRACK_IMPORTANDINSERTFILESASCLIPS: string;

  /**
   * Minimize the currently selected track.
   */
  static readonly COMMAND_MULTITRACK_MINIMIZESELECTEDTRACK: string;

  /**
   * Mixdown the entire output of master track to new unsaved file.
   */
  static readonly COMMAND_MULTITRACK_MIXDOWNALLTONEWFILE: string;

  /**
   * Mixdown the output of the master track in the selected clips to a new unsaved file.
   */
  static readonly COMMAND_MULTITRACK_MIXDOWNSELECTEDCLIPSTONEWFILE: string;

  /**
   * Mixdown the output of the master track in the time selection to a new unsaved file.
   */
  static readonly COMMAND_MULTITRACK_MIXDOWNSELECTIONTONEWFILE: string;

  /**
   * Move the currently selected track down.
   */
  static readonly COMMAND_MULTITRACK_MOVETRACKDOWN: string;

  /**
   * Move the currently selected track up.
   */
  static readonly COMMAND_MULTITRACK_MOVETRACKUP: string;

  /**
   * Toggle Solo for the Selected Track Non-exclusively.
   */
  static readonly COMMAND_MULTITRACK_NONEXCLUSIVELYTOGGLESOLOFORSELECTED: string;

  /**
   * Play hidden clips.
   */
  static readonly COMMAND_MULTITRACK_PLAYHIDDENCLIPS: string;

  /**
   * Export the current session to a new XML file that can be opened by Adobe Premiere Pro.
   */
  static readonly COMMAND_MULTITRACK_PREMIEREPROXMLSEQUENCE: string;

  /**
   * Moves the selection to the next track.
   */
  static readonly COMMAND_MULTITRACK_SELECTNEXTTRACK: string;

  /**
   * Moves the selection to the previous track.
   */
  static readonly COMMAND_MULTITRACK_SELECTPREVIOUSTRACK: string;

  /**
   * Set the metronome sound type to African 1.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPEAFRICAN1: string;

  /**
   * Set the metronome sound type to African 2.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPEAFRICAN2: string;

  /**
   * Set the metronome sound type to Beeps.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPEBEEPS: string;

  /**
   * Set the metronome sound type to Cymbals.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPECYMBALS: string;

  /**
   * Set the metronome sound type to Kit.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPEKIT: string;

  /**
   * Set the metronome sound type to Latin 1.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPELATIN1: string;

  /**
   * Set the metronome sound type to Latin 2.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPELATIN2: string;

  /**
   * Set the metronome sound type to Latin 3.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPELATIN3: string;

  /**
   * Set the metronome sound type to Sticks.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPESTICKS: string;

  /**
   * Set the metronome sound type to Tabla.
   */
  static readonly COMMAND_MULTITRACK_SETMETRONOMESOUNDTYPETABLA: string;

  /**
   * Toggle Arm for Record for All Tracks.
   */
  static readonly COMMAND_MULTITRACK_TOGGLEARMFORRECORDFORALL: string;

  /**
   * Toggle Arm for Record for the Selected Track.
   */
  static readonly COMMAND_MULTITRACK_TOGGLEARMFORRECORDFORSELECTED: string;

  /**
   * Toggle the multitrack metronome.
   */
  static readonly COMMAND_MULTITRACK_TOGGLEMETRONOME: string;

  /**
   * Toggle Monitor Input for All Tracks.
   */
  static readonly COMMAND_MULTITRACK_TOGGLEMONITORINPUTFORALL: string;

  /**
   * Toggle Monitor Input for the Selected Track.
   */
  static readonly COMMAND_MULTITRACK_TOGGLEMONITORINPUTFORSELECTED: string;

  /**
   * Toggle Mute for All Tracks.
   */
  static readonly COMMAND_MULTITRACK_TOGGLEMUTEFORALL: string;

  /**
   * Toggle Mute for the Selected Track.
   */
  static readonly COMMAND_MULTITRACK_TOGGLEMUTEFORSELECTED: string;

  /**
   * Toggle Solo for All Tracks.
   */
  static readonly COMMAND_MULTITRACK_TOGGLESOLOFORALL: string;

  /**
   * Toggle Solo Safe for the Selected Track.
   */
  static readonly COMMAND_MULTITRACK_TOGGLESOLOSAFEFORSELECTED: string;

  /**
   * Open the Audio Channel Mapping pane in the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_AUDIOCHANNELMAPPING: string;

  /**
   * Open the Audio Hardware pane in the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_AUDIOHARDWARE: string;

  /**
   * Open the Auto Save pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_AUTOSAVE: string;

  /**
   * Open the Control Surface pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_CONTROLSURFACE: string;

  /**
   * Open the Data pane in the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_DATA: string;

  /**
   * Open the Effects pane in the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_EFFECTS: string;

  /**
   * Open the General pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_GENERAL: string;

  /**
   * Open the most recently accessed pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_LASTPANE: string;

  /**
   * Open the Media & Disk Cache pane in the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_MEDIA: string;

  /**
   * Open the Memory pane in the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_MEMORY: string;

  /**
   * Open the Markers & Metadata pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_METADATA: string;

  /**
   * Open the Multitrack pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_MULTITRACK: string;

  /**
   * Open the Multitrack Clips pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_MULTITRACKCLIPS: string;

  /**
   * Open the Playback pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_PLAYBACK: string;

  /**
   * Open the Spectral Displays pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_SPECTRALDISPLAY: string;

  /**
   * Open the Time Display pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_TIMEDISPLAY: string;

  /**
   * Toggle the "Enable input metering when arming tracks for record" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLEENABLEINPUTMETERING: string;

  /**
   * Toggle the "Enable smart monitoring when arming tracks for record" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLEENABLESMARTMONITORING: string;

  /**
   * Toggle the "Play audio while scrubbing the playhead" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLEPLAYAUDIOWHILESCRUBBING: string;

  /**
   * Toggle the "Auto-scroll during playback and recording" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLEPLAYBACKAUTOSCROLLENABLED: string;

  /**
   * Toggle the "Play only selected frequencies when a spectral frequency selection exists" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLEPLAYONLYSELECTEDFREQUENCIES: string;

  /**
   * Toggle the "Stop at the end of the selection when playback starts within a selected region" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLEPLAYONLYSELECTEDREGION: string;

  /**
   * Toggle the "Return playhead to start position on stop" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLEPLAYSTYLEISLEGACY: string;

  /**
   * Toggle the "Centered auto-scrolling in Waveform Editor" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLESMOOTHSCROLLEV: string;

  /**
   * Toggle the "Centered auto-scrolling in Multitrack Editor" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLESMOOTHSCROLLMT: string;

  /**
   * Toggle the "Synchronize playhead selection and zoom range between documents" preference.
   */
  static readonly COMMAND_PREFERENCES_TOGGLESYNCSELECTIONVIEWCTI: string;

  /**
   * Open the Appearance pane in the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_USERINTERFACE: string;

  /**
   * Open the Video pane of the Preferences dialog.
   */
  static readonly COMMAND_PREFERENCES_VIDEO: string;

  /**
   * Decrease the spectral frequency display brush opacity.
   */
  static readonly COMMAND_TOOLS_DECREASEBRUSHOPACITY: string;

  /**
   * Decrease the spectral frequency display brush size.
   */
  static readonly COMMAND_TOOLS_DECREASEBRUSHSIZE: string;

  /**
   * Choose the Spot Healing Brush tool.
   */
  static readonly COMMAND_TOOLS_HEALINGBRUSH: string;

  /**
   * Increase the spectral frequency display brush opacity.
   */
  static readonly COMMAND_TOOLS_INCREASEBRUSHOPACITY: string;

  /**
   * Increase the spectral frequency display brush size.
   */
  static readonly COMMAND_TOOLS_INCREASEBRUSHSIZE: string;

  /**
   * Choose the Lasso Selection tool.
   */
  static readonly COMMAND_TOOLS_LASSOSELECTION: string;

  /**
   * Choose the Marquee Selection tool.
   */
  static readonly COMMAND_TOOLS_MARQUEESELECTION: string;

  /**
   * Choose the Move tool.
   */
  static readonly COMMAND_TOOLS_MOVE: string;

  /**
   * Choose the Paintbrush Selection tool.
   */
  static readonly COMMAND_TOOLS_PAINTBRUSHSELECTION: string;

  /**
   * Choose the current Razor tool or cycle through the razor tools.
   */
  static readonly COMMAND_TOOLS_RAZOR: string;

  /**
   * Choose the Razor tool which acts on all clips.
   */
  static readonly COMMAND_TOOLS_RAZORALLCLIPS: string;

  /**
   * Choose the Razor tool which acts on selected clips.
   */
  static readonly COMMAND_TOOLS_RAZORSELECTEDCLIPS: string;

  /**
   * Choose the Slip tool.
   */
  static readonly COMMAND_TOOLS_SLIP: string;

  /**
   * Choose the Time Selection tool.
   */
  static readonly COMMAND_TOOLS_TIMESELECTION: string;

  /**
   * Remove the selection if it exists and move the playhead to the left.
   */
  static readonly COMMAND_TRANSPORT_COLLAPSESELECTIONLEFT: string;

  /**
   * Remove the selection if it exists and move the playhead one page to the left.
   */
  static readonly COMMAND_TRANSPORT_COLLAPSESELECTIONPAGELEFT: string;

  /**
   * Remove the selection if it exists and move the playhead one page to the right.
   */
  static readonly COMMAND_TRANSPORT_COLLAPSESELECTIONPAGERIGHT: string;

  /**
   * Remove the selection if it exists and move the playhead to the right.
   */
  static readonly COMMAND_TRANSPORT_COLLAPSESELECTIONRIGHT: string;

  /**
   * Move the playhead one page to the left.
   */
  static readonly COMMAND_TRANSPORT_MOVECTIPAGELEFT: string;

  /**
   * Move the playhead one page to the right.
   */
  static readonly COMMAND_TRANSPORT_MOVECTIPAGERIGHT: string;

  /**
   * Remove the selection if it exists and move the playhead to the beginning.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITOBEGINNING: string;

  /**
   * Remove the selection if it exists and move the playhead to the end.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITOEND: string;

  /**
   * Move the playhead to the selection in point.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITOINPOINT: string;

  /**
   * Move the playhead to the left.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITOLEFT: string;

  /**
   * Move the playhead to the next interesting point relative to playhead's location.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITONEXT: string;

  /**
   * Move the playhead to the next Marker relative to playhead's location.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITONEXTMARKER: string;

  /**
   * Move the playhead to the selection out point.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITOOUTPOINT: string;

  /**
   * Move the playhead to the previous interesting point relative to playhead's location.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITOPREVIOUS: string;

  /**
   * Move the playhead to the previous Marker relative to playhead's location.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITOPREVIOUSMARKER: string;

  /**
   * Move the playhead to the right.
   */
  static readonly COMMAND_TRANSPORT_MOVECTITORIGHT: string;

  /**
   * Start playback from the start position.
   */
  static readonly COMMAND_TRANSPORT_PLAY: string;

  /**
   * Shuttle Left.
   */
  static readonly COMMAND_TRANSPORT_SHUTTLELEFT: string;

  /**
   * Shuttle Right.
   */
  static readonly COMMAND_TRANSPORT_SHUTTLERIGHT: string;

  /**
   * Shuttle Stop.
   */
  static readonly COMMAND_TRANSPORT_SHUTTLESTOP: string;

  /**
   * Stop playback.
   */
  static readonly COMMAND_TRANSPORT_STOP: string;

  /**
   * Toggle the looped playback state.
   */
  static readonly COMMAND_TRANSPORT_TOGGLELOOPING: string;

  /**
   * Pause|Resume playback and recording.
   */
  static readonly COMMAND_TRANSPORT_TOGGLEPAUSE: string;

  /**
   * Start|Stop playback.
   */
  static readonly COMMAND_TRANSPORT_TOGGLEPLAYBACK: string;

  /**
   * Start|Stop recording.
   */
  static readonly COMMAND_TRANSPORT_TOGGLERECORDING: string;

  /**
   * Toggle between instant recording and timed recording.
   */
  static readonly COMMAND_TRANSPORT_TOGGLERECORDMODE: string;

  /**
   * Toggle the skip selection playback state.
   */
  static readonly COMMAND_TRANSPORT_TOGGLESKIPSELECTION: string;

  /**
   * Toggles the Preview Editor within the Editor panel.
   */
  static readonly COMMAND_VIEW_ALTVIEW: string;

  /**
   * Shows the CD Editor.
   */
  static readonly COMMAND_VIEW_CDEDITOR: string;

  /**
   * Decrease the spectral display resolution.
   */
  static readonly COMMAND_VIEW_DECREASESPECTRALRESOLUTION: string;

  /**
   * Open the Metadata Display dialog to customize the Files panel.
   */
  static readonly COMMAND_VIEW_DISPLAYFORFILESPANEL: string;

  /**
   * Open the Markers Display dialog to customize the Markers panel.
   */
  static readonly COMMAND_VIEW_DISPLAYFORMARKERSPANEL: string;

  /**
   * Open the Metadata Display dialog to customize the Metadata panel.
   */
  static readonly COMMAND_VIEW_DISPLAYFORMETADATAPANEL: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_EDITCUSTOMFRAMERATE: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_EDITTEMPO: string;

  /**
   * Hide all of the opened rack effect windows
   */
  static readonly COMMAND_VIEW_HIDEALLRACKEFFECTWINDOWS: string;

  /**
   * Increase the spectral display resolution.
   */
  static readonly COMMAND_VIEW_INCREASESPECTRALRESOLUTION: string;

  /**
   * Shows the Multitrack Editor.
   */
  static readonly COMMAND_VIEW_MULTITRACKEDITOR: string;

  /**
   * Cycle through the available time display formats (forward).
   */
  static readonly COMMAND_VIEW_NEXTTIMEDISPLAYFORMAT: string;

  /**
   * Cycle through the available time display formats (backwards).
   */
  static readonly COMMAND_VIEW_PREVIOUSTIMEDISPLAYFORMAT: string;

  /**
   * Scroll the view backward in time.
   */
  static readonly COMMAND_VIEW_SCROLLLEFT: string;

  /**
   * Scroll the view backward in time one page.
   */
  static readonly COMMAND_VIEW_SCROLLPAGELEFT: string;

  /**
   * Scroll the view forward in time one page.
   */
  static readonly COMMAND_VIEW_SCROLLPAGERIGHT: string;

  /**
   * Scroll the view forward in time.
   */
  static readonly COMMAND_VIEW_SCROLLRIGHT: string;

  /**
   * Scroll the view so the playhead is visible.
   */
  static readonly COMMAND_VIEW_SCROLLTOCTI: string;

  /**
   * Scroll the view so the selection is visible.
   */
  static readonly COMMAND_VIEW_SCROLLTOSELECTION: string;

  /**
   * Scroll the view so the playback start time is visible.
   */
  static readonly COMMAND_VIEW_SCROLLTOSTI: string;

  /**
   * Set navigation bar to display channels like the waveform editor.
   */
  static readonly COMMAND_VIEW_SETNAVBARCHANNELDISPLAYFROMEDITOR: string;

  /**
   * Set navigation bar to display layered channels.
   */
  static readonly COMMAND_VIEW_SETNAVBARCHANNELSLAYERED: string;

  /**
   * Set navigation bar to display separated channels.
   */
  static readonly COMMAND_VIEW_SETNAVBARCHANNELSSEPARATED: string;

  /**
   * Opens or closes the status bar.
   */
  static readonly COMMAND_VIEW_SHOWSTATUS: string;

  /**
   * Adjust the spectral frequency scale to be fully linear.
   */
  static readonly COMMAND_VIEW_SPECTRALFREQUENCYFULLLINEAR: string;

  /**
   * Adjust the spectral frequency scale to be fully logarithmic.
   */
  static readonly COMMAND_VIEW_SPECTRALFREQUENCYFULLLOGARITHMIC: string;

  /**
   * Adjust the spectral frequency scale to be more linear and less logarithmic.
   */
  static readonly COMMAND_VIEW_SPECTRALFREQUENCYMORELINEAR: string;

  /**
   * Adjust the spectral frequency scale to be more logarithmic and less linear.
   */
  static readonly COMMAND_VIEW_SPECTRALFREQUENCYMORELOGARITHMIC: string;

  /**
   * Toggle whether or not the active file should synchronize with time and tempo preferences.
   */
  static readonly COMMAND_VIEW_SYNCWITHTIMEPREFS: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATBARSANDBEATS: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATCOMPACTDISC: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATCUSTOM: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATDECIMAL: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATSAMPLES: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATSMPTE23976: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATSMPTE24: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATSMPTE25: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATSMPTE2997: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATSMPTE30: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATSMPTE5994: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATSMPTE5994DROP: string;

  /**
   *
   */
  static readonly COMMAND_VIEW_TIMEDISPLAYFORMATSMPTEDROP: string;

  /**
   * Toggle the show state of the clip effect envelopes.
   */
  static readonly COMMAND_VIEW_TOGGLECLIPEFFECTENVELOPES: string;

  /**
   * Toggle the show state of the clip pan envelopes.
   */
  static readonly COMMAND_VIEW_TOGGLECLIPPANENVELOPES: string;

  /**
   * Toggle the show state of the clip volume envelopes.
   */
  static readonly COMMAND_VIEW_TOGGLECLIPVOLUMEENVELOPES: string;

  /**
   * Toggle uniquely colored waveform channels.
   */
  static readonly COMMAND_VIEW_TOGGLECOLOREDCHANNELS: string;

  /**
   * Toggle the show state of the Editor panel controls.
   */
  static readonly COMMAND_VIEW_TOGGLEEDITORCONTROLS: string;

  /**
   * Toggles between Waveform Editor and Multitrack Editor
   */
  static readonly COMMAND_VIEW_TOGGLEEDITORS: string;

  /**
   * Toggle the show state of the Editor heads up display (HUD).
   */
  static readonly COMMAND_VIEW_TOGGLEHUD: string;

  /**
   * Toggle layered waveform channels.
   */
  static readonly COMMAND_VIEW_TOGGLELAYEREDCHANNELS: string;

  /**
   * Toggle showing the spectral pitch display.
   */
  static readonly COMMAND_VIEW_TOGGLEPITCHDISPLAY: string;

  /**
   * Toggle visibility of data under mouse cursor in status bar.
   */
  static readonly COMMAND_VIEW_TOGGLESHOWSTATUSBARDATAUNDERCURSOR: string;

  /**
   * Toggle visibility of file errors warnings and processing status in status bar.
   */
  static readonly COMMAND_VIEW_TOGGLESHOWSTATUSBARDOCMODALERRORSWARNINGS: string;

  /**
   * Toggle visibility of dropped audio indicator in status bar.
   */
  static readonly COMMAND_VIEW_TOGGLESHOWSTATUSBARDROPPEDAUDIO: string;

  /**
   * Toggle visibility of duration information in status bar.
   */
  static readonly COMMAND_VIEW_TOGGLESHOWSTATUSBARDURATION: string;

  /**
   * Toggle visibility of free space information in status bar.
   */
  static readonly COMMAND_VIEW_TOGGLESHOWSTATUSBARFREESPACE: string;

  /**
   * Toggle visibility of free space (shown in terms of time) information in status bar.
   */
  static readonly COMMAND_VIEW_TOGGLESHOWSTATUSBARFREESPACETIME: string;

  /**
   * Toggle visibility of sample type information in status bar.
   */
  static readonly COMMAND_VIEW_TOGGLESHOWSTATUSBARSAMPLETYPE: string;

  /**
   * Toggle visibility of uncompressed audio size information in status bar.
   */
  static readonly COMMAND_VIEW_TOGGLESHOWSTATUSBARUNCOMPRESSEDAUDIOSIZE: string;

  /**
   * Toggle visibility of video frame rate in status bar.
   */
  static readonly COMMAND_VIEW_TOGGLESHOWSTATUSBARVIDEOFRAMERATE: string;

  /**
   * Toggle showing the spectral frequency display.
   */
  static readonly COMMAND_VIEW_TOGGLESPECTRALDISPLAY: string;

  /**
   * Decode video at full resolution for display in the Video Panel.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYFULLRESOLUTION: string;

  /**
   * Switch video display to full resolution when playback stops.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYFULLRESOLUTIONONSTOP: string;

  /**
   * Toggle video display to full screen and back.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYFULLSCREEN: string;

  /**
   * Decode video at one half resolution for display in the Video Panel.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYQUARTERRESOLUTION: string;

  /**
   * Set scaling of video in the Video Panel to 100 percent.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYSETSCALE100: string;

  /**
   * Set scaling of video in the Video Panel to 200 percent.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYSETSCALE200: string;

  /**
   * Set scaling of video in the Video Panel to 25 percent.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYSETSCALE25: string;

  /**
   * Set scaling of video in the Video Panel to 50 percent.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYSETSCALE50: string;

  /**
   * Set scaling of video to fit the size of the Video Panel.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYSETSCALEBESTFIT: string;

  /**
   * Decode video at one quarter resolution for display in the Video Panel.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYSIXTEENTHRESOLUTION: string;

  /**
   * Decode video at one eighth resolution for display in the Video Panel.
   */
  static readonly COMMAND_VIEW_VIDEODISPLAYSIXTYFOURTHRESOLUTION: string;

  /**
   * Toggle video timecode overlay.
   */
  static readonly COMMAND_VIEW_VIDEOSHOWTIMECODE: string;

  /**
   * Shows the Waveform Editor.
   */
  static readonly COMMAND_VIEW_WAVEFORMEDITOR: string;

  /**
   * Zoom in on the amplitude scale.
   */
  static readonly COMMAND_VIEW_ZOOMINAMPLITUDE: string;

  /**
   * Zoom in at the time selection In point.
   */
  static readonly COMMAND_VIEW_ZOOMINATINPOINT: string;

  /**
   * Zoom in at the time selection Out point.
   */
  static readonly COMMAND_VIEW_ZOOMINATOUTPOINT: string;

  /**
   * Zoom in on the frequency scale.
   */
  static readonly COMMAND_VIEW_ZOOMINFREQUENCY: string;

  /**
   * Zoom in on the time scale.
   */
  static readonly COMMAND_VIEW_ZOOMINTIME: string;

  /**
   * Zoom out on the amplitude scale.
   */
  static readonly COMMAND_VIEW_ZOOMOUTAMPLITUDE: string;

  /**
   * Zoom out on the frequency scale.
   */
  static readonly COMMAND_VIEW_ZOOMOUTFREQUENCY: string;

  /**
   * Reset the zoom on all scales.
   */
  static readonly COMMAND_VIEW_ZOOMOUTFULL: string;

  /**
   * Toggle zoom out full on the selected track.
   */
  static readonly COMMAND_VIEW_ZOOMOUTFULLSELECTEDTRACK: string;

  /**
   * Zoom out on the time scale.
   */
  static readonly COMMAND_VIEW_ZOOMOUTTIME: string;

  /**
   * Reset the zoom on the amplitude scale.
   */
  static readonly COMMAND_VIEW_ZOOMRESETAMPLITUDE: string;

  /**
   * Reset the zoom on the frequency scale.
   */
  static readonly COMMAND_VIEW_ZOOMRESETFREQUENCY: string;

  /**
   * Reset the zoom on the time scale.
   */
  static readonly COMMAND_VIEW_ZOOMRESETTIME: string;

  /**
   * Toggle zoom in full on the selected track.
   */
  static readonly COMMAND_VIEW_ZOOMSELECTEDTRACK: string;

  /**
   * Zoom to the time selection.
   */
  static readonly COMMAND_VIEW_ZOOMTOSELECTION: string;

  /**
   * Zoom way in at the time selection In point.
   */
  static readonly COMMAND_VIEW_ZOOMWAYINATINPOINT: string;

  /**
   * Zoom way in at the time selection Out point.
   */
  static readonly COMMAND_VIEW_ZOOMWAYINATOUTPOINT: string;

  /**
   * Opens or closes the Amplitude Statistics panel.
   */
  static readonly COMMAND_WINDOW_AMPLITUDESTATISTICS: string;

  /**
   * Opens or closes the Diagnostics panel.
   */
  static readonly COMMAND_WINDOW_ANALYSISEFFECTS: string;

  /**
   * Opens or closes the Essential Sound panel.
   */
  static readonly COMMAND_WINDOW_BASICADJUSTMENTS: string;

  /**
   * Opens or closes the Batch Process panel.
   */
  static readonly COMMAND_WINDOW_BATCHPROCESS: string;

  /**
   *
   */
  static readonly COMMAND_WINDOW_BROWSEANDRUNSCRIPT: string;

  /**
   * Opens the Clip Properties panel.
   */
  static readonly COMMAND_WINDOW_CLIPPROPERTIES: string;

  /**
   *
   */
  static readonly COMMAND_WINDOW_CONSOLE: string;

  /**
   *
   */
  static readonly COMMAND_WINDOW_DEBUGMONITOR: string;

  /**
   *
   */
  static readonly COMMAND_WINDOW_DEBUGRENDERGRAPH: string;

  /**
   * Opens or closes the Editor panel.
   */
  static readonly COMMAND_WINDOW_EDITOR: string;

  /**
   * Opens or closes the Effects Rack panel.
   */
  static readonly COMMAND_WINDOW_EFFECTSRACK: string;

  /**
   * Opens or closes the Favorites panel.
   */
  static readonly COMMAND_WINDOW_FAVORITES: string;

  /**
   * Opens or closes the Files panel.
   */
  static readonly COMMAND_WINDOW_FILES: string;

  /**
   * Opens or closes the Frequency Analysis panel.
   */
  static readonly COMMAND_WINDOW_FREQUENCYANALYSIS: string;

  /**
   * Opens or closes the History panel.
   */
  static readonly COMMAND_WINDOW_HISTORY: string;

  /**
   * Opens or closes the Level Meters panel.
   */
  static readonly COMMAND_WINDOW_LEVELS: string;

  /**
   * Opens or closes the Markers panel.
   */
  static readonly COMMAND_WINDOW_MARKERS: string;

  /**
   * Opens or closes the Match Loudness panel.
   */
  static readonly COMMAND_WINDOW_MATCHVOLUME: string;

  /**
   * Opens or closes the Media Browser panel.
   */
  static readonly COMMAND_WINDOW_MEDIABROWSER: string;

  /**
   * Opens or closes the Metadata panel.
   */
  static readonly COMMAND_WINDOW_METADATA: string;

  /**
   * Minimizes the window.
   */
  static readonly COMMAND_WINDOW_MINIMIZE: string;

  /**
   * Opens or closes the Mixer panel.
   */
  static readonly COMMAND_WINDOW_MIXER: string;

  /**
   * Opens or closes the Phase Analysis panel.
   */
  static readonly COMMAND_WINDOW_PHASEANALYSIS: string;

  /**
   * Opens or closes the Phase Meter panel.
   */
  static readonly COMMAND_WINDOW_PHASEMETER: string;

  /**
   * Opens or closes the Playlist panel.
   */
  static readonly COMMAND_WINDOW_PLAYLIST: string;

  /**
   * Opens or closes the Properties panel.
   */
  static readonly COMMAND_WINDOW_PROPERTIES: string;

  /**
   * Opens or closes the Selection|View panel.
   */
  static readonly COMMAND_WINDOW_SELECTIONVIEW: string;

  /**
   * Opens the Session Properties panel.
   */
  static readonly COMMAND_WINDOW_SESSIONPROPERTIES: string;

  /**
   * Opens or closes the Track Panner panel.
   */
  static readonly COMMAND_WINDOW_SURROUNDPANNER: string;

  /**
   * Opens or closes the Time panel.
   */
  static readonly COMMAND_WINDOW_TIME: string;

  /**
   * Toggle the active frame between maximum and normal size.
   */
  static readonly COMMAND_WINDOW_TOGGLEMAXIMIZEACTIVEFRAME: string;

  /**
   * Opens or closes the toolbar.
   */
  static readonly COMMAND_WINDOW_TOOLS: string;

  /**
   * Opens or closes the Transport panel.
   */
  static readonly COMMAND_WINDOW_TRANSPORT: string;

  /**
   *
   */
  static readonly COMMAND_WINDOW_UINODESPY: string;

  /**
   * Opens or closes the Video panel.
   */
  static readonly COMMAND_WINDOW_VIDEO: string;

  /**
   * Opens or closes the Zoom panel.
   */
  static readonly COMMAND_WINDOW_ZOOM: string;

  /**
   * Opens the Edit Workspaces dialog to delete or reorder saved workspaces.
   */
  static readonly COMMAND_WORKSPACE_EDITWORKSPACES: string;

  /**
   * Saves the current workspace with a user enterable name.
   */
  static readonly COMMAND_WORKSPACE_NEWWORKSPACE: string;

  /**
   * Reverts changes to the current workspace and resets to the saved layout of the workspace.
   */
  static readonly COMMAND_WORKSPACE_RESETWORKSPACE: string;

  /**
   * Saves the current layout of the workspace to be recalled later.
   */
  static readonly COMMAND_WORKSPACE_SAVEWORKSPACE: string;

  /**
   * Switch to first workspace in Workspace menu.
   */
  static readonly COMMAND_WORKSPACE_WORKSPACE1: string;

  /**
   * Switch to second workspace in Workspace menu.
   */
  static readonly COMMAND_WORKSPACE_WORKSPACE2: string;

  /**
   * Switch to third workspace in Workspace menu.
   */
  static readonly COMMAND_WORKSPACE_WORKSPACE3: string;

  /**
   * Switch to fourth workspace in Workspace menu.
   */
  static readonly COMMAND_WORKSPACE_WORKSPACE4: string;

  /**
   * Switch to fifth workspace in Workspace menu.
   */
  static readonly COMMAND_WORKSPACE_WORKSPACE5: string;

  /**
   * Switch to sixth workspace in Workspace menu.
   */
  static readonly COMMAND_WORKSPACE_WORKSPACE6: string;

  /**
   * Switch to seventh workspace in Workspace menu.
   */
  static readonly COMMAND_WORKSPACE_WORKSPACE7: string;

  /**
   * Switch to eighth workspace in Workspace menu.
   */
  static readonly COMMAND_WORKSPACE_WORKSPACE8: string;

  /**
   * Switch to ninth workspace in Workspace menu.
   */
  static readonly COMMAND_WORKSPACE_WORKSPACE9: string;

  /**
   * Get the currently active document.
   */
  readonly activeDocument: Document;

  /**
   * Application build number
   */
  readonly buildNumber: string;

  /**
   * Get currently opened documents
   */
  readonly documents: Document[];

  /**
   * Engine local persitent settings.
   */
  readonly localPreferences: Preferences;

  /**
   * Path of the application executable.
   */
  readonly location: string;

  /**
   * Application name
   */
  readonly name: string;

  /**
   * Application platform
   */
  readonly platform: string;

  /**
   * Playing recording and navigating time
   */
  readonly transport: object;

  /**
   * Application version
   */
  readonly version: string;

  /**
   *
   */
  static __(): any;

  /**
   *
   */
  static addEventListener(): any;

  /**
   *
   */
  static dispatchEvent(): any;

  /**
   *
   * @param command Invokes a particular application command by its identifier string. These are similar to the commands shown in the Keyboard Shortcuts dialog. Returns true on success.
   */
  invokeCommand(command: string): boolean;

  /**
   *
   * @param command Returns true if the current application command is enabled and can be called in the current state.
   */
  isCommandEnabled(command: string): boolean;

  /**
   *
   * @param openParameter Open a document using specified DocumentOpenParameter.
   */
  openDocument(openParameter: DocumentOpenParameter): Document;

  /**
   * Quit application
   */
  quit(): boolean;

  /**
   *
   */
  static removeEventListener(): any;
}

/**
 * Command event object
 */
declare class CommandEvent {
  /**
   * A command is about to be invoked
   */
  static readonly EVENT_INVOKE_COMMAND: string;

  /**
   * Description of the command.
   */
  readonly description: string;

  /**
   * Name of the command.
   */
  readonly name: string;

  /**
   * Title of the command.
   */
  readonly title: string;

  /**
   *
   */
  static __(): any;
}

/**
 * This is the base class for all document types. There are also specialized types for certain document types like e.g. WaveDocument
 */
declare class Document {
  /**
   * Display name of the document as shown in the UI. It doesn't necessarily refers to the file name without filename extension.
   */
  readonly displayName: string;

  /**
   * Unique identifier of this document.
   */
  readonly id: string;

  /**
   * Returns a platform-specific path to the document on disk or empty if it doesn't currently have a path.
   */
  readonly path: string;
}

/**
 * This events is fired if one or more documents related event happened.
 */
declare class DocumentEvent {
  /**
   * This event is fired when a document was closed.
   */
  static readonly EVENT_CLOSED: string;

  /**
   * This event is fired when a document was created or opened.
   */
  static readonly EVENT_NEW: string;

  /**
   * This event is fired after a document was saved.
   */
  static readonly EVENT_SAVED: string;

  /**
   * This event is fired after the time selection of a document has changed.
   */
  static readonly EVENT_TIMESELECTIONCHANGED: string;

  /**
   * Unique document ID.
   */
  readonly documentID: string;

  /**
   * Document file path.
   */
  readonly path: string;

  /**
   *
   */
  static __(): any;
}

/**
 * A set of parameters used to open an existing document
 */
declare class DocumentOpenParameter {
  /**
   * Full path of document
   */
  path: string;

  /**
   *
   * @param documentPath Construct a new DocumentOpenParameter object
   */
  constructor(documentPath: string);

  /**
   *
   */
  static __(): any;
}

/**
 * This events propagates changes of the Audition transport like e.g. playback started.
 */
declare class TransportEvent {
  /**
   * This event is fired when looping was switched on.
   */
  static readonly EVENT_LOOPSTARTED: string;

  /**
   * This event is fired when looping was switched off.
   */
  static readonly EVENT_LOOPSTOPPED: string;

  /**
   * This event is fired when the currently active player has paused to play.
   */
  static readonly EVENT_PAUSESTARTED: string;

  /**
   * This event is fired when the currently active player has unpaused to play.
   */
  static readonly EVENT_PAUSESTOPPED: string;

  /**
   * This event is fired when the currently active player has started to play.
   */
  static readonly EVENT_PLAYERSTARTED: string;

  /**
   * This event is fired when the currently active player has stopped to play.
   */
  static readonly EVENT_PLAYERSTOPPED: string;

  /**
   * This event is fired when the currently active player has started to record.
   */
  static readonly EVENT_RECORDSTARTED: string;

  /**
   * This event is fired when the currently active player has stopped to record.
   */
  static readonly EVENT_RECORDSTOPPED: string;

  /**
   *
   */
  static __(): any;
}

/**
 * The Transport object provides access to the Audition transport layer.
 */
declare class Transport {
  /**
   * true if playback or recording is paused
   */
  readonly isPaused: boolean;

  /**
   * true if playing is enabled
   */
  readonly isPlayEnabled: boolean;

  /**
   * true if currently playing audio
   */
  readonly isPlaying: boolean;

  /**
   * true if recording is enabled
   */
  readonly isRecordEnabled: boolean;

  /**
   * true if currently recording audio
   */
  readonly isRecording: boolean;

  /**
   * enable|disable looping
   */
  loop: boolean;

  /**
   * pause|unpause playing or recording audio
   */
  pause(): boolean;

  /**
   * start|continue playing current audio
   */
  play(): boolean;

  /**
   * start|continue recording audio
   */
  record(): boolean;

  /**
   * stop playing or recording audio
   */
  stop(): boolean;
}

/**
 * Collection of all audio tracks of the according multitrack document as a mixed collection consiting of audio clip tracks, audio bus tracks and the master track. If accessed by index then the index starts with audio clip tracks, followed by audio bus tracks and the master track as the last entry.
 */
declare class MixedAudioTrackCollection {
  /**
   * Collection of all audio bus tracks of the multitrack document.
   */
  readonly audioBusTracks: AudioTrackCollection;

  /**
   * Collection of all audio clip tracks of the multitrack document.
   */
  readonly audioClipTracks: AudioTrackCollection;

  /**
   * Returns an audio track by its index
   */
  readonly index: AudioTrack;

  /**
   * Number of audio tracks.
   */
  readonly length: number;

  /**
   * The master track of the multitrack document.
   */
  readonly masterTrack: AudioTrack;

  /**
   *
   * @param layout
   * @param trackType Add new track
   */
  add(layout: AudioChannelLayout, trackType: number): AudioTrack;

  /**
   *
   * @param name Return audio track by its name
   */
  getAudioTrack(name: string): AudioTrack;

  /**
   *
   * @param track Remove track
   */
  remove(track: AudioTrack): boolean;
}

/**
 * Onboarding Support
 */
declare class OnboardingSupport {
  /**
   *
   */
  readonly currentUserUID: string;

  /**
   * Construct new OnboardingSupportObject object
   */
  constructor();

  /**
   *
   */
  static __(): any;

  /**
   *
   * @param CommandID
   */
  indicateMainMenuItem(CommandID: string): boolean;

  /**
   *
   * @param stepData WorkflowStatus : [String] workflow step action WorkflowID : [String] workflow guid WorkflowName : [String] name WorkflowSessionID : [String] session identifier WorkflowAttempts : [Number] number of attempts WorkflowStepsTotal : [Number] total number of steps WorkflowDurationMS : [Number] duration
   */
  onWorkflowAction(stepData: object): boolean;

  /**
   *
   * @param stepData WorkflowStatus : [String] workflow step action WorkflowID : [String] workflow guid WorkflowName : [String] name WorkflowSessionID : [String] session identifier WorkflowAttempts : [Number] number of attempts WorkflowStepsTotal : [Number] total number of steps WorkflowStepInteractivity : [String] step interactivity WorkflowStep : [Number] current step WorkflowStepDurationMS : [Number] duration WorkflowStepRetries : [Number] number of retries WorkflowDurationMS : [Number] duration
   */
  onWorkflowStepAction(stepData: object): boolean;
}

/**
 * An event to inform about succes or failures of an add multitrack document to queue operation.
 */
declare class AMEAddMultitrackDocumentToQueueEvent {
  /**
   * An event with this type is propagated if a multitrack document failed to be added to the Adobe Media Encoder queue
   * Add to queue failed event type
   */
  static readonly EVENT_ADDMULTITRACKDOCUMENTTOQUEUE_ERROR: string;

  /**
   * An event with this type is propagated if a multitrack document was added to the Adobe Media Encoder queue successfully
   * Add to queue succeeded event type
   */
  static readonly EVENT_ADDMULTITRACKDOCUMENTTOQUEUE_SUCCESS: string;

  /**
   * Provides additional information for this event esspecially in the case of an error.
   */
  readonly message: string;

  /**
   *
   */
  static __(): any;
}

/**
 * An event to inform about the audio channel configuration of a preset.
 */
declare class AMEAudioChannelConfigurationEvent {
  /**
   * An event with this type is propagated if a request for audio channel configuration failed
   * Request audio channel configuration failed event type
   */
  static readonly EVENT_REQUESTAUDIOCHANNELCONFIGURATION_ERROR: string;

  /**
   * An event with this type is propagated if a request for audio channel configuration succeeded
   * Request audio channel configuration succeeded event type
   */
  static readonly EVENT_REQUESTAUDIOCHANNELCONFIGURATION_SUCCESS: string;

  /**
   * The audio channel configuration of this preset. You have to request it by calling requestAudioChannelConfiguration beforehands.
   */
  readonly audioChannelConfiguration: string;

  /**
   *
   */
  static __(): any;
}

/**
 * Representation of an effect instance in either the effects rack of a wave document, clip or track. New effects can be created by calling the insertEffect method on an effect rack slot.
 */
declare class Effect {
  /**
   * The component ID of the effect.
   */
  readonly componentID: string;

  /**
   * The name of this effect.
   */
  readonly name: string;

  /**
   * Return an array of objects containing information about each parameter of the effect.Each object provides the following properties; name - paramater name; label - parameter title; unit - unit of the parameter values (not all effects provide this information); minimum - the lower bound of the arameter value range (not all effects provide this information); maximum - the upper bound of the parameter value range (not all effects provide this information)
   */
  readonly parameterInfos: any[];

  /**
   * Return an array containing all presets of this effect.
   */
  readonly presets: EffectPreset[];

  /**
   *
   * @param paramName Return the physical value of the parameter specified by paramName. All available parameters and their names can be retrieved by using the parameterInfos property.
   */
  getParameter(paramName: string): number;

  /**
   *
   * @param paramName
   * @param value Set the physical value of the parameter specified by paramName. All available parameters and their names can be retrieved by using the parameterInfos property.
   */
  setParameter(paramName: string, value: number): number;

  /**
   *
   * @param preset Set the specified preset.
   */
  setPreset(preset: EffectPreset): boolean;
}

/**
 * An EffectPreset represents a particular preset of an effect component.
 */
declare class EffectPreset {
  /**
   * The name of this effect preset.
   */
  readonly name: string;
}

/**
 * This object represents an effect rack of a multitrack session clip or track. It provides access to all effects of the rack as well as to the slots of the rack.
 */
declare class EffectRack {
  /**
   * EffectRackSlotCollection which gives access to the single slots of the rack.
   */
  readonly slots: EffectRackSlotCollection;
}

/**
 * An EffectRackSlot represents a slot of an effect rack.
 */
declare class EffectRackSlot {
  /**
   * The slot effect.
   */
  readonly effect: Effect;

  /**
   * Power state of the slot.
   */
  power: boolean;

  /**
   *
   * @param nameOrComponentID Create a new instance of an effect and store it within this slot.
   */
  insertEffect(nameOrComponentID: string): boolean;

  /**
   * Remove the effect stored within this slot.
   */
  removeEffect(): boolean;
}

/**
 * EffectRackSlotCollection provides access to all slots of an effect rack. Beside that new effects can be assigned to a slot or an existing effect can be removed from a slot.
 */
declare class EffectRackSlotCollection {
  /**
   * Slot at index
   */
  readonly index: EffectRackSlot;

  /**
   * Number of available slots.
   */
  readonly length: number;
}

/**
 * A small overlay window pointing to a certain point in the applications user interface
 */
declare class IndicatorOverlay {
  /**
   * Anchor point bottom edge
   */
  static readonly ANCHOR_BOTTOM_EDGE: number;

  /**
   * Anchor point left edge
   */
  static readonly ANCHOR_LEFT_EDGE: number;

  /**
   * Anchor point right edge
   */
  static readonly ANCHOR_RIGHT_EDGE: number;

  /**
   * Anchor point top edge
   */
  static readonly ANCHOR_TOP_EDGE: number;

  /**
   *
   * @param ctrlPath
   * @param direction
   * @param text
   * @param animation
   * @param persistent Construct new IndicatorOverlay object
   */
  constructor(
    ctrlPath: string,
    direction: number,
    text: string,
    animation: boolean,
    persistent: boolean
  );

  /**
   *
   */
  static __(): any;

  /**
   * Hide the overlay
   */
  hide(): boolean;

  /**
   * Show the overlay
   */
  show(): boolean;
}

/**
 * AMEFormat represents a format of the Adobe Media Encoder
 */
declare class AMEFormat {
  /**
   * The file name extension used by this format.
   */
  readonly extension: string;

  /**
   * The name of this format.
   */
  readonly name: string;

  /**
   * Request the available user match source and system presets for this format from Adobe Media Encoder. An event with type AMEPresetsEvent.EVENT_RequestPresetsSuccess or AMEPresetsEvent.EVENT_RequestPresetsError will be sent to notify about success or failure.
   * Request the available presets for this format from AME.
   */
  requestPresets(): boolean;
}

/**
 * An event to inform about formats that are availbe for running an export.
 */
declare class AMEFormatsEvent {
  /**
   * An event with this type is propagated if a request for formats from Adobe Media Encoder failed
   * Request formats failed event type
   */
  static readonly EVENT_REQUESTFORMATS_ERROR: string;

  /**
   * An event with this type is propagated if a request for formats from Adobe Media Encoder succeeded
   * Request formats succeeded event type
   */
  static readonly EVENT_REQUESTFORMATS_SUCCESS: string;

  /**
   * The formats available for running an export.
   */
  readonly formats: any[];

  /**
   *
   */
  static __(): any;
}

/**
 * An event to inform about the exporter settings summary of a preset.
 */
declare class AMEExporterSettingsSummaryEvent {
  /**
   * An event with this type is propagated if a request for exporter settings summary failed
   * Request exporter settings summary failed event type
   */
  static readonly EVENT_REQUESTEXPORTERSETTINGSSUMMARY_ERROR: string;

  /**
   * An event with this type is propagated if a request for exporter settings summary succeeded
   * Request exporter settings summary succeeded event type
   */
  static readonly EVENT_REQUESTEXPORTERSETTINGSSUMMARY_SUCCESS: string;

  /**
   * The exporter settings summary of this preset.
   */
  readonly exporterSettingsSummary: string;

  /**
   *
   */
  static __(): any;
}

/**
 * Compute the MD5 hash of the audio data within a wave document so that it can be easily compared against a baseline.
 */
declare class MD5 {
  /**
   *
   */
  static __(): any;

  /**
   *
   * @param wavedocument Compute the MD5 hash of the audio data within a wave document
   */
  static hash(wavedocument: WaveDocument): string;
}

/**
 * Persistence object that store/restore any values.
 */
declare class Preferences {
  /**
   *
   * @param key Retrieve value as boolean
   */
  getBoolValue(key: string): boolean;

  /**
   *
   * @param key Retrieve value as number
   */
  getNumberValue(key: string): number;

  /**
   *
   * @param key Retrieve value as string
   */
  getStringValue(key: string): string;

  /**
   *
   * @param key
   * @param value Set value as boolean
   */
  setBoolValue(key: string, value: boolean): boolean;

  /**
   *
   * @param key
   * @param value Set value as number
   */
  setNumberValue(key: string, value: number): boolean;

  /**
   *
   * @param key
   * @param value Store value as string
   */
  setStringValue(key: string, value: string): boolean;
}

/**
 * AMEServer represents a DynanicLink connection to Adobe Media Encoder
 */
declare class AMEServer {
  /**
   *
   */
  static __(): any;

  /**
   *
   */
  static addEventListener(): any;

  /**
   *
   * @param multitrackDocument
   * @param trackRouting
   * @param preset
   * @param temporaryFilesDir
   * @param outputFile Add the selected tracks of a multitrack document to the AME queue. The routing information is passed in as an array of tracks. The first track in the array will be routed to the first channels in the output file. A channel can be left unassigned by adding null to the array "trackRouting". Beside the final output file you have to specify a directory to store temporary wave files as well as the temporary project file. The temporary files will be deleted by AME after the export has been completed. An event with type AMEAddMultitrackDocumentToQueueEvent.EVENT_ADDMULTITRACKDOCUMENTTOQUEUE_SUCCESS or AMEAddMultitrackDocumentToQueueEvent.EVENT_ADDMULTITRACKDOCUMENTTOQUEUE_ERROR will be sent to notify about success or failure. Add the selected tracks of a multitrack document to the AME queue.
   */
  addMultitrackDocumentAndRoutingToQueue(
    multitrackDocument: Document,
    trackRouting: any[],
    preset: AMEPreset,
    temporaryFilesDir: string,
    outputFile: string
  ): boolean;

  /**
   * Connect to AME. An event with type DynamicLinkConnectionEvent.EVENT_CONNECTION will be sent to notify about success or failure.
   * Connect to AME.
   */
  connect(): boolean;

  /**
   * Disconnect from AME.
   */
  disconnect(): boolean;

  /**
   *
   */
  static dispatchEvent(): any;

  /**
   *
   */
  static removeEventListener(): any;

  /**
   * Request the available formats from AME. An event with type AMEFormatsEvent.EVENT_REQUESTFORMATS_SUCCESS or AMEFormatsEvent.EVENT_REQUESTFORMATS_ERROR will be sent to notify about success or failure.
   * Request the available formats from AME.
   */
  requestFormats(): boolean;
}

/**
 * AMEPreset represents a single preset of Adobe Media Encoder
 */
declare class AMEPreset {
  /**
   * The name of this preset.
   */
  readonly name: string;

  /**
   * Request the audio channel configuration of this preset from AME. An event with type AMEAudioChannelConfigurationEvent.EVENT_RequestAudioChannelConfigurationSuccess or AMEAudioChannelConfigurationEvent.EVENT_RequestAudioChannelConfigurationError will be sent to notify about success or failure.
   * Request the audio channel configuration of this preset from AME.
   */
  requestAudioChannelConfiguration(): boolean;

  /**
   * Request the exporter settings summary of this preset from AME.Request the exporter settings summary of this preset from AME. An event with type AMEExporterSettingsSummaryEvent.EVENT_RequestExporterSettingsSummarySuccess or AMEExporterSettingsSummaryEvent.EVENT_RequestExporterSettingsSummaryError will be sent to notify about success or failure.
   */
  requestExporterSettingsSummary(): boolean;
}

/**
 * An event to inform about the available user, match source and system presets of a format.
 */
declare class AMEPresetsEvent {
  /**
   * An event with this type is propagated if a request for Adobe Media Encoder presets failed
   * Request Adobe Media Encoder presets failed event type
   */
  static readonly EVENT_REQUESTPRESETS_ERROR: string;

  /**
   * An event with this type is propagated if a request for Adobe Media Encoder presets succeeded
   * Request Adobe Media Encoder presets succeeded event type
   */
  static readonly EVENT_REQUESTPRESETS_SUCCESS: string;

  /**
   * Available match source presets for this format.
   */
  readonly matchSourcePresets: any[];

  /**
   * Available system presets for this format.
   */
  readonly systemPresets: any[];

  /**
   * Available user presets for this format.
   */
  readonly userPresets: any[];

  /**
   *
   */
  static __(): any;
}

/**
 * A global class containing central information about ScriptUI. Not instantiable.
 */
declare class ScriptUI {
  /**
   * Collects the enumerated values that can be used in the alignment and alignChildren properties of controls and containers.
   * Predefined alignment values are: TOP, BOTTOM, LEFT, RIGHT, FILL, CENTER
   */
  static readonly Alignment: string;

  /**
   * Collects the enumerated values that can be used as the style argument to the ScriptUI.newFont() method.
   * Predefined styles are REGULAR, BOLD, ITALIC, BOLDITALIC.
   */
  static readonly FontStyle: object;

  /**
   * The font constants defined by the host application.
   */
  static readonly applicationFonts: object;

  /**
   * An object whose properties are the names of compatability modes supported by the host application.
   * The presence of ScriptUI.compatability.su1PanelCoordinates means that the application allows backward compatibility with the coordinate system of Panel elements in ScriptUI version 1.
   */
  static readonly compatibility: object;

  /**
   * A string containing the internal version number of the ScriptUI module.
   */
  static readonly coreVersion: string;

  /**
   * An object whose properties define attributes of the environment in which ScriptUI operates.
   */
  static readonly environment: Environment;

  /**
   * An object whose properties and methods provide access to objects used in the ScriptUI event system.
   * It contains one function, createEvent(), which allows you to create event objects in order to simulate user-interaction event
   */
  static readonly events: Events;

  /**
   * A string containing the name of the UI component framework with which this version of ScriptUI is compatible.
   */
  static readonly frameworkName: string;

  /**
   * A string containing the version number of the ScriptUI component framework
   */
  static readonly version: any;

  /**
   * Finds and returns the resource for a given text string from the host application's resource data.
   * If no string resource matches the given text, the text itself is returned.
   * @param text The text to match.
   */
  static getResourceText(text: string): string;

  /**
   * Creates a new font object for use in text controls and titles.
   * @param name The font name, or the font family name.
   * @param style The font style; can be string, or one of the values of ScriptUI.FontStyle.
   * @param size The font size in points.
   */
  static newFont(name: string, style: string, size: number): ScriptUIFont;

  /**
   * Loads a new image from resources or disk files into an image object.
   * Creates a new global image object for use in controls that can display images, loading the associated images from the specified resources or image files.
   * @param normal The resource name or the disk file path to the image used for the normal state.
   * @param disabled The resource name, or the disk file path to the image used for the disabled state.
   * @param pressed The resource name, or the file-system path to the image used for the pressed state.
   * @param rollover The resource name, or the file-system path to the image used for the rollover state.
   */
  static newImage(
    normal: string,
    disabled?: string,
    pressed?: string,
    rollover?: string
  ): ScriptUIImage;
}

/**
 * The instance represents a top-level window or dialog box, which contains user-interface elements.
 * The globally available Window object provides access to predefined and script-defined windows.
 */
declare class Window extends _Control {
  /**
   * Set to true to make this window active.
   * A modal dialog that is visible is by definition the active dialog.
   * An active palette is the front-most window.
   * An active control is the one with focus—that is, the one that accepts keystrokes, or in the case of a Button, be selected when the user typesReturn or Enter.
   */
  active: boolean;

  /**
   * Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.
   * Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.
   */
  alignChildren: string;

  /**
   * For windows of type dialog, the UI element to notify when the user presses a cancellation key combination.
   * The cancellation key is the Esc key. By default, looks for a button whose name or text is "cancel" (case disregarded).
   */
  cancelElement: object;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the window.
   */
  characters: number;

  /**
   * The collection of UI elements that have been added to this container.
   * An array indexed by number or by a string containing an element's name. The length property of this array is the number of child elements for container elements, and is zero for controls.
   */
  readonly children: object[];

  /**
   * For windows of type dialog, the UI element to notify when the user presses a Enter key.
   * By default, looks for a button whose name or text is "ok" (case disregarded).
   */
  defaultElement: object;

  /**
   * The bounds of the window frame in screen coordinates.
   * The frame consists of the title bar and borders that enclose the content region of a window, depending on the windowing system.
   */
  readonly frameBounds: Bounds | [number, number, number, number];

  /**
   * The top left corner of the window frame in screen coordinates.
   * The same as [frameBounds.x, frameBounds.y]. Set this value to move the window frame to the specified location on the screen. The frameBounds value changes accordingly.
   */
  frameLocation: Point | [number, number];

  /**
   * The size and location of the window's frame in screen coordinates.
   */
  readonly frameSize: Dimension | [number, number];

  /**
   * Deprecated. Use ScriptUI.frameworkName instead.
   */
  static readonly frameworkName: string;

  /**
   * The graphics object that can be used to customize the window’s appearance, in response to the onDraw event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager;

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number;

  /**
   * True if the window is expanded.
   */
  maximized: boolean;

  /**
   * True if the window is minimized or iconified.
   */
  minimized: boolean;

  /**
   * The opacity of the window, in the range [0..1].
   * A value of 1.0 (the default) makes the window completely opaque, a value of 0 makes it completely transparent. Intermediate values make it partially transparent to any degree.
   */
  opacity: number;

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string;

  /**
   * The keypress combination that invokes this element's onShortcutKey() callback.
   */
  shortcutKey: string;

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number;

  /**
   * The title, label, or displayed text, a localizeable string.
   * Does not apply to containers of type group.
   */
  text: string;

  /**
   * Deprecated. Use ScriptUI.version instead.
   */
  static readonly version: any;

  /**
   * Creates a new window.
   * @param type The window type. One of: window: Creates a simple window that can be used as a main window for an application. (Not supported by Photoshop CS3.) palette: Creates a modeless dialog, also called a floating palette. (Not supported by Photoshop CS3.) dialog: Creates a modal dialog. This argument can also be a ScriptUI resource specification; in that case, all other arguments are ignored.
   * @param title The window title, a localizable string.
   * @param bounds The window's position and size.
   * @param properties An object containing creation-only properties.
   */
  constructor(
    type: string,
    title?: string,
    bounds?: Bounds | [number, number, number, number],
    properties?: Partial<_ControlPropertiesMap["window"]>
  );

  /**
   * Creates and returns a new control or container object and adds it to the children of this window.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd;

  /**
   * Displays a platform-standard dialog containing a short message and an OK button.
   * @param message TThe string for the displayed message.
   * @param title A string to appear as the title of the dialog, if the platform supports a title. Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is "Script Alert".
   * @param errorIcon When true, the platform-standard alert icon is replaced by the platform-standard error icon in the dialog. Ignored in Mac OS, which does not support icons for alert dialogs.
   */
  static alert(message: string, title?: string, errorIcon?: boolean): void;

  /**
   * Centers this window on screen or with repect to another window.
   * @param window The relative window. If not specified, centers on the screen.
   */
  center(window?: Window): void;

  /**
   * Closes this window.
   * . If an onClose() callback is defined for the window, calls that function before closing the window.
   * @param return_ A number to be returned from the show() method that invoked this window as a modal dialog.
   */
  close(return_?: any): void;

  /**
   * Displays a platform-standard dialog containing a short message and two buttons labeled Yes and No.
   * Returns true if the user clicked Yes, false if the user clicked No.
   * @param message The string for the displayed message.
   * @param noAsDefault When true, the No button is the default choice, selected when the user types Enter. Default is false, meaning that Yes is the default choice.
   * @param title A string to appear as the title of the dialog, if the platform supports a title. Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is "Script Alert".
   */
  static confirm(
    message: string,
    noAsDefault: boolean,
    title?: string
  ): boolean;

  /**
   * Use this method to find an existing window.
   * This includes windows defined by ScriptUI resource strings, windows already created by a script, and windows created by the application (if the application supports this case). This function is not supported by all applications. Returns a Window object found or generated from the resource, or null if no such window or resource exists.
   * @param type The name of a predefined resource available to JavaScript in the current application; or the window type. If a title is specified, the type is used if more than one window with that title is found. Can be null or the empty string.
   * @param title The window title.
   */
  static find(type: string, title: string): Window;

  /**
   * Sends a notification message to all listeners, simulating the specified user interaction event.
   * @param eventName The event name; if omitted, the default event is sent. One of: onClose, onMove, onMoving, onResize, onResizing, onShow
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the window acquires the keyboard focus.
   * Called when the user gives the window the keyboard focus by clicking it or otherwise making it the active window.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, calledwhen the window is about to be closed.
   * Called when a request is made to close the window, either by an explicit call to the close() function or by a user action (clicking the OS-specific close icon in the title bar). The function is called before the window actually closes; it can return false to cancel the close operation.
   */
  onClose(): boolean;

  /**
   * An event-handler callback function, called when the window loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active window to another window.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, calledwhen the windowhas been moved
   */
  onMove(): void;

  /**
   * An event-handler callback function, calledwhen the window is being moved
   * Called while a window in being moved, each time the position changes. A handler can monitor the move operation.
   */
  onMoving(): void;

  /**
   * An event-handler callback function, called after the window has been resized
   */
  onResize(): void;

  /**
   * An event-handler callback function, called while a window is being resized
   * Called while a window is being resized, each time the height or width changes. A handler can monitor the resize operation.
   */
  onResizing(): void;

  /**
   * In Windows only, an event-handler callback function, called a shortcut-key sequence is typed that matches the shortcutKey value for this window.
   */
  onShortcutKey(): void;

  /**
   * An event-handler callback function, called just before the window is displayed
   * Called when a request is made to open the window using the show() method, before the window is made visible, but after automatic layout is complete. A handler can modify the results of the automatic layout.
   */
  onShow(): void;

  /**
   * Displays a modal dialog that returns the user’s text input.
   * Returns the value of the text edit field if the user clicked OK, null if the user clicked Cancel.
   * @param prompt The string for the displayed message.
   * @param default_ The initial value to be displayed in the text edit field.
   * @param title A string to appear as the title of the dialog. In Windows, this appears in the window’s frame; in Mac OS it appears above the message. The default title string is "Script Prompt".
   */
  static prompt(prompt: string, default_?: string, title?: string): string;

  /**
   * Removes the specified child control from this window’s children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void;
}

/**
 * Controls the automatic layout behavior for a window or container.
 * The subclass AutoLayoutManager implements the default automatic layout behavior.
 */
declare class LayoutManager {
  /**
   * Invokes the automatic layout behavior for the managed container.
   * Adjusts sizes and positions of the child elements of this window or container according to the placement and alignment property values in the parent and children.
   * Invoked automatically the first time the window is displayed. Thereafter, the script must invoke it explicitly to change the layout in case of changes in the size or position of the parent or children.
   */
  layout(): void;

  /**
   * Performs a layout after a Window is resized, based on the new size.
   * Resizes the child elements of the managed container with a given alignment type, after the window has been resized by the user.
   */
  resize(): void;
}

/**
 * A drawing pen that defines a color and line width used to stroke paths.
 * Create with ScriptUIGraphics.newPen(). Use as a value of  foregroundColor properties, and pass as an argument to drawString() and strokePath() methods.
 */
declare class ScriptUIPen {
  /**
   * The pen color.
   * The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.
   */
  readonly color: number[];

  /**
   * The pixel width of the drawing line.
   */
  lineWidth: number;

  /**
   * The theme name.
   * The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.
   */
  readonly theme: string;

  /**
   * The pen type, solid or theme.
   * One of these constants: ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR
   */
  readonly type: string;
}

/**
 * A painting brush that encapsulates a color or pattern used to fill paths.
 * Create with ScriptUIGraphics.newBrush(). Use as a value of  backgroundColor properties, and pass as an argument to the fillPath() method.
 */
declare class ScriptUIBrush {
  /**
   * The brush color.
   * The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.
   */
  readonly color: number[];

  /**
   * The theme name.
   * The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.
   */
  readonly theme: string;

  /**
   * The brush type, solid or theme.
   * One of these constants: ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR
   */
  readonly type: number;
}

/**
 * A helper object that encapsulates a drawing path for a figure to be drawn into a window or control.
 * Create with the newPath(), moveto(), lineto(), rectPath(), and ellipsePath() methods.Used as value of currentPath, where it is acted upon by methods such as closePath().Pass as optional argument to fillPath() and strokePath(), which otherwise act upon the current path.
 */
declare class ScriptUIPath {}

/**
 * An object used to draw custom graphics, found in the graphics property of window, container, and control objects.
 * Allows a script to customize aspects of the element’s appearance, such as the color and font. Use an onDraw callback function to set these properties or call the functions.All measurements are in pixels.
 */
declare class ScriptUIGraphics {
  /**
   * Contains the enumerated constants for the type argument of newBrush().
   * Type constants are: SOLID_COLOR, THEME_COLOR.
   */
  static readonly BrushType: object;

  /**
   * Contains the enumerated constants for the type argument of newPen().
   * Type constants are: SOLID_COLOR, THEME_COLOR.
   */
  static readonly PenType: object;

  /**
   * The background color for containers; for non-containers, the parent background color.
   * The paint color and style is defined in this brush object.This property is only supported for controls likedropdownlist, edittext, and listbox.
   */
  backgroundColor: ScriptUIBrush;

  /**
   * The current drawing path, encapsulated in a path object.
   */
  readonly currentPath: ScriptUIPath;

  /**
   * The current position in the current drawing path.
   */
  readonly currentPoint: Point | [number, number];

  /**
   * The background color for containers when disabled or inactive; for non-containers, the parent background color.
   * The paint color and style is defined in this brush object.This property is only supported for controls likedropdownlist, edittext, and listbox.
   */
  disabledBackgroundColor: ScriptUIBrush;

  /**
   * The text color when the element is disabled or inactive.
   * The paint color and style is defined in this pen object.
   */
  disabledForegroundColor: ScriptUIPen;

  /**
   * The default font to use for displaying text.
   */
  font: ScriptUIFont;

  /**
   * The text color.
   * The paint color and style is defined in this pen object.
   */
  foregroundColor: ScriptUIPen;

  /**
   * Closes the current path.
   * Defines a line from the current postion (currentPoint) to the start point of the current path (the value of currentPath).
   */
  closePath(): void;

  /**
   * Draws a focus ring within a region of this element.
   * @param left The left coordinate of the region. Value is relative to the origin of this element.
   * @param top The top coordinate of the region. Value is relative to the origin of this element.
   * @param width The width of the region in pixels.
   * @param height The height of the region in pixels.
   */
  drawFocusRing(left: number, top: number, width: number, height: number): void;

  /**
   * Draws an image within a given region of the element.
   * Uses the version of the image that is appropriate to the element's current state.
   * @param image The image to draw. This object contains different versions of an image appropriate to various element states, such as a dimmed version for the disabled state.
   * @param left The left coordinate of the region, relative to the origin of this element.
   * @param top The top coordinate of the region, relative to the origin of this element.
   * @param width The width in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image width.
   * @param height The height in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image height.
   */
  drawImage(
    image: ScriptUIImage,
    left: number,
    top: number,
    width?: number,
    height?: number
  ): void;

  /**
   * Draw the platform-specific control associated with this element.
   */
  drawOSControl(): void;

  /**
   * Draw a string of text starting at a given point in this element, using a given drawing pen and font.
   * @param text The text string.
   * @param pen The drawing pen to use.
   * @param x The left coordinate, relative to the origin of this element.
   * @param y The top coordinate, relative to the origin of this element.
   * @param font The font to use. Default is the  font value in this object.
   */
  drawString(
    text: string,
    pen: ScriptUIPen,
    x: number,
    y: number,
    font?: ScriptUIFont
  ): void;

  /**
   * Defines an elliptical path within a given rectangular area in the currentPath object, which can be filled using fillPath() or stroked using strokePath().
   * Returns a Point object for the upper left corner of the area, which is the new currentPoint.
   * @param left The left coordinate of the region, relative to the origin of this element.
   * @param top The top coordinate of the region, relative to the origin of this element.
   * @param width The width of the region in pixels.
   * @param height The height of the region in pixels.
   */
  ellipsePath(
    left: number,
    top: number,
    width: number,
    height: number
  ): Point | [number, number];

  /**
   * Fills a path using a given painting brush.
   * @param brush The brush object that defines the fill color.
   * @param path The path object. Default is the currentPath.
   */
  fillPath(brush: ScriptUIBrush, path?: ScriptUIPath): void;

  /**
   * Adds a path segment to the currentPath.
   * The line is defined from the currentPoint to the specified destination point. Returns the Point objectfor the destination point, which becomes the new value of currentPoint.
   * @param x The X coordinate for the destination point, relative to the origin of this element.
   * @param y The Y coordinate for the destination point, relative to the origin of this element.
   */
  lineTo(x: number, y: number): Point | [number, number];

  /**
   * Calculates the size needed to display a string using the given font.
   * Returns a Dimension object that contains the height and width of the string in pixels.
   * @param text The text string to measure.
   * @param font The font to use. Default is the font value in this object.
   * @param boundingWidth The bounding width.
   */
  measureString(
    text: string,
    font?: ScriptUIFont,
    boundingWidth?: number
  ): Dimension | [number, number];

  /**
   * Adds a given point to the currentPath, and makes it the current drawing position.
   * Returns the Point object which is the new value of currentPoint.
   * @param x The X coordinate for the new point, relative to the origin of this element.
   * @param y The Y coordinate for the new point, relative to the origin of this element.
   */
  moveTo(x: number, y: number): Point | [number, number];

  /**
   * Creates a new painting brush object.
   * @param type The brush type, solid or theme. One of the constants ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR.
   * @param color The brush color. If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque. If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application.
   */
  newBrush(type: number, color: number[]): ScriptUIBrush;

  /**
   * Creates a new, empty path object.
   * Replaces any existing path in currentPath.
   */
  newPath(): ScriptUIPath;

  /**
   * Creates a new drawing pen object.
   * @param type The pen type, solid or theme. One of the constants ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR.
   * @param color The pen color. If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque. If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application.
   * @param width The width of the pen line in pixels. The line is centered around the current point. For example, if the value is 2, drawing a line from (0, 10) to (5, 10) paints the two rows of pixels directly above and below y-position 10.
   */
  newPen(type: number, color: number[], width: number): ScriptUIPen;

  /**
   * Defines a rectangular path in the currentPath object.
   * The rectangle can be filled using fillPath() or stroked using strokePath().Returns the Point objectfor the upper left corner of the rectangle, which becomes the new value of currentPoint.
   * @param left The left coordinate relative to the origin of this element.
   * @param top The top coordinate relative to the origin of this element.
   * @param width The width in pixels.
   * @param height The height in pixels.
   */
  rectPath(
    left: number,
    top: number,
    width: number,
    height: number
  ): Point | [number, number];

  /**
   * Strokes the path segments of a path with a given drawing pen.
   * @param pen The drawing pen that defines the color and line width.
   * @param path The path object. Default is the currentPath.
   */
  strokePath(pen: ScriptUIPen, path?: ScriptUIPath): void;
}

/**
 * Describes an input state at the time of the triggering  ScriptUIGraphics.onDraw() event.
 * Contains properties that report whether the current control has the input focus, and the particular mouse button and keypress state. Passed in as argument to ScriptUIGraphics.onDraw().
 */
declare class DrawState {
  /**
   * True if the Alt key is being pressed (in Windows only).
   */
  readonly altKeyPressed: boolean;

  /**
   * True if the Caps Lock key is being pressed.
   */
  readonly capsLockKeyPressed: boolean;

  /**
   * True if the Command key is being pressed (in Mac OS only).
   */
  readonly cmdKeyPressed: boolean;

  /**
   * True if the Ctrl key is being pressed.
   */
  readonly ctrlKeyPressed: boolean;

  /**
   * True if the element has the input focus.
   */
  readonly hasFocus: boolean;

  /**
   * True if the left mouse button is being pressed.
   */
  readonly leftButtonPressed: boolean;

  /**
   * True if the middle mouse button is being pressed.
   */
  readonly middleButtonPressed: boolean;

  /**
   * True if the cursor is hovering over this element.
   */
  readonly mouseOver: boolean;

  /**
   * True if the Num Lock key is being pressed.
   */
  readonly numLockKeyPressed: boolean;

  /**
   * True if the Option key is being pressed (in Mac OS only).
   */
  readonly optKeyPressed: boolean;

  /**
   * True if the right mouse button is being pressed.
   */
  readonly rightButtonPressed: boolean;

  /**
   * True if the Shift key is being pressed.
   */
  readonly shiftKeyPressed: boolean;
}

/**
 * Encapsulates the qualities of a font used to draw text into a control.
 * Create with the newFont() method.Used as a value of font. Passed as an argument to drawString() and measureString().
 */
declare class ScriptUIFont {
  /**
   * The font family name.
   */
  readonly family: string;

  /**
   * The complete font name, consisting of the family and style, if specified.
   */
  readonly name: string;

  /**
   * The font point size.
   */
  readonly size: number;

  /**
   * The font style. One of the constants in ScriptUIGraphics.FontStyle.
   */
  readonly style: object;

  /**
   * The name of a substitution font, a fallback font to substitute for this font if the requested font family or style is not available.
   */
  readonly substitute: string;
}

/**
 * Encapsulates a set of images that can be drawn into a control.
 * Different images can reflect the current state, such as a dimmed version for a disabled control. Create with the newImage() method. Passed as an argument to drawImage().
 */
declare class ScriptUIImage {
  /**
   * The image format. One of: resource, JPEG, GIF, TIFF, PNG, or PICT (Macintosh).
   */
  readonly format: string;

  /**
   * The image name. Either the file name, or the resource name.
   */
  readonly name: string;

  /**
   * The full path to the file that contains the image.
   */
  readonly pathname: string;

  /**
   * The image size in pixels.
   */
  readonly size: Dimension | [number, number];
}

/**
 * A text label that the user cannot change.
 */
declare class StaticText extends _Control {
  /**
   * Always false. This element cannot have input focus.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The text to display, a localizable string.
   */
  text: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A pushbutton element containing a mouse-sensitive text string.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class Button extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The text to display, a localizable string.
   */
  text: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * Amouse-sensitive pushbutton that displays an image instead of text.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class IconButton extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The image object that defines the image to be drawn.
   */
  image: ScriptUIImage;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * An editable text field that the user can select and change.
 * Calls the onChange() callback if the text is changed and the user types Enter or the control loses focus, or if its notify() method is called. Calls the onChanging() callback when any change is made to the text. The textselection property contains currently selected text.
 */
declare class EditText extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The current text displayed in the field, a localizable string.
   */
  text: string;

  /**
   * The currently selected text, or the empty string if there is no text selected.
   * Setting the value replaces the current text selection and modifies the value of the text property. If there is no current selection, inserts the new value into the text string at the current insertion point. The textselection value is reset to an empty string after it modifies the text value. Note that setting the textselection property before the element’s parent Window exists is an undefined operation.
   */
  textselection: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   * The handler is called only when the change is complete—that is, when focus moves to another control, or the user types Enter. The exact behavior depends on the creation parameter enterKeySignalsOnChange;see the properties property.
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for each keypress while this control has the input focus.
   */
  onChanging(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * Displays a list of choices, represented by ListItem objects.
 * When you create the object, you specify whether it allows the user to select only one or multiple items. If a list contains more items than can be displayed in the available area, a scrollbar may appear that allows the user to scroll through all the list items.You can specify the items on creation of the list object, or afterward using the list object’s add() method. You can remove items programmatically with the list object’s remove() and removeAll() methods. You can create a list box with multiple columns; in this case, each row is a selectable choice, and each ListItem represents one row.
 */
declare class ListBox extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child ListItem elements.
   */
  readonly children: object[];

  /**
   * For a multi-column list box, the column properties.
   * A JavaScript object with two read-only properties whose values are set by the creation parameters:
   * titles: An array of column title strings, whose length matches the number of columns specified at creation.
   * preferredWidths: An array of column widths, whose length matches the number of columns specified at creation.
   * visible: An array of boolean visible attributes, whose length matches the number of columns specified at creation.This property can be used to show/hide a column. Avaiblable in ScriptUI Version 6.0 or later provided ScriptUI.frameworkName == 'Flex'.
   */
  readonly columns: object;

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number];

  /**
   * The array of choice items displayed in the list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method. Each item has a selected property that is true when it is in the selected state.
   */
  readonly items: ListItem[];

  /**
   * The currently selected item for a single-selection list, or an array of items for current selection in a multi-selection list.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items. You can set the value using the index of an item or an array of indices, rather than object references. If set to an index value that is out of range, the operation is ignored. When set with index values, the property still returns object references.
   * If you set the value to an array for a single-selection list, only the first item in the array is selected.
   * If you set the value to a single item for a multi-selection list, that item is added to the current selection.
   */
  selection: ListItem;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Adds an item to the choices in this list.
   * Returns the item control object. If this is a multi-column list box, each added ListItem represents one selectable row.Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
   * @param type The type of the child element, the string "item".
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem;

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when an item in the listbox is double-clicked
   * Check the selection property to identify the item that was double-clicked.
   */
  onDoubleClick(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index, text value, or as a ListItem object.
   */
  remove(what: any): void;

  /**
   * Removes all child items from the list.
   */
  removeAll(): void;
}

/**
 * Displays a single visible item. When you click the control, a list drops down or pops up, and allows you to select one of the other items in the list.
 * Drop-down lists can have nonselectable separator items for visually separating groups of related items, as in a menu. You can specify the items on creation of the list object, or afterward using the list object’s add() method. You can remove items programmatically with the list object’s remove() and removeAll() methods. Calls the onChange() callback if the item selection is changed or if its notify() method is called.
 */
declare class DropDownList extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number];

  /**
   * The array of choice items displayed in the drop-down or pop-up list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method. Items in a drop-down list can be of type separator, in which case they cannot be selected, and are shown as a horizontal line. Each item has a selected property that is true when it is in the selected state.
   */
  readonly items: ListItem[];

  /**
   * The currently selectedlist item.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.
   */
  selection: ListItem | number;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Adds an item or separator to the choices in this list.
   * Returns the item control object for type="item", or null for type="separator".
   * @param type The type of the child element. Either item (a basic, selectable item with a text label) or separator
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem;

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index, text value, or as a ListItem object.
   */
  remove(what: any): void;

  /**
   * Removes all child items from the list.
   */
  removeAll(): void;
}

/**
 * An item in a list box, drop-down list, or tree view.
 * You can specify initial items in the creation parameters when creating the parent list. Create new items using the add() method (ListBox.add(), DropDownList.add(), TreeView.add()) in the parent list with control type="item", or, for DropDownList controls, type="separator".For a multi-column list box, the object represents one selectable row. Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
 */
declare class ListItem {
  /**
   * The checked state of an item in a list.
   * When true, the item is marked with the platform-appropriate checkmark. When false, no checkmark is drawn, but space is reserved for it in the left margin, so that the item lines up with other checkable items. When undefined, no space is reserved for a checkmark.
   */
  checked: boolean;

  /**
   * The expansion state of an item of type node that is a child of a TreeView list control.
   * When true, the item is in the expanded state and its children are shown, when false, it is collapsed and children are hidden.
   */
  expanded: boolean;

  /**
   * An image object for an icon to display in the item.
   * When specified, the image appropriate to the selections state is drawn to the left of the text label. If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the subitems property.
   */
  image: ScriptUIImage;

  /**
   * The 0-based index of this item in the items collection of its parent list control.
   */
  readonly index: number;

  /**
   * The parent element, a list control.
   */
  readonly parent: object;

  /**
   * The selection state of this item.
   * When true, the item is part of the selection for its parent list. When false, the item is not selected. Set to true to select this item in a single-selection list, or to add it to the selection array for a multi-selection list.
   */
  selected: boolean;

  /**
   * When the parent is a multi-column ListBox, this describes the labels for this selectable row in additional columns.
   * A array of JavaScript objects whose length is one less than the number of columns. The first member describes the label in the second column. Each member object has two properties, of which you can specify one or both:
   * text: A display string for the corresponding label.
   * image: An ScriptUIImage object for the corresponding label.
   */
  readonly subItems: any[];

  /**
   * The label text to display for the item, a localizable string.
   * If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the subitems property.
   */
  text: string;

  /**
   * The element type.
   * Normally "item", but an item whose parent is a DropDownList control can have type "separator". A separator item is not mouse-sensitive and is drawn as a horizontal line across the drop-down or pop-up menu.
   */
  readonly type: string;
}

/**
 * A dual-state control showing a box that has a checkmark when the value is true, and is empty when the value is false.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class Checkbox extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The text to display, a localizable string.
   */
  text: string;

  /**
   * The selection state of the control.
   * When true, the control is in the selected or set state and displays the check mark. When false, shows an empty box.
   */
  value: boolean;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A scrollbar with a draggable scroll indicator and stepper buttons to move the indicator.
 * The scrollbar control has a horizontal orientation if the width is greater than the height at creation time, or vertical if its height is greater than its width.
 * Calls the onChange() callback after the position of the indicator is changed or if its notify() method is called. Calls the onChanging() callback repeatedly while the user is moving the indicator. Scrollbars are often created with an associated EditText field to display the current value of the scrollbar, and to allow setting the scrollbar's position to a specific value.
 */
declare class Scrollbar extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The amount to increment or decrement a scrollbar indicator's position when the user clicks ahead or behind the moveable element.
   * Default is 20% of the range between the maxvalue and minvalue property values.
   */
  jumpdelta: number;

  /**
   * The maximum value allowed in the value property.
   * Together with minvalue, sets the scrolling range. Default is 100.
   */
  maxvalue: number;

  /**
   * The minimum value allowed in the value property.
   * Together with  maxvalue, sets the scrolling range.Default is 0.
   */
  minvalue: number;

  /**
   * The key sequence that invokes the  onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The amount by which to increment or decrement a scrollbar element's position when the user clicks a stepper button.
   */
  stepdelta: number;

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.
   */
  value: number;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control.
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for any motion of the position indicator while this control has the input focus.
   */
  onChanging(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A dual-state control, grouped with other radiobuttons, of which only one can be in the selected state.
 * Shows the selected state when value=true, empty when value=false. Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class RadioButton extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The label text for this button, a localizable string.
   */
  text: string;

  /**
   * The selection state of this button, selected when true.
   */
  value: boolean;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A slider bar that indicates a numeric value with a moveable position indicator.
 * All slider controls have a horizontal orientation. Calls the onChange() callback after the position of the indicator is changed or if its notify() method is called. Calls the onChanging() callback repeatedly while the user is moving the indicator. The value property contains the current position of the indicator within the range of minvalue to maxvalue.
 */
declare class Slider extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The maximum value allowed in the value property.
   * Together with minvalue, sets therange.Default is 100.
   */
  maxvalue: number;

  /**
   * The minimum value allowed in the value property.
   * Together with maxvalue, sets the range.Default is 0.
   */
  minvalue: number;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.
   */
  value: number;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control.
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for any motion of the position indicator while this control has the input focus.
   */
  onChanging(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A horizontal bar with an indicator that shows the progress of an operation.
 * All progressbar controls have a horizontal orientation. The value property contains the current position of the progress indicator; the default is 0. There is a minvalue property, but it is always 0; attempts to set it to a different value are silently ignored.
 */
declare class Progressbar extends _Control {
  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The maximum value in the range. Default is 100.
   */
  maxvalue: number;

  /**
   * The minimum value in the range; always 0. If set to a different value, it is ignored.
   */
  minvalue: number;

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by 0 to maxvalue, it is automatically reset to the closest boundary.
   */
  value: number;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;
}

/**
 * A hierarchical list whose items can contain child items.
 * The ListItem children of this control (in the items array) can be of type node, which means that they can contain child items. An item with child items can expanded, so that the child items are displayed, or collapsed, so that the child items are hidden Individual items can be selected at any level of the tree.
 */
declare class TreeView extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number];

  /**
   * The array of top-level items displayed in the list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method.
   */
  readonly items: ListItem[];

  /**
   * The currently selectedlist item.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.
   */
  selection: ListItem;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Adds an item to the top-level choices in this list.
   * Returns the item control object.
   * @param type The type of the child element, the string "item".
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem;

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the user collapses (closes) an expanded node in the treeview.
   * @param item The ListItem node that collapsed.
   */
  onCollapse(item: ListItem): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the user expands (opens) a collapsed node in the treeview.
   * @param item The ListItem node that expanded.
   */
  onExpand(item: ListItem): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index in the top-level item list, text value, or as a ListItem object.
   */
  remove(what: any): void;

  /**
   * Removes all child items from the list.
   */
  removeAll(): void;
}

/**
 * A control that contains a Flash Player, which can load and play Flash movies stored in SWF files.
 * The ScriptUI FlashPlayer element runs the Flash application within an Adobe application. The Flash application runs ActionScript, a different implementation of JavaScript from the ExtendScript version of JavaScript that Adobe applications run. A control object of this type contains functions that allow your script to load SWF files, control movie playback, and communicate with the ActionScript environment.
 */
declare class FlashPlayer extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A function definition for a callback from the Flash ActionScript environment.
   * The Flash ActionScript code can call any callback function defined on the ExtendScript side of the FlashPlayer object, invoking it by name as a property of the control object. The function can take any arguments of a supported data types, and can return any value of a supported data type. data types:Number, String, Boolean, null, undefined, Object, Array.
   */
  callback(): void;

  /**
   * Invokes an ActionScript function defined in the Flash application.
   * Returns the result of the invoked function, which must be one of the allowed types. The ActionScript class and date objects are not supported as return values.
   * @param name The name of a Flash ActionScript function that has been registered with the ExternalInterface object by the currently loaded SWF file.
   * @param argument An argument to pass through to the function. There can be any number of arguments. An argument must be one of these data types:Number, String, Boolean, null, undefined, Object, Array. No other data types are supported.
   */
  invokePlayerFunction(name: string, argument?: any): any;

  /**
   * Loads a movie into the Flash Player, and begins playing it.
   * @param file The File object for the SWF file to load.
   */
  loadMovie(file: File): void;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * Restarts a movie that has been stopped.
   * Do not use on a movie that is currently playing.The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented).
   * @param rewind When true, restarts the movie from the beginning; otherwise, starts playing from the	point where it was stopped.
   */
  playMovie(rewind: boolean): void;

  /**
   * Halts playback of the current movie.
   * The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented).Using stopMovie() from the player's hosting environment has no effect on an SWF file playing in a ScriptUI Flash Player element. It is, however, possible to produce an SWF using Flash Authoring that can stop itself in response to user interaction.
   */
  stopMovie(): void;
}

/**
 * A container for other controls within a window.
 * A group can specify layout options for its child elements. Hiding a group hides all its children. Making it visible makes visible those children that are not individually hidden.
 */
declare class Group extends _Control {
  /**
   * Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.
   * Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.
   */
  alignChildren: string;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager;

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number;

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string;

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number;

  /**
   * Adds a child element to this container.
   * Creates and returns a new control or container object and adds it to the children of this group.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd;

  /**
   * An event-handler callback function, called when the group is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * Removes the specified child control from this group's children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void;
}

/**
 * A container for other types of controls, with an optional frame.
 * A panel can specify layout options for its child elements. Hiding a panel hides all its children. Making it visible makes visible those children that are not individually hidden.
 */
declare class Panel extends _Control {
  /**
   * Specifies how to align the child elements.
   */
  alignChildren: string;

  /**
   * Reserve space for the specified number of characters; affects calculation of preferredSize .
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager;

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number;

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string;

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number;

  /**
   * The title or label text, a localizable string.
   */
  text: string;

  /**
   * Adds a child element to this container.
   * Creates and returns a new control or container object and adds it to the children of this group.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd;

  /**
   * An event-handler callback function, called when the panel is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * Removes the specified child control from this group's children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void;
}

/**
 * Defines the location of a window or UI element. Contains a 2-element array.
 * Specifies the origin point of an element as horizontal and vertical pixel offsets from the origin of the element's coordinate space.
 * A Point object is created when you set an element’s location property. You can set the property using a JavaScript object with properties named x and y, or an array with 2 values in the order [x, y].
 */
declare class Point {
  /**
   * The left coordinate.
   */
  left: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The top coordinate.
   */
  top: number;

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  x: number;

  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  y: number;

  [0]: number;

  [1]: number;
}

/**
 * Defines the size of a window or UI element. Contains a 2-element array.
 * Specifies the height and width of an element in pixels. A Dimension object is created when you set an element’s size property. You can set the property using a JavaScript object with named properties {width: wd, height: ht}, or an array with 2 values in the order [wd, ht].
 */
declare class Dimension {
  /**
   * The height in pixels.
   */
  height: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The width in pixels.
   */
  width: number;

  [0]: number;

  [1]: number;
}

/**
 * Defines the boundaries of a window within the screen’s coordinate space, or of a UI element within the container’s coordinate space.
 * A Bounds object is created when you set an element’s bounds property. You can set the property using a JavaScript object with properties named left, top, right, bottom or x, y, width, height, or an array with 4 values in the order [x, y, wd, ht].
 */
declare class Bounds {
  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  bottom: number;

  /**
   * The height in pixels.
   */
  height: number;

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  left: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The width in pixels.
   */
  right: number;

  /**
   * The height in pixels.
   */
  top: number;

  /**
   * The width in pixels.
   */
  width: number;

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  x: number;

  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  y: number;

  [0]: number;

  [1]: number;

  [2]: number;

  [3]: number;
}

/**
 * Encapsulates input event information for an event that propagates through a container and control hierarchy.
 * Implements W3C standard event handling. This object is passed to a function that you register to respond to events of a certain type that occur in a window or control. Use windowObj.addEventListener() or controlObj.addEventListener() to register a handler function.
 */
declare class UIEvent {
  /**
   * True if the event is of a type that bubbles.
   */
  readonly bubbles: boolean;

  /**
   * True if the default action associated with the event can be canceled with preventDefault().
   */
  readonly cancelable: boolean;

  /**
   * True if this event can be captured.
   */
  readonly captures: boolean;

  /**
   * The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.
   */
  readonly currentTarget: boolean;

  /**
   * The click count for a mouse-click event.
   */
  readonly detail: any;

  /**
   * The current phase of event propagation; one of none, target, capture, bubble.
   */
  readonly eventPhase: string;

  /**
   * The event target object for this event.
   */
  readonly target: object;

  /**
   * The date and time at which the event occurred.
   */
  readonly timeStamp: Date;

  /**
   * The name of the event that thisobject represents.
   * Event types are listed in the JavaScript Tools Guide.
   */
  readonly type: string;

  /**
   * The ScriptUI element that this event relates to.
   */
  readonly view: any;

  /**
   * Creates an event.
   * The UIEvent object is normally created by ScriptUI and passed to your event handler. However, you can simulate a user action by constructing an event object and sending it to a target object’s dispatchEvent() function.
   * @param type The event type. See UIEvent.type property.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param view The ScriptUI element that this event relates to.
   * @param detail The click count for a mouse-click event.
   */
  constructor(
    type: string,
    captures: boolean,
    bubbles: boolean,
    view?: object,
    detail?: number
  );

  /**
   * Initializes a UI event as a core W3C event.
   * @param type The event type.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param cancelable Set to true if the default action is cancelable.
   */
  initEvent(
    type: string,
    captures: boolean,
    bubbles: boolean,
    cancelable: boolean
  ): void;

  /**
   * Initializes an event.
   * @param type The event type.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param view The ScriptUI element that this event relates to.
   * @param detail The click count for a mouse-click event.
   */
  initUIEvent(
    type: string,
    captures: boolean,
    bubbles: boolean,
    view?: object,
    detail?: number
  ): void;

  /**
   * Prevents the default action associated with this event from being called.
   */
  preventDefault(): void;

  /**
   * Stops the propagation of this event.
   */
  stopPropagation(): void;
}

/**
 * Base class for UIEvent.
 * Encapsulates input event information for an event that propagates through a container and control hierarchy.Implements W3C standard event handling.
 */
declare class Event {
  /**
   *
   */
  static readonly AT_TARGET: any;

  /**
   *
   */
  static readonly BUBBLING_PHASE: any;

  /**
   *
   */
  static readonly CAPTURING_PHASE: any;

  /**
   *
   */
  static readonly NOT_DISPATCHING: any;

  /**
   * True if the event is of a type that bubbles.
   */
  readonly bubbles: boolean;

  /**
   * True if the default action associated with the event can be canceled with preventDefault().
   */
  readonly cancelable: boolean;

  /**
   * True if this event can be captured.
   */
  readonly captures: boolean;

  /**
   * The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.
   */
  readonly currentTarget: boolean;

  /**
   * The current phase of event propagation; one of none, target, capture, bubble.
   */
  readonly eventPhase: string;

  /**
   * The event target object for this event.
   */
  readonly target: object;

  /**
   * The date and time at which the event occurred.
   */
  readonly timeStamp: Date;

  /**
   * The name of the event that this object represents.
   * Event types are listed in the JavaScript Tools Guide.
   */
  readonly type: string;

  /**
   * Prevents the default action associated with this event from being called.
   */
  preventDefault(): void;

  /**
   * Stops the propagation of this event.
   */
  stopPropagation(): void;
}

/**
 * Defines attributes of the ScriptUI environment.
 * Access through the ScriptUI.environment property.
 */
declare class Environment {
  /**
   * An object that reports the active state of the keyboard at any time.
   * Provides access to the key state independent of the event-handling framework.
   */
  readonly keyboardState: KeyboardState;
}

/**
 * Provides access to objects used in the ScriptUI event system.
 * Access through the ScriptUI.events property.
 */
declare class Events {
  /**
   * Creates an instance of the specified Event subclass.
   * The Event returned is a UIEvent,
   * KeyboardEvent or MouseEvent object,
   * depending on the requested type. This object can be passed as a parameter to an element's dispatchEvent
   * function in order to simulate a user-interaction event.
   * @param eventType The name of an event type: one of "UIEvent", "KeyboardEvent", or "MouseEvent".
   */
  createEvent(eventType: string): Event;
}

/**
 * Reports the active state of the keyboard.
 * Access through the ScriptUI.environment.keyboardState property.
 * Query the properties of this object at any time to determine the current key that is down and any modifiers that are pressed.
 */
declare class KeyboardState {
  /**
   * True if the Alt or Option key is pressed.
   */
  readonly altKey: boolean;

  /**
   * True if the Ctrl key is pressed.
   */
  readonly ctrlKey: boolean;

  /**
   * A string containing the name of the currently pressed key, such as "a", or an empty string.
   */
  readonly keyName: string;

  /**
   * True if the Cmd key (in Mac OS) or Windows key (in Windows) is pressed.
   */
  readonly metaKey: boolean;

  /**
   * True if the Shift key is pressed.
   */
  readonly shiftKey: boolean;
}

/**
 * Added by types-for-adobe
 */
declare class _Control {
  /**
   * The alignment style for child elements of a container. If defined, this value overrides the alignChildren setting for the parent container.
   * This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive.
   * For orientation=row:top, bottom, fill
   * For orientation=column: left, right, fill
   * For orientation=stack:top, bottom, left, right, fill
   */
  alignment: string;

  /**
   * The boundaries of the element, in parent-relative coordinates.
   * Setting an element's size or location changes its bounds property, and vice-versa.
   */
  bounds: Bounds | [number, number, number, number];

  /**
   * True if this element is enabled.
   * An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.
   */
  enabled: boolean;

  /**
   * The help text that is displayed when the mouse hovers over the element.
   */
  helpTip: string;

  /**
   * The number of pixels to indent the element during automatic layout.
   * Applies for column orientation and left alignment, or row orientation and top alignment.
   */
  indent: number;

  /**
   * The upper left corner of this element relative to its parent.
   * The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.
   */
  location: Point | [number, number];

  /**
   * The maximum height and width to which the element can be resized.
   */
  maximumSize: Dimension | [number, number];

  /**
   * The minimum height and width to which the element can be resized.
   */
  minimumSize: Dimension | [number, number];

  /**
   * The parent element.
   */
  readonly parent: object;

  /**
   * The preferred size, used by layout managers to determine the best size for each element.
   * If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes. A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.
   * To set a specific value for only one dimension, specify the other dimension as -1.
   */
  preferredSize: Dimension | [number, number];

  /**
   * The current dimensions of this element.
   * Initially undefined, and unless explicitly set by a script, it is defined by a LayoutManager . A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.
   */
  size: Dimension | [number, number];

  /**
   * The element type.
   */
  readonly type: string;

  /**
   * True if this element is shown, false if it is hidden.
   * When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.
   */
  visible: boolean;

  /**
   * The window that this element belongs to.
   */
  readonly window: Window;

  /**
   * The bounds of this element relative to the top-level parent window.
   */
  readonly windowBounds: Bounds | [number, number, number, number];

  /**
   * Registers an event handler for a particular type of event occuring in this element.
   * @param eventName The name of the event. Event names are listed in the JavaScript Tools Guide.
   * @param handler The function that handles the event. This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the UIEvent object.
   * @param capturePhase When true, the handler is called only in the capturing phase of the event propagation. Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.
   */
  addEventListener(
    eventName: string,
    handler: Function,
    capturePhase?: boolean
  ): boolean;

  /**
   * Simulates the occurrence of an event in this target.
   * A script can create a UIEvent object for a specific event and pass it to this method to start the event propagation for the event.
   */
  dispatchEvent(): Event;

  /**
   * Hides this element.
   */
  hide(): void;

  /**
   * Unregisters an event handler for a particular type of event occuring in this element.
   * All arguments must be identical to those that were used to register the event handler.
   * @param eventName The name of the event.
   * @param handler The function that handles the event.
   * @param capturePhase Whether to call the handler only in the capturing phase of the event propagation.
   */
  removeEventListener(
    eventName: string,
    handler: Function,
    capturePhase?: boolean
  ): boolean;

  /**
   * Shows this element.
   * When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states.
   * If an onShow() callback is defined for a window, calls that function before showing the window.When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states. For a modal dialog, opens the dialog and does not return until the dialog is dismissed. If it is dismissed via the close() method, this method returns any result value passed to that method. Otherwise, returns 0.
   */
  show(): number | undefined;
}

/**
 * Creation properties map
 * An object that contains one or more creation properties of the element (properties used only when the element is created).
 */
interface _ControlPropertiesMap {
  /**
   * Creation properties of a Button
   * But the third argument to the add() method that creates it can be the initial text value.
   * @param name A unique name for the control. Special name "ok" makes the button primary for parent dialog, and the special name "cancel" makes the button default cancel button for parent dialog.
   */
  button: {
    name: string;
  };

  /**
   * Creation properties of a CheckBox
   * The third argument to the add() method that creates it is the text to be displayed.
   * @param name A unique name for the control.
   */
  checkbox: {
    name: string;
  };

  /**
   * Creation properties of a DropDownList
   * @param name A unique name for the control.
   * @param items An array of strings for the text of each list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   */
  dropdownlist: {
    name: string;
    items: string[];
  };

  /**
   * Creation properties of an EditText
   * @param name A unique name for the control.
   * @param multiline When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.
   * @param borderless When true, the control is drawn with no border. Default is false.
   * @param scrollable For multiline elements only. When true (the default), the text field has a vertical scrollbar that is enabled when the element contains more text than fits in the visible area. When false, no vertical scrollbar appears; if the element contains more text than fits in the visible area, the arrow keys can be used to scroll the text up and down.
   * @param readonly When false (the default), the control accepts text input. When true, the control does not accept input but only displays the contents of the text property.
   * @param noecho When false (the default), the control displays input text. When true, the control does not display input text (used for password input fields).
   * @param enterKeySignalsOnChange When false (the default), the control signals an onChange event when the editable text is changed and the control loses the keyboard focus (that is, the user tabs to another control, clicks outside the control, or types Enter). When true, the control only signals an onChange() event when the editable text is changed and the user types Enter; other changes to the keyboard focus do not signal the event.
   * @param wantReturn Only applies to multiple line edit controls in ScriptUI Version 6.0 or later. When true the RETURN/ENTER keystroke is considered as text-input advancing the cursor to the next line. The default value is false.
   */
  edittext: {
    name: string;
    multiline: boolean;
    borderless: boolean;
    scrollable: boolean;
    readonly: boolean;
    noecho: boolean;
    enterKeySignalsOnChange: boolean;
    wantReturn: boolean;
  };

  /**
   * Creation properties of a FlashPlayer
   * @param name A unique name for the control.
   */
  flashplayer: {
    name: string;
  };

  /**
   * Creation properties of a Group
   * @param name A unique name for the control.
   */
  group: {
    name: string;
  };

  /**
   * Creation properties of an IconButton
   * @param name A unique name for the control.
   * @param style A string for the visual style, either "button", which has a visible border with a raised or 3D appearance, or "toolbutton", which has a flat appearance, appropriate for inclusion in a toolbar.
   * @param toggle For a button-style control, a value of true causes it to get a button-pressed appearance the first time it is clicked, and alternate with the unpressed appearance each time it is clicked. The toggle state is reflected in the control’s value property.
   */
  iconbutton: {
    name: string;
    style: "button" | "toolbutton";
    toggle: boolean;
  };

  /**
   * Creation properties of a ListBox
   * @param name A unique name for the control.
   * @param multiselect When false (the default), only one item can be selected. When true, multiple items can be selected.
   * @param selected When true, multiple items can be selected.
   * @param items An array of strings for the text of each list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   * @param numberOfColumns A number of columns in which to display the items; default is 1. When there are multiple columns, each ListItem object represents a selectable row. Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
   * @param showHeaders True to display column titles.
   * @param columnWidths An array of numbers for the preferred width in pixels of each column.
   * @param columnTitles A corresponding array of strings for the title of each column, to be shown if showHeaders is true.
   */
  listbox: {
    name: string;
    multiselect: boolean;
    selected: boolean;
    items: string[];
    numberOfColumns: number;
    showHeaders: boolean;
    columnWidths: number[];
    columnTitles: string[];
  };

  /**
   * Creation properties of a Panel
   * @param name A unique name for the control.
   * @param borderStyle A string that specifies the appearance of the border drawn around the panel. One of black, etched, gray, raised, sunken. Default is etched.
   * @param su1PanelCoordinates Photoshop only. When true, this panel automatically adjusts the positions of its children for compatability with Photoshop CS. Default is false, meaning that the panel does not adjust the positions of its children, even if the parent window has automatic adjustment enabled.
   */
  panel: {
    name: string;
    borderStyle: string;
    su1PanelCoordinates: boolean;
  };

  /**
   * Creation properties of a ProgressBar
   * The third argument of the add() method that creates it is the initial value (default 0), and the fourth argument is the maximum value of the range (default 100).
   * @param name A unique name for the control.
   */
  progressbar: {
    name: string;
  };

  /**
   * Creation properties of a RadioButton
   * The third argument of the add() method that creates can be the label text.
   * @param name A unique name for the control.
   */
  radiobutton: {
    name: string;
  };

  /**
   * Creation properties of a Scrollbar
   * The third argument of the add() method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.
   * @param name A unique name for the control.
   */
  scrollbar: {
    name: string;
  };

  /**
   * Creation properties of a Slider
   * The third argument of the add() method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.
   * @param name A unique name for the control.
   */
  slider: {
    name: string;
  };

  /**
   * Creation properties of a StaticText
   * @param name A unique name for the control.
   * @param multiline When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.
   * @param scrolling When false (the default), the displayed text cannot be scrolled. When true, the displayed text can be vertically scrolled using the Up Arrow and Down Arrow; this case implies multiline=true.
   * @param truncate If middle or end, defines where to remove characters from the text and replace them with an ellipsis if the specified title does not fit within the space reserved for it. If none, and the text does not fit, characters are removed from the end, without any replacement ellipsis character.
   */
  statictext: {
    name: string;
    multiline: boolean;
    scrolling: boolean;
    truncate: string;
  };

  /**
   * Creation properties of a TreeView
   * @param name A unique name for the control.
   * @param items An array of strings for the text of each top-level list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   */
  treeview: {
    name: string;
    items: string[];
  };

  /**
   * Creation properties of a Window
   * @param resizeable When true, the window can be resized by the user. Default is false.
   * @param su1PanelCoordinates Photoshop only. When true, the child panels of this window automatically adjust the positions of their children for compatability with Photoshop CS (in which the vertical coordinate was measured from outside the frame). Default is false. Individual panels can override the parent window’s setting.
   * @param closeButton Bridge only. When true, the title bar includes a button to close the window, if the platform and window type allow it. When false, it does not. Default is true. Not used for dialogs.
   * @param maximizeButton Bridge only. When true, the title bar includes a button to expand the window to its maximum size (typically, the entire screen), if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Not used for dialogs.
   * @param minimizeButton Bridge only. When true, the title bar includes a button to minimize or iconify the window, if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Main windows cannot have a minimize button in Mac OS. Not used for dialogs.
   * @param independent When true, a window of type window is independent of other application windows, and can be hidden behind them in Windows. In Mac OS, has no effect. Default is false.
   * @param borderless When true, the window has no title bar or borders. Properties that control those features are ignored.
   */
  window: {
    resizeable: boolean;
    su1PanelCoordinates: boolean;
    closeButton: boolean;
    maximizeButton: boolean;
    minimizeButton: boolean;
    independent: boolean;
    borderless: boolean;
  };

  /**
   * A ListItem object has no creation properties.
   */
  listitem: {};
}

interface _WindowPanelGroupAdd {
  (
    type: "button",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["button"]>
  ): Button;
  (
    type: "checkbox",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["checkbox"]>
  ): Checkbox;
  (
    type: "dropdownlist",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["dropdownlist"]>
  ): DropDownList;
  (
    type: "edittext",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["edittext"]>
  ): EditText;
  (
    type: "flashplayer",
    bounds?: Bounds | [number, number, number, number],
    movieToLoad?: string | File,
    properties?: Partial<_ControlPropertiesMap["flashplayer"]>
  ): FlashPlayer;
  (
    type: "group",
    bounds?: Bounds | [number, number, number, number],
    properties?: Partial<_ControlPropertiesMap["group"]>
  ): Group;
  (
    type: "iconbutton",
    bounds?: Bounds | [number, number, number, number],
    icon?: string | File,
    properties?: Partial<_ControlPropertiesMap["iconbutton"]>
  ): IconButton;
  (
    type: "listbox",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["listbox"]>
  ): ListBox;
  (
    type: "panel",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["panel"]>
  ): Panel;
  (
    type: "progressbar",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["progressbar"]>
  ): Progressbar;
  (
    type: "radiobutton",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["radiobutton"]>
  ): RadioButton;
  (
    type: "scrollbar",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    min?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["scrollbar"]>
  ): Scrollbar;
  (
    type: "slider",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    min?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["slider"]>
  ): Slider;
  (
    type: "statictext",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["statictext"]>
  ): StaticText;
  (
    type: "treeview",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["treeview"]>
  ): TreeView;
}
`;

let PHXSshim = `/**
 * The $ object provides a number of debugging facilities and informational methods.
 */
interface $ {
  /**
   * The ExtendScript build information.
   */
  readonly build: string

  /**
   * The ExtendScript build date.
   */
  readonly buildDate: Date

  /**
   * The character used as the decimal point character in formatted numeric output.
   */
  decimalPoint: string

  /**
   * The name of the current ExtendScript engine, if set.
   */
  readonly engineName: string

  /**
   * The most recent run-time error information.
   * Assigning error text to this property generates a run-time error; however, the preferred way to generate a run-time error is to throw an Error object.
   */
  error: Error

  /**
   * The file name of the current script.
   */
  readonly fileName: string

  /**
   * Gets or sets low-level debug output flags.
   * A logical AND of bit flag values:
   * 0x0002 (2): Displays each line with its line number as it is executed.
   * 0x0040 (64): Enables excessive garbage collection. Usually, garbage collection starts when the number of objects has increased by a certain amount since the last garbage collection. This flag causes ExtendScript to garbage collect after almost every statement. This impairs performance severely, but is useful when you suspect that an object gets released too soon.
   * 0x0080 (128): Displays all calls with their arguments and the return value.
   * 0x0100 (256): Enables extended error handling (see strict).
   * 0x0200 (512): Enables the localization feature of the toString method. Equivalent to the localize property.
   */
  flags: number

  /**
   * A reference to the global object, which contains the JavaScript global namespace.
   */
  readonly global: any

  /**
   * A high-resolution timer, measuring the time in microseconds. The timer starts when ExtendScript is
   * initialized during the application startup sequence. Every read access resets the timer to Zero.
   */
  readonly hiresTimer: number

  /**
   * The path for include files for the current script.
   */
  readonly includePath: string

  /**
   * The current debugging level, which enables or disables the JavaScript debugger.
   * One of 0 (no debugging), 1 (break on runtime errors), or 2 (full debug mode).
   */
  level: number

  /**
   * The current line number of the currently executing script.
   */
  readonly line: number

  /**
   * Gets or sets the current locale.
   * The string contains five characters in the form LL_RR, where LL is an ISO 639 language specifier, and RR is an ISO 3166 region specifier.Initially, this is the value that the application or the platform returns for the current user. You can set it to temporarily change the locale for testing. To return to the application or platform setting, set to undefined, null, or the empty string.
   */
  locale: string

  /**
   * Set to true to enable the extended localization features of the built-in toString() method.
   */
  localize: boolean

  /**
   * The ExtendScript memory cache size, in bytes.
   */
  memCache: number

  /**
   * The current operating system version information.
   */
  readonly os: string

  /**
   * An array of objects containing information about the display screens attached to your computer.
   * Each object has the properties left, top, right, bottom, which contain the four corners of each screen in global coordinates.A property primary is true if that object describes the primary display.
   */
  readonly screens: object[]

  /**
   * The current stack trace.
   */
  readonly stack: string

  /**
   * Sets or clears strict mode for object modification.
   * When true, any attempt to write to a read-only property causes a runtime error. Some objects do not permit the creation of new properties when true.
   */
  strict: any

  /**
   * The version number of the ExtendScript engine.
   * Formatted as a three-part number and description; for example: "3.92.95 (debug)".
   */
  readonly version: string

  /**
   * Shows an About box for the ExtendScript component, and returns the text for the box.
   */
  about(): string

  /**
   * Breaks execution at the current position.
   * @param condition A string containing a JavaScript statement to be used as a condition. If the statement evaluates to true or nonzero when this point is reached, execution stops.
   */
  bp(condition?: any): void

  /**
   * Invokes the platform-specific color selection dialog, and returns the selected color.
   * @param color The color to be preselected in the dialog, as 0xRRGGBB, or -1 for the platform default.
   */
  colorPicker(color: number): number

  /**
   * Loads and evaluates a file.
   * @param file The file to load.
   * @param timeout An optional timeout in milliseconds.
   */
  evalFile(file: File, timeout?: number): any

  /**
   * Initiates garbage collection in the ExtendScript engine.
   */
  gc(): void

  /**
   * Retrieves the value of an environment variable.
   * @param name The name of the variable.
   */
  getenv(name: string): string

  /**
   * Sets the value of an environment variable.
   * @param name The name of the variable.
   * @param value The value of the variable.
   */
  setenv(name: string, value: string): void

  /**
   * Suspends the calling thread for a number of milliseconds.
   * During a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated. This can happen if there is a break request, or if the script timeout has expired.
   * @param msecs Number of milliseconds to sleep.
   */
  sleep(msecs: number): void

  /**
   * Converts this object to a string.
   */
  toString(): string

  /**
   * Prints text to the Console.
   * @param text The text to print. All arguments are concatenated.
   */
  write(text: any): void

  /**
   * Prints text to the Console, and adds a newline character.
   * @param text The text to print. All arguments are concatenated.
   */
  writeln(text: any): void
}
declare const $: $

/**
 * The global BridgeTalk object.
 */
declare var BridgeTalk: any;

/**
 * The Infinity global property is a predefined variable with the value for infinity.
 */
declare var Infinity: number;

/**
 * The NaN global property is a predefined variable with the value NaN (Not-a-Number), as specified by the IEEE-754 standard.
 */
declare var NaN: number;

/**
 * The application object
 */
declare var app: Application;
declare interface Application {}

/**
 * Displays an alert box
 * @param message The text to display
 * @param title The title of the alert; ignored on the Macintosh
 * @param errorIcon Display an Error icon; ignored on the Macintosh
 */
declare function alert(
  message: string,
  title?: string,
  errorIcon?: boolean
): void;

/**
 * Displays an alert box with Yes and No buttons; returns true for Yes
 * @param message The text to display
 * @param noAsDefault Set to true to set the No button as the default button
 * @param title The title of the alert; ignored on the Macintosh
 */
declare function confirm(
  message: string,
  noAsDefault?: boolean,
  title?: string
): boolean;

/**
 * Decodes a string created with encodeURI().
 * @param uri The text to decode.
 */
declare function decodeURI(uri: string): string;

/**
 * Decodes a string created with encodeURIComponent().
 * @param uri The text to decode.
 */
declare function decodeURIComponent(uri: string): string;

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'();/?:@&=+$,#. The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURI(text: string): string;

/**
 * Encodes a string after RFC2396.
 * Create an UTF-8 ASCII encoded version of this string. The string is converted into UTF-8. Every non-alphanumeric character is encoded as a percent escape
 * character of the form %xx, where xx is the hex value of the character. After the conversion to UTF-8 encoding and escaping, it is guaranteed that the string does not contain characters codes greater than 127. The list of characters not to be encoded is -_.!~*'(). The method returns false on errors.
 * @param text The text to encode.
 */
declare function encodeURIComponent(text: string): string;

/**
 * Creates a URL-encoded string from aString.
 * In the new string, characters of aString that require URL encoding are replaced with the format %xx, where xx is the hexadecimal value of the character code in the Unicode character set.This format is used to transmit information appended to a URL during, for example, execution of the GET method.Use the unescape() global function to translate the string back into its original format. Returns a string which is aString URL-encoded.
 * @param aString The string to be encoded.
 */
declare function escape(aString: string): string;

/**
 * Evaluates its argument as a JavaScript script, and returns the result of evaluation.
 * You can pass the result of an object's toSource() method to reconstruct that object.
 * @param stringExpression The string to evaluate.
 */
declare function eval(stringExpression: string): any;

/**
 * Evaluates an expression and reports whether the result is a finite number.
 * Returns true if the expression is a finite number, false otherwise. False if the value is infinity or negative infinity.
 * @param expression Any valid JavaScript expression.
 */
declare function isFinite(expression: number): boolean;

/**
 * Evaluates an expression and reports whether the result is "Not-a-Number" (NaN).
 * Returns true if the result of evaluation is not a number (NaN), false if the value is a number.
 * @param expression Any valid JavaScript expression.
 */
declare function isNaN(expression: number): boolean;

/**
 * Returns true if the supplied string is a valid XML name.
 * @param name The XML name to test.
 */
declare function isXMLName(name: string): boolean;

/**
 * Localizes a ZString-encoded string and merges additional arguments into the string.
 * @param what The string to localize. A ZString-encoded string that can contain placeholder for additional arguments in the form %1 to %n.
 * @param arguments Optional argument(s) to be merged into the string. There may be more than one argument.
 */
declare function localize(what: string, ...arguments: any[]): string;

/**
 * Extracts a floating-point number from a string.
 * Parses a string to find the first set of characters that can be converted to a floating point number, and returns that number, or NaN if it does not encounter characters that it can converted to a number.The function supports exponential notation.
 * @param text The string from which to extract a floating point number.
 */
declare function parseFloat(text: string): number;

/**
 * Extracts an integer from a string.
 * Parses a string to find the first set of characters, in a specified base, that can be converted to an integer, and returns that integer, or NaN if it does not encounter characters that it can convert to a number.
 * @param text The string from which to extract an integer.
 * @param base The base of the string to parse (from base 2 to base 36). If not supplied, base is determined by the format of string.
 */
declare function parseInt(text: string, base?: number): number;

/**
 * Displays a dialog allowing the user to enter text
 * Returns null if the user cancelled the dialog, the text otherwise
 * @param prompt The text to display
 * @param default_ The default text to preset the edit field with
 * @param title The title of the dialog;
 */
declare function prompt(
  prompt: string,
  default_?: string,
  title?: string
): string;

/**
 * Defines the default XML namespace.
 * This is a replacement function for the standard JavaScript statement set default xml namespace.
 * @param namespace The namespace to use. Omit this parameter to return to the empty namespace. This is either a Namespace object or a string.
 */
declare function setDefaultXMLNamespace(namespace: Namespace): void;

/**
 * Translates URL-encoded string into a regular string, and returns that string.
 * Use the escape() global function to URL-encode strings.
 * @param stringExpression The URL-encoded string to convert.
 */
declare function unescape(stringExpression: string): string;

/**
 * Creates a source code representation of the supplied argument, and returns it as a string.
 * @param what The object to uneval.
 */
declare function uneval(what: any): string;

/**
 * Document formats that Photoshop can open.
 */
declare enum OpenDocumentType {
  /**
   * Alias PIX format.
   */
  ALIASPIX = 25,

  /**
   * BMP format.
   */
  BMP = 2,

  /**
   * Camera RAW format.
   */
  CAMERARAW = 32,

  /**
   * CompuServe GIF format.
   */
  COMPUSERVEGIF = 3,

  /**
   * DICOM format.
   */
  DICOM = 33,

  /**
   * Electric format.
   */
  ELECTRICIMAGE = 26,

  /**
   * Generic EPS format.
   */
  EPS = 22,

  /**
   * EPS format with embedded PICT Preview.
   */
  EPSPICTPREVIEW = 23,

  /**
   * EPS format with embedded TIFF Preview.
   */
  EPSTIFFPREVIEW = 24,

  /**
   * Filmstrip format.
   */
  FILMSTRIP = 5,

  /**
   * JPEG format.
   */
  JPEG = 6,

  /**
   * PCX format.
   */
  PCX = 7,

  /**
   * Generic PDF format.
   */
  PDF = 21,

  /**
   * Photo CD format.
   */
  PHOTOCD = 9,

  /**
   * Photoshop format.
   */
  PHOTOSHOP = 1,

  /**
   * Photoshop DCS 1.0 format.
   */
  PHOTOSHOPDCS_1 = 18,

  /**
   * Photoshop DCS 2.0 format.
   */
  PHOTOSHOPDCS_2 = 19,

  /**
   * EPS document produced by Photoshop.
   */
  PHOTOSHOPEPS = 4,

  /**
   * PDF document produced by Photoshop.
   */
  PHOTOSHOPPDF = 8,

  /**
   * PICT file format.
   */
  PICTFILEFORMAT = 10,

  /**
   * PICT resource format.
   */
  PICTRESOURCEFORMAT = 11,

  /**
   * Pixar format.
   */
  PIXAR = 12,

  /**
   * PNG format.
   */
  PNG = 13,

  /**
   * Portable Bitmap format.
   */
  PORTABLEBITMAP = 27,

  /**
   * Raw format.
   */
  RAW = 14,

  /**
   * Scitex CT format.
   */
  SCITEXCT = 15,

  /**
   * SGI RGB format.
   */
  SGIRGB = 29,

  /**
   * SoftImage format.
   */
  SOFTIMAGE = 30,

  /**
   * Targa format.
   */
  TARGA = 16,

  /**
   * TIFF format.
   */
  TIFF = 17,

  /**
   * Wavefront RLA format.
   */
  WAVEFRONTRLA = 28,

  /**
   * Wireless Bitmap format (WBMP)
   */
  WIRELESSBITMAP = 31
}

/**
 * Document formats that Photoshop can save to.
 */
declare enum SaveDocumentType {
  /**
   * Alias PIX format.
   */
  ALIASPIX = 25,

  /**
   * BMP format.
   */
  BMP = 2,

  /**
   * CompuServe GIF format.
   */
  COMPUSERVEGIF = 3,

  /**
   * Electric format.
   */
  ELECTRICIMAGE = 26,

  /**
   * JPEG format.
   */
  JPEG = 6,

  /**
   * PCX format.
   */
  PCX = 7,

  /**
   * Photoshop format.
   */
  PHOTOSHOP = 1,

  /**
   * Photoshop DCS 1.0 format.
   */
  PHOTOSHOPDCS_1 = 18,

  /**
   * Photoshop DCS 2.0 format.
   */
  PHOTOSHOPDCS_2 = 19,

  /**
   * EPS document produced by Photoshop.
   */
  PHOTOSHOPEPS = 4,

  /**
   * PDF document produced by Photoshop.
   */
  PHOTOSHOPPDF = 8,

  /**
   * PICT file format.
   */
  PICTFileFORMAT = 10,

  /**
   * PICT resource format.
   */
  PICTRESOURCEFORMAT = 11,

  /**
   * Pixar format.
   */
  PIXAR = 12,

  /**
   * PNG format.
   */
  PNG = 13,

  /**
   * Portable Bitmap format.
   */
  PORTABLEBITMAP = 27,

  /**
   * Raw format.
   */
  RAW = 14,

  /**
   * Scitex CT format.
   */
  SCITEXCT = 15,

  /**
   * SGI RGB format.
   */
  SGIRGB = 29,

  /**
   * SoftImage format.
   */
  SOFTIMAGE = 30,

  /**
   * Targa format.
   */
  TARGA = 16,

  /**
   * TIFF format.
   */
  TIFF = 17,

  /**
   * Wavefront RLA format.
   */
  WAVEFRONTRLA = 28,

  /**
   * Wireless Bitmap format (WBMP)
   */
  WIRELESSBITMAP = 31
}

/**
 * Controls whether Photoshop displays dialogs during scripts.
 */
declare enum DialogModes {
  /**
   * Show all dialogs.
   */
  ALL = 1,

  /**
   * Show only dialogs related to errors.
   */
  ERROR = 2,

  /**
   * Show no dialogs.
   */
  NO = 3
}

/**
 * Position of document when printing.
 */
declare enum DocPositionStyle {
  /**
   * Print image centered on page.
   */
  PRINTCENTERED = 1,

  /**
   * Resize image to fit on page when printing.
   */
  SIZETOFIT = 2,

  /**
   * Print using user defined spacing.
   */
  USERDEFINED = 3
}

/**
 * Color conversion type when printing.
 */
declare enum PrintColorHandling {
  /**
   * Photoshop manages color conversions.
   */
  PHOTOSHOPMANAGED = 2,

  /**
   * Printer manages color conversions.
   */
  PRINTERMANAGED = 1,

  /**
   * Print each channel separately without color conversions.
   */
  SEPARATIONS = 3
}

/**
 * The document's color mode.
 */
declare enum DocumentMode {
  /**
   * Bitmap, which uses one of two color values (black or white) to represent the pixels in an image.
   */
  BITMAP = 5,

  /**
   * CMYK.
   */
  CMYK = 3,

  /**
   * Duotone mode, which creates monotone, duotone (two-color), tritone (three-color), and quadtone (four-color) grayscale images using one to four custom inks.
   */
  DUOTONE = 8,

  /**
   * Grayscale.
   */
  GRAYSCALE = 1,

  /**
   * Indexed color, in which the number of colors in the image is at most 256, the standard number of colors supported by the GIF and PNG-8 formats and many multimedia applications.
   */
  INDEXEDCOLOR = 6,

  /**
   * Lab.
   */
  LAB = 4,

  /**
   * Image with multiple color channels.
   */
  MULTICHANNEL = 7,

  /**
   * RGB.
   */
  RGB = 2
}

/**
 * The destination color mode. Note: Color images must be changed to Grayscale mode before you can change them to Bitmap mode.
 */
declare enum ChangeMode {
  /**
   * Bitmap. Note: Color images must be changed to Grayscale mode before you can change them to Bitmap mode.
   */
  BITMAP = 5,

  /**
   * CMYK.
   */
  CMYK = 3,

  /**
   * Grayscale.
   */
  GRAYSCALE = 1,

  /**
   * Indexed color, in which the number of colors in the image is reduced to at most 256, the standard number of colors supported by the GIF and PNG-8 formats and many multimedia applications.
   * This conversion reduces file size by deleting color information from the image. To convert to indexed color, you must start with an image that is 8 bits per channel and in either Grayscale or RGB mode.
   */
  INDEXEDCOLOR = 6,

  /**
   * Lab.
   */
  LAB = 4,

  /**
   * Image with multiple color channels.
   * Uses 256 levels of gray in each channel. Useful for specialized printing. Color channels in the original image become spot color channels in the converted image. A CMYK image converted to Multichannel mode creates cyan, magenta, yellow, and black spot channels. An RGB image converted Multichannel mode creates cyan, magenta, and yellow spot channels. The new grayscale information is based on the color values of the pixels in each channel. Multichannel mode images can be saved in Photoshop, Photoshop 2.0, Photoshop Raw, or Photoshop DCS 2.0 format. To export a multichannel image, save it in Photoshop DCS 2.0 format.
   */
  MULTICHANNEL = 7,

  /**
   * RGB.
   */
  RGB = 2
}

/**
 * The type of color model that defines the document's working space.
 */
declare enum ColorProfileType {
  /**
   * Color manages this document using a custom color profile.
   */
  CUSTOM = 3,

  /**
   * The document is not color managed.
   */
  NONE = 1,

  /**
   * Color manages this document using the working color profile.
   */
  WORKING = 2
}

/**
 * The document window fill type.
 */
declare enum DocumentFill {
  /**
   * The background color as displayed in the toolbox.
   */
  BACKGROUNDCOLOR = 2,

  /**
   * Transparent.
   */
  TRANSPARENT = 3,

  /**
   * White.
   */
  WHITE = 1
}

/**
 * The editorial urgency status of the artwork.
 */
declare enum Urgency {
  /**
   * Level 4 (fourth highest)
   */
  FOUR = 4,

  /**
   * Highest level of urgency.
   */
  HIGH = 8,

  /**
   * Low.
   */
  LOW = 1,

  /**
   * No urgency.
   */
  NONE = 0,

  /**
   * Medium urgency.
   */
  NORMAL = 5,

  /**
   * Level 7 (second lowest)
   */
  SEVEN = 7,

  /**
   * Level 6 (third lowest)
   */
  SIX = 6,

  /**
   * Level 3 (third highest)
   */
  THREE = 3,

  /**
   * Level 2 (second highest)
   */
  TWO = 2
}

/**
 * The image orientation on the media.
 */
declare enum Orientation {
  /**
   * Landscape.
   */
  LANDSCAPE = 1,

  /**
   * Portrait.
   */
  PORTRAIT = 2
}

/**
 * The color conversion intent.
 */
declare enum Intent {
  /**
   * Aims to maintain color accuracy at the expense of preserving relationships between colors and is suitable for proofing to simulate the output of a particular device. This intent is particularly useful for previewing how paper color affects printed colors.
   * Leaves colors that fall inside the destination gamut unchanged. Out of gamut colors are clipped. No scaling of colors to destination white point is performed.
   */
  ABSOLUTECOLORIMETRIC = 4,

  /**
   * Gives priority to colors for which the human eye has greater sensitivity.
   * Suitable for photographic images with a lot of out of gamut colors. This is the standard rendering intent for the Japanese printing industry.
   */
  PERCEPTUAL = 1,

  /**
   * Compares the extreme highlight of the source color space to that of the destination color space and shifts all colors accordingly. Out of gamut colors are shifted to the closest reproducible color in the destination color space.
   * The standard rendering intent for printing in North America and Europe.
   */
  RELATIVECOLORIMETRIC = 3,

  /**
   * Tries to produce vivid colors in an image at the expense of color accuracy.
   * Suitable for business graphics like graphs or charts, where bright saturated colors are more important than the exact relationship between colors.
   */
  SATURATION = 2
}

/**
 * The orientation of the object.
 */
declare enum Direction {
  /**
   * Horizontal.
   */
  HORIZONTAL = 1,

  /**
   * Vertical.
   */
  VERTICAL = 2
}

/**
 * The cache to be targeted in a purge operation.
 */
declare enum PurgeTarget {
  /**
   * Clears all caches.
   */
  ALLCACHES = 4,

  /**
   * Clears the clipboard.
   */
  CLIPBOARDCACHE = 3,

  /**
   * Deletes all history states from the History palette.
   */
  HISTORYCACHES = 2,

  /**
   * Clears the undo cache.
   */
  UNDOCACHES = 1
}

/**
 * The point around which to transform the object.
 */
declare enum AnchorPosition {
  /**
   * The middle point of the bottom of the object.
   */
  BOTTOMCENTER = 8,

  /**
   * The bottom left corner of the object.
   */
  BOTTOMLEFT = 7,

  /**
   * The bottom right corner of the object.
   */
  BOTTOMRIGHT = 9,

  /**
   * The center of the object.
   */
  MIDDLECENTER = 5,

  /**
   * The middle point on the left side of the object.
   */
  MIDDLELEFT = 4,

  /**
   * The middle point on the right side of the object.
   */
  MIDDLERIGHT = 6,

  /**
   * The middle point on the top of the object.
   */
  TOPCENTER = 2,

  /**
   * The top left corner of the object.
   */
  TOPLEFT = 1,

  /**
   * The top right corner of the object.
   */
  TOPRIGHT = 3
}

/**
 * The method to use to resample the image.
 */
declare enum ResampleMethod {
  /**
   *
   */
  AUTOMATIC = 8,

  /**
   * Uses a weighted average to determine pixel color, which usually yields better results than the simple averageing method of downsampling.
   * The slowest but most precise method, resulting in the smoothest gradations.
   */
  BICUBIC = 4,

  /**
   *
   */
  BICUBICAUTOMATIC = 7,

  /**
   * A good method for reducing the size of an image based on Bicubic interpolation with enhanced sharpening. Maintains the detail in a resampled image.
   */
  BICUBICSHARPER = 5,

  /**
   * A good method for enlarging images based on Bicubic interpolation but designed to produce smoother results.
   */
  BICUBICSMOOTHER = 6,

  /**
   * Averages the pixels in a sample area and replaces the entire area with the average pixel color at the specified resolution. Same as average downsampling.
   */
  BILINEAR = 3,

  /**
   * Chooses a pixel in the center of the sample area and replaces the entire area with that pixel color. Same as subsampling.
   * Significantly reduces the conversion time compared with downsampling but results in images that are less smooth and continuous.
   */
  NEARESTNEIGHBOR = 2,

  /**
   * Does not resample.
   */
  NONE = 1,

  /**
   *
   */
  PRESERVEDETAILS = 9
}

/**
 * The operating system.
 */
declare enum OperatingSystem {
  /**
   * Mac OS/2 operating system.
   */
  OS2 = 1,

  /**
   * Windows operating system.
   */
  WINDOWS = 2
}

/**
 * The colors whose inclusion to force in the color table.
 */
declare enum ForcedColors {
  /**
   * Forces pure black and white.
   */
  BLACKWHITE = 2,

  /**
   * No forced colors.
   */
  NONE = 1,

  /**
   * Forces red, green, blue, cyan, magenta, yellow, black, and white.
   */
  PRIMARIES = 3,

  /**
   * Forces the 216 web-safe colors.
   */
  WEB = 4
}

/**
 * The palette type for converting an image to indexed color.
 */
declare enum PaletteType {
  /**
   * The palette uses the exact colors appearing in the RGB image; available only if the image uses 256 or fewer colors.
   * Because the image's palette contains all colors in the image, there is no dithering.
   */
  EXACT = 1,

  /**
   * Creates a palette by sampling the colors from the spectrum appearing most commonly in the image.
   * For example, an RGB image with only the colors green and blue produces a palette made primarily of greens and blues.
   */
  LOCALADAPTIVE = 8,

  /**
   * Creates a custom palette by giving priority to colors for in the image which the human eye has greater sensitivity.
   */
  LOCALPERCEPTUAL = 6,

  /**
   * Creates a color table similar to the Perceptual color table, but favoring broad areas of color in the image and the preservation of web colors.
   * Usually produces images with the greatest color integrity.
   */
  LOCALSELECTIVE = 7,

  /**
   * The Mac OS default 8-bit palette, whch is based on a uniform sampling of RGB colors.
   */
  MACOSPALETTE = 2,

  /**
   * Creates a palette by sampling the colors from the spectrum appearing most commonly in a group of open images that share the same color palette.
   */
  MASTERADAPTIVE = 11,

  /**
   * Creates a custom palette by giving priority to colors in a group of open images with the same color palette for which the human eye has greater sensitivity.
   */
  MASTERPERCEPTUAL = 9,

  /**
   * Creates a color table similar to the Master Perceptual color table, but favoring broad areas of color and the preservation of web colors.
   */
  MASTERSELECTIVE = 10,

  /**
   * Uses the custom palette from the previous conversion, making it easy to convert several images with the same custom palette.
   */
  PREVIOUSPALETTE = 12,

  /**
   * Creates a palette by uniformly sampling colors from the RGB color cube.
   * For example, if Photoshop takes six evenly spaced color levels each of red, green, and blue, the combination produces a uniform palette of 216 colors (6 cubed = 6 x 6 x 6 = 216). The total number of colors displayed in an image corresponds to the nearest perfect cube (8, 27, 64, 125, or 216) that is less than the value in the Colors text box.
   */
  UNIFORM = 5,

  /**
   * The 216-color palette that web browsers, regardless of platform, use to display images on a monitor limited to 256 colors.
   * A subset of the Mac OS 8-bit palette. Use this option to avoid browser dither when viewing images on a monitor display limited to 256 colors.
   */
  WEBPALETTE = 4,

  /**
   * The Windows system's default 8-bit palette, whch is based on a uniform sampling of RGB colors.
   */
  WINDOWSPALETTE = 3
}

/**
 * The type of dither.
 */
declare enum Dither {
  /**
   * Diffuses dither effects in random patterns across adjacent pixels.
   */
  DIFFUSION = 2,

  /**
   * Applies a random pattern but without diffusing the pattern across adjacent pixels; prevents the appearance of seams.
   */
  NOISE = 4,

  /**
   * No dither is used.
   */
  NONE = 1,

  /**
   * Applies a halftone-like square pattern.
   */
  PATTERN = 3
}

/**
 * The type of image to use as a low-resolution preview in the destination application.
 */
declare enum Preview {
  /**
   * 8-bit TIFF.
   */
  EIGHTBITTIFF = 3,

  /**
   * 8-bit.
   */
  MACOSEIGHTBIT = 5,

  /**
   * JPEG.
   */
  MACOSJPEG = 6,

  /**
   * Monochrome.
   */
  MACOSMONOCHROME = 4,

  /**
   * Monochrome TIFF.
   */
  MONOCHROMETIFF = 2,

  /**
   * Does not use a preview.
   */
  NONE = 1
}

/**
 * The encoding to use when saving documents.
 */
declare enum SaveEncoding {
  /**
   * ASCII.
   */
  ASCII = 3,

  /**
   * Binary.
   */
  BINARY = 1,

  /**
   * High quality JPEG encoding.
   */
  JPEGHIGH = 5,

  /**
   * Low quality JPEG encoding (high amount of compression).
   */
  JPEGLOW = 2,

  /**
   * Maximum quality JPEG encoding (very little compression).
   */
  JPEGMAXIMUM = 6,

  /**
   * Medium quality JPEG encoding (medium compression).
   */
  JPEGMEDIUM = 4
}

/**
 * The options for saving a JPEG file.
 */
declare enum FormatOptions {
  /**
   * Baseline (Optimized). Optimized color and a slightly reduced file size.
   */
  OPTIMIZEDBASELINE = 2,

  /**
   * Displays a series of increasingly detailed scans as the image downloads.
   */
  PROGRESSIVE = 3,

  /**
   * Baseline (Standard). Recognized by most web browsers.
   */
  STANDARDBASELINE = 1
}

/**
 * The type of compression to use when saving a document in PDF format.
 */
declare enum PDFEncoding {
  /**
   * JPEG compression.
   */
  JPEG = 2,

  /**
   * JPEG2000 compression with high image quality.
   */
  JPEG2000HIGH = 9,

  /**
   * JPEG2000 lossless compression.
   */
  JPEG2000LOSSLESS = 14,

  /**
   * JPEG2000 compression with low image quality.
   */
  JPEG2000LOW = 13,

  /**
   * JPEG2000 compression with medium image quality.
   */
  JPEG2000MED = 11,

  /**
   * JPEG2000 compression with medium high image quality.
   */
  JPEG2000MEDHIGH = 10,

  /**
   * JPEG2000 compression with medium low image quality.
   */
  JPEG2000MEDLOW = 12,

  /**
   * JPEG compression with high image quality.
   */
  JPEGHIGH = 4,

  /**
   * JPEG compression with low image quality.
   */
  JPEGLOW = 8,

  /**
   * JPEG compression with medium image quality.
   */
  JPEGMED = 6,

  /**
   * JPEG compression with medium high image quality.
   */
  JPEGMEDHIGH = 5,

  /**
   * JPEG compression with medium low image quality.
   */
  JPEGMEDLOW = 7,

  /**
   * No encoding.
   */
  NONE = 0,

  /**
   * Zip compression.
   */
  PDFZIP = 1,

  /**
   * Zip compression with 4-bit image quality.
   */
  PDFZIP4BIT = 3
}

/**
 * The PDF/X standard with which the document complies.
 * PDF/X compliant files must contain information describing the printing condition for which they are prepared.
 */
declare enum PDFStandard {
  /**
   * The document does not use the PDF/X standard.
   */
  NONE = 0,

  /**
   * PDF/X-1a standard, which requires all fonts to be embedded, the appropriate PDF bounding boxes to be specified, and color to appear as CMYK, spot colors, or both; can be opened in Acrobat 4.0 and Acrobat Reader 4.0 and later.
   */
  PDFX1A2001 = 1,

  /**
   * PDF/X-1a standard, which requires all fonts to be embedded, the appropriate PDF bounding boxes to be specified, and color to appear as CMYK, spot colors, or both; can be opened in Acrobat 4.0 and Acrobat Reader 4.0 and later.
   */
  PDFX1A2003 = 2,

  /**
   * PDF/X-3 standard, which requires all fonts to be embedded and the appropriate PDF bounding boxes to be specified, and for color allows either the use of color management and device-independent color (CIE L*a*b, ICC-based color spaces, CalRGB, and CalGray) or CMYK, spot colors, or both; can be opened in Acrobat 4.0 and Acrobat Reader 4.0 and later.
   */
  PDFX32002 = 3,

  /**
   * PDF/X-3 standard, which requires all fonts to be embedded and the appropriate PDF bounding boxes to be specified, and for color allows either the use of color management and device-independent color (CIE L*a*b, ICC-based color spaces, CalRGB, and CalGray) or CMYK, spot colors, or both; can be opened in Acrobat 4.0 and Acrobat Reader 4.0 and later.
   */
  PDFX32003 = 4,

  /**
   * PDF/X-4 standard, which requires all fonts to be embedded and the appropriate PDF bounding boxes to be specified, and for color allows either the use of color management and device-independent color (CIE L*a*b, ICC-based color spaces, CalRGB, and CalGray) or CMYK, spot colors, or both; can be opened in Acrobat 8.0 and Acrobat Reader 8.0 and later.
   */
  PDFX42008 = 5
}

/**
 * The PDF version with which to make the document compatible.
 */
declare enum PDFCompatibility {
  /**
   * PDF 1.3 (Acrobat 4 or higher).
   */
  PDF13 = 1,

  /**
   * PDF 1.4 (Acrobat 5 or higher).
   */
  PDF14 = 2,

  /**
   * PDF 1.5 (Acrobat 6 or higher).
   */
  PDF15 = 3,

  /**
   * PDF 1.6 (Acrobat 7 or higher)
   */
  PDF16 = 4,

  /**
   * PDF 1.7 (Acrobat 9 or higher)
   */
  PDF17 = 5
}

/**
 * Downsampling options when saving as PDF.
 */
declare enum PDFResample {
  /**
   * Does not downsample.
   */
  NONE = 0,

  /**
   * Averages the pixels in a sample area and replaces the entire area with the average pixel color at the specified resolution.
   */
  PDFAVERAGE = 1,

  /**
   * Uses a weighted average to determine pixel color, which usually yields better results than the simple averaging method of downsampling. The slowest but most precise method, resulting in the smoothest gradations.
   */
  PDFBICUBIC = 3,

  /**
   * Chooses a pixel in the center of the sample area and replaces the entire area with that pixel color; significantly reduces conversion time but results in images that are less smooth and continuous.
   */
  PDFSUBSAMPLE = 2
}

/**
 * The compression type to use whan saving as PICT.
 */
declare enum PICTCompression {
  /**
   * High quality JPEG encoding.
   */
  JPEGHIGHPICT = 5,

  /**
   * Low quality JPEG encoding (high amount of compression).
   */
  JPEGLOWPICT = 2,

  /**
   * Maximum quality JPEG encoding (very little compression).
   */
  JPEGMAXIMUMPICT = 6,

  /**
   * Medium quality JPEG encoding (medium amount of compression).
   */
  JPEGMEDIUMPICT = 4,

  /**
   * No compression.
   */
  NONE = 1
}

/**
 * The formatting for the filename extension.
 */
declare enum Extension {
  /**
   * The extension is in lowercase letters.
   */
  LOWERCASE = 2,

  /**
   * Does not use an extension.
   */
  NONE = 1,

  /**
   * The extension is in uppercase letters.
   */
  UPPERCASE = 3
}

/**
 * The encoding to use when saving to TIFF format.
 */
declare enum TIFFEncoding {
  /**
   * JPEG compression, which is lossy and recommended for continuous-tone images, such as photographs.
   */
  JPEG = 3,

  /**
   * No compression.
   */
  NONE = 1,

  /**
   * LZW compression, which is lossless and most useful for images with large areas of single color.
   */
  TIFFLZW = 2,

  /**
   * Zip compression, which is lossless and most effective for images that contain large areas of single color.
   */
  TIFFZIP = 4
}

/**
 * The layer compression type.
 */
declare enum LayerCompression {
  /**
   * Run Length Encoding, which is lossless.
   */
  RLE = 1,

  /**
   * Zip compression, which is lossless and most effective for images that contain large areas of single color.
   */
  ZIP = 2
}

/**
 * The platform-specific order in which bytes will be read.
 */
declare enum ByteOrder {
  /**
   * IBM PC.
   */
  IBM = 1,

  /**
   * Mac OS.
   */
  MACOS = 2
}

/**
 * The DCS format.
 */
declare enum DCSType {
  /**
   * Creates a color composite file in addition to DCS files.
   */
  COLORCOMPOSITE = 3,

  /**
   * Creates a grayscale composite file in addition to DCS files.
   */
  GRAYSCALECOMPOSITE = 2,

  /**
   * Does not create a composite file.
   */
  NOCOMPOSITE = 1
}

/**
 * The type of pixels to trim around an image.
 */
declare enum TrimType {
  /**
   * Removes from the image an area the color of the lower right pixel.
   */
  BOTTOMRIGHT = 9,

  /**
   * Removes from the image an area the color of the upper left pixel.
   */
  TOPLEFT = 1,

  /**
   * Trims away transparency at the edges of the image, leaving the smallest image containing nontransparent pixels.
   */
  TRANSPARENT = 0
}

/**
 * The color picker to use.
 */
declare enum ColorPicker {
  /**
   * The Adobe Color Picker.
   */
  ADOBE = 1,

  /**
   * The built-in Apple color picker.
   */
  APPLE = 2,

  /**
   * An installed plug-in color picker.
   */
  PLUGIN = 4,

  /**
   * The built-in Windows color picker.
   */
  WINDOWS = 3
}

/**
 * The type of object(s) to reset to default settings.
 */
declare enum ResetTarget {
  /**
   * Tools.
   */
  ALLTOOLS = 2,

  /**
   * Warning dialogs.
   */
  ALLWARNINGS = 1,

  /**
   * All targets.
   */
  EVERYTHING = 3
}

/**
 * The application's behavior regarding image previews and file extensions when a save method is called.
 */
declare enum SaveBehavior {
  /**
   * Always save the item with the file.
   */
  ALWAYSSAVE = 2,

  /**
   * Prompt the user whether to save the item with the file.
   */
  ASKWHENSAVING = 3,

  /**
   * Never save the item with the file.
   */
  NEVERSAVE = 1
}

/**
 * The pointer for the following tools: Marquee, Lasso, Polygonal Lasso, Magic Wand, Crop, Slice, Patch Eyedropper, Pen, Gradient, Line, Paint Bucket, Magnetic Lasso, Magnetic Pen, Freeform Pen, Measure, and Color Sampler.
 */
declare enum PaintingCursors {
  /**
   * Displays cursors as brush shapes representing the size of the current brush. Valid only for painting cursors.
   * Brush size cursors may not appear for very large brushes.
   */
  BRUSHSIZE = 3,

  /**
   * Displays pointers as cross hairs.
   */
  PRECISE = 2,

  /**
   * Displays pointers as tool icons.
   */
  STANDARD = 1
}

/**
 * The pointer for the following tools: Eraser, Pencil, Paintbrush, Healing Brush, Rubber Stamp, Pattern Stamp, Smudge, Blur, Sharpen, Dodge, Burn, Sponge.
 */
declare enum OtherPaintingCursors {
  /**
   * Displays pointers as cross hairs.
   */
  PRECISEOTHER = 2,

  /**
   * Displays pointers as tool icons.
   */
  STANDARDOTHER = 1
}

/**
 * The size of grid squares.
 */
declare enum GridSize {
  /**
   * Large grid squares.
   */
  LARGE = 4,

  /**
   * Medium grid squares.
   */
  MEDIUM = 3,

  /**
   * No grid is displayed.
   */
  NONE = 1,

  /**
   * Small grid squares.
   */
  SMALL = 2
}

/**
 * The measurement unit for ruler increments.
 */
declare enum Units {
  /**
   * Centimeters.
   */
  CM = 3,

  /**
   * Inches.
   */
  INCHES = 2,

  /**
   * Millimeters.
   */
  MM = 4,

  /**
   * Percent.
   */
  PERCENT = 7,

  /**
   * Picas.
   */
  PICAS = 6,

  /**
   * Pixels.
   */
  PIXELS = 1,

  /**
   * Points.
   */
  POINTS = 5
}

/**
 * The measurement unit for type.
 */
declare enum TypeUnits {
  /**
   * Millimeters.
   */
  MM = 4,

  /**
   * Pixels.
   */
  PIXELS = 1,

  /**
   * Points.
   */
  POINTS = 5
}

/**
 * The point type.
 */
declare enum PointType {
  /**
   * 72 points per inch.
   */
  POSTSCRIPT = 1,

  /**
   * 72.27 points per inch.
   */
  TRADITIONAL = 2
}

/**
 * The line style for nonprinting grids displayed over images.
 */
declare enum GridLineStyle {
  /**
   * Dashed.
   */
  DASHED = 2,

  /**
   * Dotted.
   */
  DOTTED = 3,

  /**
   * Solid.
   */
  SOLID = 1
}

/**
 * The line style for nonprinting guides displayed over images.
 */
declare enum GuideLineStyle {
  /**
   * Dashed.
   */
  DASHED = 2,

  /**
   * Solid.
   */
  SOLID = 1
}

/**
 * Controls how pixels in the image are blended.
 */
declare enum BlendMode {
  /**
   * Creates a result color with the luminance of the base color and the hue and saturation of the blend color. This preserves the gray levels in the image and is useful for coloring monochrome images and for tinting color images.
   */
  COLORBLEND = 22,

  /**
   * Looks at the color information in each channel and darkens the base color to reflect the blend color by increasing the contrast. Blending with white produces no change.
   */
  COLORBURN = 6,

  /**
   * Looks at the color information in each channel and brightens the base color to reflect the blend color by decreasing the contrast. Blending with black produces no change.
   */
  COLORDODGE = 10,

  /**
   * Looks at the color information in each channel and selects the base or blend color—whichever is darker—as the result color. Pixels lighter than the blend color are replaced, and pixels darker than the blend color do not change.
   */
  DARKEN = 4,

  /**
   * Lighter colors lighten the result, and darker colors darken the result. 50% gray as a blend color has no effect on the result color. Lowering the fill opacity creates less posterization/thresholding.
   */
  DARKERCOLOR = 28,

  /**
   * Looks at the color information in each channel and subtracts either the blend color from the base color or the base color from the blend color, depending on which has the greater brightness value. Blending with white inverts the base color values; blending with black produces no change.
   */
  DIFFERENCE = 18,

  /**
   * Edits or paints each pixel to make it the result color. However, the result color is a random replacement of the pixels with the base color or the blend color, depending on the opacity at any pixel location.
   */
  DISSOLVE = 3,

  /**
   *
   */
  DIVIDE = 30,

  /**
   * Creates an effect similar to but lower in contrast than the Difference mode. Blending with white inverts the base color values. Blending with black produces no change.
   */
  EXCLUSION = 19,

  /**
   * Multiplies or screens the colors, depending on the blend color. The effect is similar to shining a harsh spotlight on the image. If the blend color (light source) is lighter than 50% gray, the image is lightened, as if it were screened. This is useful for adding highlights to an image. If the blend color is darker than 50% gray, the image is darkened, as if it were multiplied. This is useful for adding shadows to an image. Painting with pure black or white results in pure black or white.
   */
  HARDLIGHT = 14,

  /**
   * Lighter colors lighten the result, and darker colors darken the result. 50% gray as a blend color has no effect on the result color. Lowering the fill opacity creates less posterization/thresholding.
   */
  HARDMIX = 26,

  /**
   * Creates a result color with the luminance and saturation of the base color and the hue of the blend color.
   */
  HUE = 20,

  /**
   * Looks at the color information in each channel and selects the base or blend color—whichever is lighter—as the result color. Pixels darker than the blend color are replaced, and pixels lighter than the blend color do not change.
   */
  LIGHTEN = 8,

  /**
   * Lighter colors lighten the result, and darker colors darken the result. 50% gray as a blend color has no effect on the result color. Lowering the fill opacity creates less posterization/thresholding.
   */
  LIGHTERCOLOR = 27,

  /**
   * Looks at the color information in each channel and darkens the base color to reflect the blend color by decreasing the brightness. Blending with white produces no change.
   */
  LINEARBURN = 7,

  /**
   * Looks at the color information in each channel and brightens the base color to reflect the blend color by increasing the brightness. Blending with black produces no change.
   */
  LINEARDODGE = 11,

  /**
   * Burns or dodges the colors by decreasing or increasing the brightness, depending on the blend color. If the blend color (light source) is lighter than 50% gray, the image is lightened by increasing the brightness. If the blend color is darker than 50% gray, the image is darkened by decreasing the brightness.
   */
  LINEARLIGHT = 16,

  /**
   * Creates a result color with the hue and saturation of the base color and the luminance of the blend color. This mode creates an inverse effect from that of the Color mode.
   */
  LUMINOSITY = 23,

  /**
   * Looks at the color information in each channel and multiplies the base color by the blend color. The result color is always a darker color. Multiplying any color with black produces black. Multiplying any color with white leaves the color unchanged. When you’re painting with a color other than black or white, successive strokes with a painting tool produce progressively darker colors. The effect is similar to drawing on the image with multiple marking pens.
   */
  MULTIPLY = 5,

  /**
   * Edits or paints each pixel to make it the result color. (Called "Threshold" when you’re working with a bitmapped or indexed-color image.)
   */
  NORMAL = 2,

  /**
   * Multiplies or screens the colors, depending on the base color. Patterns or colors overlay the existing pixels while preserving the highlights and shadows of the base color. The base color is not replaced but is mixed with the blend color to reflect the lightness or darkness of the original color.
   */
  OVERLAY = 12,

  /**
   * Allows any blend modes, advanced blending options, and opacity and fill values applied to layers within a set to affect layers below the set in the Layers palette.
   * Valid only for layer sets. To restrict blend modes of the layers within a set, change the layer set's blend mode to Normal.
   */
  PASSTHROUGH = 1,

  /**
   * Replaces the colors, depending on the blend color. If the blend color (light source) is lighter than 50% gray, pixels darker than the blend color are replaced, and pixels lighter than the blend color do not change. If the blend color is darker than 50% gray, pixels lighter than the blend color are replaced, and pixels darker than the blend color do not change. This is useful for adding special effects to an image.
   */
  PINLIGHT = 17,

  /**
   * Creates a result color with the luminance and hue of the base color and the saturation of the blend color. Painting with this mode in an area with no (0) saturation (gray) causes no change.
   */
  SATURATION = 21,

  /**
   * Looks at each channel’s color information and multiplies the inverse of the blend and base colors. The result color is always a lighter color. Screening with black leaves the color unchanged. Screening with white produces white. The effect is similar to projecting multiple photographic slides on top of each other.
   */
  SCREEN = 9,

  /**
   * Darkens or lightens the colors, depending on the blend color. The effect is similar to shining a diffused spotlight on the image. If the blend color (light source) is lighter than 50% gray, the image is lightened as if it were dodged. If the blend color is darker than 50% gray, the image is darkened as if it were burned in. Painting with pure black or white produces a distinctly darker or lighter area but does not result in pure black or white.
   */
  SOFTLIGHT = 13,

  /**
   *
   */
  SUBTRACT = 29,

  /**
   * Burns or dodges the colors by increasing or decreasing the contrast, depending on the blend color. If the blend color (light source) is lighter than 50% gray, the image is lightened by decreasing the contrast. If the blend color is darker than 50% gray, the image is darkened by increasing the contrast.
   */
  VIVIDLIGHT = 15
}

/**
 * The color blend mode type.
 */
declare enum ColorBlendMode {
  /**
   * Edits or paints only on the transparent part of a layer. Works only in layers in which transparent pixels locked = false and is analogous to painting on the back of transparent areas on a sheet of acetate.
   */
  BEHIND = 24,

  /**
   * Edits or paints each pixel and makes it transparent. Works only in layers in which transparent pixels locked = false.
   */
  CLEAR = 25,

  /**
   * Creates a result color with the luminance of the base color and the hue and saturation of the blend color. This preserves the gray levels in the image and is useful for coloring monochrome images and for tinting color images.
   */
  COLOR = 22,

  /**
   * Looks at the color information in each channel and darkens the base color to reflect the blend color by increasing the contrast. Blending with white produces no change.
   */
  COLORBURN = 6,

  /**
   * Looks at the color information in each channel and brightens the base color to reflect the blend color by decreasing the contrast. Blending with black produces no change.
   */
  COLORDODGE = 10,

  /**
   * Looks at the color information in each channel and selects the base or blend color—whichever is darker—as the result color. Pixels lighter than the blend color are replaced, and pixels darker than the blend color do not change.
   */
  DARKEN = 4,

  /**
   *
   */
  DARKERCOLOR = 28,

  /**
   * Looks at the color information in each channel and subtracts either the blend color from the base color or the base color from the blend color, depending on which has the greater brightness value. Blending with white inverts the base color values; blending with black produces no change.
   */
  DIFFERENCE = 18,

  /**
   * Edits or paints each pixel to make it the result color, which is a random replacement of the pixels with the base color or the blend color, depending on the opacity at any pixel location.
   */
  DISSOLVE = 3,

  /**
   *
   */
  DIVIDE = 30,

  /**
   * Creates an effect similar to but lower in contrast than the Difference mode. Blending with white inverts the base color values. Blending with black produces no change.
   */
  EXCLUSION = 19,

  /**
   * Multiplies or screens the colors, depending on the blend color. The effect is similar to shining a harsh spotlight on the image. If the blend color (light source) is lighter than 50% gray, the image is lightened, as if it were screened. This is useful for adding highlights to an image. If the blend color is darker than 50% gray, the image is darkened, as if it were multiplied. This is useful for adding shadows to an image. Painting with pure black or white results in pure black or white.
   */
  HARDLIGHT = 14,

  /**
   * Lighter colors lighten the result, and darker colors darken the result. 50% gray as a blend color has no effect on the result color. Lowering the fill opacity creates less posterization/thresholding.
   */
  HARDMIX = 26,

  /**
   * Creates a result color with the luminance and saturation of the base color and the hue of the blend color.
   */
  HUE = 20,

  /**
   * Looks at the color information in each channel and selects the base or blend color—whichever is lighter—as the result color. Pixels darker than the blend color are replaced, and pixels lighter than the blend color do not change.
   */
  LIGHTEN = 8,

  /**
   *
   */
  LIGHTERCOLOR = 27,

  /**
   * Looks at the color information in each channel and darkens the base color to reflect the blend color by decreasing the brightness. Blending with white produces no change.
   */
  LINEARBURN = 7,

  /**
   * Looks at the color information in each channel and brightens the base color to reflect the blend color by increasing the brightness. Blending with black produces no change.
   */
  LINEARDODGE = 11,

  /**
   * Burns or dodges the colors by decreasing or increasing the brightness, depending on the blend color. If the blend color (light source) is lighter than 50% gray, the image is lightened by increasing the brightness. If the blend color is darker than 50% gray, the image is darkened by decreasing the brightness.
   */
  LINEARLIGHT = 16,

  /**
   * Creates a result color with the hue and saturation of the base color and the luminance of the blend color. This mode creates an inverse effect from that of the Color mode.
   */
  LUMINOSITY = 23,

  /**
   * Looks at the color information in each channel and multiplies the base color by the blend color. The result color is always a darker color. Multiplying any color with black produces black. Multiplying any color with white leaves the color unchanged. When you’re painting with a color other than black or white, successive strokes with a painting tool produce progressively darker colors. The effect is similar to drawing on the image with multiple marking pens.
   */
  MULTIPLY = 5,

  /**
   * Edits or paints each pixel to make it the result color. (Called "Threshold" when you’re working with a bitmapped or indexed-color image.)
   */
  NORMAL = 2,

  /**
   * Multiplies or screens the colors, depending on the base color. Patterns or colors overlay the existing pixels while preserving the highlights and shadows of the base color. The base color is not replaced but is mixed with the blend color to reflect the lightness or darkness of the original color.
   */
  OVERLAY = 12,

  /**
   * Replaces the colors, depending on the blend color. If the blend color (light source) is lighter than 50% gray, pixels darker than the blend color are replaced, and pixels lighter than the blend color do not change. If the blend color is darker than 50% gray, pixels lighter than the blend color are replaced, and pixels darker than the blend color do not change. This is useful for adding special effects to an image.
   */
  PINLIGHT = 17,

  /**
   * Creates a result color with the luminance and hue of the base color and the saturation of the blend color. Painting with this mode in an area with no (0) saturation (gray) causes no change.
   */
  SATURATION = 21,

  /**
   * Looks at each channel’s color information and multiplies the inverse of the blend and base colors. The result color is always a lighter color. Screening with black leaves the color unchanged. Screening with white produces white. The effect is similar to projecting multiple photographic slides on top of each other.
   */
  SCREEN = 9,

  /**
   * Darkens or lightens the colors, depending on the blend color. The effect is similar to shining a diffused spotlight on the image. If the blend color (light source) is lighter than 50% gray, the image is lightened as if it were dodged. If the blend color is darker than 50% gray, the image is darkened as if it were burned in. Painting with pure black or white produces a distinctly darker or lighter area but does not result in pure black or white.
   */
  SOFTLIGHT = 13,

  /**
   *
   */
  SUBTRACT = 29,

  /**
   * Burns or dodges the colors by increasing or decreasing the contrast, depending on the blend color. If the blend color (light source) is lighter than 50% gray, the image is lightened by decreasing the contrast. If the blend color is darker than 50% gray, the image is darkened by increasing the contrast.
   */
  VIVIDLIGHT = 15
}

/**
 * The type of the layer content to rasterize.
 */
declare enum RasterizeType {
  /**
   * Rasterizes all vector data on the layer.
   */
  ENTIRELAYER = 5,

  /**
   * Rasterizes the fill of a shape layer, leaving the vector mask.
   */
  FILLCONTENT = 3,

  /**
   * Rasterizes the vector mask of a shape layer, turning it into a layer mask.
   */
  LAYERCLIPPINGPATH = 4,

  /**
   * Rasterizes the selected layers.
   */
  LINKEDLAYERS = 6,

  /**
   * Rasterizes a shape layer.
   */
  SHAPE = 2,

  /**
   * Rasterizes the type on a type layer. Doesn't rasterize any other vector data on the layer.
   */
  TEXTCONTENTS = 1
}

/**
 * The placement of paragraph text within the bounding box.
 */
declare enum Justification {
  /**
   * Text is centered on each line.
   */
  CENTER = 2,

  /**
   * Justifies all lines except the last, which is center-aligned.
   */
  CENTERJUSTIFIED = 5,

  /**
   * Justifies all lines including the last, which is force-justified.
   */
  FULLYJUSTIFIED = 7,

  /**
   * Aligns the left edges, leaving the right edge ragged.
   */
  LEFT = 1,

  /**
   * Justifies all lines except the last, which is left-aligned.
   */
  LEFTJUSTIFIED = 4,

  /**
   * Aligns the right edges, leaving the left edge ragged.
   */
  RIGHT = 3,

  /**
   * Justifies all lines except the last, which is right-aligned.
   */
  RIGHTJUSTIFIED = 6
}

/**
 * The method to use to smooth edges by softening the color transition between edge pixels and background pixels.
 */
declare enum AntiAlias {
  /**
   * Makes type appear somewhat sharp.
   */
  CRISP = 3,

  /**
   * Does not use anti-aliasing.
   */
  NONE = 1,

  /**
   * Makes type appear its sharpest.
   */
  SHARP = 2,

  /**
   * Makes type appear smoother.
   */
  SMOOTH = 5,

  /**
   * Makes type appear heavier.
   */
  STRONG = 4
}

/**
 * The capitalization to use.
 */
declare enum Case {
  /**
   * Uses all uppercase letters.
   */
  ALLCAPS = 2,

  /**
   * Uses uppercase and lowercase letters.
   */
  NORMAL = 1,

  /**
   * Uses small caps for lowercase letters.
   */
  SMALLCAPS = 3
}

/**
 * The language to use.
 */
declare enum Language {
  /**
   * Brazillian Portuguese.
   */
  BRAZILLIANPORTUGUESE = 13,

  /**
   * Canadian French.
   */
  CANADIANFRENCH = 4,

  /**
   * Danish.
   */
  DANISH = 17,

  /**
   * Dutch.
   */
  DUTCH = 16,

  /**
   * British English.
   */
  ENGLISHUK = 2,

  /**
   * American English.
   */
  ENGLISHUSA = 1,

  /**
   * Finnish.
   */
  FINNISH = 5,

  /**
   * French.
   */
  FRENCH = 3,

  /**
   * German.
   */
  GERMAN = 6,

  /**
   * Italian.
   */
  ITALIAN = 9,

  /**
   * Norwegian.
   */
  NORWEGIAN = 10,

  /**
   * Nynorsk Norwegian.
   */
  NYNORSKNORWEGIAN = 11,

  /**
   * Old German.
   */
  OLDGERMAN = 7,

  /**
   * Portuguese.
   */
  PORTUGUESE = 12,

  /**
   * Spanish.
   */
  SPANISH = 14,

  /**
   * Swedish.
   */
  SWEDISH = 15,

  /**
   * Swiss German.
   */
  SWISSGERMAN = 8
}

/**
 * The type of text.
 */
declare enum TextType {
  /**
   * Text that wraps within a bounding box.
   */
  PARAGRAPHTEXT = 2,

  /**
   * Text that does not wrap.
   */
  POINTTEXT = 1
}

/**
 * The warp style for text.
 */
declare enum WarpStyle {
  /**
   * The type is warped in the shape of an arc.
   */
  ARC = 2,

  /**
   * Text is warped in the form of an arch.
   */
  ARCH = 5,

  /**
   * Warp is heavier on the lower or left edge of the text than on the upper or right edge.
   */
  ARCLOWER = 3,

  /**
   * Warp is heavier on the upper or right edge of the text than on the lower or left edge.
   */
  ARCUPPER = 4,

  /**
   * Text is warped outward on both the upper and lower or right and left edges.
   */
  BULGE = 6,

  /**
   * Text is warped in the shape of a fish.
   */
  FISH = 11,

  /**
   * Text bulges in the middle and is squeezed on the edges as if viewed through a fisheye lens.
   */
  FISHEYE = 13,

  /**
   * Text is warped in the shape of a waving flag.
   */
  FLAG = 9,

  /**
   * Text is inflated.
   */
  INFLATE = 14,

  /**
   * No warp.
   */
  NONE = 1,

  /**
   * Text is warped in an undulating, rising pattern.
   */
  RISE = 12,

  /**
   * Text is warped downward or to the right in the shape of a fan-like seashell.
   */
  SHELLLOWER = 7,

  /**
   * Text is warped upward or to the left in the shape of a fan-like seashell.
   */
  SHELLUPPER = 8,

  /**
   * Text is squeezed.
   */
  SQUEEZE = 15,

  /**
   * Text is twisted.
   */
  TWIST = 16,

  /**
   * Text is warped in the shape of a wave.
   */
  WAVE = 10
}

/**
 * The text composer.
 */
declare enum TextComposer {
  /**
   * Considers a network of break points for a range of lines and thus optimizes earlier lines in the paragraph to eliminate especially unattractive breaks later on. Results in more even spacing and fewer hyphens.
   * The Adobe Every-line composer approaches composition by identifying possible breakpoints, evaluating them, and assigning a weighted penalty based on these principles: Highest importance is given to evenness of letter and word spacing; Possible breakpoints are evaluated and penalized according to how much they deviate from optimal spacing; Hyphenation is avoided when possible; Breakpoints that require hyphenation are penalized more than those that create uneven spacing; Good breakpoints are preferred over bad breakpoints.
   */
  ADOBEEVERYLINE = 2,

  /**
   * Offers a traditional approach to composing type one line at a time. Useful if you prefer to have manual control over how lines break.
   * Uses the following principles when considering a breakpoint: Compressed or expanded word spacing is preferable to hyphenation; Hyphenation is preferable to compressed or expanded letter spacing; If spacing must be adjusted, compression is better than expansion.
   */
  ADOBESINGLELINE = 1
}

/**
 * The type of kerning to use for characters.
 */
declare enum AutoKernType {
  /**
   * Allows manual kerning.
   */
  MANUAL = 1,

  /**
   * Uses kern pairs, which contain information about the spacing of specific pairs of letters.
   */
  METRICS = 2,

  /**
   * Adjusts the spacing between adjacent characters based on their shapes.
   */
  OPTICAL = 3
}

/**
 * The strikethrough style.
 */
declare enum StrikeThruType {
  /**
   * (For vertical type) The strikethrough is through the em box.
   */
  STRIKEBOX = 3,

  /**
   * (For vertical type) The strikethrough is through the height of the text.
   */
  STRIKEHEIGHT = 2,

  /**
   * No strikethrough.
   */
  STRIKEOFF = 1
}

/**
 * The type of underline.
 */
declare enum UnderlineType {
  /**
   * (For vertical type) The underline is to the left of the text.
   */
  UNDERLINELEFT = 3,

  /**
   * No underline.
   */
  UNDERLINEOFF = 1,

  /**
   * (For vertical type) The underline is to the right of the text.
   */
  UNDERLINERIGHT = 2
}

/**
 * The selection behavior when a selection already exists.
 */
declare enum SelectionType {
  /**
   * Remove the selection from the already selected area.
   */
  DIMINISH = 3,

  /**
   * Add the selection to an already selected area.
   */
  EXTEND = 2,

  /**
   * Make the selection only the area where the new selection intersects the already selected area.
   */
  INTERSECT = 4,

  /**
   * Replace the selected area.
   */
  REPLACE = 1
}

/**
 * The export options to use.
 */
declare enum ExportType {
  /**
   * Exports Photoshop paths as Adobe Illustrator files.
   */
  ILLUSTRATORPATHS = 1,

  /**
   * Uses the save for web export options.
   */
  SAVEFORWEB = 2
}

/**
 * The paths to export.
 */
declare enum IllustratorPathType {
  /**
   * Exports all paths.
   */
  ALLPATHS = 2,

  /**
   * Exports the document bounds.
   */
  DOCUMENTBOUNDS = 1,

  /**
   * Exports the specified path. To specify the path, see the path name property of the illustrator export options object.
   */
  NAMEDPATH = 3
}

/**
 * The type of channel.
 */
declare enum ChannelType {
  /**
   * The channel related to the document color model.
   */
  COMPONENT = 1,

  /**
   * The apha channel where color indicates a masked area.
   */
  MASKEDAREA = 2,

  /**
   * The lpha channel where color indicates a selected area.
   */
  SELECTEDAREA = 3,

  /**
   * The alpha channel to store a spot color.
   */
  SPOTCOLOR = 4
}

/**
 * The blur method to use.
 */
declare enum RadialBlurMethod {
  /**
   * Blurs along concentric circular lines at the specified degree of rotation.
   */
  SPIN = 1,

  /**
   * Blurs along radial lines, as if zooming into or out of the image.
   */
  ZOOM = 2
}

/**
 * The radial blur quality.
 */
declare enum RadialBlurQuality {
  /**
   * Produces best results.
   */
  BEST = 3,

  /**
   * Produces fast but grainy results.
   */
  DRAFT = 1,

  /**
   * Produces good results.
   */
  GOOD = 2
}

/**
 * The smart blur quality.
 */
declare enum SmartBlurQuality {
  /**
   * High quality.
   */
  HIGH = 3,

  /**
   * Low quality.
   */
  LOW = 1,

  /**
   * Medium quality.
   */
  MEDIUM = 2
}

/**
 * The method to use for smart blurring.
 */
declare enum SmartBlurMode {
  /**
   * Blur is applied only to edges of color transitions.
   * Where significant contrast occurs, applies black-and-white edges.
   */
  EDGEONLY = 2,

  /**
   * Blur is applied to entire image.
   */
  NORMAL = 1,

  /**
   * Blur is applied only to edges of color transitions.
   * Where significant contrast occurs, applies white edges.
   */
  OVERLAYEDGE = 3
}

/**
 * The type of texture or glass surface image to load for a texturizer or glass filter.
 */
declare enum TextureType {
  /**
   * The image appears as if viewed through glass blocks.
   */
  BLOCKS = 1,

  /**
   * The image appears as if painted on canvas.
   */
  CANVAS = 2,

  /**
   * Texture from an existing document.
   */
  FILE = 5,

  /**
   * The image appears as if frosted.
   */
  FROSTED = 3,

  /**
   * The image appears as if viewed through an array of tiny lenses.
   */
  TINYLENS = 4
}

/**
 * The method of polar distortion to use.
 */
declare enum PolarConversionType {
  /**
   * The selection is converted from its polar to rectangular coordinates.
   */
  POLARTORECTANGULAR = 2,

  /**
   * The selection is converted from its rectangular to polar coordinates.
   */
  RECTANGULARTOPOLAR = 1
}

/**
 * The size of undulations.
 */
declare enum RippleSize {
  /**
   * Large.
   */
  LARGE = 3,

  /**
   * Medium.
   */
  MEDIUM = 2,

  /**
   * Small.
   */
  SMALL = 1
}

/**
 * The method to use to treat undistorted areas or areas left blank in an image to which a filter in the Distort category has been applied.
 */
declare enum UndefinedAreas {
  /**
   * Extends the colors of pixels along the edge of the image in the direction specified. Banding may result if the edge pixels are different colors.
   */
  REPEATEDGEPIXELS = 2,

  /**
   * Fills the undefined space with content from the opposite edge of the image.
   */
  WRAPAROUND = 1
}

/**
 * The method to use to fill the empty space left by offsetting a an image or selection.
 */
declare enum OffsetUndefinedAreas {
  /**
   * Extends the colors of pixels along the edge of the image in the direction specified. Banding may result if the edge pixels are different colors.
   */
  REPEATEDGEPIXELS = 3,

  /**
   * For background layers, sets pixels to the background layer color. For nonbackground layers, sets the pixels to transparent.
   */
  SETTOBACKGROUND = 1,

  /**
   * Fills the undefined space with content from the opposite edge of the image.
   */
  WRAPAROUND = 2
}

/**
 * The curve (or stretch shape) to use for the distortion.
 */
declare enum SpherizeMode {
  /**
   * Distorts the image as if it is wrapped around a horizontal cylinder.
   */
  HORIZONTAL = 2,

  /**
   * Distorts the image as if it is wrapped around a sphere.
   */
  NORMAL = 1,

  /**
   * Distorts the image as if it is wrapped around a vertical cylinder.
   */
  VERTICAL = 3
}

/**
 * Describes how the displacement map fits the image if the image is not the same size as the map.
 */
declare enum DisplacementMapType {
  /**
   * The map is resized.
   */
  STRETCHTOFIT = 1,

  /**
   * The selection is filled by repeating the map in a pattern.
   */
  TILE = 2
}

/**
 * The type of wave.
 */
declare enum WaveType {
  /**
   * Rolling.
   */
  SINE = 1,

  /**
   * Square.
   */
  SQUARE = 3,

  /**
   * Triangular.
   */
  TRIANGULAR = 2
}

/**
 * The method of zigzagging.
 */
declare enum ZigZagType {
  /**
   * Pixels are rotated around the center of the selection.
   */
  AROUNDCENTER = 1,

  /**
   * Pixels are displaced toward or away from the center of the selection.
   */
  OUTFROMCENTER = 2,

  /**
   * Pixels are displaced to the upper left or lower right.
   */
  PONDRIPPLES = 3
}

/**
 * The distribution method to use when applying an Add Noise filter.
 */
declare enum NoiseDistribution {
  /**
   * Distributes color values of noise along a bell-shaped curve, creating a speckled effect.
   */
  GAUSSIAN = 2,

  /**
   * Distributes color values of noise using random numbers between 0 and plus or minus the specified value, creating a subtle effect.
   */
  UNIFORM = 1
}

/**
 * The type of lens.
 */
declare enum LensType {
  /**
   * Movie Prime.
   */
  MOVIEPRIME = 5,

  /**
   * 105mm Prime.
   */
  PRIME105 = 3,

  /**
   * 35mm Prime.
   */
  PRIME35 = 2,

  /**
   * 50-300mm Zoom.
   */
  ZOOMLENS = 1
}

/**
 * The type of fields to eliminate.
 */
declare enum EliminateFields {
  /**
   * Eliminate even interlaced lines in a video image.
   */
  EVENFIELDS = 2,

  /**
   * Eliminate odd interlaced lines in a video image.
   */
  ODDFIELDS = 1
}

/**
 * The method for replacing eliminated fields.
 */
declare enum CreateFields {
  /**
   * Duplicates existing pixels.
   */
  DUPLICATION = 1,

  /**
   * Assigns color values to any new pixels that Photoshop creates based on the color values of existing pixels in the image.
   */
  INTERPOLATION = 2
}

/**
 * The pixel dimensions of the image.
 */
declare enum PhotoCDSize {
  /**
   * 1024x1536 image.
   */
  EXTRALARGE = 5,

  /**
   * 512x768 image.
   */
  LARGE = 4,

  /**
   * 2048x3072 image.
   */
  MAXIMUM = 6,

  /**
   * 256x384 image.
   */
  MEDIUM = 3,

  /**
   * 64x96 image.
   */
  MINIMUM = 1,

  /**
   * 128x192 image.
   */
  SMALL = 2
}

/**
 * The number of bits per color channel.
 */
declare enum BitsPerChannelType {
  /**
   * 8 bits per channel.
   */
  EIGHT = 8,

  /**
   * 1 bit per channel.
   */
  ONE = 1,

  /**
   * 16 bits per channel.
   */
  SIXTEEN = 16,

  /**
   * 32 bits per channel.
   */
  THIRTYTWO = 32
}

/**
 * The number of bits per pixel to use when compressing a PICT file.
 */
declare enum PICTBitsPerPixels {
  /**
   * 8 bits per pixel.
   */
  EIGHT = 8,

  /**
   * 4 bits per pixel.
   */
  FOUR = 4,

  /**
   * 16 bits per pixel.
   */
  SIXTEEN = 16,

  /**
   * 32 bits per pixel.
   */
  THIRTYTWO = 32,

  /**
   * 2 bits per pixel.
   */
  TWO = 2
}

/**
 * The resolution to use when saving an image in Targa format.
 */
declare enum TargaBitsPerPixels {
  /**
   * 16 bits per pixel.
   */
  SIXTEEN = 16,

  /**
   * 32 bits per pixel.
   */
  THIRTYTWO = 32,

  /**
   * 24 bits per pixel.
   */
  TWENTYFOUR = 24
}

/**
 * The value type of an object.
 */
declare enum DescValueType {
  /**
   * Alias.
   */
  ALIASTYPE = 11,

  /**
   * Boolean.
   */
  BOOLEANTYPE = 5,

  /**
   * Class.
   */
  CLASSTYPE = 10,

  /**
   * Double.
   */
  DOUBLETYPE = 2,

  /**
   * Enumeration.
   */
  ENUMERATEDTYPE = 8,

  /**
   * Integer.
   */
  INTEGERTYPE = 1,

  /**
   *
   */
  LARGEINTEGERTYPE = 13,

  /**
   * Action list.
   */
  LISTTYPE = 6,

  /**
   * Object.
   */
  OBJECTTYPE = 7,

  /**
   * Raw.
   */
  RAWTYPE = 12,

  /**
   * Reference.
   */
  REFERENCETYPE = 9,

  /**
   * String.
   */
  STRINGTYPE = 4,

  /**
   * Unit value of type double.
   */
  UNITDOUBLE = 3
}

/**
 * The type of action reference object.
 */
declare enum ReferenceFormType {
  /**
   * Class.
   */
  CLASSTYPE = 7,

  /**
   * Enumerated.
   */
  ENUMERATED = 5,

  /**
   * Identifier.
   */
  IDENTIFIER = 3,

  /**
   * Index.
   */
  INDEX = 2,

  /**
   * Name.
   */
  NAME = 1,

  /**
   * Offset.
   */
  OFFSET = 4,

  /**
   * Property.
   */
  PROPERTY = 6
}

/**
 * The number of bits per channel (also called pixel depth or color depth). The number selected indicates the exponent of 2. For example, a pixel with a bit-depth of EIGHT has 2-to-the-8th, or 256, possible color values.
 */
declare enum BMPDepthType {
  /**
   * A1 R5 G5 B5 advanced bit depth specification.
   */
  BMP_A1R5G5B5 = 61,

  /**
   * A4 R4 G4 B4 advanced bit depth specification.
   */
  BMP_A4R4G4B4 = 64,

  /**
   * A8 R8 G8 B8 advanced bit depth specification (same as normal 32 bit mode)
   */
  BMP_A8R8G8B8 = 67,

  /**
   * R5 G6 B5 advanced bit depth specification.
   */
  BMP_R5G6B5 = 62,

  /**
   * R8 G8 B8 advanced bit depth specification (same as normal 24 bit mode)
   */
  BMP_R8G8B8 = 65,

  /**
   * X1 R5 G5 B5 advanced bit depth specification (same as normal 16 bit mode)
   */
  BMP_X1R5G5B5 = 60,

  /**
   * X4 R4 G4 B4 advanced bit depth specification.
   */
  BMP_X4R4G4B4 = 63,

  /**
   * X8 R8 G8 B8 advanced bit depth specification.
   */
  BMP_X8R8G8B8 = 66,

  /**
   * 8 bits depth.
   */
  EIGHT = 8,

  /**
   * 4 bits depth.
   */
  FOUR = 4,

  /**
   * 1 bit depth.
   */
  ONE = 1,

  /**
   * 16 bits depth.
   */
  SIXTEEN = 16,

  /**
   * 32 bits depth.
   */
  THIRTYTWO = 32,

  /**
   * 24 bits depth.
   */
  TWENTYFOUR = 24
}

/**
 * The copyright status of the document.
 */
declare enum CopyrightedType {
  /**
   * The document is copyrighted.
   */
  COPYRIGHTEDWORK = 1,

  /**
   * The document is in the public domain.
   */
  PUBLICDOMAIN = 2,

  /**
   * The copyright status is not indicated.
   */
  UNMARKED = 3
}

/**
 * The quality of an image converted to bitmap mode.
 */
declare enum BitmapConversionType {
  /**
   * Simulates the effect of printing a grayscale image through a custom halftone screen. This method lets you apply a screen texture, such as a wood grain, to an image. To use this option, you must first define a pattern.
   */
  CUSTOMPATTERN = 5,

  /**
   * Applies a random pattern that is usually less noticeable than pattern dither. The dither effects are diffused across adjacent pixels. If you select this algorithm, specify a dither percentage to control the amount of dithering applied to the image.
   * May cause detectable seams to appear across slice boundaries. Linking slices diffuses the dither pattern across all linked slices, and eliminates the seams.
   */
  DIFFUSIONDITHER = 3,

  /**
   * 50% Threshold.
   */
  HALFTHRESHOLD = 1,

  /**
   * Lets you convert a grayscale image to simulated halftone dots.
   */
  HALFTONESCREEN = 4,

  /**
   * Applies a halftone-like square pattern to determine the value of pixels.
   */
  PATTERNDITHER = 2
}

/**
 * The shape of the dots (ink deposits) in the halftone screen.
 */
declare enum BitmapHalfToneType {
  /**
   * Cross.
   */
  CROSS = 6,

  /**
   * Diamond.
   */
  DIAMOND = 2,

  /**
   * Ellipse.
   */
  ELLIPSE = 3,

  /**
   * Line.
   */
  LINE = 4,

  /**
   * Round.
   */
  ROUND = 1,

  /**
   * Square.
   */
  SQUARE = 5
}

/**
 * The color to use for matting.
 */
declare enum MatteType {
  /**
   * The current background color.
   */
  BACKGROUND = 3,

  /**
   * Black.
   */
  BLACK = 5,

  /**
   * The current foreground color.
   */
  FOREGROUND = 2,

  /**
   * Gray.
   */
  NETSCAPE = 7,

  /**
   * None.
   */
  NONE = 1,

  /**
   * 50% gray.
   */
  SEMIGRAY = 6,

  /**
   * White.
   */
  WHITE = 4
}

/**
 * Method to use for interpreting selective color adjustment specifications.
 */
declare enum AdjustmentReference {
  /**
   * A percentage of the whole.
   */
  ABSOLUTE = 2,

  /**
   * A percentage of the existing color amount.
   */
  RELATIVE = 1
}

/**
 * The color profile to use.
 */
declare enum OpenDocumentMode {
  /**
   * CMYK.
   */
  CMYK = 3,

  /**
   * Grayscale.
   */
  GRAYSCALE = 1,

  /**
   * Lab.
   */
  LAB = 4,

  /**
   * RGB.
   */
  RGB = 2
}

/**
 * The color profile to use.
 */
declare enum NewDocumentMode {
  /**
   * Bitmap.
   */
  BITMAP = 5,

  /**
   * CMYK.
   */
  CMYK = 3,

  /**
   * Grayscale.
   */
  GRAYSCALE = 1,

  /**
   * Lab.
   */
  LAB = 4,

  /**
   * RGB.
   */
  RGB = 2
}

/**
 * Deprecated.
 */
declare enum PhotoCDColorSpace {
  /**
   * Lab with 16 bits per channel.
   */
  LAB16 = 4,

  /**
   * Lab with 8 bits per channel.
   */
  LAB8 = 3,

  /**
   * RGB with 16 bits per channel.
   */
  RGB16 = 2,

  /**
   * RGB with 8 bits per channel.
   */
  RGB8 = 1
}

/**
 * The placement of path or selection boundary strokes.
 */
declare enum StrokeLocation {
  /**
   * The border is placed in the center of the the selection or layer boundaries.
   */
  CENTER = 2,

  /**
   * The border is placed inside the selection or layer boundaries.
   */
  INSIDE = 1,

  /**
   * The border is placed outside the selection or layer boundaries.
   */
  OUTSIDE = 3
}

/**
 * Color models.
 */
declare enum ColorModel {
  /**
   * CMYK.
   */
  CMYK = 3,

  /**
   * Grayscale.
   */
  GRAYSCALE = 1,

  /**
   * HSB.
   */
  HSB = 5,

  /**
   * Lab.
   */
  LAB = 4,

  /**
   * The color model has not yet been assigned.
   */
  NONE = 50,

  /**
   * RGB.
   */
  RGB = 2
}

/**
 * When should a JavaScript debugger be shown.
 */
declare enum JavaScriptExecutionMode {
  /**
   * Show the JavaScript debugger when the first line of the JavaScript executes.
   */
  BEFORERUNNING = 3,

  /**
   * Never show the JavaScript debugger. Treat runtime errors by throwing a JavaScript exceptions.
   */
  NEVER = 1,

  /**
   * Show the JavaScript debugger if a runtime error occurs.
   */
  ONRUNTIMEERROR = 2
}

/**
 * The color space for the source when printing.
 */
declare enum SourceSpaceType {
  /**
   * The document color space.
   */
  DOCUMENT = 1,

  /**
   * The proof color space.
   */
  PROOF = 2
}

/**
 * The types of art layers.
 */
declare enum LayerKind {
  /**
   * Black and white layer.
   */
  BLACKANDWHITE = 22,

  /**
   * Brightness contrast adjustment layer.
   */
  BRIGHTNESSCONTRAST = 9,

  /**
   * Channel mixer adjustment layer.
   */
  CHANNELMIXER = 12,

  /**
   * Color balance adjustment layer.
   */
  COLORBALANCE = 8,

  /**
   * Color lookup layer.
   */
  COLORLOOKUP = 24,

  /**
   * Curves adjustment layer.
   */
  CURVES = 7,

  /**
   * Exposure layer.
   */
  EXPOSURE = 19,

  /**
   * Gradient fill.
   */
  GRADIENTFILL = 4,

  /**
   * Gradient map adjustment laye.
   */
  GRADIENTMAP = 13,

  /**
   * Hue saturation adjustment laye.
   */
  HUESATURATION = 10,

  /**
   * Invert adjustment layer.
   */
  INVERSION = 14,

  /**
   * 3D layer.
   */
  LAYER3D = 20,

  /**
   * Levels adjustment layer.
   */
  LEVELS = 6,

  /**
   * Normal.
   */
  NORMAL = 1,

  /**
   * Pattern fill.
   */
  PATTERNFILL = 5,

  /**
   * Photo filter layer.
   */
  PHOTOFILTER = 18,

  /**
   * Posterize adjustment layer.
   */
  POSTERIZE = 16,

  /**
   * Selective color adjustment layer.
   */
  SELECTIVECOLOR = 11,

  /**
   * Smart object layer.
   */
  SMARTOBJECT = 17,

  /**
   * Solid color.
   */
  SOLIDFILL = 3,

  /**
   * Text.
   */
  TEXT = 2,

  /**
   * Threshold adjustment layer.
   */
  THRESHOLD = 15,

  /**
   * Vibrance layer.
   */
  VIBRANCE = 23,

  /**
   * Video layer.
   */
  VIDEO = 21
}

/**
 * PDF presentation transition types.
 */
declare enum TransitionType {
  /**
   * Images transition in horizontal stripes like Venetian blinds.
   */
  BLINDSHORIZONTAL = 1,

  /**
   * Images transition in vertical stripes.
   */
  BLINDSVERTICAL = 2,

  /**
   * Images transition using a shrinking box shape.
   */
  BOXIN = 4,

  /**
   * Images transition using an expanding box shape.
   */
  BOXOUT = 5,

  /**
   * One image dissolves into the next.
   */
  DISSOLVE = 3,

  /**
   * Images dissolve top to bottom.
   */
  GLITTERDOWN = 6,

  /**
   * Images dissolve left to right.
   */
  GLITTERRIGHT = 7,

  /**
   * Images dissolve top-left to bottom-right.
   */
  GLITTERRIGHTDOWN = 8,

  /**
   * Images change with no visible transition.
   */
  NONE = 9,

  /**
   * Images transition using random effects.
   */
  RANDOM = 10,

  /**
   * The new images roll in from the top and bottom of the screen.
   */
  SPLITHORIZONTALIN = 11,

  /**
   * The new image spreads from the middle of the screen to the top and bottom of the screen.
   */
  SPLITHORIZONTALOUT = 12,

  /**
   * The new image rolls in from the left and right edges of the screen.
   */
  SPLITVERTICALIN = 13,

  /**
   * The new image rolls out from the middle of the screen to the left and right edges of the screen.
   */
  SPLITVERTICALOUT = 14,

  /**
   * The new image rolls in from the top of the screen.
   */
  WIPEDOWN = 15,

  /**
   * The new image rolls in from the right side of the screen.
   */
  WIPELEFT = 16,

  /**
   * The new image rolls in from the left side of the screen.
   */
  WIPERIGHT = 17,

  /**
   * The new image rolls in from the bottom of the screen.
   */
  WIPEUP = 18
}

/**
 * Fonts for web photo gallery text.
 */
declare enum GalleryFontType {
  /**
   * Arial font.
   */
  ARIAL = 1,

  /**
   * Courier New font.
   */
  COURIERNEW = 2,

  /**
   * Helvetica font.
   */
  HELVETICA = 3,

  /**
   * Times New Roman font.
   */
  TIMESNEWROMAN = 4
}

/**
 * DEPRECATED. Constrain values for images.
 */
declare enum GalleryConstrainType {
  /**
   * Constrain both the height and the width of the image.
   */
  CONSTRAINBOTH = 3,

  /**
   * Constrain the height of the image.
   */
  CONSTRAINHEIGHT = 2,

  /**
   * Constrain width.
   */
  CONSTRAINWIDTH = 1
}

/**
 * DEPRECATED. Web photo gallery thumb size types.
 */
declare enum GalleryThumbSizeType {
  /**
   * Custom thumbnail.
   */
  CUSTOM = 4,

  /**
   * Large thumbnail.
   */
  LARGE = 3,

  /**
   * Medium thumbnail.
   */
  MEDIUM = 2,

  /**
   * Small thumbnail.
   */
  SMALL = 1
}

/**
 * DEPRECATED. Web photo gallery security types.
 */
declare enum GallerySecurityType {
  /**
   * Caption security.
   */
  CAPTION = 5,

  /**
   * Copyright security.
   */
  COPYRIGHT = 4,

  /**
   * Credit security.
   */
  CREDIT = 6,

  /**
   * Custom text security.
   */
  CUSTOMTEXT = 2,

  /**
   * Filename security.
   */
  FILENAME = 3,

  /**
   * No security.
   */
  NONE = 1,

  /**
   * Title security.
   */
  TITLE = 7
}

/**
 * The function or meaning of text in a Picture Package.
 */
declare enum PicturePackageTextType {
  /**
   * The text is a caption.
   */
  CAPTION = 5,

  /**
   * The text is the copyright.
   */
  COPYRIGHT = 4,

  /**
   * The text is the credit.
   */
  CREDIT = 6,

  /**
   * The text is the filename.
   */
  FILENAME = 3,

  /**
   * No text.
   */
  NONE = 1,

  /**
   * The text is the origin.
   */
  ORIGIN = 7,

  /**
   * The text is user defined.
   */
  USER = 2
}

/**
 * The color to use for text displayed over gallery images as an antitheft deterrent.
 */
declare enum GallerySecurityTextColorType {
  /**
   * Black text.
   */
  BLACK = 1,

  /**
   * Custom color.
   */
  CUSTOM = 3,

  /**
   * White text.
   */
  WHITE = 2
}

/**
 * The position of the text displayed over gallery images as an antitheft deterrent.
 */
declare enum GallerySecurityTextPositionType {
  /**
   * Text is centered on each image.
   */
  CENTERED = 1,

  /**
   * Ltext is in the lower left corner of each image.
   */
  LOWERLEFT = 3,

  /**
   * Text is in the lower right corner of each image.
   */
  LOWERRIGHT = 5,

  /**
   * Text is in the upper left corner of each image.
   */
  UPPERLEFT = 2,

  /**
   * Text is in the upper right corner of each image.
   */
  UPPERRIGHT = 4
}

/**
 * DEPRECATED. web photo gallery security text rotation types.
 */
declare enum GallerySecurityTextRotateType {
  /**
   * Rotate 45 degrees clock wise.
   */
  CLOCKWISE45 = 2,

  /**
   * Rotate 90 degrees clock wise.
   */
  CLOCKWISE90 = 3,

  /**
   * Rotate 45 degrees counter clock wise.
   */
  COUNTERCLOCKWISE45 = 4,

  /**
   * Rotate 90 degrees counter clock wise.
   */
  COUNTERCLOCKWISE90 = 5,

  /**
   * No rotate.
   */
  ZERO = 1
}

/**
 * The permission state for queries.
 */
declare enum QueryStateType {
  /**
   * Always maximize compatibility.
   */
  ALWAYS = 1,

  /**
   * Always ask about maximize compatibility.
   */
  ASK = 2,

  /**
   * Never ask about maximize compatibility.
   */
  NEVER = 3
}

/**
 * The location of history log data.
 */
declare enum SaveLogItemsType {
  /**
   * Save history log in a text file.
   */
  LOGFILE = 2,

  /**
   * Save history log in file metadata and a text file.
   */
  LOGFILEANDMETADATA = 3,

  /**
   * Save history log in file metadata.
   */
  METADATA = 1
}

/**
 * The history log edit options.
 */
declare enum EditLogItemsType {
  /**
   * Save a concise history log.
   */
  CONCISE = 2,

  /**
   * Save a detailed history log.
   */
  DETAILED = 3,

  /**
   * Save a history for only for the session.
   */
  SESSIONONLY = 1
}

/**
 * The type of path.
 */
declare enum PathKind {
  /**
   * Clipping path.
   */
  CLIPPINGPATH = 2,

  /**
   * Normal path.
   */
  NORMALPATH = 1,

  /**
   * Text mask path.
   */
  TEXTMASK = 5,

  /**
   * Vector mask path.
   */
  VECTORMASK = 4,

  /**
   * Workpath.
   */
  WORKPATH = 3
}

/**
 * Specifies how to combine the shapes if the destination image already has a selection.
 */
declare enum ShapeOperation {
  /**
   * Adds the shapes.
   */
  SHAPEADD = 1,

  /**
   * The resulting shape is the area of intersection between the two shapes.
   */
  SHAPEINTERSECT = 3,

  /**
   * Subtracts the loaded shape from the selection is the destination image.
   */
  SHAPESUBTRACT = 4,

  /**
   * Replaces the shape in the destination image with the loaded selection.
   */
  SHAPEXOR = 2
}

/**
 * The path point kind.
 */
declare enum PointKind {
  /**
   * The point must be a corner.
   */
  CORNERPOINT = 2,

  /**
   * The point can be a curve.
   */
  SMOOTHPOINT = 1
}

/**
 * Tools for the stroke path command.
 */
declare enum ToolType {
  /**
   * Art history brush.
   */
  ARTHISTORYBRUSH = 9,

  /**
   * Background eraser.
   */
  BACKGROUNDERASER = 4,

  /**
   * Blur.
   */
  BLUR = 11,

  /**
   * Brush.
   */
  BRUSH = 2,

  /**
   * Burn.
   */
  BURN = 14,

  /**
   * Clone stamp.
   */
  CLONESTAMP = 5,

  /**
   * Color replacement tool.
   */
  COLORREPLACEMENTTOOL = 16,

  /**
   * Dodge.
   */
  DODGE = 13,

  /**
   * Eraser.
   */
  ERASER = 3,

  /**
   * Healing brush.
   */
  HEALINGBRUSH = 7,

  /**
   * History brush.
   */
  HISTORYBRUSH = 8,

  /**
   * Pattern stamp.
   */
  PATTERNSTAMP = 6,

  /**
   * Pencil.
   */
  PENCIL = 1,

  /**
   * Sharpen.
   */
  SHARPEN = 12,

  /**
   * Smudge.
   */
  SMUDGE = 10,

  /**
   * Sponge.
   */
  SPONGE = 15
}

/**
 * The destination, if any, for batch-processed files.
 */
declare enum BatchDestinationType {
  /**
   * Outputs files to a folder.
   */
  FOLDER = 3,

  /**
   * Leaves all files open.
   */
  NODESTINATION = 1,

  /**
   * Saves changes and closes all files.
   */
  SAVEANDCLOSE = 2
}

/**
 * File naming options for the batch command.
 */
declare enum FileNamingType {
  /**
   * Uses the date formatted as ddmm.
   */
  DDMM = 16,

  /**
   * Uses the date formatted as ddmmyy.
   */
  DDMMYY = 15,

  /**
   * Use the document name in lower case.
   */
  DOCUMENTNAMELOWER = 2,

  /**
   * Use the document name in mixed case.
   */
  DOCUMENTNAMEMIXED = 1,

  /**
   * Use the document name in UPPER case.
   */
  DOCUMENTNAMEUPPER = 3,

  /**
   * Use the extension of the file in lower case.
   */
  EXTENSIONLOWER = 17,

  /**
   * Use the extension of the file in UPPER case.
   */
  EXTENSIONUPPER = 18,

  /**
   * Uses the date formatted as mmdd.
   */
  MMDD = 11,

  /**
   * Uses the date formatted as mmddyy.
   */
  MMDDYY = 10,

  /**
   * Use letter serial number lower case (a, b, c, ...)
   */
  SERIALLETTERLOWER = 8,

  /**
   * Use letter serial number UPPER case (A, B, C, ...)
   */
  SERIALLETTERUPPER = 9,

  /**
   * Use a 1-digit serial number.
   */
  SERIALNUMBER1 = 4,

  /**
   * Use a 2-digit serial number.
   */
  SERIALNUMBER2 = 5,

  /**
   * Use a 3-digit serial number.
   */
  SERIALNUMBER3 = 6,

  /**
   * Use a 4-digit serial number.
   */
  SERIALNUMBER4 = 7,

  /**
   * Uses the date formatted as yyddmm.
   */
  YYDDMM = 14,

  /**
   * Uses the date formatted as yymmdd.
   */
  YYMMDD = 13,

  /**
   * Uses the date formatted as yyyymmdd.
   */
  YYYYMMDD = 12
}

/**
 * Depth map source options.
 */
declare enum DepthMapSource {
  /**
   * Uses the image highlight for the depth map.
   */
  IMAGEHIGHLIGHT = 4,

  /**
   * Uses the layer mask for the depth map.
   */
  LAYERMASK = 3,

  /**
   * No depth map in use.
   */
  NONE = 1,

  /**
   * Uses the transparency channel for the depth map.
   */
  TRANSPARENCYCHANNEL = 2
}

/**
 * Geometric options for shapes, such as the iris shape in the Lens Blur Filter.
 */
declare enum Geometry {
  /**
   * Heptagon.
   */
  HEPTAGON = 4,

  /**
   * Hexagon.
   */
  HEXAGON = 2,

  /**
   * Octagon.
   */
  OCTAGON = 5,

  /**
   * Pentagon.
   */
  PENTAGON = 1,

  /**
   * Square.
   */
  SQUARE = 3,

  /**
   * Triangle.
   */
  TRIANGLE = 0
}

/**
 * The color reduction algorithm.
 */
declare enum ColorReductionType {
  /**
   * Samples color from the spectrum appearing most commonly in the image.
   */
  ADAPTIVE = 2,

  /**
   * Uses a set palette of colors.
   */
  BLACKWHITE = 5,

  /**
   * Uses a color palette that is created or modified by the user. If you open an existing GIF or PNG-8 file, it will have a custom color palette.
   */
  CUSTOM = 4,

  /**
   * Uses a set palette of colors.
   */
  GRAYSCALE = 6,

  /**
   * Uses a set palette of colors.
   */
  MACINTOSH = 7,

  /**
   * Gives priority to colors for which the human eye has greater sensitivity.
   */
  PERCEPTUAL = 0,

  /**
   * Uses the standard 216-color color table common to Windows and Mac OS 8-bit (256-color or web-safe palette); ensures that no browser dither is applied when the image is displayed using 8-bit color.
   */
  RESTRICTIVE = 3,

  /**
   * Gives priority to broad areas of color and the preservation of web colors; usually produces images with the greatest color integrity.
   */
  SELECTIVE = 1,

  /**
   * Uses a set palette of colors.
   */
  WINDOWS = 8
}

/**
 * The default Camera RAW settings.
 */
declare enum CameraRAWSettingsType {
  /**
   * Use the settings of the camera.
   */
  CAMERA = 0,

  /**
   * Use the custom settings.
   */
  CUSTOM = 2,

  /**
   * Use the settings of the selected image.
   */
  SELECTEDIMAGE = 1
}

/**
 * The lighting conditions (affects color balance).
 */
declare enum WhiteBalanceType {
  /**
   * Use the settings of the camera as shot.
   */
  ASSHOT = 0,

  /**
   * Automatically use the white balance settings.
   */
  AUTO = 1,

  /**
   * Use the settings as shot on a cloudy day.
   */
  CLOUDY = 3,

  /**
   * Use the custom settings for the shot parameters.
   */
  CUSTOM = 8,

  /**
   * Use the settings as shot in daylight.
   */
  DAYLIGHT = 2,

  /**
   * Use the settings as shot with a flash.
   */
  FLASH = 7,

  /**
   * Use the settings as shot with fluorescent lighting.
   */
  FLUORESCENT = 6,

  /**
   * Use the settings as shot in the shade.
   */
  SHADE = 4,

  /**
   * Use the settings as shot with tungsten lighting.
   */
  TUNGSTEN = 5
}

/**
 * The type of color space.
 */
declare enum ColorSpaceType {
  /**
   * Use the Adobe RGB color space.
   */
  ADOBERGB = 0,

  /**
   * Use the ColorMatch RGB color space.
   */
  COLORMATCHRGB = 1,

  /**
   * Use the ProPhoto RGB color space.
   */
  PROPHOTORGB = 2,

  /**
   * Use the sRGB color space.
   */
  SRGB = 3
}

/**
 * The camera RAW image size.
 */
declare enum CameraRAWSize {
  /**
   * 5120 x 3413 image.
   */
  EXTRALARGE = 4,

  /**
   * 4096 x 2731 image.
   */
  LARGE = 3,

  /**
   * 6144 x 4096 image.
   */
  MAXIMUM = 5,

  /**
   * 3072 x 2048 image.
   */
  MEDIUM = 2,

  /**
   * 1536 x 1024 image.
   */
  MINIMUM = 0,

  /**
   * 2048 x 1365 image.
   */
  SMALL = 1
}

/**
 * The PDF magnification type.
 */
declare enum MagnificationType {
  /**
   * Displays the image at actual size.
   */
  ACTUALSIZE = 0,

  /**
   * Fits the image to the page.
   */
  FITPAGE = 1
}

/**
 * The style to use when cropping a page.
 */
declare enum CropToType {
  /**
   * Crop to the art box.
   */
  ARTBOX = 5,

  /**
   * Crop to the bleed box.
   */
  BLEEDBOX = 3,

  /**
   * Crop to the bounding box.
   */
  BOUNDINGBOX = 0,

  /**
   * Crop to the crop box.
   */
  CROPBOX = 2,

  /**
   * Crop to the media box.
   */
  MEDIABOX = 1,

  /**
   * Crop to the trim box.
   */
  TRIMBOX = 4
}

/**
 * The type size to use for font previews in the Type tool font menus.
 */
declare enum FontPreviewType {
  /**
   * Extra large preview.
   */
  EXTRALARGE = 4,

  /**
   * Huge preview.
   */
  HUGE = 5,

  /**
   * Large type.
   */
  LARGE = 3,

  /**
   * Medium type.
   */
  MEDIUM = 2,

  /**
   * No preview.
   */
  NONE = 0,

  /**
   * Small type.
   */
  SMALL = 1
}

/**
 * Font size in panels and dialogs.
 */
declare enum FontSize {
  /**
   * Large size.
   */
  LARGE = 3,

  /**
   * Medium size.
   */
  MEDIUM = 2,

  /**
   * Small size.
   */
  SMALL = 1
}

/**
 * The source for recording measurements.
 */
declare enum MeasurementSource {
  /**
   * The measure count tool.
   */
  MEASURECOUNTTOOL = 2,

  /**
   * The measure ruler tool.
   */
  MEASURERULERTOOL = 3,

  /**
   * The measure selection.
   */
  MEASURESELECTION = 1
}

/**
 * The measurement upon which to take action.
 */
declare enum MeasurementRange {
  /**
   * Only active measurements.
   */
  ACTIVEMEASUREMENTS = 2,

  /**
   * All measurements.
   */
  ALLMEASUREMENTS = 1
}

/**
 * A collection of documents.
 */
declare class Documents {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: Document;

  /**
   * A document.
   * @param width The width of the document.
   * @param height The height of the document.
   * @param resolution The resolution of the document (in pixels per inch)
   * @param name The name of the document.
   * @param mode The document mode.
   * @param initialFill The initial fill of the document.
   * @param pixelAspectRatio The initial pixel aspect ratio of the document.
   * @param bitsPerChannel The number of bits per channel.
   * @param colorProfileName The name of color profile for document.
   */
  add(
    width?: UnitValue | number,
    height?: UnitValue | number,
    resolution?: number,
    name?: string,
    mode?: NewDocumentMode,
    initialFill?: DocumentFill,
    pixelAspectRatio?: number,
    bitsPerChannel?: BitsPerChannelType,
    colorProfileName?: string
  ): Document;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): Document;
}

/**
 * The collection of layer objects, including art layer and layer set objects, in the document.
 */
declare class Layers {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: Layer;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): Layer;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * The collection of layer set objects in the document.
 */
declare class LayerSets {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: LayerSet;

  /**
   * Adds an element.
   */
  add(): LayerSet;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): LayerSet;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * The collection of art layer objects in the document.
 */
declare class ArtLayers {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: ArtLayer;

  /**
   * Adds an element.
   */
  add(): ArtLayer;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): ArtLayer;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * The collection of channel objects in the document.
 */
declare class Channels {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: Channel;

  /**
   * Adds an element.
   */
  add(): Channel;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): Channel;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * Guides associated with the document.
 */
declare class Guides {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * A guide.
   * @param direction Indicates whether the guide is vertical or horizontal.
   * @param coordinate Location of the guide from origin of image.
   */
  static add(direction: Direction, coordinate: UnitValue | number): Guide;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): Guide;
}

/**
 * The history state objects associated with the document.
 */
declare class HistoryStates {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: HistoryState;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): HistoryState;
}

/**
 * The layer comp objects associated with the document.
 */
declare class LayerComps {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: LayerComp;

  /**
   * Adds a layer comp.
   * @param name The name of the layer comp.
   * @param comment The description of the layer comp.
   * @param appearance If true, uses the layer appearance or style for this layer comp.
   * @param position If true, uses the layer position for this layer comp.
   * @param visibility If true, uses the layer visibility for this layer comp.
   */
  static add(
    name: string,
    comment?: string,
    appearance?: boolean,
    position?: boolean,
    visibility?: boolean
  ): LayerComp;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): LayerComp;
}

/**
 * A collection of fonts available on your computer.
 */
declare class TextFonts {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: TextFont;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): TextFont;
}

/**
 * The collection of path item objects in the document.
 */
declare class PathItems {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: PathItem;

  /**
   * Creates a new path item.
   * @param name The name for the new path.
   * @param entirePath The item's sub paths.
   */
  static add(name: string, entirePath: SubPathInfo[]): PathItem;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): PathItem;
}

/**
 * An array of path point info objects that describes a straight or curved segment of a path. You do not use the sub path item object to create a sub path. Rather, you use the sub path item object to retrieve information about a sub path. To create sub paths, see sub path info.
 */
declare class SubPathItems {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: SubPathItem;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): SubPathItem;
}

/**
 * A collection of path point objects that comprises the path points property of the sub path item object.
 */
declare class PathPoints {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: PathPoint;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): PathPoint;
}

/**
 * A collection of notifier objects in the document.
 */
declare class Notifiers {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: Notifier;

  /**
   * Creates a notifier.
   * @param event The class id of the event, four characters or a unique string.
   * @param eventFile The script file to execute when the event occurs.
   * @param eventClass The class of the object the event is applied to, four characters or a unique string. When an event applies to multiple types of objects, you use the event class parameter to distinguish which object this Notifier applies to. For example, the Make event (“Mk“) applies to documents (“Dcmn”), channels (“Chnl”) and other objects.
   */
  static add(event: string, eventFile: File, eventClass?: string): Notifier;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): Notifier;

  /**
   * Deletes all elements.
   */
  static removeAll(): void;
}

/**
 * The collection of count items in the document.
 */
declare class CountItems {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: CountItem;

  /**
   * Creates a count item.
   * @param position The position of origin.
   */
  static add(position: UnitPoint): CountItem;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): CountItem;
}

/**
 * The collection of color samplers in the document.
 */
declare class ColorSamplers {
  /**
   * Number of elements in the collection.
   */
  readonly length: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Get an element in the collection with the provided index.
   * @param index
   */
  [index: number]: ColorSampler;

  /**
   * Creates a color sampler.
   * @param position The horizontal and vertical (x,y) locations, respectively, of the color sampler.
   */
  static add(position: UnitPoint): ColorSampler;

  /**
   * Get the first element in the collection with the provided name.
   * @param name
   */
  getByName(name: string): ColorSampler;
}

/**
 * Options that can be specified when opening a document.
 */
declare class OpenOptions {}

/**
 * DEPRECATED.
 */
declare class PhotoCDOpenOptions extends OpenOptions {
  /**
   * The profile to use when reading the image.
   */
  colorProfileName: string;

  /**
   * The color space for the image.
   */
  colorSpace: PhotoCDColorSpace;

  /**
   * The image orientation.
   */
  orientation: Orientation;

  /**
   * The dimensions of the image.
   */
  pixelSize: PhotoCDSize;

  /**
   * The resolution of the image (in pixels per inch)
   */
  resolution: number;
}

/**
 * Options that can be specified when opening a document in RAW format.
 */
declare class RawFormatOpenOptions extends OpenOptions {
  /**
   * The number of bits for each channel. Valid values: 8 or 16.
   */
  bitsPerChannel: number;

  /**
   * The order in which bytes will be read. Valid only when 'bits per channel' = 16.
   */
  byteOrder: ByteOrder;

  /**
   * The number of channels in the image. Valid only when 'bits per channel' = 16. Range: 1 to 56.
   */
  channelNumber: number;

  /**
   * The number of bytes of information that will appear in the file before actual image information begins; that is, the number of zeroes inserted at the beginning of the file as placeholders. Range: 0 to 1919999.
   */
  headerSize: number;

  /**
   * The image height (in pixels)
   */
  height: number;

  /**
   * If true, color values are stored sequentially.
   */
  interleaveChannels: boolean;

  /**
   * If true, the header is retained when saving.
   */
  retainHeader: boolean;

  /**
   * The image width (in pixels)
   */
  width: number;
}

/**
 * Options that can be specified when opening a generic PDF document.
 */
declare class GenericPDFOpenOptions extends OpenOptions {
  /**
   * If true, anti-aliasing is used.
   */
  antiAlias: boolean;

  /**
   * The number of bits per channel.
   */
  bitsPerChannel: BitsPerChannelType;

  /**
   * DEPRECATED.
   */
  constrainProportions: boolean;

  /**
   * The cropping method to use.
   */
  cropPage: CropToType;

  /**
   * DEPRECATED.
   */
  height: UnitValue | number;

  /**
   * The document mode.
   */
  mode: OpenDocumentMode;

  /**
   * The name of the document.
   */
  name: string;

  /**
   * The number of the 3d object to open.
   */
  object: number;

  /**
   * The number of the page or image to open.
   */
  page: number;

  /**
   * The resolution of the document (in pixels per inch)
   */
  resolution: number;

  /**
   * If true, suppresses any warnings that may occur during opening.
   */
  suppressWarnings: boolean;

  /**
   * If true, the value specified in the page property refers to a page number. If false, the value specifies an image number.
   */
  use3DObjectNumber: boolean;

  /**
   * If true, the value specified in the page property refers to a page number. If false, the value specifies an image number.
   */
  usePageNumber: boolean;

  /**
   * DEPRECATED.
   */
  width: UnitValue | number;
}

/**
 * Options that can be specified when opening a generic EPS document.
 */
declare class GenericEPSOpenOptions extends OpenOptions {
  /**
   * If true, anti-aliasing is used.
   */
  antiAlias: boolean;

  /**
   * If true, the image proportions are constrained.
   */
  constrainProportions: boolean;

  /**
   * The image height.
   */
  height: UnitValue | number;

  /**
   * The document mode.
   */
  mode: OpenDocumentMode;

  /**
   * The resolution of the document (in pixels per inch)
   */
  resolution: number;

  /**
   * The image width.
   */
  width: UnitValue | number;
}

/**
 * Options for opening a DICOM document.
 */
declare class DICOMOpenOptions extends OpenOptions {
  /**
   * If true, patient information is anonymized.
   */
  anonymize: boolean;

  /**
   * The number of columns in an n-up configuration.
   */
  columns: number;

  /**
   * If true, the image is inverted.
   */
  reverse: boolean;

  /**
   * The number of rows in an n-up configuration.
   */
  rows: number;

  /**
   * If true, overlays are shown (if present).
   */
  showOverlays: boolean;

  /**
   * The contrast of the image in Houndsfield units.
   */
  windowLevel: number;

  /**
   * The brightness of the image in Houndsfield units.
   */
  windowWidth: number;
}

/**
 * Options for opening a camera RAW document.
 */
declare class CameraRAWOpenOptions extends OpenOptions {
  /**
   * The number of bits per channel.
   */
  bitsPerChannel: BitsPerChannelType;

  /**
   * The blue hue of the shot. Range: -100 to 100.
   */
  blueHue: number;

  /**
   * The blue saturation of the shot. Range: -100 to 100.
   */
  blueSaturation: number;

  /**
   * The brightness of the shot. Range: 0 to 150.
   */
  brightness: number;

  /**
   * The chromatic aberration B/Y of the shot. Range: -100 to 100.
   */
  chromaticAberrationBY: number;

  /**
   * The chromatic aberration R/C of the shot. Range: -100 to 100.
   */
  chromaticAberrationRC: number;

  /**
   * The color noise reduction of the shot. Range: 0 to 100.
   */
  colorNoiseReduction: number;

  /**
   * The image color space.
   */
  colorSpace: ColorSpaceType;

  /**
   * The constrast of the shot. Range: -50 to 100.
   */
  contrast: number;

  /**
   * The exposure of the shot. Range: -4.0 to 4.0.
   */
  exposure: number;

  /**
   * The green hue of the shot. Range: -100 to 100.
   */
  greenHue: number;

  /**
   * The green saturation of the shot. Range: -100 to 100.
   */
  greenSaturation: number;

  /**
   * The luminance smoothing of the shot. Range: 0 to 100.
   */
  luminanceSmoothing: number;

  /**
   * The red hue of the shot. Range: -100 to 100.
   */
  redHue: number;

  /**
   * The red saturation of the shot. Range: -100 to 100.
   */
  redSaturation: number;

  /**
   * The resolution of the document (in pixels per inch)
   */
  resolution: number;

  /**
   * The saturation of the shot. Range: -100 to 100.
   */
  saturation: number;

  /**
   * The global settings for all Camera RAW options.
   */
  settings: CameraRAWSettingsType;

  /**
   * The shadow tint of the shot. Range: -100 to 100.
   */
  shadowTint: number;

  /**
   * The shadows of the shot. Range: 0 to 100.
   */
  shadows: number;

  /**
   * The sharpness of the shot. Range: 0 to 100.
   */
  sharpness: number;

  /**
   * The size of the new document.
   */
  size: CameraRAWSize;

  /**
   * The temperature of the shot. Range: 2000 to 50000.
   */
  temperature: number;

  /**
   * The tint of the shot. Range: -150 to 150.
   */
  tint: number;

  /**
   * The vignetting amount of the shot. Range: -100 to 100.
   */
  vignettingAmount: number;

  /**
   * The vignetting mid point of the shot. Range: -100 to 100.
   */
  vignettingMidpoint: number;

  /**
   * The white balance options for the image.
   */
  whiteBalance: WhiteBalanceType;
}

/**
 * Options for saving a file.
 */
declare enum SaveOptions {
  /**
   * Do not save changes.
   */
  DONOTSAVECHANGES = 2,

  /**
   * Ask the user whether to save.
   */
  PROMPTTOSAVECHANGES = 3,

  /**
   * Save changes.
   */
  SAVECHANGES = 1
}

/**
 * Options for saving a Photoshop document.
 */
declare class PhotoshopSaveOptions {
  /**
   * If true, the alpha channels are saved.
   */
  alphaChannels: boolean;

  /**
   * If true, the annotations are saved.
   */
  annotations: boolean;

  /**
   * If true, the color profile is embedded in the document.
   */
  embedColorProfile: boolean;

  /**
   * If true, the layers are saved.
   */
  layers: boolean;

  /**
   * If true, spot colors are saved.
   */
  spotColors: boolean;
}

/**
 * Options for saving a document in BMP format.
 */
declare class BMPSaveOptions {
  /**
   * If true, the alpha channels are saved.
   */
  alphaChannels: boolean;

  /**
   * The number of bits per sample.
   */
  depth: BMPDepthType;

  /**
   * If true, the image is written from bottom to top.
   */
  flipRowOrder: boolean;

  /**
   * The target operating system.
   */
  osType: OperatingSystem;

  /**
   * If true, RLE compression is used.
   */
  rleCompression: boolean;
}

/**
 * Options for saving a document in GIF format.
 */
declare class GIFSaveOptions {
  /**
   * The number of colors in palette. Not valid for all palette types.
   */
  colors: number;

  /**
   * The type of dither.
   */
  dither: Dither;

  /**
   * The amount of dither. Valid only when 'dither type' is diffusion. Range: 1 to 100.
   */
  ditherAmount: number;

  /**
   * The type of colors to force into the color palette.
   */
  forced: ForcedColors;

  /**
   * If true, rows are interlaced.
   */
  interlaced: boolean;

  /**
   * The color to use to fill anti-aliased edges adjacent to transparent areas of the image. Default: white.
   */
  matte: MatteType;

  /**
   * The type of palette to use.
   */
  palette: PaletteType;

  /**
   * If true, protects colors in the image that contain entries in the color table from being dithered. Valid only when 'dither' = diffusion.
   */
  preserveExactColors: boolean;

  /**
   * If true, preserves transparent ares of the image during GIF conversion.
   */
  transparency: boolean;
}

/**
 * Options for saving a document in EPS format.
 */
declare class EPSSaveOptions {
  /**
   * If true, the color profile is embedded in the document.
   */
  embedColorProfile: boolean;

  /**
   * The type of encoding to use for the document.
   */
  encoding: SaveEncoding;

  /**
   * If true, includes the halftone screen.
   */
  halftoneScreen: boolean;

  /**
   * If true, uses image interpolation.
   */
  interpolation: boolean;

  /**
   * The type of preview.
   */
  preview: Preview;

  /**
   * If true, uses PostScript color management.
   */
  psColorManagement: boolean;

  /**
   * If true, includes the transfer functions in the document to compensate for dot gain between the image and film.
   */
  transferFunction: boolean;

  /**
   * If true, displays white areas as transparent. Valid only for documents in BitMap mode.
   */
  transparentWhites: boolean;

  /**
   * If true, includes vector data. Valid only when the document contains vector data (un-rasterized text).
   */
  vectorData: boolean;
}

/**
 * Options for saving a document in JPEG format.
 */
declare class JPEGSaveOptions {
  /**
   * If true, the color profile is embedded in the document.
   */
  embedColorProfile: boolean;

  /**
   * The download format to use.
   */
  formatOptions: FormatOptions;

  /**
   * The color to use to fill anti-aliased edges adjacent to transparent areas of the image. Default: white.
   */
  matte: MatteType;

  /**
   * The quality of the produced image.
   */
  quality: number;

  /**
   * The number of scans. Valid only for progressive type JPEG files.
   */
  scans: number;
}

/**
 * Options for saving a document in PDF format.
 */
declare class PDFSaveOptions {
  /**
   * The PDF version to make the document compatible with.
   */
  PDFCompatibility: PDFCompatibility;

  /**
   * The PDF standard to make the document compatible with.
   */
  PDFStandard: PDFStandard;

  /**
   * If true, the alpha channels are saved.
   */
  alphaChannels: boolean;

  /**
   * If true, the annotations are saved.
   */
  annotations: boolean;

  /**
   * If true, converts the color profile to the destination profile.
   */
  colorConversion: boolean;

  /**
   * If true, converts a 16-bit image to 8-bit for better compatibility with other applications.
   */
  convertToEightBit: boolean;

  /**
   * Description of the save options in use.
   */
  description: string;

  /**
   * Describes the final RGB or CMYK output device, such as a monitor or press standard.
   */
  destinationProfile: string;

  /**
   * The downsample method to use.
   */
  downSample: PDFResample;

  /**
   * The size (in pixels per inch) to downsample images to if they exceed the value specified for 'down sample size limit'.
   */
  downSampleSize: number;

  /**
   * Limits downsampling or subsampling to images that exceed this value (in pixels per inch).
   */
  downSampleSizeLimit: number;

  /**
   * DEPRECATED, ( should the embedded color profile be downgraded to version 2 )
   */
  downgradeColorProfile: boolean;

  /**
   * If true, the color profile is embedded in the document.
   */
  embedColorProfile: boolean;

  /**
   * DEPRECATED. ( embed fonts? Only valid if a text layer is included )
   */
  embedFonts: boolean;

  /**
   * If true, includes a small preview image in Acrobat.
   */
  embedThumbnail: boolean;

  /**
   * The encoding method to use.
   */
  encoding: PDFEncoding;

  /**
   * DEPRECATED. ( use image interpolation? )
   */
  interpolation: boolean;

  /**
   * The quality of the produced image. Valid only for JPEG-encoded PDF documents. Range: 0 to 12.
   */
  jpegQuality: number;

  /**
   * If true, the layers are saved.
   */
  layers: boolean;

  /**
   * If true, improves performance of PDFs on Web servers.
   */
  optimizeForWeb: boolean;

  /**
   * An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.
   */
  outputCondition: string;

  /**
   * The identifier for the output condition.
   */
  outputConditionID: string;

  /**
   * If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.
   */
  preserveEditing: boolean;

  /**
   * The preset file to use for settings; overrides other settings.
   */
  presetFile: string;

  /**
   * If true, shows which profiles to include.
   */
  profileInclusionPolicy: boolean;

  /**
   * The URL where the output condition is registered.
   */
  registryName: string;

  /**
   * If true, the spot colors are saved.
   */
  spotColors: boolean;

  /**
   * The compression option. Valid only when encoding is JPEG2000.
   */
  tileSize: number;

  /**
   * DEPRECATED.
   */
  transparency: boolean;

  /**
   * DEPRECATED. ( use outlines for text? Only valid if vector data is included )
   */
  useOutlines: boolean;

  /**
   * DEPRECATED. ( include vector data )
   */
  vectorData: boolean;

  /**
   * If true, opens the saved PDF in Acrobat.
   */
  view: boolean;
}

/**
 * Options for saving a document in PICT format.
 */
declare class PICTFileSaveOptions {
  /**
   * If true, the alpha channels are saved.
   */
  static alphaChannels: boolean;

  /**
   * The compression method.
   */
  static compression: PICTCompression;

  /**
   * If true, the color profile is embedded in the document.
   */
  static embedColorProfile: boolean;

  /**
   * The number of bits per pixel.
   */
  static resolution: PICTBitsPerPixels;
}

/**
 * Options for saving a document as a PICT resource file.
 */
declare class PICTResourceSaveOptions {
  /**
   * If true, the alpha channels are saved.
   */
  alphaChannels: boolean;

  /**
   * The compression type.
   */
  compression: PICTCompression;

  /**
   * If true, the color profile is embedded in the document.
   */
  embedColorProfile: boolean;

  /**
   * The name of PICT resource.
   */
  name: string;

  /**
   * The number of bits per pixel.
   */
  resolution: PICTBitsPerPixels;

  /**
   * The ID of the PICT resource.
   */
  resourceID: number;
}

/**
 * Options for saving a document in Pixar format.
 */
declare class PixarSaveOptions {
  /**
   * If true, the alpha channels are saved.
   */
  alphaChannels: boolean;
}

/**
 * Options for saving a document in PNG format.
 */
declare class PNGSaveOptions {
  /**
   * Compression used on the image.
   */
  compression: number;

  /**
   * If true, rows are interlaced.
   */
  interlaced: boolean;
}

/**
 * Options for saving a document in RAW format.
 */
declare class RawSaveOptions {
  /**
   * If true, the alpha channels are saved.
   */
  alphaChannels: boolean;

  /**
   * If true, spot colors are saved.
   */
  spotColors: boolean;
}

/**
 * Options for saving a document in SGI RGB format.
 */
declare class SGIRGBSaveOptions {
  /**
   * If true, the alpha channels are saved.
   */
  alphaChannels: boolean;

  /**
   * If true, the spot colors are saved.
   */
  spotColors: boolean;
}

/**
 * Options for saving a document in TGA (Targa) format.
 */
declare class TargaSaveOptions {
  /**
   * If true, the alpha channels are saved.
   */
  alphaChannels: boolean;

  /**
   * The number of bits per pixel.
   */
  resolution: TargaBitsPerPixels;

  /**
   * If true, RLE compression is used.
   */
  rleCompression: boolean;
}

/**
 * Options for saving a document in TIFF format.
 */
declare class TiffSaveOptions {
  /**
   * If true, the alpha channels are saved.
   */
  alphaChannels: boolean;

  /**
   * If true, the annotations are saved.
   */
  annotations: boolean;

  /**
   * The order in which the bytes will be read. Default: Mac OS when running in Mac OS, and IBM PC when running in Windows.
   */
  byteOrder: ByteOrder;

  /**
   * If true, the color profile is embedded in the document.
   */
  embedColorProfile: boolean;

  /**
   * The compression type.
   */
  imageCompression: TIFFEncoding;

  /**
   * If true, the channels in the image are interleaved.
   */
  interleaveChannels: boolean;

  /**
   * The quality of the produced image, which is inversely proportionate to the amount of JPEG compression. Valid only for JPEG compressed TIFF documents. Range: 0 to 12.
   */
  jpegQuality: number;

  /**
   * The method of compression to use when saving layers (as opposed to saving composite data). Valid only when 'layers' = true.
   */
  layerCompression: LayerCompression;

  /**
   * If true, the layers are saved.
   */
  layers: boolean;

  /**
   * If true, preserves multi-resolution information.
   */
  saveImagePyramid: boolean;

  /**
   * If true, spot colors are saved.
   */
  spotColors: boolean;

  /**
   * If true, saves the transparency as an additional alpha channel when the file is opened in another application.
   */
  transparency: boolean;
}

/**
 * Options for saving a document in Photoshop DCS 1.0 format.
 */
declare class DCS1_SaveOptions {
  /**
   * The DCS type.
   */
  DCS: DCSType;

  /**
   * If true, the color profile is embedded in the document.
   */
  embedColorProfile: boolean;

  /**
   * The type of encoding to use for the document.
   */
  encoding: SaveEncoding;

  /**
   * If true, includes halftone screen.
   */
  halftoneScreen: boolean;

  /**
   * If true, image interpolation is used.
   */
  interpolation: boolean;

  /**
   * The type of preview.
   */
  preview: Preview;

  /**
   * If true, includes transfer functions in the document to compensate for dot gain between the image and film.
   */
  transferFunction: boolean;

  /**
   * If true, includes vector data. Valid only if the document contains vector data (un-rasterized text).
   */
  vectorData: boolean;
}

/**
 * Options for saving a document in Photoshop DCS 2.0 format.
 */
declare class DCS2_SaveOptions {
  /**
   * The DCS type.
   */
  DCS: DCSType;

  /**
   * If true, the color profile is embedded in the document.
   */
  embedColorProfile: boolean;

  /**
   * The type of encoding to use for document.
   */
  encoding: SaveEncoding;

  /**
   * If true, includes halftone screen.
   */
  halftoneScreen: boolean;

  /**
   * If true, image interpolation is used.
   */
  interpolation: boolean;

  /**
   * If true, saves color channels as multiple files.
   */
  multiFileDCS: boolean;

  /**
   * The type of preview.
   */
  preview: Preview;

  /**
   * If true, the spot colors are saved.
   */
  spotColors: boolean;

  /**
   * If true, includes transfer functions in the document to compensate for dot gain between the image and film.
   */
  transferFunction: boolean;

  /**
   * If true, includes vector data. Valid only if the document contains vector data (un-rasterized text).
   */
  vectorData: boolean;
}

/**
 * Options for exporting an object.
 */
declare class ExportOptions {}

/**
 * Options for exporting Illustrator paths.
 */
declare class ExportOptionsIllustrator extends ExportOptions {
  /**
   * The path to export.
   */
  path: IllustratorPathType;

  /**
   * The name of the path to export. Valid only for named paths.
   */
  pathName: string;
}

/**
 * Options for exporting Save For Web files.
 */
declare class ExportOptionsSaveForWeb extends ExportOptions {
  /**
   * If true, uses 8 bits. If false, uses 24 bits. Valid only when 'format' = PNG.
   */
  PNG8: boolean;

  /**
   * The amount of blur to apply to the image to reduce artifacts.
   */
  blur: number;

  /**
   * The color reduction algorithm.
   */
  colorReduction: ColorReductionType;

  /**
   * The number of colors in the palette.
   */
  colors: number;

  /**
   * The type of dither.
   */
  dither: Dither;

  /**
   * The amount of dither. Valid only when 'dither' = diffusion.
   */
  ditherAmount: number;

  /**
   * The file format to use. Save For Web supports only Compuserve GIF, JPEG, PNG-8, PNG-24, and BMP formats.
   */
  format: SaveDocumentType;

  /**
   * If true, includes the document's embedded profile.
   */
  includeProfile: boolean;

  /**
   * If true, the image downloads in multiple passes, progressive.
   */
  interlaced: boolean;

  /**
   * The amount of lossiness allowed.
   */
  lossy: number;

  /**
   * The colors to blend transparent pixels against.
   */
  matteColor: RGBColor;

  /**
   * If true, creates smaller but less compatible files.
   */
  optimized: boolean;

  /**
   * The quality of the produced image (as a percentage). Range: 0 to 100.
   */
  quality: number;

  /**
   * If true, transparent areas of the image are included in the saved image.
   */
  transparency: boolean;

  /**
   * The amount of transparency dither. Valid only when 'transparency' = true.
   */
  transparencyAmount: number;

  /**
   * The transparency dither algorithm.
   */
  transparencyDither: Dither;

  /**
   * The tolerance amount within which to snap close colors to web palette colors.
   */
  webSnap: number;
}

/**
 * Options for converting documents.
 */
declare class DocumentConversionOptions {}

/**
 * Options for changing the document mode to Bitmap.
 */
declare class BitmapConversionOptions extends DocumentConversionOptions {
  /**
   * The angle (in degrees) at which to orient individual dots. Valid only when 'method' = halftone screen. Range: -180 to 180.
   */
  angle: number;

  /**
   * The number of printer dots per inch. Valid only when 'method' = halftone screen. Range: 1.0 to 999.99.
   */
  frequency: number;

  /**
   * The conversion method.
   */
  method: BitmapConversionType;

  /**
   * The name of the pattern to use. Valid only when 'method' = custom.
   */
  patternName: string;

  /**
   * The output resolution (in pixels per inch)
   */
  resolution: number;

  /**
   * The dot shape. Valid only when 'method' = halftone screen.
   */
  shape: BitmapHalfToneType;
}

/**
 * Options for converting an RGB image to an indexed color model.
 */
declare class IndexedConversionOptions extends DocumentConversionOptions {
  /**
   * The number of colors in the palette. Not valid for all palette types.
   */
  colors: number;

  /**
   * The type of dither.
   */
  dither: Dither;

  /**
   * The amount of dither. Valid only when 'dither' = diffusion.
   */
  ditherAmount: number;

  /**
   * The type of colors to force into the color palette.
   */
  forced: ForcedColors;

  /**
   * The color to use to fill anti-aliased edges adjacent to transparent areas of the image. When transparency = false, the matte color is applied to transparent areas.
   */
  matte: MatteType;

  /**
   * The type of palette.
   */
  palette: PaletteType;

  /**
   * If true, protects colors in the image that contain entries in the color table from being dithered. Valid only when 'dither' = diffusion.
   */
  preserveExactColors: boolean;

  /**
   * If true, preserves transparent areas of the image during conversion to GIF format.
   */
  transparency: boolean;
}

/**
 * A color value.
 */
declare class Color {}

/**
 * A color definition used in the document.
 */
declare class SolidColor {
  /**
   * The CMYK color model.
   */
  static cmyk: CMYKColor;

  /**
   * The CMYK color model.
   */
  cmyk: CMYKColor;

  /**
   * The grayscale color model.
   */
  static gray: GrayColor;

  /**
   * The grayscale color model.
   */
  gray: GrayColor;

  /**
   * The HSB color model.
   */
  static hsb: HSBColor;

  /**
   * The HSB color model.
   */
  hsb: HSBColor;

  /**
   * The lab color model.
   */
  static lab: LabColor;

  /**
   * The lab color model.
   */
  lab: LabColor;

  /**
   * The color model.
   */
  model: ColorModel;

  /**
   * The color model.
   */
  static model: ColorModel;

  /**
   * The nearest web color to the current color.
   */
  static readonly nearestWebColor: RGBColor;

  /**
   * The nearest web color to the current color.
   */
  readonly nearestWebColor: RGBColor;

  /**
   * The RGB color model.
   */
  rgb: RGBColor;

  /**
   * The RGB color model.
   */
  static rgb: RGBColor;

  /**
   * Compares two colors.
   * @param color Another color to compare with.
   */
  isEqual(color: SolidColor): boolean;
}

/**
 * Options for defining a gray color.
 */
declare class GrayColor extends Color {
  /**
   * The gray value. Range: 0.0 to 100.0.
   */
  static gray: number;

  /**
   * The gray value. Range: 0.0 to 100.0.
   */
  gray: number;
}

/**
 * The definition of an RGB color mode.
 */
declare class RGBColor extends Color {
  /**
   * The blue color value. Range: 0.0 to 255.0.
   */
  static blue: number;

  /**
   * The blue color value. Range: 0.0 to 255.0.
   */
  blue: number;

  /**
   * The green color value. Range: 0.0 to 255.0.
   */
  static green: number;

  /**
   * The green color value. Range: 0.0 to 255.0.
   */
  green: number;

  /**
   * The hex representation of this color.
   */
  static hexValue: string;

  /**
   * The hex representation of this color.
   */
  hexValue: string;

  /**
   * The red color value. Range: 0.0 to 255.0.
   */
  static red: number;

  /**
   * The red color value. Range: 0.0 to 255.0.
   */
  red: number;
}

/**
 * A CMYK color specification.
 */
declare class CMYKColor extends Color {
  /**
   * The black color value. Range: 0.0 to 100.0.
   */
  static black: number;

  /**
   * The black color value. Range: 0.0 to 100.0.
   */
  black: number;

  /**
   * The cyan color value. Range: 0.0 to 100.0.
   */
  static cyan: number;

  /**
   * The cyan color value. Range: 0.0 to 100.0.
   */
  cyan: number;

  /**
   * The magenta color value. Range: 0.0 to 100.0.
   */
  static magenta: number;

  /**
   * The magenta color value. Range: 0.0 to 100.0.
   */
  magenta: number;

  /**
   * The yellow color value. Range: 0.0 to 100.0.
   */
  static yellow: number;

  /**
   * The yellow color value. Range: 0.0 to 100.0.
   */
  yellow: number;
}

/**
 * A Lab color specification.
 */
declare class LabColor extends Color {
  /**
   * The a-value. Range: -128.0 and 127.0.
   */
  static A: number;

  /**
   * The a-value. Range: -128.0 and 127.0.
   */
  A: number;

  /**
   * The b-value. Range: -128.0 and 127.0.
   */
  static B: number;

  /**
   * The b-value. Range: -128.0 and 127.0.
   */
  B: number;

  /**
   * The L-value. Range: 0.0 to 100.0.
   */
  static L: number;

  /**
   * The L-value. Range: 0.0 to 100.0.
   */
  L: number;
}

/**
 * An HSB color specification.
 */
declare class HSBColor extends Color {
  /**
   * The brightness value. Range: 0.0 to 100.0.
   */
  static brightness: number;

  /**
   * The brightness value. Range: 0.0 to 100.0.
   */
  brightness: number;

  /**
   * The hue value. Range: 0.0 to 360.0.
   */
  static hue: number;

  /**
   * The hue value. Range: 0.0 to 360.0.
   */
  hue: number;

  /**
   * The saturation value. Range: 0.0 to 100.0.
   */
  static saturation: number;

  /**
   * The saturation value. Range: 0.0 to 100.0.
   */
  saturation: number;
}

/**
 * Represents a missing color.
 */
declare class NoColor extends Color {}

/**
 * Options for the PDF presentation command.
 */
declare class PresentationOptions {
  /**
   * Options for creating the PDF file.
   */
  static PDFFileOptions: PDFSaveOptions;

  /**
   * If true, the presentation auto advances.
   */
  static autoAdvance: boolean;

  /**
   * If true, includes the file name for the image.
   */
  static includeFilename: boolean;

  /**
   * The amount of time (in seconds) before auto advancing the view. Valid only when 'auto advance' is true. Range: 1 to 60.
   */
  static interval: number;

  /**
   * If true, the presentation loops after the last page.
   */
  static loop: boolean;

  /**
   * The magnification type when viewing the image.
   */
  static magnification: MagnificationType;

  /**
   * If true, the file type is presentation. If false, the file type is Multi-Page document.
   */
  static presentation: boolean;

  /**
   * The image transition type.
   */
  static transition: TransitionType;
}

/**
 * Deprecated, the make photo gallery method has moved to Bridge.
 */
declare class GalleryOptions {
  /**
   * Add width and height attributes for images.
   */
  static addSizeAttributes: boolean;

  /**
   * Options related to banner settings.
   */
  static bannerOptions: GalleryBannerOptions;

  /**
   * Options related to custom color settings.
   */
  static customColorOptions: GalleryCustomColorOptions;

  /**
   * The email address to show on the web page.
   */
  static emailAddress: string;

  /**
   * Options related to images settings.
   */
  static imagesOptions: GalleryImagesOptions;

  /**
   * Include all files found in sub folders of the input folder.
   */
  static includeSubFolders: boolean;

  /**
   * The style to use for laying out the web page.
   */
  static layoutStyle: string;

  /**
   * Save all of the metadata in the JPEG files.
   */
  static preserveAllMetadata: boolean;

  /**
   * Options related to security settings.
   */
  static securityOptions: GallerySecurityOptions;

  /**
   * Options related to thumbnail settings.
   */
  static thumbnailOptions: GalleryThumbnailOptions;

  /**
   * Short web page extension .htm or long web page extension .html.
   */
  static useShortExtension: boolean;

  /**
   * Web page should use UTF-8 encoding.
   */
  static useUTF8Encoding: boolean;
}

/**
 * Deprecated, the make photo gallery method has moved to Bridge.
 */
declare class GalleryBannerOptions {
  /**
   * Web photo gallery contact info.
   */
  static contactInfo: string;

  /**
   * Web photo gallery date.
   */
  static date: string;

  /**
   * The font setting for the banner text.
   */
  static font: GalleryFontType;

  /**
   * The size of the font for the banner text.
   */
  static fontSize: number;

  /**
   * Web photo gallery photographer.
   */
  static photographer: string;

  /**
   * Web photo gallery site name.
   */
  static siteName: string;
}

/**
 * Deprecated, the make photo gallery method has moved to Bridge.
 */
declare class GalleryImagesOptions {
  /**
   * The amount of border pixels you want between your images.
   */
  static border: number;

  /**
   * Generate a caption for the images.
   */
  static caption: boolean;

  /**
   * Resized image dimensions in pixels.
   */
  static dimension: number;

  /**
   * Font for the gallery images text.
   */
  static font: GalleryFontType;

  /**
   * Font size for the gallery images text.
   */
  static fontSize: number;

  /**
   * The quality setting for the JPEG image.
   */
  static imageQuality: number;

  /**
   * Include the copyright in the text for the gallery images.
   */
  static includeCopyright: boolean;

  /**
   * Include the credits in the text for the gallery images.
   */
  static includeCredits: boolean;

  /**
   * Include the file name in the text for the gallery images.
   */
  static includeFilename: boolean;

  /**
   * Include the title in the text for the gallery images.
   */
  static includeTitle: boolean;

  /**
   * Add numeric links.
   */
  static numericLinks: boolean;

  /**
   * How should the image be constrained.
   */
  static resizeConstraint: GalleryConstrainType;

  /**
   * Resize images data.
   */
  static resizeImages: boolean;
}

/**
 * Deprecated, the make photo gallery method has moved to Bridge.
 */
declare class GalleryThumbnailOptions {
  /**
   * The amount of border pixels you want around your thumbnail images.
   */
  static border: number;

  /**
   * With caption.
   */
  static caption: boolean;

  /**
   * Web photo gallery thumbnail columns.
   */
  static columnCount: number;

  /**
   * Web photo gallery thumbnail dimension in pixels.
   */
  static dimension: number;

  /**
   * Web photo gallery font.
   */
  static font: GalleryFontType;

  /**
   * The size of the font for the thumbnail images text.
   */
  static fontSize: number;

  /**
   * Include copyright for thumbnail.
   */
  static includeCopyright: boolean;

  /**
   * Include credits for thumbnail.
   */
  static includeCredits: boolean;

  /**
   * Include file name for thumbnail.
   */
  static includeFilename: boolean;

  /**
   * Include title for thumbnail.
   */
  static includeTitle: boolean;

  /**
   * Web photo gallery thumbnail rows.
   */
  static rowCount: number;

  /**
   * The size of the thumbnail images.
   */
  static size: GalleryThumbSizeType;
}

/**
 * Deprecated, the make photo gallery method has moved to Bridge.
 */
declare class GalleryCustomColorOptions {
  /**
   * Active link color.
   */
  static activeLinkColor: RGBColor;

  /**
   * Background color.
   */
  static backgroundColor: RGBColor;

  /**
   * Banner color.
   */
  static bannerColor: RGBColor;

  /**
   * Link color.
   */
  static linkColor: RGBColor;

  /**
   * Text color.
   */
  static textColor: RGBColor;

  /**
   * Visited link color.
   */
  static visitedLinkColor: RGBColor;
}

/**
 * Deprecated, the make photo gallery method has moved to Bridge.
 */
declare class GallerySecurityOptions {
  /**
   * Web photo gallery security content.
   */
  static content: GallerySecurityType;

  /**
   * Web photo gallery security font.
   */
  static font: GalleryFontType;

  /**
   * Web photo gallery security font size.
   */
  static fontSize: number;

  /**
   * Web page security opacity as a percent.
   */
  static opacity: number;

  /**
   * Web photo gallery security custom text.
   */
  static text: string;

  /**
   * Web page security text color.
   */
  static textColor: RGBColor;

  /**
   * Web photo gallery security text position.
   */
  static textPosition: GallerySecurityTextPositionType;

  /**
   * Web photo gallery security text rotate.
   */
  static textRotate: GallerySecurityTextRotateType;
}

/**
 * Options that can be specified for a contact sheet.
 */
declare class ContactSheetOptions {
  /**
   * If true, places the images horizontally first.
   */
  static acrossFirst: boolean;

  /**
   * If true, rotates images for best fit.
   */
  static bestFit: boolean;

  /**
   * If true, uses the filename as a caption for the image.
   */
  static caption: boolean;

  /**
   * The number of contact sheet columns.
   */
  static columnCount: number;

  /**
   * If true, flattens all layers in the final document.
   */
  static flatten: boolean;

  /**
   * The font used for the caption.
   */
  static font: GalleryFontType;

  /**
   * The caption font size.
   */
  static fontSize: number;

  /**
   * The height (in pixels) of the resulting document. Range: 100 to 2900.
   */
  static height: number;

  /**
   * The horizontal spacing (in pixels) between images. Range: 0 to 29000.
   */
  static horizontal: number;

  /**
   * The document color mode.
   */
  static mode: NewDocumentMode;

  /**
   * The resolution of the document (in pixels per inch). Range: 35 to 1200.
   */
  static resolution: number;

  /**
   * The number of contact sheet rows.
   */
  static rowCount: number;

  /**
   * If true, auto spaces the images in the contact sheet.
   */
  static useAutoSpacing: boolean;

  /**
   * The vertical spacing (in pixels) between images. Range: 0 to 29000.
   */
  static vertical: number;

  /**
   * The width (in pixels) of the resulting document. Range: 100 to 2900.
   */
  static width: number;
}

/**
 * Options that can be specified for a Picture Package.
 */
declare class PicturePackageOptions {
  /**
   * The content information.
   */
  static content: PicturePackageTextType;

  /**
   * If true, flattens all layers in the final document.
   */
  static flatten: boolean;

  /**
   * The font used for security text.
   */
  static font: GalleryFontType;

  /**
   * The font size.
   */
  static fontSize: number;

  /**
   * The layout to use to generate the picture package.
   */
  static layout: string;

  /**
   * The document color mode.
   */
  static mode: NewDocumentMode;

  /**
   * The web page security text opacity (as a percentage) Range: 0 to 100.
   */
  static opacity: number;

  /**
   * The resolution of the document (in pixels per inch)
   */
  static resolution: number;

  /**
   * The picture package custom text.
   */
  static text: string;

  /**
   * The color of the security text.
   */
  static textColor: RGBColor;

  /**
   * The position of the security text.
   */
  static textPosition: GallerySecurityTextPositionType;

  /**
   * The orientation of the security text.
   */
  static textRotate: GallerySecurityTextRotateType;
}

/**
 * Options to specify when running a Batch command.
 */
declare class BatchOptions {
  /**
   * The type of destination for the processed files.
   */
  static destination: BatchDestinationType;

  /**
   * The folder location for the processed files. Valid only when 'destination' = folder.
   */
  static destinationFolder: File;

  /**
   * The file in which to log errors encountered. To display errors on the screen and stop batch processing when errors occur, leave blank.
   */
  static errorFile: File;

  /**
   * A list of file naming options. Maximum: 6.
   */
  static fileNaming: FileNamingType[];

  /**
   * If true, the final file names are Macintosh compatible.
   */
  static macintoshCompatible: boolean;

  /**
   * If true, overrides action open commands.
   */
  static overrideOpen: boolean;

  /**
   * If true, overrides save as action steps with the specified destination.
   */
  static overrideSave: boolean;

  /**
   * The starting serial number to use in naming files.
   */
  static startingSerial: number;

  /**
   * If true, suppresses file open options dialogs.
   */
  static suppressOpen: boolean;

  /**
   * If true, suppresses color profile warnings.
   */
  static suppressProfile: boolean;

  /**
   * If true, the final file names are Unix compatible.
   */
  static unixCompatible: boolean;

  /**
   * If true, the final file names are Windows compatible.
   */
  static windowsCompatible: boolean;
}

/**
 * An array of path point info objects that describes a straight or curved segment of a path.
 */
declare class SubPathInfo {
  /**
   * If true, the path is closed.
   */
  static closed: boolean;

  /**
   * All of the sub path item's path points.
   */
  static entireSubPath: PathPointInfo[];

  /**
   * The sub path operation on other sub paths.
   */
  static operation: ShapeOperation;
}

/**
 * A point on a path, expressed as an array of three coordinate arrays: the anchor point, left direction point, and right direction point. For paths that are straight segments (not curved), the coordinates of all three points are the same. For curved segements, the coordinates are different. The difference between the anchor point and the left or right direction points determines the arc of the curve. You use the left direction point to bend the curve "outward" or make it convex; you use the right direction point to bend the curve "inward" or make it concave.
 */
declare class PathPointInfo {
  /**
   * The x and y coordinates of one end point of the path segment.
   */
  static anchor: (Point | [number, number])[];

  /**
   * The x and y coordinates of one end point of the path segment.
   */
  anchor: (Point | [number, number])[];

  /**
   * The point type.
   */
  static kind: PointKind;

  /**
   * The point type.
   */
  kind: PointKind;

  /**
   * The location of the left direction point ("in" position).
   */
  static leftDirection: (Point | [number, number])[];

  /**
   * The location of the left direction point ("in" position).
   */
  leftDirection: (Point | [number, number])[];

  /**
   * The location of the right direction point ("out" position).
   */
  static rightDirection: (Point | [number, number])[];

  /**
   * The location of the right direction point ("out" position).
   */
  rightDirection: (Point | [number, number])[];
}

/**
 * A record of key-value pairs for actions, such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide.
 */
declare class ActionDescriptor {
  /**
   * The number of keys contained in the descriptor.
   */
  static readonly count: number;

  /**
   * The class name of the referenced ActionDescriptor object.
   */
  static readonly typename: string;

  /**
   * Clears the descriptor.
   */
  clear(): void;

  /**
   * Erases key from the descriptor.
   */
  erase(key: number): void;

  /**
   * Creates descriptor from stream of bytes; for reading from disk.
   */
  fromStream(value: string): void;

  /**
   * Gets the value of key of type boolean.
   */
  getBoolean(key: number): boolean;

  /**
   * Gets the value of key of type class.
   */
  getClass(key: number): number;

  /**
   * Gets raw byte data as string value.
   */
  getData(key: number): string;

  /**
   * Gets the value of key of type double.
   */
  getDouble(key: number): number;

  /**
   * Gets the enumeration type of key.
   */
  getEnumerationType(key: number): number;

  /**
   * Gets the enumeration value of key.
   */
  getEnumerationValue(key: number): number;

  /**
   * Gets the value of key of type integer.
   */
  getInteger(key: number): number;

  /**
   * Gets the ID of the Nth key, provided by index.
   */
  getKey(index: number): number;

  /**
   * Gets the value of key of type large integer.
   */
  getLargeInteger(key: number): number;

  /**
   * Gets the value of key of type list.
   */
  getList(key: number): ActionList;

  /**
   * Gets the class ID of an object in key of type object.
   */
  getObjectType(key: number): number;

  /**
   * Gets the value of key of type object.
   */
  getObjectValue(key: number): ActionDescriptor;

  /**
   * Gets the value of key of type File.
   */
  getPath(key: number): File;

  /**
   * Gets the value of key of type ActionReference.
   */
  getReference(key: number): ActionReference;

  /**
   * Gets the value of key of type string.
   */
  getString(key: number): string;

  /**
   * Gets the type of key.
   */
  getType(key: number): DescValueType;

  /**
   * Gets the unit type of key of type UnitDouble.
   */
  getUnitDoubleType(key: number): number;

  /**
   * Gets the value of key of type UnitDouble.
   */
  getUnitDoubleValue(key: number): number;

  /**
   * Checks whether the descriptor contains the provided key.
   */
  hasKey(key: number): boolean;

  /**
   * Determines whether the descriptor is the same as another descriptor.
   */
  isEqual(otherDesc: ActionDescriptor): boolean;

  /**
   * Sets the value for key whose type is boolean.
   */
  putBoolean(key: number, value: boolean): void;

  /**
   * Sets the value for key whose type is class.
   */
  putClass(key: number, value: number): void;

  /**
   * Puts raw byte data as string value.
   */
  putData(key: number, value: string): void;

  /**
   * Sets the value for key whose type is double.
   */
  putDouble(key: number, value: number): void;

  /**
   * Sets the enumeration type and value for key.
   */
  putEnumerated(key: number, enumType: number, value: number): void;

  /**
   * Sets the value for key whose type is integer.
   */
  putInteger(key: number, value: number): void;

  /**
   * Sets the value for key whose type is large integer.
   */
  putLargeInteger(key: number, value: number): void;

  /**
   * Sets the value for key whose type is an ActionList object.
   */
  putList(key: number, value: ActionList): void;

  /**
   * Sets the value for key whose type is an object, represented by an ActionDescriptor.
   */
  putObject(key: number, classID: number, value: ActionDescriptor): void;

  /**
   * Sets the value for key whose type is path.
   */
  putPath(key: number, value: File): void;

  /**
   * Sets the value for key whose type is an object reference.
   */
  putReference(key: number, value: ActionReference): void;

  /**
   * Sets the value for key whose type is string.
   */
  putString(key: number, value: string): void;

  /**
   * Sets the value for key whose type is unit value formatted as double.
   */
  putUnitDouble(key: number, unitID: number, value: number): void;

  /**
   * Gets the entire descriptor as stream of bytes, for writing to disk.
   */
  toStream(): string;
}

/**
 * The list of commands that comprise an Action (such as an Action created using the Actions palette in the Adobe Photoshop application). The action list object is part of the Action Manager functionality. For details on using the Action Manager, see the Photoshop Scripting Guide.
 */
declare class ActionList {
  /**
   * The number of commands that comprise the action.
   */
  static readonly count: number;

  /**
   * The class name of the referenced ActionList object.
   */
  static readonly typename: string;

  /**
   * Clears the list.
   */
  clear(): void;

  /**
   * Gets the value of list element of type boolean.
   */
  getBoolean(index: number): boolean;

  /**
   * Gets the value of list element of type class.
   */
  getClass(index: number): number;

  /**
   * Gets raw byte data as string value.
   */
  getData(index: number): string;

  /**
   * Gets the value of list element of type double.
   */
  getDouble(index: number): number;

  /**
   * Gets the enumeration type of list element.
   */
  getEnumerationType(index: number): number;

  /**
   * Gets the enumeration value of list element.
   */
  getEnumerationValue(index: number): number;

  /**
   * Gets the value of list element of type integer.
   */
  getInteger(index: number): number;

  /**
   * Gets the value of list element of type large integer.
   */
  getLargeInteger(index: number): number;

  /**
   * Gets the value of list element of type list.
   */
  getList(index: number): ActionList;

  /**
   * Gets the class ID of list element of type object.
   */
  getObjectType(index: number): number;

  /**
   * Gets the value of list element of type object.
   */
  getObjectValue(index: number): ActionDescriptor;

  /**
   * Gets the value of list element of type File.
   */
  getPath(index: number): File;

  /**
   * Gets the value of list element of type ActionReference.
   */
  getReference(index: number): ActionReference;

  /**
   * Gets the value of list element of type string.
   */
  getString(index: number): string;

  /**
   * Gets the type of list element.
   */
  getType(index: number): DescValueType;

  /**
   * Gets the unit value type of list element of type double.
   */
  getUnitDoubleType(index: number): number;

  /**
   * Gets the unit value of list element of type double.
   */
  getUnitDoubleValue(index: number): number;

  /**
   * Appends new value, true or false.
   */
  putBoolean(value: boolean): void;

  /**
   * Appends new value, class or data type.
   */
  putClass(value: number): void;

  /**
   * Appends new value, string containing raw byte data.
   */
  putData(value: string): void;

  /**
   * Appends new value, double.
   */
  putDouble(value: number): void;

  /**
   * Appends new value, an enumerated (constant) value.
   */
  putEnumerated(enumType: number, value: number): void;

  /**
   * Appends new value, an integer.
   */
  putInteger(value: number): void;

  /**
   * Appends new value, large integer.
   */
  putLargeInteger(value: number): void;

  /**
   * Appends new value, nested action list.
   */
  putList(value: ActionList): void;

  /**
   * Appends new value, an object.
   */
  putObject(classID: number, value: ActionDescriptor): void;

  /**
   * Appends new value, path.
   */
  putPath(value: File): void;

  /**
   * Appends new value, reference to an object created in the script.
   */
  putReference(value: ActionReference): void;

  /**
   * Appends new value, string.
   */
  putString(value: string): void;

  /**
   * Appends new value, unit/value pair.
   */
  putUnitDouble(classID: number, value: number): void;
}

/**
 * Contains data describing referenced Action. The action reference object is part of the Action Manager functionality. For details on using the Action Manager, see the Photoshop Scripting Guide.
 */
declare class ActionReference {
  /**
   * The class name of the referenced ActionReference object.
   */
  static readonly typename: string;

  /**
   * Gets reference contained in this reference. Container references provide additional pieces to the reference. This looks like another reference, but it is actually part of the same reference.
   */
  getContainer(): ActionReference;

  /**
   * Gets number representing the class of the object.
   */
  getDesiredClass(): number;

  /**
   * Gets the enumeration type.
   */
  getEnumeratedType(): number;

  /**
   * Gets the enumeration value.
   */
  getEnumeratedValue(): number;

  /**
   * Gets the form of this action reference.
   */
  getForm(): ReferenceFormType;

  /**
   * Gets the identifier value for reference whose form is identifier.
   */
  getIdentifier(): number;

  /**
   * Gets the index value for reference in list or array.
   */
  getIndex(): number;

  /**
   * Gets the name of reference.
   */
  getName(): string;

  /**
   * Gets the offset of the object's index value.
   */
  getOffset(): number;

  /**
   * Gets the property ID value.
   */
  getProperty(): number;

  /**
   * Puts new class form and class type into the reference.
   */
  putClass(desiredClass: number): void;

  /**
   * Puts an enumeration type and ID into reference along with the desired class for the reference.
   */
  putEnumerated(desiredClass: number, enumType: number, value: number): void;

  /**
   * Puts new identifier and value into the reference.
   */
  putIdentifier(desiredClass: number, value: number): void;

  /**
   * Puts new index and value into the reference.
   */
  putIndex(desiredClass: number, value: number): void;

  /**
   * Puts new name and value into the reference.
   */
  putName(desiredClass: number, value: string): void;

  /**
   * Puts new offset and value into the reference.
   */
  putOffset(desiredClass: number, value: number): void;

  /**
   * Puts new property and value into the reference.
   */
  putProperty(desiredClass: number, value: number): void;
}

/**
 * The Adobe Photoshop application object, which contains all other Adobe Photoshop objects.
 * This is the root of the object model, and provides access to all other objects. To access the properties and methods, you can use the pre-defined global variable app. For example:var currentDoc = app.activeDocument;
 */
declare class Application {
  /**
   * The frontmost document.
   */
  activeDocument: Document;

  /**
   * The default background color (used to paint, fill, and stroke selections).
   */
  backgroundColor: SolidColor;

  /**
   * The build number of Adobe Photoshop application.
   */
  readonly build: string;

  /**
   * The name of the selected color setting's set.
   */
  colorSettings: any;

  /**
   * Name of the current tool.
   */
  currentTool: string;

  /**
   * The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs.
   */
  displayDialogs: DialogModes;

  /**
   * The collection of open documents.
   */
  readonly documents: Documents;

  /**
   * The fonts installed on this system.
   */
  readonly fonts: TextFonts;

  /**
   * The default foreground color (used to paint, fill, and stroke selections).
   */
  foregroundColor: SolidColor;

  /**
   * The amount of unused memory available to Photoshop.
   */
  readonly freeMemory: number;

  /**
   * The language locale of the application.
   */
  readonly locale: string;

  /**
   * A list of the image file types Photoshop can open.
   */
  readonly macintoshFileTypes: string[];

  /**
   * The log of measurements taken.
   */
  readonly measurementLog: MeasurementLog;

  /**
   * The application name.
   */
  readonly name: string;

  /**
   * The notifiers currently configured (in the Scripts Events Manager menu in the application).
   */
  readonly notifiers: Notifiers;

  /**
   * If true, notifiers are enabled.
   */
  notifiersEnabled: boolean;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The full path of the location of the Adobe Photoshop application.
   */
  readonly path: File;

  /**
   * The dialog mode for playback mode, which indicates whether or not Photoshop displays dialogs in playback mode.
   */
  playbackDisplayDialogs: DialogModes;

  /**
   * The playback options, which indicate the speed at which Photoshop plays actions.
   */
  playbackParameters: ActionDescriptor;

  /**
   * The application preference settings (equivalent to selecting Edit > Preferences in the Adobe Photoshop application in Windows or Photoshop > Preferences in Mac OS).
   */
  readonly preferences: Preferences;

  /**
   * The full path to the preferences folder.
   */
  readonly preferencesFolder: File;

  /**
   * Files in the Recent Files list.
   */
  readonly recentFiles: File[];

  /**
   * The build date of the scripting interface.
   */
  readonly scriptingBuildDate: string;

  /**
   * The version of the Scripting interface.
   */
  readonly scriptingVersion: string;

  /**
   * System information of the host application and machine.
   */
  readonly systemInformation: string;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * The version of Adobe Photoshop application that you are running.
   */
  readonly version: string;

  /**
   * A list of the image file extensions Photoshop can open.
   */
  readonly windowsFileTypes: string[];

  /**
   * PRIVATE - set the current tool brush from a file.
   * @param file Brush file to apply.
   */
  applyToolBrushFromFile(file: File): void;

  /**
   * Runs the batch automation routine; analogous to using the Batch command in Photoshop.
   * @param inputFiles The files to operate on.
   * @param action The name of the action to play (note that the Action name is case-sensitive and must match the name in the Actions palette).
   * @param from The name of the action set containing the action being played (note that the Action Set name is case-sensitive and must match the name in the Actions palette).
   * @param options Options for batch automation.
   */
  batch(
    inputFiles: File[],
    action: string,
    from: string,
    options?: BatchOptions
  ): string;

  /**
   * Alerts the user.
   */
  beep(): void;

  /**
   * Makes Photoshop the active application.
   */
  bringToFront(): void;

  /**
   * Changes the text that appears in the progress window.
   * @param progressString String to show in the progress window.
   */
  changeProgressText(progressString: string): void;

  /**
   * Converts from a four character code to a runtime ID.
   * @param charID The ID to convert.
   */
  charIDToTypeID(charID: string): number;

  /**
   * Plays the specified action from the Actions palette.
   * @param action The name of the action to play. (Note that the action name is case-sensitive and must match the name as it appears in the Actions palette.)
   * @param from The name of the action set containing the action being played. (Note that the Action Set name is case-sensitive and must match the name as it appears in the Actions palette.)
   */
  doAction(action: string, from: string): void;

  /**
   * Performs a task with a progress bar. Forces progress bar to display, ignoring the normal heuristics that keep it from showing unnecessarily (e.g. during very short tasks). Other progress APIs must be called periodically to update the progress bar and allow cancelling.
   * @param progressString String to show in the progress window.
   * @param javaScriptString JavaScriptString to execute.
   */
  doForcedProgress(progressString: string, javaScriptString: string): void;

  /**
   * Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling.
   * @param progressString String to show in the progress window.
   * @param javaScriptString JavaScriptString to execute.
   */
  doProgress(progressString: string, javaScriptString: string): void;

  /**
   * Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel. Use when iterating a list of tasks with unequal run times.
   * @param segmentLength The length of the current task.
   * @param done The total length of all completed tasks.
   * @param total The total length of all tasks.
   * @param javaScriptString JavaScriptString to execute.
   */
  doProgressSegmentTask(
    segmentLength: number,
    done: number,
    total: number,
    javaScriptString: string
  ): boolean;

  /**
   * Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel. Use when iterating a simple list of tasks with equal run times.
   * @param index The 0-based index of the current task.
   * @param limit The total number of tasks.
   * @param javaScriptString JavaScriptString to execute.
   */
  doProgressSubTask(
    index: number,
    limit: number,
    javaScriptString: string
  ): boolean;

  /**
   * Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel.
   * @param taskLength Amount of the unused progress bar to section off, between 0.0 and 1.0.
   * @param javaScriptString JavaScriptString to execute.
   */
  doProgressTask(taskLength: number, javaScriptString: string): boolean;

  /**
   * Removes the specified user objects from the Photoshop registry.
   * @param key The unique string ID for user object(s) to remove.
   */
  eraseCustomOptions(key: string): void;

  /**
   * Plays an ActionManager event.
   * @param eventID The event to play.
   * @param descriptor The action descriptor to play.
   * @param displayDialogs The display permissions for dialogs and alert messages.
   */
  executeAction(
    eventID: number,
    descriptor?: ActionDescriptor,
    displayDialogs?: DialogModes
  ): ActionDescriptor;

  /**
   * Obtains an action descriptor.
   * @param reference The reference specification of the property.
   */
  executeActionGet(reference: ActionReference): ActionDescriptor;

  /**
   * If true, the specified feature is enabled.
   * @param name The name of the feature.
   */
  featureEnabled(name: string): boolean;

  /**
   * Retrieves user objects from the Photoshop registry for the ID with value key.
   * @param key The unique string ID for the user object.
   */
  getCustomOptions(key: string): ActionDescriptor;

  /**
   * Returns true if Quicktime is installed.
   */
  isQuicktimeAvailable(): boolean;

  /**
   * Loads a support document.
   * @param document The document to load.
   */
  load(document: File): void;

  /**
   * Creates a contact sheet from multiple files.
   * @param inputFiles The files to include.
   * @param options Options for creating the contact sheet.
   */
  makeContactSheet(inputFiles: File[], options?: ContactSheetOptions): string;

  /**
   * Creates a PDF presentation file.
   * @param inputFiles The input files to include in the presentation.
   * @param outputFile The location of the output file.
   * @param options Options for the PDF presentation.
   */
  makePDFPresentation(
    inputFiles: File[],
    outputFile: File,
    options?: PresentationOptions
  ): string;

  /**
   * DEPRECATED. Creates a web photo gallery.
   * @param inputFolder Folder to process or an array of files to process.
   * @param outputFolder Location for output files.
   * @param options Options for the web photo gallery.
   */
  makePhotoGallery(
    inputFolder: any,
    outputFolder: File,
    options?: GalleryOptions
  ): string;

  /**
   * DEPRECATED. Merges multiple files into one, user interaction required.
   * @param inputFiles List of input files to include.
   */
  makePhotomerge(inputFiles: File[]): string;

  /**
   * Creates a picture package from multiple files.
   * @param inputFiles The files to include.
   * @param options Options for creating a Picture Package.
   */
  makePicturePackage(
    inputFiles: File[],
    options?: PicturePackageOptions
  ): string;

  /**
   * Opens the specified document file(s).
   * @param document The document(s) to opend.
   * @param as The document type (The default is to let Photoshop deduce the format).
   * @param asSmartObject Creates a smart object around the document.
   */
  open(document: File, as?: any, asSmartObject?: boolean): Document;

  /**
   * Uses the Photoshop open dialog to select files.
   */
  openDialog(): File[];

  /**
   * Purges one or more caches.
   * @param target The caches to purge.
   */
  purge(target: PurgeTarget): void;

  /**
   * Save user objects in the Photoshop registry.
   * @param key The unique string ID for the user object.
   * @param customObject The user-defined custom object to save in the registry.
   * @param persistent If true, the object persists after the script has finished.
   */
  putCustomOptions(
    key: string,
    customObject: ActionDescriptor,
    persistent?: boolean
  ): void;

  /**
   * Pauses the script until the application refreshes.
   */
  refresh(): void;

  /**
   * Force the font list to get refreshed.
   */
  refreshFonts(): void;

  /**
   * Run a menu item.
   * @param menuID Id of menu to run.
   */
  runMenuItem(menuID: number): void;

  /**
   * PRIVATE - save the current tool brush to a file.
   * @param file File to save the brush to.
   */
  saveToolBrushToFile(file: File): void;

  /**
   * Display color picker dialog. Returns false if dialog is cancelled, true otherwise.
   * @param pickForeground If true the foreground color is chosen, if false the background color is chosen.
   */
  showColorPicker(pickForeground?: boolean): boolean;

  /**
   * Converts from a string ID to a runtime ID.
   * @param stringID The ID to convert.
   */
  stringIDToTypeID(stringID: string): number;

  /**
   * Perform a system call.
   * @param callString System call string.
   */
  system(callString: string): number;

  /**
   * PRIVATE - write out a thumbnail file from a style file.
   * @param file Style file to read.
   * @param dest Thumb file to write.
   * @param thumbnailSize Size of thumbnail to save.
   * @param backgroundValue Background grayvalue.
   */
  thumbnailStyleFile(
    file: File,
    dest: File,
    thumbnailSize?: number,
    backgroundValue?: number
  ): void;

  /**
   * PRIVATE - write out a thumbnail file from text parameters.
   * @param dest Thumb file to write.
   * @param text Text to render.
   * @param font PostScript name of font.
   * @param size Size of type.
   * @param color Color of type.
   */
  thumbnailText(
    dest: File,
    text?: string,
    font?: string,
    size?: number,
    color?: SolidColor
  ): void;

  /**
   * Toggle palette visibility.
   */
  togglePalettes(): void;

  /**
   * Check if the specified tool supports brushes.
   * @param tool The name of the tool to check.
   */
  toolSupportsBrushes(tool: string): boolean;

  /**
   * Converts from a runtime ID to a character ID.
   * @param typeID The ID to convert.
   */
  typeIDToCharID(typeID: number): string;

  /**
   * Converts from a runtime ID to a string ID.
   * @param typeID The ID to convert.
   */
  typeIDToStringID(typeID: number): string;

  /**
   * Updates the progress bar started by doProgress. Use for manual non-task based progress updating. Returns false on cancel.
   * @param done The number of tasks completed.
   * @param total The total number of tasks.
   */
  updateProgress(done: number, total: number): boolean;
}

/**
 * The active containment object for the layers and all other objects in the script; the basic canvas for the file.
 */
declare class Document {
  /**
   * The selected channels.
   */
  activeChannels: Channel[];

  /**
   * The history state to use with the history brush.
   */
  activeHistoryBrushSource: HistoryState;

  /**
   * The current history state for this document.
   */
  activeHistoryState: HistoryState;

  /**
   * The selected layer.
   */
  activeLayer: Layer;

  /**
   * The art layers collection in the document.
   */
  readonly artLayers: ArtLayers;

  /**
   * The background layer for the document.
   */
  readonly backgroundLayer: ArtLayer;

  /**
   * The number of bits per channel.
   */
  bitsPerChannel: BitsPerChannelType;

  /**
   * The channels collection in this document.
   */
  readonly channels: Channels;

  /**
   * The name of the color profile. Valid only when no value is specified for color profile kind (to indicate a custom color profile).
   */
  colorProfileName: string;

  /**
   * The type of color model that defines the working space of the document.
   */
  colorProfileType: ColorProfileType;

  /**
   * The current color samplers associated with the document.
   */
  readonly colorSamplers: ColorSamplers;

  /**
   * The color component channels for this document.
   */
  readonly componentChannels: Channel[];

  /**
   * The current count items in the document.
   */
  readonly countItems: CountItems;

  /**
   * The full path name of the document.
   */
  readonly fullName: File;

  /**
   * The guides in this document.
   */
  readonly guides: Guides;

  /**
   * The height of the document.
   */
  readonly height: UnitValue | number;

  /**
   * A histogram showing the number of pixels at each color intensity level for the composite channel.
   * Valid only when 'mode' = RGB, CMYK, or indexed.
   */
  readonly histogram: number[];

  /**
   * The history states collection in this document.
   */
  readonly historyStates: HistoryStates;

  /**
   * The unique ID of this document.
   */
  readonly id: number;

  /**
   * Metadata about the document.
   */
  readonly info: DocumentInfo;

  /**
   * The layer comps collection in this document.
   */
  readonly layerComps: LayerComps;

  /**
   * The layer sets collection in the document.
   */
  readonly layerSets: LayerSets;

  /**
   * The layers collection in the document.
   */
  readonly layers: Layers;

  /**
   * If true, the document is a workgroup document.
   */
  readonly managed: boolean;

  /**
   * The measurement scale of the document.
   */
  readonly measurementScale: MeasurementScale;

  /**
   * The color profile.
   */
  readonly mode: DocumentMode;

  /**
   * The document name.
   */
  readonly name: string;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The path to the document.
   */
  readonly path: Folder;

  /**
   * The path items collection in this document.
   */
  readonly pathItems: PathItems;

  /**
   * The (custom) pixel aspect ratio of the document. Range: 0.100 to 10.000.
   */
  pixelAspectRatio: number;

  /**
   * Document print settings.
   */
  readonly printSettings: DocumentPrintSettings;

  /**
   * If true, the document is in Quick Mask mode.
   */
  quickMaskMode: boolean;

  /**
   * The resolution of the document (in pixels per inch)
   */
  readonly resolution: number;

  /**
   * If true, the document been saved since the last change.
   */
  readonly saved: boolean;

  /**
   * The selected area of the document.
   */
  readonly selection: Selection;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * The width of the document.
   */
  readonly width: UnitValue | number;

  /**
   * The XMP properties of the document. The Camera RAW settings are stored here.
   */
  readonly xmpMetadata: XMPMetadata;

  /**
   * Counts the objects in the document.
   * @param channel The channel to use for counting.
   * @param threshold Threshold to use for counting. Range: 0 to 255.
   */
  autoCount(channel: Channel, threshold: number): void;

  /**
   * Changes the mode of the document.
   * @param destinationMode The mode to change to.
   * @param options Options for changing the mode.
   */
  changeMode(
    destinationMode: ChangeMode,
    options?: DocumentConversionOptions
  ): void;

  /**
   * Closes the document.
   * @param saving Specifies whether changes should be saved before closing.
   */
  close(saving?: SaveOptions): void;

  /**
   * Converts the document from using one color profile to using another.
   * @param destinationProfile The color profile to convert to. Either a string specifying a color profile, one of the working color spaces, or Lab color.
   * @param intent The conversion intent.
   * @param blackPointCompensation If true, black point compensation is used.
   * @param dither If true, dither is used.
   */
  convertProfile(
    destinationProfile: string,
    intent: Intent,
    blackPointCompensation?: boolean,
    dither?: boolean
  ): void;

  /**
   * Crops the document.
   * @param bounds The area to crop.
   * @param angle The angle of cropping bounds.
   * @param width The width of the resulting document.
   * @param height The height of the resulting document.
   */
  crop(
    bounds: UnitRect,
    angle?: number,
    width?: UnitValue | number,
    height?: UnitValue | number
  ): void;

  /**
   * Creates a duplicate of the document object.
   * @param name The name of the new document.
   * @param mergeLayersOnly If ture, duplicates merged layers only.
   */
  duplicate(name?: string, mergeLayersOnly?: boolean): Document;

  /**
   * Duplicate this object.
   * @param relativeObject
   * @param insertionLocation
   */
  duplicate(
    relativeObject: object,
    insertionLocation: ElementPlacement
  ): Document;

  /**
   * Exports the document.
   * @param exportIn The file to export to.
   * @param exportAs The type of export.
   * @param options Options for the specified export type.
   */
  exportDocument(
    exportIn: File,
    exportAs?: ExportType,
    options?: ExportOptions
  ): void;

  /**
   * Flattens all layers.
   */
  flatten(): void;

  /**
   * Flips the canvas horizontally or vertically.
   * @param direction The direction in which to flip the canvas.
   */
  flipCanvas(direction: Direction): void;

  /**
   * Imports annotations into the document.
   * @param file The document to import annotations from.
   */
  importAnnotations(file: File): void;

  /**
   * Flattens all visible layers in the document.
   */
  mergeVisibleLayers(): void;

  /**
   * Pastes contents of the clipboard into the document.
   * @param intoSelection If true, contents are pasted into the current selection.
   */
  paste(intoSelection?: boolean): ArtLayer;

  /**
   * Prints the document.
   * @param sourceSpace The color space for the source.
   * @param printSpace The color space for the printer. Can be "nothing" (meaning same as source); one of the working spaces or Lab color; or a string specifying a color space. Default: nothing.
   * @param intent The color conversion intent.
   * @param blackPointCompensation If true, black point compensation is used.
   */
  print(
    sourceSpace?: SourceSpaceType,
    printSpace?: string,
    intent?: Intent,
    blackPointCompensation?: boolean
  ): void;

  /**
   * Print one copy of the document.
   */
  printOneCopy(): void;

  /**
   * Rasterizes all layers.
   */
  rasterizeAllLayers(): void;

  /**
   * Records the measurements of document.
   * @param source The source of the measurements to record.
   * @param dataPoints An array of identifiers of data points to record. Any data points not appropriate for the specified source are ignored.
   */
  recordMeasurements(source?: MeasurementSource, dataPoints?: string[]): void;

  /**
   * Changes the size of the canvas.
   * @param width The desired width of the canvas.
   * @param height The desired height of the canvas.
   * @param anchor The anchor point to resize around.
   */
  resizeCanvas(
    width?: UnitValue | number,
    height?: UnitValue | number,
    anchor?: AnchorPosition
  ): void;

  /**
   * Changes the size of the image.
   * @param width The desired width of the image.
   * @param height The desired height of the image.
   * @param resolution The resolution (in pixels per inch)
   * @param resampleMethod The downsample method.
   * @param amount Amount of noise value when using preserve details (range: 0 - 100)
   */
  resizeImage(
    width?: UnitValue | number,
    height?: UnitValue | number,
    resolution?: number,
    resampleMethod?: ResampleMethod,
    amount?: number
  ): void;

  /**
   * Expands the document to show clipped sections.
   */
  revealAll(): void;

  /**
   * Rotates the canvas.
   * @param angle The number of degrees to rotate. A positive angle rotates the canvas clockwise; a negative value rotates the canvas counter-clockwise.
   */
  rotateCanvas(angle: number): void;

  /**
   * Saves the document.
   */
  save(): void;

  /**
   * Saves the document with the specified save options.
   * @param saveIn The file to save to, specified as a string containing the full file path or an alias. If not specified, the document is saved to its existing file.
   * @param options Options for the specified file type.
   * @param asCopy Saves the document as a copy, leaving the original open.
   * @param extensionType Appends the specified extension to the file name.
   */
  saveAs(
    saveIn: File,
    options?: any,
    asCopy?: boolean,
    extensionType?: Extension
  ): void;

  /**
   * Splits the channels of the document.
   */
  splitChannels(): Document[];

  /**
   * Provides a single history state for the entire script. Allows a single undo for all actions taken in the script.
   * @param historyString The string to use for the history state.
   * @param javaScriptString A string of JavaScript code to execute during the suspension of history.
   */
  suspendHistory(historyString: string, javaScriptString: string): void;

  /**
   * Applies trapping to a CMYK document. Valid only when 'mode' = CMYK.
   * @param width The trap width in pixels.
   */
  trap(width: number): void;

  /**
   * Trims the transparent area around the image on the specified sides of the canvas.
   * @param type The color or type of pixels to base the trim on.
   * @param top If true, trims away the top of the document.
   * @param left If true, trims away the left of the document.
   * @param bottom If true, trims away the bottom of the document.
   * @param right If true, trims away the right of the document.
   */
  trim(
    type?: TrimType,
    top?: boolean,
    left?: boolean,
    bottom?: boolean,
    right?: boolean
  ): void;
}

/**
 * Metadata about a document object. These values can be set by selecting File > File Info in the Adobe Photoshop application.
 */
declare class DocumentInfo {
  /**
   * The author.
   */
  author: string;

  /**
   * The author's position.
   */
  authorPosition: string;

  /**
   * The caption.
   */
  caption: string;

  /**
   * The caption author.
   */
  captionWriter: string;

  /**
   * The document category.
   */
  category: string;

  /**
   * The city.
   */
  city: string;

  /**
   * The copyright notice.
   */
  copyrightNotice: string;

  /**
   * The copyright status.
   */
  copyrighted: CopyrightedType;

  /**
   * The country.
   */
  country: string;

  /**
   * The creation date.
   */
  creationDate: string;

  /**
   * The author credit.
   */
  credit: string;

  /**
   * For JPEG images, information stored with digital photographs including camera type, date and time of photo, and file size.
   */
  readonly exif: any[];

  /**
   * The headline.
   */
  headline: string;

  /**
   * Instructions for using or processing the image.
   */
  instructions: string;

  /**
   * The job name.
   */
  jobName: string;

  /**
   * A list of keywords.
   */
  keywords: string[];

  /**
   * The url of the copyright info.
   */
  ownerUrl: string;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The state or province.
   */
  provinceState: string;

  /**
   * The source.
   */
  source: string;

  /**
   * Other categories.
   */
  supplementalCategories: string[];

  /**
   * The document title.
   */
  title: string;

  /**
   * The transmission reference.
   */
  transmissionReference: string;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * The document urgency.
   */
  urgency: Urgency;
}

/**
 * Options to define for the preferences property of the application object, basically equivalent to selecting Edit > Preferences (Windows) or Photoshop > Preferences in the Adobe Photoshop application.
 */
declare class Preferences {
  /**
   * The path to the additional plug-in folder. Valid only when 'use additional plugin folder' = true.
   */
  additionalPluginFolder: File;

  /**
   * Save files with extensions on Windows.
   */
  appendExtension: SaveBehavior;

  /**
   * If true, asks the user to verify layer preservation options when saving a file in TIFF format.
   */
  askBeforeSavingLayeredTIFF: boolean;

  /**
   * If true, automatically updates open documents.
   */
  autoUpdateOpenDocuments: boolean;

  /**
   * If true, alerts the user when a process finishes.
   */
  beepWhenDone: boolean;

  /**
   * If true, displays component channels in the Channels palette in color.
   */
  colorChannelsInColor: boolean;

  /**
   * The color picker to use.
   */
  colorPicker: ColorPicker;

  /**
   * The gutter of columns (in points)
   */
  columnGutter: number;

  /**
   * The width of columns (in points)
   */
  columnWidth: number;

  /**
   * If true, automatically makes the first snapshot when a new document is created.
   */
  createFirstSnapshot: boolean;

  /**
   * If true, dynamic color sliders appear in the Color palette.
   */
  dynamicColorSliders: boolean;

  /**
   * Options for edit log items.
   */
  editLogItems: EditLogItemsType;

  /**
   * If true, retains Adobe Photoshop contents on the clipboard after you exit the application.
   */
  exportClipboard: boolean;

  /**
   * Show font previews in the type tool font menus.
   */
  fontPreviewSize: FontPreviewType;

  /**
   * If true, shows the image preview as a full size image.
   */
  fullSizePreview: boolean;

  /**
   * The opacity (as a percentage) of the warning color for out-of-gamut colors. Range: 0 to 100.
   */
  gamutWarningOpacity: number;

  /**
   * The size of grid squares.
   */
  gridSize: GridSize;

  /**
   * The formatting style for non-printing grid lines.
   */
  gridStyle: GridLineStyle;

  /**
   * The value by which to subdivide the grid.
   */
  gridSubDivisions: number;

  /**
   * The formatting style for non-printing guide lines.
   */
  guideStyle: GuideLineStyle;

  /**
   * If true, shows the image preview as a thumbnail.
   */
  iconPreview: boolean;

  /**
   * If true, shows the current image cache used to create the histogram.
   */
  imageCacheForHistograms: boolean;

  /**
   * The number of images to hold in the cache. Range: 1 to 8.
   */
  imageCacheLevels: number;

  /**
   * The behavior mode to use when saving files.
   */
  imagePreviews: SaveBehavior;

  /**
   * The method to use to assign color values to any new pixels created when an image is resampled or resized.
   */
  interpolation: ResampleMethod;

  /**
   * If true, automatically resizes the window when zooming in or out using keyboard shortcuts.
   */
  keyboardZoomResizesWindows: boolean;

  /**
   * If true, creates a thumbnail when saving the image in Mac OS.
   */
  macOSThumbnail: boolean;

  /**
   * Maximum percentage of available RAM used by Photoshop.
   */
  maxRAMuse: number;

  /**
   * The behavior to use to check whether to maximize compatibility when opening Adobe Photoshop (PSD) files.
   */
  maximizeCompatibility: QueryStateType;

  /**
   * If true, allows non-linear history.
   */
  nonLinearHistory: boolean;

  /**
   * The number of history states to preserve. Range: 1 to 100.
   */
  numberOfHistoryStates: number;

  /**
   * The type of pointer to use.
   */
  otherCursors: OtherPaintingCursors;

  /**
   * The type of pointer to use.
   */
  paintingCursors: PaintingCursors;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * If true, halves the resolution or (doubles the size of pixels) to make previews display more quickly.
   */
  pixelDoubling: boolean;

  /**
   * The point/pica size.
   */
  pointSize: PointType;

  /**
   * The number of items in the recent file list. Range: 0 to 30.
   */
  recentFileListLength: number;

  /**
   * The unit that the scripting system uses when receiving and returning values.
   */
  rulerUnits: Units;

  /**
   * Options for saving the history items.
   */
  saveLogItems: SaveLogItemsType;

  /**
   * File to save the history log.
   */
  saveLogItemsFile: File;

  /**
   * If true, makes new palette locations the default location.
   */
  savePaletteLocations: boolean;

  /**
   * If true, Asian text options are displayed in the Paragraph palette.
   */
  showAsianTextOptions: boolean;

  /**
   * If true, Asian font names are listed in English.
   */
  showEnglishFontNames: boolean;

  /**
   * If true, displays slice numbers in the document window when using the Slice tool.
   */
  showSliceNumber: boolean;

  /**
   * If true, pop-up definitions are displayed on mouseover.
   */
  showToolTips: boolean;

  /**
   * If true, curly quote marks are used.
   */
  smartQuotes: boolean;

  /**
   * Size of the small font used in panels and dialogs.
   */
  textFontSize: FontSize;

  /**
   * The unit type-size that the numeric inputs are assumed to represent.
   */
  typeUnits: TypeUnits;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * If true, uses an additional folder for compatible plug-ins stored with a different application.
   */
  useAdditionalPluginFolder: boolean;

  /**
   * If true, uses diffusion dither.
   */
  useDiffusionDither: boolean;

  /**
   * Turn on and off the history logging.
   */
  useHistoryLog: boolean;

  /**
   * If true, the file extension is lowercase.
   */
  useLowerCaseExtension: boolean;

  /**
   * If true, enables cycling through a set of hidden tools.
   */
  useShiftKeyForToolSwitch: boolean;

  /**
   * If true, enables Adobe Photoshop to send transparency information to your computer’s video board. (Requires hardware support.)
   */
  useVideoAlpha: boolean;

  /**
   * If true, creates a thumbnail when saving the image in Windows. (Requires hardware support.)
   */
  windowsThumbnail: boolean;
}

/**
 * Print settings for a document.
 */
declare class DocumentPrintSettings {
  /**
   * Currently selected printer.
   */
  activePrinter: string;

  /**
   * Background color of page.
   */
  backgroundColor: SolidColor;

  /**
   * Bleed width.
   */
  bleedWidth: UnitValue | number;

  /**
   * Description field from File Info.
   */
  caption: boolean;

  /**
   * Print center crop marks.
   */
  centerCropMarks: boolean;

  /**
   * Print color calibration bars.
   */
  colorBars: boolean;

  /**
   * Color handling.
   */
  colorHandling: PrintColorHandling;

  /**
   * Number of copies.
   */
  copies: number;

  /**
   * Print corner crop marks.
   */
  cornerCropMarks: boolean;

  /**
   * Position of image when printing.
   */
  readonly docPosition: DocPositionStyle;

  /**
   * Flip the image horizontally.
   */
  flip: boolean;

  /**
   * Print a hard proof.
   */
  hardProof: boolean;

  /**
   *
   */
  interpolate: boolean;

  /**
   * Prints the document title.
   */
  labels: boolean;

  /**
   * Map blacks.
   */
  mapBlack: boolean;

  /**
   * Invert the image colors.
   */
  negative: boolean;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * X position of image on page.
   */
  readonly posX: UnitValue | number;

  /**
   * Y position of image on page.
   */
  readonly posY: UnitValue | number;

  /**
   * Width of the print border.
   */
  printBorder: UnitValue | number;

  /**
   * Color space for printer. Can be nothing (meaning same as source) or a string specifying a specific color profile.
   */
  printSpace: string;

  /**
   * Name of printer.
   */
  printerName: string;

  /**
   * List of available printers.
   */
  readonly printers: string[];

  /**
   * Print registration marks.
   */
  registrationMarks: boolean;

  /**
   * Color conversion intent when print space is different from the source space.
   */
  renderIntent: Intent;

  /**
   * Scale of image on page.
   */
  readonly scale: number;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Include vector data.
   */
  vectorData: boolean;

  /**
   * Set the position of the image on the page.
   * @param docPosition Position of the image on page when printing. Can be centered, scale to fit, or user defined.
   * @param posX X position of image on page.
   * @param posY Y position of image on page.
   * @param scale Position of the image on page when printing. Can be centered, scale to fit, or user defined.
   */
  setPagePosition(
    docPosition: DocPositionStyle,
    posX?: UnitValue | number,
    posY?: UnitValue | number,
    scale?: number
  ): void;
}

/**
 * The selected area of the document or layer.
 */
declare class Selection {
  /**
   * The bounding rectangle of the entire selection.
   */
  readonly bounds: UnitRect;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * If true, the bounding rectangle a solid rectangle.
   */
  readonly solid: boolean;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Clears the selection and does not copy it to the clipboard.
   */
  clear(): void;

  /**
   * Contracts the selection.
   * @param by The amount to contract the selection.
   */
  contract(by: UnitValue | number): void;

  /**
   * Copies the selection to the clipboard.
   * @param merge If true the copy includes all visible layers. If false, copies only from the current layer.
   */
  copy(merge?: boolean): void;

  /**
   * Cuts the current selection to the clipboard.
   */
  cut(): void;

  /**
   * Deselects the current selection.
   */
  deselect(): void;

  /**
   * Expands the selection.
   * @param by The amount to expand the selection.
   */
  expand(by: UnitValue | number): void;

  /**
   * Feathers the edges of the selection.
   * @param by The amount to feather the edge.
   */
  feather(by: UnitValue | number): void;

  /**
   * Fills the selection.
   * @param fillType The color or history state with which to fill the object.
   * @param mode The color blend mode.
   * @param opacity The opacity as a percentage. Range: 1 to 100.
   * @param preserveTransparency If true, perserves transparencies.
   */
  fill(
    fillType: any,
    mode?: ColorBlendMode,
    opacity?: number,
    preserveTransparency?: boolean
  ): void;

  /**
   * Grows the selection to include all adjacent pixels falling within the specified tolerance range.
   * @param tolerance The tolerance range. Range: 0 to 255.
   * @param antiAlias If true, anti-aliasing is used.
   */
  grow(tolerance: number, antiAlias: boolean): void;

  /**
   * Inverts the selection.
   */
  invert(): void;

  /**
   * Loads the selection from the specified channel.
   * @param from The channel to load the selection from.
   * @param combination How to combine the channel contents with the existing selection.
   * @param inverting If true, selects the inverse of the channel contents.
   */
  load(from: Channel, combination?: SelectionType, inverting?: boolean): void;

  /**
   * Makes this selection item the workpath for this document.
   * @param tolerance The tolerance in pixels.
   */
  makeWorkPath(tolerance?: number): void;

  /**
   * Resizes the selected area to the specified dimensions and anchor position.
   * @param horizontal The amount to scale the selection horizontally (as a percentage).
   * @param vertical The amount to scale the selection vertically (as a percentage).
   * @param anchor The point to scale around.
   */
  resize(horizontal?: number, vertical?: number, anchor?: AnchorPosition): void;

  /**
   * Scales the boundary of the selection.
   * @param horizontal The amount to scale the object horizontally (as a percentage).
   * @param vertical The amount to scale the object vertically (as a percentage).
   * @param anchor The point to scale around.
   */
  resizeBoundary(
    horizontal?: number,
    vertical?: number,
    anchor?: AnchorPosition
  ): void;

  /**
   * Rotates the object.
   * @param angle The number of degrees to rotate the object.
   * @param anchor The point to rotate about.
   */
  rotate(angle: number, anchor?: AnchorPosition): void;

  /**
   * Rotates the boundary of the selection.
   * @param angle The rotation angle (in degrees)
   * @param anchor The point to rotate about.
   */
  rotateBoundary(angle: number, anchor?: AnchorPosition): void;

  /**
   * Selects the specified region.
   * @param region Array of x and y coordinates that describe the corners of the selection, in the format [[x1, y1], [x2,y2],[x3, y3], [x4,y4]]
   * @param type The method for combining the new selection with the existing selection.
   * @param feather The feather amount.
   * @param antiAlias If true, anti-aliasing is used.
   */
  select(
    region: any[],
    type?: SelectionType,
    feather?: number,
    antiAlias?: boolean
  ): void;

  /**
   * Selects the entire layer.
   */
  selectAll(): void;

  /**
   * Selects the selection border only (in the specified width); subsequent actions do not affect the selected area within the borders.
   * @param width The width of the border selection.
   */
  selectBorder(width: UnitValue | number): void;

  /**
   * Grows the selection to include pixels throughout the image falling within the tolerance range.
   * @param tolerance The tolerance range. Range: 0 to 255.
   * @param antiAlias If true, anti-aliasing is used.
   */
  similar(tolerance: number, antiAlias: boolean): void;

  /**
   * Cleans up stray pixels left inside or outside a color-based selection (within the radius specified in pixels).
   * @param radius The sample radius in pixels. Range: 0 to 100.
   */
  smooth(radius: number): void;

  /**
   * Saves the selection as a channel.
   * @param into The channel to save the selection to.
   * @param combination How to add the selection to the existing contents of the channel.
   */
  store(into: Channel, combination?: SelectionType): void;

  /**
   * Strokes the selection.
   * @param strokeColor The color to stroke the selection with.
   * @param width The stroke width.
   * @param location The stroke location.
   * @param mode The color blend mode.
   * @param opacity The opacity of the stroke color as a percentage. Range: 1 to 100.
   * @param preserveTransparency If true, preserves transparency.
   */
  stroke(
    strokeColor: any,
    width: number,
    location?: StrokeLocation,
    mode?: ColorBlendMode,
    opacity?: number,
    preserveTransparency?: boolean
  ): void;

  /**
   * Moves the object relative to its current position.
   * @param deltaX The amount to move the object horizontally.
   * @param deltaY The amount to move the object vertically.
   */
  translate(deltaX?: UnitValue | number, deltaY?: UnitValue | number): void;

  /**
   * Moves the boundary of selection relative to its current position.
   * @param deltaX The amount to move the object horizontally.
   * @param deltaY The amount to move the object vertically.
   */
  translateBoundary(
    deltaX?: UnitValue | number,
    deltaY?: UnitValue | number
  ): void;
}

/**
 * A group of layer objects, which can include art layer objects and other (nested) layer set objects. A single command or set of commands manipulates all layers in a layer set object.
 */
declare class LayerSet extends Layer {
  /**
   * The art layers contained in this layer set.
   */
  readonly artLayers: ArtLayers;

  /**
   * The channels that are enabled for the layer set. Must be a list of component channels.
   */
  enabledChannels: Channel[];

  /**
   * The layer sets contained within the layer set.
   */
  readonly layerSets: LayerSets;

  /**
   * The layers in this layer set.
   */
  readonly layers: Layers;

  /**
   * Adds an element.
   */
  add(): LayerSet;

  /**
   * Merges the layer set.
   */
  merge(): ArtLayer;
}

/**
 * An object within a document that contains the visual elements of the image (equivalent to a layer in the Adobe Photoshop application).
 */
declare class ArtLayer extends Layer {
  /**
   * The interior opacity of the layer. Range: 0.0 to 100.0.
   */
  fillOpacity: number;

  /**
   * The density of the filter mask (between 0.0 and 100.0)
   */
  filterMaskDensity: number;

  /**
   * The feather of the filter mask (between 0.0 and 250.0)
   */
  filterMaskFeather: number;

  /**
   * If true, the layer is grouped with the layer below.
   */
  grouped: boolean;

  /**
   * If true, the layer is a background layer.
   */
  isBackgroundLayer: boolean;

  /**
   * Sets the layer kind (such as 'text layer') for an empty layer. Valid only when the layer is empty and when 'is background layer ' is false. You can use the 'kind ' property to make a background layer a normal layer; however, to make a layer a background layer, you must set 'is background layer' to true.
   */
  kind: LayerKind;

  /**
   * The density of the layer mask (between 0.0 and 100.0)
   */
  layerMaskDensity: number;

  /**
   * The feather of the layer mask (between 0.0 and 250.0)
   */
  layerMaskFeather: number;

  /**
   * If true, the pixels in the layer's image cannot be edited.
   */
  pixelsLocked: boolean;

  /**
   * If true, the pixels in the layer's image cannot be moved within the layer.
   */
  positionLocked: boolean;

  /**
   * The text that is associated with the layer. Valid only when 'kind' is text layer.
   */
  readonly textItem: TextItem;

  /**
   * If true, editing is confined to the opaque portions of the layer.
   */
  transparentPixelsLocked: boolean;

  /**
   * The density of the vector mask (between 0.0 and 100.0)
   */
  vectorMaskDensity: number;

  /**
   * The feather of the vector mask (between 0.0 and 250.0)
   */
  vectorMaskFeather: number;

  /**
   * Adds an element.
   */
  add(): ArtLayer;

  /**
   * Adjusts the brightness and constrast.
   * @param brightness The brightness amount. Range: -100 to 100.
   * @param contrast The contrast amount. Range: -100 to 100.
   */
  adjustBrightnessContrast(brightness: number, contrast: number): void;

  /**
   * Adjusts the color balance of the layer's component channels.
   * @param shadows The adjustments for the shadows. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB.
   * @param midtones The adjustments for the midtones. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB.
   * @param highlights The adjustments for the highlights. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB.
   * @param preserveLuminosity If true, luminosity is preserved.
   */
  adjustColorBalance(
    shadows?: number[],
    midtones?: number[],
    highlights?: number[],
    preserveLuminosity?: boolean
  ): void;

  /**
   * Adjusts the tonal range of the selected channel using up to fourteen points.
   * @param curveShape The curve points. The number of points must be between 2 and 14.
   */
  adjustCurves(curveShape: (Point | [number, number])[]): void;

  /**
   * Adjusts levels of the selected channels.
   * @param inputRangeStart The input levels minimum. Range: 0 to 253.
   * @param inputRangeEnd The input levels maximum. Range: (input range start + 2) to 253.
   * @param inputRangeGamma The input levels gamma. Range: 0.10 to 9.99.
   * @param outputRangeStart The output levels minimum. Range: 0 to 253.
   * @param outputRangeEnd The output levels maximum. Range: (output range start + 2) to 253.
   */
  adjustLevels(
    inputRangeStart: number,
    inputRangeEnd: number,
    inputRangeGamma: number,
    outputRangeStart: number,
    outputRangeEnd: number
  ): void;

  /**
   * Applies the add noise filter.
   * @param amount The amount of noise (as a percentage). Range: 0.1 to 400.0.
   * @param distribution The noise distribution type.
   * @param monochromatic If true, applies the filter only to the tonal elements in the image without changing the colors.
   */
  applyAddNoise(
    amount: number,
    distribution: NoiseDistribution,
    monochromatic: boolean
  ): void;

  /**
   * Applies the average filter.
   */
  applyAverage(): void;

  /**
   * Applies the blur filter.
   */
  applyBlur(): void;

  /**
   * Applies the blur more filter.
   */
  applyBlurMore(): void;

  /**
   * Applies the clouds filter.
   */
  applyClouds(): void;

  /**
   * Applies the custom filter.
   * @param characteristics The custom filter characteristics. This is an array of 25 values that corresponds to a left-to-right, top-to- bottom traversal of the array presented in the Custom dialog in the user interface (Filter > Other > Custom).
   * @param scale The value by which to divide the sum of the brightness values of the pixels included in the calculation.
   * @param offset The value to be added to the result of the scale calculation.
   */
  applyCustomFilter(
    characteristics: number[],
    scale: number,
    offset: number
  ): void;

  /**
   * Applies the de-interlace filter.
   * @param eliminateFields The fields to eliminate.
   * @param createFields The method to use to replace eliminated fields.
   */
  applyDeInterlace(
    eliminateFields: EliminateFields,
    createFields: CreateFields
  ): void;

  /**
   * Applies the despeckle filter.
   */
  applyDespeckle(): void;

  /**
   * Applies the difference clouds filter.
   */
  applyDifferenceClouds(): void;

  /**
   * Applies the diffuse glow filter.
   * @param graininess The amount of graininess. Range: 0 to 10.
   * @param glowAmount The glow amount. Range: 0 to 20.
   * @param clearAmount The clear amount. Range: 0 to 20.
   */
  applyDiffuseGlow(
    graininess: number,
    glowAmount: number,
    clearAmount: number
  ): void;

  /**
   * Applies the displace filter.
   * @param horizontalScale The amount of horizontal distortion. Range: -999 to 999.
   * @param verticalScale The amount of vertical distortion. Range: -999 to 999.
   * @param displacementType The displacement type.
   * @param undefinedAreas The treatment of undistorted areas.
   * @param displacementMapFile The distortion image map.
   */
  applyDisplace(
    horizontalScale: number,
    verticalScale: number,
    displacementType: DisplacementMapType,
    undefinedAreas: UndefinedAreas,
    displacementMapFile: File
  ): void;

  /**
   * Applies the dust and scratches filter.
   * @param radius The size (in pixels) of the area searched for dissimilar pixels. Range: 1 to 16.
   * @param threshold Determines how dissimilar the pixels should be before they are eliminated. Range: 0 to 255.
   */
  applyDustAndScratches(radius: number, threshold: number): void;

  /**
   * Applies the gaussian blur filter.
   * @param radius The blur width in pixels. Range: 1.0 to 250.0.
   */
  applyGaussianBlur(radius: number): void;

  /**
   * Applies the glass filter.
   * @param distortion The amount of distortion. Range: 0 to 20.
   * @param smoothness The smoothness. Range: 1 to 15.
   * @param scaling The amount of scaling. Range: 50 to 200.
   * @param invert If true, the texture is inverted.
   * @param texture The type of texture.
   * @param textureFile The file from which to load the texture type.
   */
  applyGlassEffect(
    distortion: number,
    smoothness: number,
    scaling: number,
    invert?: boolean,
    texture?: TextureType,
    textureFile?: File
  ): void;

  /**
   * Applies the high pass filter.
   * @param radius The width (in pixels) of the radius where edge details are retained.
   */
  applyHighPass(radius: number): void;

  /**
   * Apply the lens blur filter.
   * @param source The source for the depth map.
   * @param focalDistance The blur focal distance (in pixels) for the depth map. RangeL 0 to 255. Valid only when 'source' is transparency or layer mask.
   * @param invertDepthMap If true, inverts the depth map.
   * @param shape The shape of the iris.
   * @param radius The radius of the iris. Range: 0 to 100.
   * @param bladeCurvature The blade curvature of the iris. Range: 0 to 100.
   * @param rotation The rotation of the iris (in degrees). Range: 0 to 360.
   * @param brightness The brightness for the specular highlights. Range: 0 to 100.
   * @param threshold The threshold for the specular highlights. Range: 0 to 255.
   * @param amount The amount of noise. Range: 0 to 100.
   * @param distribution The distribution value for the noise.
   * @param monochromatic If true, the noise is monochromatic.
   */
  applyLensBlur(
    source?: DepthMapSource,
    focalDistance?: number,
    invertDepthMap?: boolean,
    shape?: Geometry,
    radius?: number,
    bladeCurvature?: number,
    rotation?: number,
    brightness?: number,
    threshold?: number,
    amount?: number,
    distribution?: NoiseDistribution,
    monochromatic?: boolean
  ): void;

  /**
   * Applies the lens flare filter.
   * @param brightness The flare brightness. Range: 10 to 300.
   * @param flareCenter The position of the flare center.
   * @param lensType The lens type.
   */
  applyLensFlare(
    brightness: number,
    flareCenter: UnitPoint,
    lensType: LensType
  ): void;

  /**
   * Applies the maximum filter.
   * @param radius The choke area (in pixels). Range: 0 to 100.
   */
  applyMaximum(radius: number): void;

  /**
   * Applies the median noise filter.
   * @param radius The size of the area searched for pixels of similar brightness. Range: 0 to 100.
   */
  applyMedianNoise(radius: number): void;

  /**
   * Applies the minimum filter.
   * @param radius The spread area (in pixels). Range: 0 to 100.
   */
  applyMinimum(radius: number): void;

  /**
   * Applies the motion blur filter.
   * @param angle The angle (in degrees). Range: -360 to 360.
   * @param radius The radius (in pixels). Range: 1 to 999.
   */
  applyMotionBlur(angle: number, radius: number): void;

  /**
   * Applies the NTSC colors filter.
   */
  applyNTSC(): void;

  /**
   * Applies the ocean ripple filter.
   * @param size The ripple size. Range: 1 to 15.
   * @param magnitude The ripple magnitude. Range: 0 to 20.
   */
  applyOceanRipple(size: number, magnitude: number): void;

  /**
   * Applies the offset filter.
   * @param horizontal The amount (in pixels) to move the selection horizontally (to the right). Range: -6144 to 6144.
   * @param vertical The amount (in pixels) to move the selection vertically (downward). Range: -6144 to 6144.
   * @param undefinedAreas The method for filling areas left blank by the offset.
   */
  applyOffset(
    horizontal: UnitValue | number,
    vertical: UnitValue | number,
    undefinedAreas: OffsetUndefinedAreas
  ): void;

  /**
   * Applies the pinch filter.
   * @param amount The pinch amount. Range: -100 to 100.
   */
  applyPinch(amount: number): void;

  /**
   * Applies the polar coordinates filter.
   * @param conversion The conversion type.
   */
  applyPolarCoordinates(conversion: PolarConversionType): void;

  /**
   * Applies the radial blur filter.
   * @param amount The amount of blur. Range: 1 to 100.
   * @param blurMethod The blur method to use.
   * @param blurQuality The smoothness or graininess of the blurred image.
   * @param blurCenter Position (unit value)
   */
  applyRadialBlur(
    amount: number,
    blurMethod: RadialBlurMethod,
    blurQuality: RadialBlurQuality,
    blurCenter?: UnitPoint
  ): void;

  /**
   * Applies the ripple filter.
   * @param amount The ripple amount. Range: -999 to 999.
   * @param size The ripple size.
   */
  applyRipple(amount: number, size: RippleSize): void;

  /**
   * Applies the sharpen filter.
   */
  applySharpen(): void;

  /**
   * Applies the sharpen edges filter.
   */
  applySharpenEdges(): void;

  /**
   * Applies the sharpen more filter.
   */
  applySharpenMore(): void;

  /**
   * Applies the shear filter.
   * @param curve Specification of the shear curve in points as x,y coordinate pairs in the format [[x1, y1],[x2, y2]]. Any number of coordinate pairs can be specified.
   * @param undefinedAreas The treatment of areas left blank by the distortion.
   */
  applyShear(curve: any[], undefinedAreas: UndefinedAreas): void;

  /**
   * Applies the smart blur filter.
   * @param radius The blur radius. Range: 0 - 1000.
   * @param threshold The blur threshold. Range: 0 - 1000.
   * @param blurQuality The smoothness or graininess of the blurred image.
   * @param mode The smart blur mode.
   */
  applySmartBlur(
    radius: number,
    threshold: number,
    blurQuality: SmartBlurQuality,
    mode: SmartBlurMode
  ): void;

  /**
   * Applies the spherize filter.
   * @param amount The amount of distortion. Range: -100 to 100.
   * @param mode The distortion mode.
   */
  applySpherize(amount: number, mode: SpherizeMode): void;

  /**
   * Applies the specified style to the layer.
   * @param styleName The layer style to apply.
   */
  applyStyle(styleName: string): void;

  /**
   *
   * @param file Style file to apply.
   */
  applyStyleFile(file: File): void;

  /**
   * Applies the texture fill filter.
   * @param textureFile The texture file. Must be a grayscale Photoshop file.
   */
  applyTextureFill(textureFile: File): void;

  /**
   * Applies the twirl filter.
   * @param angle The twirl angle. Range: -999 to 999.
   */
  applyTwirl(angle: number): void;

  /**
   * Applies the unsharp mask filter.
   * @param amount The amount of sharpening (as a percentage). Range: 1 to 500.
   * @param radius The radius in pixels. Range: 0.1 to 250.0.
   * @param threshold The contrast threshold. Range: 0 to 255.
   */
  applyUnSharpMask(amount: number, radius: number, threshold: number): void;

  /**
   * Applies the wave filter.
   * @param generatorNumber The number of generators. Range: 1 to 999.
   * @param minimumWavelength The minimum wave length. Range: 1 to 998.
   * @param maximumWavelength The maximum wave length. Range: 2 to (minimum wavelength + 1)
   * @param minimumAmplitude The minimum amplitude. Range: 1 to 998.
   * @param maximumAmplitude The maximum amplitude. Range: 2 to (minimum amplitude + 1)
   * @param horizontalScale The amount of horizontal scale (as a percentage). Range: 1 to 100.
   * @param verticalScale The amount of vertical scale (as a percentage). Range: 1 to 100.
   * @param waveType The wave type.
   * @param undefinedAreas The treatment of areas left blank by the distortion.
   * @param randomSeed The random seed.
   */
  applyWave(
    generatorNumber: number,
    minimumWavelength: number,
    maximumWavelength: number,
    minimumAmplitude: number,
    maximumAmplitude: number,
    horizontalScale: number,
    verticalScale: number,
    waveType: WaveType,
    undefinedAreas: UndefinedAreas,
    randomSeed: number
  ): void;

  /**
   * Applies the zigzag filter.
   * @param amount The amount of zigzag. Range: -100 to 100.
   * @param ridges The ridge length.
   * @param style The zigzag style.
   */
  applyZigZag(amount: number, ridges: number, style: ZigZagType): void;

  /**
   * Adjusts the contrast of the selected channels automatically.
   */
  autoContrast(): void;

  /**
   * Adjust the levels of the selected channels using the auto levels option.
   */
  autoLevels(): void;

  /**
   * Cuts the layer without moving it to the clipboard.
   */
  clear(): void;

  /**
   * Copies the layer to the clipboard.
   * @param merge If true, the copy includes all visible layers. If false, the copy only copies from the current layer.
   */
  copy(merge?: boolean): void;

  /**
   * Cuts the layer to the clipboard.
   */
  cut(): void;

  /**
   * Converts a color image to a grayscale image in the current color mode by assigning equal values of each component color to each pixel.
   */
  desaturate(): void;

  /**
   * Redistributes the brightness values of pixels in an image to more evenly represent the entire range of brightness levels within the image.
   */
  equalize(): void;

  /**
   * Inverts the colors in the layer by converting the brightness value of each pixel in the channels to the inverse value on the 256-step color-values scale.
   */
  invert(): void;

  /**
   * Merges the layer down, removing the layer from the document. Returns a reference to the art layer that this layer is merged into.
   */
  merge(): ArtLayer;

  /**
   * Modifies a targeted (output) color channel using a mix of the existing color channels in the image. (output channels = An array of channel specifications. For each component channel, specify a list of adjustment values (-200 to 200) followed by a 'constant' value (-200 to 200).) When monochrome = true, the maximum number of channel value specifications is 1. Valid only when 'document mode' = RGB or CMYK. RGB arrays must include four doubles. CMYK arrays must include five doubles.
   * @param outputChannels A list of channel specifications. For each component channel that the document has, you must specify a list of adjustment values followed by a 'constant' value.
   * @param monochrome If true, uses monochrome mixing. Note: If this is true, you can only specify one channel value.
   */
  mixChannels(outputChannels: any[], monochrome?: boolean): void;

  /**
   * Adjusts the layer's color balance and temperature as if a color filter had been applied.
   * @param fillColor The color to use for the fill.
   * @param density The density (as a percentage) of the filter effect. Range: 1 to 100.
   * @param preserveLuminosity If true, luminosity is preserved.
   */
  photoFilter(
    fillColor?: SolidColor,
    density?: number,
    preserveLuminosity?: boolean
  ): void;

  /**
   * Specifies the number of tonal levels for each channel and then maps pixels to the closest matching level.
   * @param levels The tonal levels. Range: 2 to 255.
   */
  posterize(levels: number): void;

  /**
   * Converts the targeted content in the layer into a flat, raster image.
   * @param target What to rasterize.
   */
  rasterize(target: RasterizeType): void;

  /**
   *
   * @param file File to save the style to.
   * @param thumbnail File to save the style thumbnail to.
   * @param thumbnailSize Size of thumbnail to save.
   * @param backgroundValue Background grayvalue.
   */
  saveStyleFile(
    file: File,
    thumbnail?: File,
    thumbnailSize?: number,
    backgroundValue?: number
  ): void;

  /**
   *
   * @param selectionMethod Modifies the amount of a process color in a specified primary color without affecting the other primary colors.
   * @param reds Array of 4 values: cyan, magenta, yellow, black.
   * @param yellows Array of 4 values: cyan, magenta, yellow, black.
   * @param greens Array of 4 values: cyan, magenta, yellow, black.
   * @param cyans Array of 4 values: cyan, magenta, yellow, black.
   * @param blues Array of 4 values: cyan, magenta, yellow, black.
   * @param magentas Array of 4 values: cyan, magenta, yellow, black.
   * @param whites Array of 4 values: cyan, magenta, yellow, black.
   * @param neutrals Array of 4 values: cyan, magenta, yellow, black.
   * @param blacks Array of 4 values: cyan, magenta, yellow, black.
   */
  selectiveColor(
    selectionMethod: AdjustmentReference,
    reds?: number[],
    yellows?: number[],
    greens?: number[],
    cyans?: number[],
    blues?: number[],
    magentas?: number[],
    whites?: number[],
    neutrals?: number[],
    blacks?: number[]
  ): void;

  /**
   * Adjusts the range of tones in the shadows and highlights.
   * @param shadowAmount The shadow amount, as a percentage. Range: 0 to 100.
   * @param shadowWidth The shadow width, as a percentage. Range: 0 to 100 for tonal width (0 = narrow), (100 = broad).
   * @param shadowRaduis The shadow radius (in pixels). Range: 0 to 2500.
   * @param highlightAmount The highlight amount, as a percentage. Range: 0 to 100.
   * @param highlightWidth The highlight width. Range: 0 to 100 for tonal width (0 = narrow), (100 = broad).
   * @param highlightRaduis The highlight radius (in pixels). Range: 0 to 2500.
   * @param colorCorrection The amount to adjust the colors in the changed portion of the image. Range: -100 to 100.
   * @param midtoneContrast The amount of midtone contrast. Range: -100 to 100.
   * @param blackClip Fractions of whites to be clipped. Range: 0.000 to 50.000.
   * @param whiteClip Fractions of blacks to be clipped. Range: 0.000 to 50.000.
   */
  shadowHighlight(
    shadowAmount?: number,
    shadowWidth?: number,
    shadowRaduis?: number,
    highlightAmount?: number,
    highlightWidth?: number,
    highlightRaduis?: number,
    colorCorrection?: number,
    midtoneContrast?: number,
    blackClip?: number,
    whiteClip?: number
  ): void;

  /**
   * Converts grayscale or color images to high-contrast, B/W images by converting pixels lighter than the specified threshold to white and pixels darker than the threshold to black.
   * @param level The threshold level.
   */
  threshold(level: number): void;
}

/**
 * A layer object.
 * Layers may contain nested layers, which are called sublayers in the user interface. The layer object contains all of the page items in the specific layer as elements. Your script can access page items as elements of either the layer object or the document object.
 */
declare class Layer {
  /**
   * If true, the layer's contents and settings are locked.
   */
  allLocked: boolean;

  /**
   * The mode to use when compositing an object.
   */
  blendMode: BlendMode;

  /**
   * If the Layer is a layer set, this property returns a reference to the corresponding layer set object.
   */
  readonly bounds: UnitRect;

  /**
   * Bounding rectangle of the Layer not including effects.
   */
  readonly boundsNoEffects: UnitRect;

  /**
   * The unique ID of this layer.
   */
  readonly id: number;

  /**
   * The layer index sans layer groups, how Photoshop would index them.
   */
  readonly itemIndex: number;

  /**
   * The layers linked to this layer.
   */
  readonly linkedLayers: Layer[];

  /**
   * The name of the layer.
   */
  name: string;

  /**
   * The layer's master opacity (as a percentage). Range: 0.0 to 100.0.
   */
  opacity: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * If true, the layer is visible.
   */
  visible: boolean;

  /**
   * XMP metadata associated with the Layer.
   */
  readonly xmpMetadata: XMPMetadata;

  /**
   * Duplicate this object.
   * @param relativeObject
   * @param insertionLocation
   */
  duplicate(relativeObject: object, insertionLocation: ElementPlacement): Layer;

  /**
   * Links the layer with the specified layer.
   * @param with_ The layer to link to.
   */
  link(with_: Layer): void;

  /**
   * Move the object.
   * @param relativeObject
   * @param insertionLocation
   */
  move(relativeObject: object, insertionLocation: ElementPlacement): Layer;

  /**
   * ...
   * @param layerSet
   */
  moveToEnd(layerSet?: LayerSet): void;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;

  /**
   * Scales the object.
   * @param horizontal The amount to scale the object horizontally (as a percentage).
   * @param vertical The amount to scale the object vertically (as a percentage).
   * @param anchor The point to resize about.
   */
  resize(horizontal?: number, vertical?: number, anchor?: AnchorPosition): void;

  /**
   * Rotates the object.
   * @param angle The number of degrees to rotate the object.
   * @param anchor The point to rotate about.
   */
  rotate(angle: number, anchor?: AnchorPosition): void;

  /**
   * Moves the object relative to its current position.
   * @param deltaX The amount to move the object horizontally.
   * @param deltaY The amount to move the object vertically.
   */
  translate(deltaX?: UnitValue | number, deltaY?: UnitValue | number): void;

  /**
   * Unlinks the layer.
   */
  unlink(): void;
}

/**
 * Object that stores information about a color element in the image, analogous to a plate in the printing process that applies a single color. The document's color mode determines the number of default channels. For example, an RGB document has four default channels: A composite channel: RGB; and three component channels: red, green, and blue. A channel can also be an alpha channel, which stores selections as masks; or a spot channel, which stores spot colors.
 */
declare class Channel {
  /**
   * The color of the channel. Not valid for component channels.
   */
  color: SolidColor;

  /**
   * A histogram of the color of the channel.
   */
  readonly histogram: number[];

  /**
   * The type of channel.
   */
  kind: ChannelType;

  /**
   * The channel name.
   */
  name: string;

  /**
   * The opacity of alpha channels (called solidity for spot channels). Range: 0 to 100. Valid only when 'type' = masked area or selected area.
   */
  opacity: number;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * If true, the channel is visible.
   */
  visible: boolean;

  /**
   * Adds an element.
   */
  add(): Channel;

  /**
   * Duplicate this object.
   * @param relativeObject
   * @param insertionLocation
   */
  duplicate(
    relativeObject: object,
    insertionLocation: ElementPlacement
  ): Channel;

  /**
   * Duplicates the channel.
   * @param targetDocument The document to duplicate the channel to.
   */
  duplicate(targetDocument?: Document): Channel;

  /**
   * Merges a spot channel into the component channels.
   */
  merge(): void;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A guide in the document.
 */
declare class Guide {
  /**
   * Location of the guide from origin of image.
   */
  coordinate: UnitValue | number;

  /**
   * Indicates whether the guide is vertical or horizontal.
   */
  direction: Direction;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A version of the document stored automatically (and added to the history states collection, which preserves the document state each time the document is changed).
 */
declare class HistoryState {
  /**
   * The history state name.
   */
  readonly name: string;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * If true, the history state is a snapshot.
   */
  readonly snapshot: boolean;

  /**
   * The class name of the object.
   */
  readonly typename: string;
}

/**
 * An installed font.
 */
declare class TextFont {
  /**
   * The font family.
   */
  readonly family: string;

  /**
   * The font name.
   */
  readonly name: string;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The PostScript name of the font.
   */
  readonly postScriptName: string;

  /**
   * The font style.
   */
  readonly style: string;

  /**
   * The class name of the object.
   */
  readonly typename: string;
}

/**
 * The text object contained in an art layer.
 */
declare class TextItem {
  /**
   * If true, alternate ligatures are used.
   */
  alternateLigatures: boolean;

  /**
   * The method of anti-aliasing to use.
   */
  antiAliasMethod: AntiAlias;

  /**
   * Options for auto kerning.
   */
  autoKerning: AutoKernType;

  /**
   * The percentage to use for auto leading. Range: 0.01 to 5000.00.
   */
  autoLeadingAmount: number;

  /**
   * The amount of baseline offset of text.
   */
  baselineShift: UnitValue | number;

  /**
   * The case of the text.
   */
  capitalization: Case;

  /**
   * The text color.
   */
  color: SolidColor;

  /**
   * The actual text in the layer.
   */
  contents: string;

  /**
   * The desired amount (as a percentage) to scale the horizontal size of the text letters. Range: 50 - 200; at 100, the width of characters is not scaled. Valid only for justified text.
   */
  desiredGlyphScaling: number;

  /**
   * The amount of space (as a percentage) between letters. Range: 100 - 500; at 0, no space is added between letters. Valid only for justified text.
   */
  desiredLetterScaling: number;

  /**
   * The amount (as a percentage) of space between words. Range: 0 -1000; at 100, no additional space is added between words. Valid only for justified text.
   */
  desiredWordScaling: number;

  /**
   * The text orientation.
   */
  direction: Direction;

  /**
   * If true, faux bold is used.
   */
  fauxBold: boolean;

  /**
   * If true, faux italic is used.
   */
  fauxItalic: boolean;

  /**
   * The amount to indent the first line of paragraphs. Range: -1296 to 1296.
   */
  firstLineIndent: UnitValue | number;

  /**
   * The text face of the character.
   */
  font: string;

  /**
   * If true, uses Roman hanging punctuation.
   */
  hangingPuntuation: boolean;

  /**
   * The height of the bounding box for paragraph text.
   */
  height: UnitValue | number;

  /**
   * Character scaling (horizontal) in proportion to horizontal scale. Range: 0 - 1000 as a percentage.
   */
  horizontalScale: number;

  /**
   * The maximum number of consecutive lines that can end with a hyphenated word.
   */
  hyphenLimit: number;

  /**
   * The number of letters after which hyphenation in word wrap is allowed. Range: 1 to 15.
   */
  hyphenateAfterFirst: number;

  /**
   * The number of letters before which hyphenation in word wrap is allowed. Range: 1 to 15.
   */
  hyphenateBeforeLast: number;

  /**
   * If true, capitalized words can be hyphenated.
   */
  hyphenateCapitalWords: boolean;

  /**
   * The minimum number of letters a word must have in order for hyphenation in word wrap to be allowed. Range: 2 to 25.
   */
  hyphenateWordsLongerThan: number;

  /**
   * If true, hyphenation is used.
   */
  hyphenation: boolean;

  /**
   * The distance at the end of a line that will cause a word to break in unjustified type. Range: 0 - 720 picas.
   */
  hyphenationZone: UnitValue | number;

  /**
   * The paragraph justification.
   */
  justification: Justification;

  /**
   * The type of text.
   */
  kind: TextType;

  /**
   * The language.
   */
  language: Language;

  /**
   * The leading amount.
   */
  leading: UnitValue | number;

  /**
   * The amount to indent text from the left. Range: -1296 to 1296.
   */
  leftIndent: UnitValue | number;

  /**
   * If true, ligatures are used.
   */
  ligatures: boolean;

  /**
   * The maximum amount (as a percentage) to scale the horizontal size of the text letters. Range: 50 - 200; at 100, the width of characters is not scaled. Valid only for justified text.
   */
  maximumGlyphScaling: number;

  /**
   * The maximum amount (as a percentage) of space between letters. Range: 100 - 500; at 0, no space is added between letters. Valid only for justified text.
   */
  maximumLetterScaling: number;

  /**
   * The maximum amount (as a percentage) of space between words (0 -1000; at 100, no additional space is added between words). Valid only for justified text.
   */
  maximumWordScaling: number;

  /**
   * The minimum amount (as a percentage) to scale the horizontal size of the text letters. Range: 50 - 200; at 100, the width of characters is not scaled. Valid only for justified text.
   */
  minimumGlyphScaling: number;

  /**
   * The minimum amount of space (as a percentage) between letters. Range: 100 to 500; at 0, no space is added between letters. Valid only for justified text.
   */
  minimumLetterScaling: number;

  /**
   * The minimum amount (as a percentage) of space between words. Range: 0 -1000; at 100, no additional space is added between words. Valid only for justified text.
   */
  minimumWordScaling: number;

  /**
   * If true, words are not allowed to break at the end of a line. When enacted on large amounts of consecutive characters, can prevent word wrap and thus may prevent some text from appearing on the screen.
   */
  noBreak: boolean;

  /**
   * If true, old style is used.
   */
  oldStyle: boolean;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The position of the origin for the text. The array must contain two values. Setting this property is basically equivalent to clicking the text tool at a point in the document to create the point of origin for text.
   */
  position: UnitPoint;

  /**
   * The amount to indent text from the right. Range: -1296 to 1296.
   */
  rightIndent: UnitValue | number;

  /**
   * The font size in points.
   */
  size: UnitValue | number;

  /**
   * The amount of space after each paragraph. Range: -1296 to 1296.
   */
  spaceAfter: UnitValue | number;

  /**
   * The amount of space before each paragraph. Range: -1296 to 1296.
   */
  spaceBefore: UnitValue | number;

  /**
   * The strike through option to use.
   */
  strikeThru: StrikeThruType;

  /**
   * The text composing engine to use.
   */
  textComposer: TextComposer;

  /**
   * The amount of uniform spacing between multiple characters. Range: -1000 to 10000.
   */
  tracking: number;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Options for underlining the text.
   */
  underline: UnderlineType;

  /**
   * If true, uses the font's built-in leading information.
   */
  useAutoLeading: boolean;

  /**
   * Character scaling (vertical) in proportion to horizontal scale. Range: 0 - 1000 as a percentage.
   */
  verticalScale: number;

  /**
   * The warp bend percentage. Range: -100 to 100.
   */
  warpBend: number;

  /**
   * The warp direction.
   */
  warpDirection: Direction;

  /**
   * The warp horizontal distortion percentage. Range: -100 to 100.
   */
  warpHorizontalDistortion: number;

  /**
   * The style of warp.
   */
  warpStyle: WarpStyle;

  /**
   * The warp vertical distortion percentage. Range: -100 to 100.
   */
  warpVerticalDistortion: number;

  /**
   * The width of the bounding box for paragraph text.
   */
  width: UnitValue | number;

  /**
   * Converts the text object and its containing layer to a fill layer with the text changed to a clipping path.
   */
  convertToShape(): void;

  /**
   * Creates a clipping path from the outlines of the actual text items (such as letters or words).
   */
  createPath(): void;
}

/**
 * A snapshot of a state of the layers in a document (can be used to view different page layouts or compostions).
 */
declare class LayerComp {
  /**
   * If true, uses layer appearance (layer styles) settings.
   */
  appearance: boolean;

  /**
   * The description of the layer comp.
   */
  comment: any;

  /**
   * The name of the layer comp.
   */
  name: string;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * If true, uses layer position.
   */
  position: boolean;

  /**
   * If true, the layer comp is currently selected.
   */
  readonly selected: boolean;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * If true, the layer comp is visible.
   */
  visibility: boolean;

  /**
   * Adds an element.
   */
  add(): LayerComp;

  /**
   * Applies the layer comp to the document.
   */
  apply(): void;

  /**
   * Recaptures the current layer state(s) for this layer comp.
   */
  recapture(): void;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;

  /**
   * Resets the layer comp state to the document state.
   */
  resetFromComp(): void;
}

/**
 * A path or drawing object, such as the outline of a shape or a straight or curved line, which contains sub paths that comprise its geometry.
 */
declare class PathItem {
  /**
   * The type of path.
   */
  kind: PathKind;

  /**
   * The name of the path item.
   */
  name: string;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The sub path objects for this path item.
   */
  readonly subPathItems: SubPathItems;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Adds an element.
   */
  add(): PathItem;

  /**
   * Unselects the selection, no path items are selected.
   */
  deselect(): void;

  /**
   * Duplicate this object.
   * @param relativeObject
   * @param insertionLocation
   */
  duplicate(
    relativeObject: object,
    insertionLocation: ElementPlacement
  ): PathItem;

  /**
   * Duplicates this path item.
   * @param name The name for the new path.
   */
  duplicate(name?: string): PathItem;

  /**
   * Fills the area enclosed by the path.
   * @param fillColor The color of the fill for this path.
   * @param mode The blending mode of the fill for this path.
   * @param opacity The opacity of the fill for this path (as a percentage). Range: 0.0 to 100.0.
   * @param preserveTransparency If true, transparency is preserved.
   * @param feather The feather amount in pixels. Range: 0.0 to 250.0.
   * @param antiAlias If true, uses anti-aliasing for the selection.
   * @param wholePath If true, uses all subpaths when doing the fill.
   */
  fillPath(
    fillColor?: any,
    mode?: ColorBlendMode,
    opacity?: number,
    preserveTransparency?: boolean,
    feather?: number,
    antiAlias?: boolean,
    wholePath?: boolean
  ): void;

  /**
   * Makes this path item the clipping path for this document.
   * @param flatness Flatness in device pixels; tells the PostScript printer how to approximate curves. Range: 0.2 to 100).
   */
  makeClippingPath(flatness?: number): void;

  /**
   * Makes a selection object, whose border is the path, from this path item object.
   * @param feather The feather amount in pixels. Range: 0.0 to 250.0.
   * @param antiAlias If true, the selection uses anti-aliasing.
   * @param operation The selection behavior relative to the existing selection (when a selection already exists).
   */
  makeSelection(
    feather?: number,
    antiAlias?: boolean,
    operation?: SelectionType
  ): void;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;

  /**
   * Makes this path item the active or selected path item.
   */
  select(): void;

  /**
   * Strokes the path.
   * @param tool The tool to use when stroking the path.
   * @param simulatePressure If true, simulates the pressure when using the tool.
   */
  strokePath(tool?: ToolType, simulatePressure?: boolean): void;
}

/**
 * Information about a path. You do not use the sub path item object to create a path. Rather, you create path segments using the sub path info object. Use the sub path item object to retrieve information about a path. All properties are read-only.
 */
declare class SubPathItem {
  /**
   * If true, the path is closed.
   */
  readonly closed: boolean;

  /**
   * The sub path operation on other sub paths.
   */
  readonly operation: ShapeOperation;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The path points collection in the sub path.
   */
  readonly pathPoints: PathPoints;

  /**
   * The class name of the object.
   */
  readonly typename: string;
}

/**
 * Information about an array of path point info objects. You do not use the path point object to create points that make up a path. Rather, you use the path point object to retrieve information about the points that describe path segments. To create path points, use the path point info object.
 */
declare class PathPoint {
  /**
   * The position (coordinates) of the anchor point.
   */
  readonly anchor: Point | [number, number];

  /**
   * The type of point.
   */
  readonly kind: PointKind;

  /**
   * The location of the left direction point (the "in" position).
   */
  readonly leftDirection: Point | [number, number];

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The location of the right direction point (the "out" position).
   */
  readonly rightDirection: Point | [number, number];

  /**
   * The class name of the object.
   */
  readonly typename: string;
}

/**
 * The log of measurements taken.
 */
declare class MeasurementLog {
  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Deletes the specified measurements.
   * @param range The measurements to delete. Default: selected.
   */
  deleteMeasurements(range?: MeasurementRange): void;

  /**
   * Exports the specified measurements.
   * @param file The file to export to. If not specified, a 'file save' dialog is displayed.
   * @param range The measurements to export. Default: selected.
   * @param dataPoints An array of identifiers of data points to export. The order of the data points is respected in the exported file. Defaults to data points visible in Measurement Log palette.
   */
  exportMeasurements(
    file?: File,
    range?: MeasurementRange,
    dataPoints?: string[]
  ): void;
}

/**
 * The measurement scale for the document.
 */
declare class MeasurementScale {
  /**
   * The logical length this scale equates to.
   */
  logicalLength: number;

  /**
   * The logical units for this scale.
   */
  logicalUnits: string;

  /**
   * The name of the scale.
   */
  name: string;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The length (in pixels) to which this scale equates.
   */
  pixelLength: number;

  /**
   * The class name of the object.
   */
  readonly typename: string;
}

/**
 * An event-handler object that tells the script to execute specified code when a specified event occurs. For notifiers to work, they must be enabled. See the 'notifiers enabled' property of the Application object. Events that occur within scripts do not generally trigger notifiers, because they occur inside of a "play script" event.
 */
declare class Notifier {
  /**
   * The event ID in four characters or a unique string that the notifier is associated with.
   */
  readonly event: string;

  /**
   * The class ID associated with the event for the Notifier object, four characters or a unique string.
   */
  readonly eventClass: string;

  /**
   * The path to the file to execute when the event occurs/activates the notifier.
   */
  readonly eventFile: File;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A counted item in the document. The count item feature is available in the Extended Version only.
 */
declare class CountItem {
  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The position of count item in the document.
   */
  readonly position: UnitPoint;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Adds an element.
   */
  add(): CountItem;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * A color sampler in a document.
 */
declare class ColorSampler {
  /**
   * The color of the color sampler.
   */
  readonly color: SolidColor;

  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The position of the color sampler in the document.
   */
  readonly position: UnitPoint;

  /**
   * The class name of the object.
   */
  readonly typename: string;

  /**
   * Adds an element.
   */
  add(): ColorSampler;

  /**
   * Moves the color sampler to a new location.
   * @param position Position of destination (unit value)
   */
  move(position: UnitPoint): void;

  /**
   * Deletes this object.
   */
  remove(): void;

  /**
   * Deletes all elements.
   */
  removeAll(): void;
}

/**
 * Camera raw image file settings stored in an XMP file in the same folder as the raw file with the same base name and an XMP extension.
 */
declare class XMPMetadata {
  /**
   * The object's container.
   */
  readonly parent: object;

  /**
   * The raw XML form of file information.
   */
  rawData: string;

  /**
   * The class name of the object.
   */
  readonly typename: string;
}

/**
 * Describes a rectangle. This class is also a four-element collection.
 */
declare class Rectangle {
  /**
   * The bottom coordinate.
   */
  bottom: number;

  /**
   * The height.
   */
  height: number;

  /**
   * The left coordinate.
   */
  left: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The right coordinate.
   */
  right: number;

  /**
   * The top coordinate.
   */
  top: number;

  /**
   * The width.
   */
  width: number;

  /**
   * The left coordinate.
   */
  x: number;

  /**
   * The top coordinate.
   */
  y: number;
}

/**
 * Controls where Photoshop places an element.
 */
declare enum ElementPlacement {
  /**
   * Place after an element.
   */
  PLACEAFTER = 1,

  /**
   * Place an element at the end.
   */
  PLACEATEND = 3,

  /**
   * Place before an element.
   */
  PLACEBEFORE = 2
}

type UnitPoint = [UnitValue | number, UnitValue | number];
type UnitRect = [
  UnitValue | number,
  UnitValue | number,
  UnitValue | number,
  UnitValue | number
];

/**
 * A global class containing central information about ScriptUI. Not instantiable.
 */
declare class ScriptUI {
  /**
   * Collects the enumerated values that can be used in the alignment and alignChildren properties of controls and containers.
   * Predefined alignment values are: TOP, BOTTOM, LEFT, RIGHT, FILL, CENTER
   */
  static readonly Alignment: string;

  /**
   * Collects the enumerated values that can be used as the style argument to the ScriptUI.newFont() method.
   * Predefined styles are REGULAR, BOLD, ITALIC, BOLDITALIC.
   */
  static readonly FontStyle: object;

  /**
   * The font constants defined by the host application.
   */
  static readonly applicationFonts: object;

  /**
   * An object whose properties are the names of compatability modes supported by the host application.
   * The presence of ScriptUI.compatability.su1PanelCoordinates means that the application allows backward compatibility with the coordinate system of Panel elements in ScriptUI version 1.
   */
  static readonly compatibility: object;

  /**
   * A string containing the internal version number of the ScriptUI module.
   */
  static readonly coreVersion: string;

  /**
   * An object whose properties define attributes of the environment in which ScriptUI operates.
   */
  static readonly environment: Environment;

  /**
   * An object whose properties and methods provide access to objects used in the ScriptUI event system.
   * It contains one function, createEvent(), which allows you to create event objects in order to simulate user-interaction event
   */
  static readonly events: Events;

  /**
   * A string containing the name of the UI component framework with which this version of ScriptUI is compatible.
   */
  static readonly frameworkName: string;

  /**
   * A string containing the version number of the ScriptUI component framework
   */
  static readonly version: any;

  /**
   * Finds and returns the resource for a given text string from the host application's resource data.
   * If no string resource matches the given text, the text itself is returned.
   * @param text The text to match.
   */
  static getResourceText(text: string): string;

  /**
   * Creates a new font object for use in text controls and titles.
   * @param name The font name, or the font family name.
   * @param style The font style; can be string, or one of the values of ScriptUI.FontStyle.
   * @param size The font size in points.
   */
  static newFont(name: string, style: string, size: number): ScriptUIFont;

  /**
   * Loads a new image from resources or disk files into an image object.
   * Creates a new global image object for use in controls that can display images, loading the associated images from the specified resources or image files.
   * @param normal The resource name or the disk file path to the image used for the normal state.
   * @param disabled The resource name, or the disk file path to the image used for the disabled state.
   * @param pressed The resource name, or the file-system path to the image used for the pressed state.
   * @param rollover The resource name, or the file-system path to the image used for the rollover state.
   */
  static newImage(
    normal: string,
    disabled?: string,
    pressed?: string,
    rollover?: string
  ): ScriptUIImage;
}

/**
 * The instance represents a top-level window or dialog box, which contains user-interface elements.
 * The globally available Window object provides access to predefined and script-defined windows.
 */
declare class Window extends _Control {
  /**
   * Set to true to make this window active.
   * A modal dialog that is visible is by definition the active dialog.
   * An active palette is the front-most window.
   * An active control is the one with focus—that is, the one that accepts keystrokes, or in the case of a Button, be selected when the user typesReturn or Enter.
   */
  active: boolean;

  /**
   * Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.
   * Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.
   */
  alignChildren: string;

  /**
   * For windows of type dialog, the UI element to notify when the user presses a cancellation key combination.
   * The cancellation key is the Esc key. By default, looks for a button whose name or text is "cancel" (case disregarded).
   */
  cancelElement: object;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the window.
   */
  characters: number;

  /**
   * The collection of UI elements that have been added to this container.
   * An array indexed by number or by a string containing an element's name. The length property of this array is the number of child elements for container elements, and is zero for controls.
   */
  readonly children: object[];

  /**
   * For windows of type dialog, the UI element to notify when the user presses a Enter key.
   * By default, looks for a button whose name or text is "ok" (case disregarded).
   */
  defaultElement: object;

  /**
   * The bounds of the window frame in screen coordinates.
   * The frame consists of the title bar and borders that enclose the content region of a window, depending on the windowing system.
   */
  readonly frameBounds: Bounds | [number, number, number, number];

  /**
   * The top left corner of the window frame in screen coordinates.
   * The same as [frameBounds.x, frameBounds.y]. Set this value to move the window frame to the specified location on the screen. The frameBounds value changes accordingly.
   */
  frameLocation: Point | [number, number];

  /**
   * The size and location of the window's frame in screen coordinates.
   */
  readonly frameSize: Dimension | [number, number];

  /**
   * Deprecated. Use ScriptUI.frameworkName instead.
   */
  static readonly frameworkName: string;

  /**
   * The graphics object that can be used to customize the window’s appearance, in response to the onDraw event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager;

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number;

  /**
   * True if the window is expanded.
   */
  maximized: boolean;

  /**
   * True if the window is minimized or iconified.
   */
  minimized: boolean;

  /**
   * The opacity of the window, in the range [0..1].
   * A value of 1.0 (the default) makes the window completely opaque, a value of 0 makes it completely transparent. Intermediate values make it partially transparent to any degree.
   */
  opacity: number;

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string;

  /**
   * The keypress combination that invokes this element's onShortcutKey() callback.
   */
  shortcutKey: string;

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number;

  /**
   * The title, label, or displayed text, a localizeable string.
   * Does not apply to containers of type group.
   */
  text: string;

  /**
   * Deprecated. Use ScriptUI.version instead.
   */
  static readonly version: any;

  /**
   * Creates a new window.
   * @param type The window type. One of: window: Creates a simple window that can be used as a main window for an application. (Not supported by Photoshop CS3.) palette: Creates a modeless dialog, also called a floating palette. (Not supported by Photoshop CS3.) dialog: Creates a modal dialog. This argument can also be a ScriptUI resource specification; in that case, all other arguments are ignored.
   * @param title The window title, a localizable string.
   * @param bounds The window's position and size.
   * @param properties An object containing creation-only properties.
   */
  constructor(
    type: string,
    title?: string,
    bounds?: Bounds | [number, number, number, number],
    properties?: Partial<_ControlPropertiesMap["window"]>
  );

  /**
   * Creates and returns a new control or container object and adds it to the children of this window.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd;

  /**
   * Displays a platform-standard dialog containing a short message and an OK button.
   * @param message TThe string for the displayed message.
   * @param title A string to appear as the title of the dialog, if the platform supports a title. Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is "Script Alert".
   * @param errorIcon When true, the platform-standard alert icon is replaced by the platform-standard error icon in the dialog. Ignored in Mac OS, which does not support icons for alert dialogs.
   */
  static alert(message: string, title?: string, errorIcon?: boolean): void;

  /**
   * Centers this window on screen or with repect to another window.
   * @param window The relative window. If not specified, centers on the screen.
   */
  center(window?: Window): void;

  /**
   * Closes this window.
   * . If an onClose() callback is defined for the window, calls that function before closing the window.
   * @param return_ A number to be returned from the show() method that invoked this window as a modal dialog.
   */
  close(return_?: any): void;

  /**
   * Displays a platform-standard dialog containing a short message and two buttons labeled Yes and No.
   * Returns true if the user clicked Yes, false if the user clicked No.
   * @param message The string for the displayed message.
   * @param noAsDefault When true, the No button is the default choice, selected when the user types Enter. Default is false, meaning that Yes is the default choice.
   * @param title A string to appear as the title of the dialog, if the platform supports a title. Ignored in Mac OS, which does not support titles for alert dialogs. The default title string is "Script Alert".
   */
  static confirm(
    message: string,
    noAsDefault: boolean,
    title?: string
  ): boolean;

  /**
   * Use this method to find an existing window.
   * This includes windows defined by ScriptUI resource strings, windows already created by a script, and windows created by the application (if the application supports this case). This function is not supported by all applications. Returns a Window object found or generated from the resource, or null if no such window or resource exists.
   * @param type The name of a predefined resource available to JavaScript in the current application; or the window type. If a title is specified, the type is used if more than one window with that title is found. Can be null or the empty string.
   * @param title The window title.
   */
  static find(type: string, title: string): Window;

  /**
   * Sends a notification message to all listeners, simulating the specified user interaction event.
   * @param eventName The event name; if omitted, the default event is sent. One of: onClose, onMove, onMoving, onResize, onResizing, onShow
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the window acquires the keyboard focus.
   * Called when the user gives the window the keyboard focus by clicking it or otherwise making it the active window.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, calledwhen the window is about to be closed.
   * Called when a request is made to close the window, either by an explicit call to the close() function or by a user action (clicking the OS-specific close icon in the title bar). The function is called before the window actually closes; it can return false to cancel the close operation.
   */
  onClose(): boolean;

  /**
   * An event-handler callback function, called when the window loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active window to another window.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, calledwhen the windowhas been moved
   */
  onMove(): void;

  /**
   * An event-handler callback function, calledwhen the window is being moved
   * Called while a window in being moved, each time the position changes. A handler can monitor the move operation.
   */
  onMoving(): void;

  /**
   * An event-handler callback function, called after the window has been resized
   */
  onResize(): void;

  /**
   * An event-handler callback function, called while a window is being resized
   * Called while a window is being resized, each time the height or width changes. A handler can monitor the resize operation.
   */
  onResizing(): void;

  /**
   * In Windows only, an event-handler callback function, called a shortcut-key sequence is typed that matches the shortcutKey value for this window.
   */
  onShortcutKey(): void;

  /**
   * An event-handler callback function, called just before the window is displayed
   * Called when a request is made to open the window using the show() method, before the window is made visible, but after automatic layout is complete. A handler can modify the results of the automatic layout.
   */
  onShow(): void;

  /**
   * Displays a modal dialog that returns the user’s text input.
   * Returns the value of the text edit field if the user clicked OK, null if the user clicked Cancel.
   * @param prompt The string for the displayed message.
   * @param default_ The initial value to be displayed in the text edit field.
   * @param title A string to appear as the title of the dialog. In Windows, this appears in the window’s frame; in Mac OS it appears above the message. The default title string is "Script Prompt".
   */
  static prompt(prompt: string, default_?: string, title?: string): string;

  /**
   * Removes the specified child control from this window’s children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void;
}

/**
 * Controls the automatic layout behavior for a window or container.
 * The subclass AutoLayoutManager implements the default automatic layout behavior.
 */
declare class LayoutManager {
  /**
   * Invokes the automatic layout behavior for the managed container.
   * Adjusts sizes and positions of the child elements of this window or container according to the placement and alignment property values in the parent and children.
   * Invoked automatically the first time the window is displayed. Thereafter, the script must invoke it explicitly to change the layout in case of changes in the size or position of the parent or children.
   */
  layout(): void;

  /**
   * Performs a layout after a Window is resized, based on the new size.
   * Resizes the child elements of the managed container with a given alignment type, after the window has been resized by the user.
   */
  resize(): void;
}

/**
 * A drawing pen that defines a color and line width used to stroke paths.
 * Create with ScriptUIGraphics.newPen(). Use as a value of  foregroundColor properties, and pass as an argument to drawString() and strokePath() methods.
 */
declare class ScriptUIPen {
  /**
   * The pen color.
   * The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.
   */
  readonly color: number[];

  /**
   * The pixel width of the drawing line.
   */
  lineWidth: number;

  /**
   * The theme name.
   * The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.
   */
  readonly theme: string;

  /**
   * The pen type, solid or theme.
   * One of these constants: ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR
   */
  readonly type: string;
}

/**
 * A painting brush that encapsulates a color or pattern used to fill paths.
 * Create with ScriptUIGraphics.newBrush(). Use as a value of  backgroundColor properties, and pass as an argument to the fillPath() method.
 */
declare class ScriptUIBrush {
  /**
   * The brush color.
   * The paint color to use when the type is SOLID_COLOR. An array in the form [R, B, G, A] specifying the red, green, blue values of the color and the opacity (alpha channel) value as numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque.
   */
  readonly color: number[];

  /**
   * The theme name.
   * The name of a color theme to use for drawing when the type is THEME_COLOR. Theme colors are defined by the host application.
   */
  readonly theme: string;

  /**
   * The brush type, solid or theme.
   * One of these constants: ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR
   */
  readonly type: number;
}

/**
 * A helper object that encapsulates a drawing path for a figure to be drawn into a window or control.
 * Create with the newPath(), moveto(), lineto(), rectPath(), and ellipsePath() methods.Used as value of currentPath, where it is acted upon by methods such as closePath().Pass as optional argument to fillPath() and strokePath(), which otherwise act upon the current path.
 */
declare class ScriptUIPath {}

/**
 * An object used to draw custom graphics, found in the graphics property of window, container, and control objects.
 * Allows a script to customize aspects of the element’s appearance, such as the color and font. Use an onDraw callback function to set these properties or call the functions.All measurements are in pixels.
 */
declare class ScriptUIGraphics {
  /**
   * Contains the enumerated constants for the type argument of newBrush().
   * Type constants are: SOLID_COLOR, THEME_COLOR.
   */
  static readonly BrushType: object;

  /**
   * Contains the enumerated constants for the type argument of newPen().
   * Type constants are: SOLID_COLOR, THEME_COLOR.
   */
  static readonly PenType: object;

  /**
   * The background color for containers; for non-containers, the parent background color.
   * The paint color and style is defined in this brush object.This property is only supported for controls likedropdownlist, edittext, and listbox.
   */
  backgroundColor: ScriptUIBrush;

  /**
   * The current drawing path, encapsulated in a path object.
   */
  readonly currentPath: ScriptUIPath;

  /**
   * The current position in the current drawing path.
   */
  readonly currentPoint: Point | [number, number];

  /**
   * The background color for containers when disabled or inactive; for non-containers, the parent background color.
   * The paint color and style is defined in this brush object.This property is only supported for controls likedropdownlist, edittext, and listbox.
   */
  disabledBackgroundColor: ScriptUIBrush;

  /**
   * The text color when the element is disabled or inactive.
   * The paint color and style is defined in this pen object.
   */
  disabledForegroundColor: ScriptUIPen;

  /**
   * The default font to use for displaying text.
   */
  font: ScriptUIFont;

  /**
   * The text color.
   * The paint color and style is defined in this pen object.
   */
  foregroundColor: ScriptUIPen;

  /**
   * Closes the current path.
   * Defines a line from the current postion (currentPoint) to the start point of the current path (the value of currentPath).
   */
  closePath(): void;

  /**
   * Draws a focus ring within a region of this element.
   * @param left The left coordinate of the region. Value is relative to the origin of this element.
   * @param top The top coordinate of the region. Value is relative to the origin of this element.
   * @param width The width of the region in pixels.
   * @param height The height of the region in pixels.
   */
  drawFocusRing(left: number, top: number, width: number, height: number): void;

  /**
   * Draws an image within a given region of the element.
   * Uses the version of the image that is appropriate to the element's current state.
   * @param image The image to draw. This object contains different versions of an image appropriate to various element states, such as a dimmed version for the disabled state.
   * @param left The left coordinate of the region, relative to the origin of this element.
   * @param top The top coordinate of the region, relative to the origin of this element.
   * @param width The width in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image width.
   * @param height The height in pixels. If provided, the image is stretched or shrunk to fit. If omitted, uses the original image height.
   */
  drawImage(
    image: ScriptUIImage,
    left: number,
    top: number,
    width?: number,
    height?: number
  ): void;

  /**
   * Draw the platform-specific control associated with this element.
   */
  drawOSControl(): void;

  /**
   * Draw a string of text starting at a given point in this element, using a given drawing pen and font.
   * @param text The text string.
   * @param pen The drawing pen to use.
   * @param x The left coordinate, relative to the origin of this element.
   * @param y The top coordinate, relative to the origin of this element.
   * @param font The font to use. Default is the  font value in this object.
   */
  drawString(
    text: string,
    pen: ScriptUIPen,
    x: number,
    y: number,
    font?: ScriptUIFont
  ): void;

  /**
   * Defines an elliptical path within a given rectangular area in the currentPath object, which can be filled using fillPath() or stroked using strokePath().
   * Returns a Point object for the upper left corner of the area, which is the new currentPoint.
   * @param left The left coordinate of the region, relative to the origin of this element.
   * @param top The top coordinate of the region, relative to the origin of this element.
   * @param width The width of the region in pixels.
   * @param height The height of the region in pixels.
   */
  ellipsePath(
    left: number,
    top: number,
    width: number,
    height: number
  ): Point | [number, number];

  /**
   * Fills a path using a given painting brush.
   * @param brush The brush object that defines the fill color.
   * @param path The path object. Default is the currentPath.
   */
  fillPath(brush: ScriptUIBrush, path?: ScriptUIPath): void;

  /**
   * Adds a path segment to the currentPath.
   * The line is defined from the currentPoint to the specified destination point. Returns the Point objectfor the destination point, which becomes the new value of currentPoint.
   * @param x The X coordinate for the destination point, relative to the origin of this element.
   * @param y The Y coordinate for the destination point, relative to the origin of this element.
   */
  lineTo(x: number, y: number): Point | [number, number];

  /**
   * Calculates the size needed to display a string using the given font.
   * Returns a Dimension object that contains the height and width of the string in pixels.
   * @param text The text string to measure.
   * @param font The font to use. Default is the font value in this object.
   * @param boundingWidth The bounding width.
   */
  measureString(
    text: string,
    font?: ScriptUIFont,
    boundingWidth?: number
  ): Dimension | [number, number];

  /**
   * Adds a given point to the currentPath, and makes it the current drawing position.
   * Returns the Point object which is the new value of currentPoint.
   * @param x The X coordinate for the new point, relative to the origin of this element.
   * @param y The Y coordinate for the new point, relative to the origin of this element.
   */
  moveTo(x: number, y: number): Point | [number, number];

  /**
   * Creates a new painting brush object.
   * @param type The brush type, solid or theme. One of the constants ScriptUIGraphics.BrushType.SOLID_COLOR or ScriptUIGraphics.BrushType.THEME_COLOR.
   * @param color The brush color. If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque. If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application.
   */
  newBrush(type: number, color: number[]): ScriptUIBrush;

  /**
   * Creates a new, empty path object.
   * Replaces any existing path in currentPath.
   */
  newPath(): ScriptUIPath;

  /**
   * Creates a new drawing pen object.
   * @param type The pen type, solid or theme. One of the constants ScriptUIGraphics.PenType.SOLID_COLOR or ScriptUIGraphics.PenType.THEME_COLOR.
   * @param color The pen color. If type is SOLID_COLOR, the color expressed as an array of three or four values, in the form [R, B, G, A] specifying the red, green, and blue values of the color and, optionally, the opacity (alpha channel). All values are numbers in the range [0.0..1.0]. An opacity of 0 is fully transparent, and an opacity of 1 is fully opaque. If the type is THEME_COLOR, the name string of the theme. Theme colors are defined by the host application.
   * @param width The width of the pen line in pixels. The line is centered around the current point. For example, if the value is 2, drawing a line from (0, 10) to (5, 10) paints the two rows of pixels directly above and below y-position 10.
   */
  newPen(type: number, color: number[], width: number): ScriptUIPen;

  /**
   * Defines a rectangular path in the currentPath object.
   * The rectangle can be filled using fillPath() or stroked using strokePath().Returns the Point objectfor the upper left corner of the rectangle, which becomes the new value of currentPoint.
   * @param left The left coordinate relative to the origin of this element.
   * @param top The top coordinate relative to the origin of this element.
   * @param width The width in pixels.
   * @param height The height in pixels.
   */
  rectPath(
    left: number,
    top: number,
    width: number,
    height: number
  ): Point | [number, number];

  /**
   * Strokes the path segments of a path with a given drawing pen.
   * @param pen The drawing pen that defines the color and line width.
   * @param path The path object. Default is the currentPath.
   */
  strokePath(pen: ScriptUIPen, path?: ScriptUIPath): void;
}

/**
 * Describes an input state at the time of the triggering  ScriptUIGraphics.onDraw() event.
 * Contains properties that report whether the current control has the input focus, and the particular mouse button and keypress state. Passed in as argument to ScriptUIGraphics.onDraw().
 */
declare class DrawState {
  /**
   * True if the Alt key is being pressed (in Windows only).
   */
  readonly altKeyPressed: boolean;

  /**
   * True if the Caps Lock key is being pressed.
   */
  readonly capsLockKeyPressed: boolean;

  /**
   * True if the Command key is being pressed (in Mac OS only).
   */
  readonly cmdKeyPressed: boolean;

  /**
   * True if the Ctrl key is being pressed.
   */
  readonly ctrlKeyPressed: boolean;

  /**
   * True if the element has the input focus.
   */
  readonly hasFocus: boolean;

  /**
   * True if the left mouse button is being pressed.
   */
  readonly leftButtonPressed: boolean;

  /**
   * True if the middle mouse button is being pressed.
   */
  readonly middleButtonPressed: boolean;

  /**
   * True if the cursor is hovering over this element.
   */
  readonly mouseOver: boolean;

  /**
   * True if the Num Lock key is being pressed.
   */
  readonly numLockKeyPressed: boolean;

  /**
   * True if the Option key is being pressed (in Mac OS only).
   */
  readonly optKeyPressed: boolean;

  /**
   * True if the right mouse button is being pressed.
   */
  readonly rightButtonPressed: boolean;

  /**
   * True if the Shift key is being pressed.
   */
  readonly shiftKeyPressed: boolean;
}

/**
 * Encapsulates the qualities of a font used to draw text into a control.
 * Create with the newFont() method.Used as a value of font. Passed as an argument to drawString() and measureString().
 */
declare class ScriptUIFont {
  /**
   * The font family name.
   */
  readonly family: string;

  /**
   * The complete font name, consisting of the family and style, if specified.
   */
  readonly name: string;

  /**
   * The font point size.
   */
  readonly size: number;

  /**
   * The font style. One of the constants in ScriptUIGraphics.FontStyle.
   */
  readonly style: object;

  /**
   * The name of a substitution font, a fallback font to substitute for this font if the requested font family or style is not available.
   */
  readonly substitute: string;
}

/**
 * Encapsulates a set of images that can be drawn into a control.
 * Different images can reflect the current state, such as a dimmed version for a disabled control. Create with the newImage() method. Passed as an argument to drawImage().
 */
declare class ScriptUIImage {
  /**
   * The image format. One of: resource, JPEG, GIF, TIFF, PNG, or PICT (Macintosh).
   */
  readonly format: string;

  /**
   * The image name. Either the file name, or the resource name.
   */
  readonly name: string;

  /**
   * The full path to the file that contains the image.
   */
  readonly pathname: string;

  /**
   * The image size in pixels.
   */
  readonly size: Dimension | [number, number];
}

/**
 * A text label that the user cannot change.
 */
declare class StaticText extends _Control {
  /**
   * Always false. This element cannot have input focus.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The text to display, a localizable string.
   */
  text: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A pushbutton element containing a mouse-sensitive text string.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class Button extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The text to display, a localizable string.
   */
  text: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * Amouse-sensitive pushbutton that displays an image instead of text.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class IconButton extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The image object that defines the image to be drawn.
   */
  image: ScriptUIImage;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * An editable text field that the user can select and change.
 * Calls the onChange() callback if the text is changed and the user types Enter or the control loses focus, or if its notify() method is called. Calls the onChanging() callback when any change is made to the text. The textselection property contains currently selected text.
 */
declare class EditText extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The text justification style.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The current text displayed in the field, a localizable string.
   */
  text: string;

  /**
   * The currently selected text, or the empty string if there is no text selected.
   * Setting the value replaces the current text selection and modifies the value of the text property. If there is no current selection, inserts the new value into the text string at the current insertion point. The textselection value is reset to an empty string after it modifies the text value. Note that setting the textselection property before the element’s parent Window exists is an undefined operation.
   */
  textselection: string;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   * The handler is called only when the change is complete—that is, when focus moves to another control, or the user types Enter. The exact behavior depends on the creation parameter enterKeySignalsOnChange;see the properties property.
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for each keypress while this control has the input focus.
   */
  onChanging(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * Displays a list of choices, represented by ListItem objects.
 * When you create the object, you specify whether it allows the user to select only one or multiple items. If a list contains more items than can be displayed in the available area, a scrollbar may appear that allows the user to scroll through all the list items.You can specify the items on creation of the list object, or afterward using the list object’s add() method. You can remove items programmatically with the list object’s remove() and removeAll() methods. You can create a list box with multiple columns; in this case, each row is a selectable choice, and each ListItem represents one row.
 */
declare class ListBox extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child ListItem elements.
   */
  readonly children: object[];

  /**
   * For a multi-column list box, the column properties.
   * A JavaScript object with two read-only properties whose values are set by the creation parameters:
   * titles: An array of column title strings, whose length matches the number of columns specified at creation.
   * preferredWidths: An array of column widths, whose length matches the number of columns specified at creation.
   * visible: An array of boolean visible attributes, whose length matches the number of columns specified at creation.This property can be used to show/hide a column. Avaiblable in ScriptUI Version 6.0 or later provided ScriptUI.frameworkName == 'Flex'.
   */
  readonly columns: object;

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number];

  /**
   * The array of choice items displayed in the list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method. Each item has a selected property that is true when it is in the selected state.
   */
  readonly items: ListItem[];

  /**
   * The currently selected item for a single-selection list, or an array of items for current selection in a multi-selection list.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items. You can set the value using the index of an item or an array of indices, rather than object references. If set to an index value that is out of range, the operation is ignored. When set with index values, the property still returns object references.
   * If you set the value to an array for a single-selection list, only the first item in the array is selected.
   * If you set the value to a single item for a multi-selection list, that item is added to the current selection.
   */
  selection: ListItem;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Adds an item to the choices in this list.
   * Returns the item control object. If this is a multi-column list box, each added ListItem represents one selectable row.Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
   * @param type The type of the child element, the string "item".
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem;

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when an item in the listbox is double-clicked
   * Check the selection property to identify the item that was double-clicked.
   */
  onDoubleClick(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index, text value, or as a ListItem object.
   */
  remove(what: any): void;

  /**
   * Removes all child items from the list.
   */
  removeAll(): void;
}

/**
 * Displays a single visible item. When you click the control, a list drops down or pops up, and allows you to select one of the other items in the list.
 * Drop-down lists can have nonselectable separator items for visually separating groups of related items, as in a menu. You can specify the items on creation of the list object, or afterward using the list object’s add() method. You can remove items programmatically with the list object’s remove() and removeAll() methods. Calls the onChange() callback if the item selection is changed or if its notify() method is called.
 */
declare class DropDownList extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number];

  /**
   * The array of choice items displayed in the drop-down or pop-up list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method. Items in a drop-down list can be of type separator, in which case they cannot be selected, and are shown as a horizontal line. Each item has a selected property that is true when it is in the selected state.
   */
  readonly items: ListItem[];

  /**
   * The currently selectedlist item.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.
   */
  selection: ListItem | number;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Adds an item or separator to the choices in this list.
   * Returns the item control object for type="item", or null for type="separator".
   * @param type The type of the child element. Either item (a basic, selectable item with a text label) or separator
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem;

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index, text value, or as a ListItem object.
   */
  remove(what: any): void;

  /**
   * Removes all child items from the list.
   */
  removeAll(): void;
}

/**
 * An item in a list box, drop-down list, or tree view.
 * You can specify initial items in the creation parameters when creating the parent list. Create new items using the add() method (ListBox.add(), DropDownList.add(), TreeView.add()) in the parent list with control type="item", or, for DropDownList controls, type="separator".For a multi-column list box, the object represents one selectable row. Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
 */
declare class ListItem {
  /**
   * The checked state of an item in a list.
   * When true, the item is marked with the platform-appropriate checkmark. When false, no checkmark is drawn, but space is reserved for it in the left margin, so that the item lines up with other checkable items. When undefined, no space is reserved for a checkmark.
   */
  checked: boolean;

  /**
   * The expansion state of an item of type node that is a child of a TreeView list control.
   * When true, the item is in the expanded state and its children are shown, when false, it is collapsed and children are hidden.
   */
  expanded: boolean;

  /**
   * An image object for an icon to display in the item.
   * When specified, the image appropriate to the selections state is drawn to the left of the text label. If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the subitems property.
   */
  image: ScriptUIImage;

  /**
   * The 0-based index of this item in the items collection of its parent list control.
   */
  readonly index: number;

  /**
   * The parent element, a list control.
   */
  readonly parent: object;

  /**
   * The selection state of this item.
   * When true, the item is part of the selection for its parent list. When false, the item is not selected. Set to true to select this item in a single-selection list, or to add it to the selection array for a multi-selection list.
   */
  selected: boolean;

  /**
   * When the parent is a multi-column ListBox, this describes the labels for this selectable row in additional columns.
   * A array of JavaScript objects whose length is one less than the number of columns. The first member describes the label in the second column. Each member object has two properties, of which you can specify one or both:
   * text: A display string for the corresponding label.
   * image: An ScriptUIImage object for the corresponding label.
   */
  readonly subItems: any[];

  /**
   * The label text to display for the item, a localizable string.
   * If the parent is a multi-column list box, this describes the label in the first column. Labels in additional columns are described by the subitems property.
   */
  text: string;

  /**
   * The element type.
   * Normally "item", but an item whose parent is a DropDownList control can have type "separator". A separator item is not mouse-sensitive and is drawn as a horizontal line across the drop-down or pop-up menu.
   */
  readonly type: string;
}

/**
 * A dual-state control showing a box that has a checkmark when the value is true, and is empty when the value is false.
 * Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class Checkbox extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The text to display, a localizable string.
   */
  text: string;

  /**
   * The selection state of the control.
   * When true, the control is in the selected or set state and displays the check mark. When false, shows an empty box.
   */
  value: boolean;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A scrollbar with a draggable scroll indicator and stepper buttons to move the indicator.
 * The scrollbar control has a horizontal orientation if the width is greater than the height at creation time, or vertical if its height is greater than its width.
 * Calls the onChange() callback after the position of the indicator is changed or if its notify() method is called. Calls the onChanging() callback repeatedly while the user is moving the indicator. Scrollbars are often created with an associated EditText field to display the current value of the scrollbar, and to allow setting the scrollbar's position to a specific value.
 */
declare class Scrollbar extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The amount to increment or decrement a scrollbar indicator's position when the user clicks ahead or behind the moveable element.
   * Default is 20% of the range between the maxvalue and minvalue property values.
   */
  jumpdelta: number;

  /**
   * The maximum value allowed in the value property.
   * Together with minvalue, sets the scrolling range. Default is 100.
   */
  maxvalue: number;

  /**
   * The minimum value allowed in the value property.
   * Together with  maxvalue, sets the scrolling range.Default is 0.
   */
  minvalue: number;

  /**
   * The key sequence that invokes the  onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The amount by which to increment or decrement a scrollbar element's position when the user clicks a stepper button.
   */
  stepdelta: number;

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.
   */
  value: number;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control.
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for any motion of the position indicator while this control has the input focus.
   */
  onChanging(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A dual-state control, grouped with other radiobuttons, of which only one can be in the selected state.
 * Shows the selected state when value=true, empty when value=false. Calls the onClick() callback if the control is clicked or if its notify() method is called.
 */
declare class RadioButton extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A number of characters for which to reserve space when calculating the preferred size of the element.
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The label text for this button, a localizable string.
   */
  text: string;

  /**
   * The selection state of this button, selected when true.
   */
  value: boolean;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the element has been clicked.
   */
  onClick(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A slider bar that indicates a numeric value with a moveable position indicator.
 * All slider controls have a horizontal orientation. Calls the onChange() callback after the position of the indicator is changed or if its notify() method is called. Calls the onChanging() callback repeatedly while the user is moving the indicator. The value property contains the current position of the indicator within the range of minvalue to maxvalue.
 */
declare class Slider extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The maximum value allowed in the value property.
   * Together with minvalue, sets therange.Default is 100.
   */
  maxvalue: number;

  /**
   * The minimum value allowed in the value property.
   * Together with maxvalue, sets the range.Default is 0.
   */
  minvalue: number;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by minvalue and maxvalue, it is automatically reset to the closest boundary.
   */
  value: number;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the user has finished dragging the position indicator, or has clicked the control.
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the content of the element is in the process of changing
   * The handler is called for any motion of the position indicator while this control has the input focus.
   */
  onChanging(): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;
}

/**
 * A horizontal bar with an indicator that shows the progress of an operation.
 * All progressbar controls have a horizontal orientation. The value property contains the current position of the progress indicator; the default is 0. There is a minvalue property, but it is always 0; attempts to set it to a different value are silently ignored.
 */
declare class Progressbar extends _Control {
  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The maximum value in the range. Default is 100.
   */
  maxvalue: number;

  /**
   * The minimum value in the range; always 0. If set to a different value, it is ignored.
   */
  minvalue: number;

  /**
   * The current position of the indicator.
   * If set to a value outside the range specified by 0 to maxvalue, it is automatically reset to the closest boundary.
   */
  value: number;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;
}

/**
 * A hierarchical list whose items can contain child items.
 * The ListItem children of this control (in the items array) can be of type node, which means that they can contain child items. An item with child items can expanded, so that the child items are displayed, or collapsed, so that the child items are hidden Individual items can be selected at any level of the tree.
 */
declare class TreeView extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The width and height in pixels of each item in the list.
   * Used by auto-layout to determine the preferredSize of the list, if not otherwise specified. If not set explicitly, the size of each item is set to match the largest height and width among all items in the list
   */
  itemSize: Dimension | [number, number];

  /**
   * The array of top-level items displayed in the list.
   * Access this array with a 0-based index. To obtain the number of items in the list, use items.length.The objects are created when items are specified on creation of the parent list object, or afterward using the list control’s add() method.
   */
  readonly items: ListItem[];

  /**
   * The currently selectedlist item.
   * Setting this value causes the selected item to be highlighted and to be scrolled into view if necessary. If no items are selected, the value is null. Set to null to deselect all items.You can set the value using the index of an item, rather than an object reference. If set to an index value that is out of range, the operation is ignored. When set with an index value, the property still returns an object reference.
   */
  selection: ListItem;

  /**
   * The key sequence that invokes the onShortcutKey() callback for this element (in Windows only).
   */
  shortcutKey: string;

  /**
   * Adds an item to the top-level choices in this list.
   * Returns the item control object.
   * @param type The type of the child element, the string "item".
   * @param text The localizable text label for the item.
   */
  add(type: string, text?: string): ListItem;

  /**
   * Retrieves an item object from the list that has a given text label.
   * @param text The text string to match.
   */
  find(text: string): ListItem;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * An event-handler callback function, called when the element acquires the keyboard focus.
   * Called when the user gives the control the keyboard focus by clicking it or tabbing into it.
   */
  onActivate(): void;

  /**
   * An event-handler callback function, called when the content of the element has been changed
   */
  onChange(): void;

  /**
   * An event-handler callback function, called when the user collapses (closes) an expanded node in the treeview.
   * @param item The ListItem node that collapsed.
   */
  onCollapse(item: ListItem): void;

  /**
   * An event-handler callback function, called when the element loses the keyboard focus.
   * Called when the user moves the keyboard focus from the previously active control to another control.
   */
  onDeactivate(): void;

  /**
   * An event-handler callback function, called when the window is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * An event-handler callback function, called when the user expands (opens) a collapsed node in the treeview.
   * @param item The ListItem node that expanded.
   */
  onExpand(item: ListItem): void;

  /**
   * An event-handler callback function, called when the element's shortcutKey sequence is typed in the active window.
   * In Windows only.
   */
  onShortcutKey(): void;

  /**
   * Removes a child item from the list.
   * @param what The item or child to remove, specified by 0-based index in the top-level item list, text value, or as a ListItem object.
   */
  remove(what: any): void;

  /**
   * Removes all child items from the list.
   */
  removeAll(): void;
}

/**
 * A control that contains a Flash Player, which can load and play Flash movies stored in SWF files.
 * The ScriptUI FlashPlayer element runs the Flash application within an Adobe application. The Flash application runs ActionScript, a different implementation of JavaScript from the ExtendScript version of JavaScript that Adobe applications run. A control object of this type contains functions that allow your script to load SWF files, control movie playback, and communicate with the ActionScript environment.
 */
declare class FlashPlayer extends _Control {
  /**
   * True if this element is active.
   * An active control is the one with keyboard focus—that is, the one that accepts keystrokes, or in the case of a Button, is selected when the user types Return or Enter in Windows, or the space bar in Mac OS.
   */
  active: boolean;

  /**
   * A function definition for a callback from the Flash ActionScript environment.
   * The Flash ActionScript code can call any callback function defined on the ExtendScript side of the FlashPlayer object, invoking it by name as a property of the control object. The function can take any arguments of a supported data types, and can return any value of a supported data type. data types:Number, String, Boolean, null, undefined, Object, Array.
   */
  callback(): void;

  /**
   * Invokes an ActionScript function defined in the Flash application.
   * Returns the result of the invoked function, which must be one of the allowed types. The ActionScript class and date objects are not supported as return values.
   * @param name The name of a Flash ActionScript function that has been registered with the ExternalInterface object by the currently loaded SWF file.
   * @param argument An argument to pass through to the function. There can be any number of arguments. An argument must be one of these data types:Number, String, Boolean, null, undefined, Object, Array. No other data types are supported.
   */
  invokePlayerFunction(name: string, argument?: any): any;

  /**
   * Loads a movie into the Flash Player, and begins playing it.
   * @param file The File object for the SWF file to load.
   */
  loadMovie(file: File): void;

  /**
   * Sends a notification message, simulating the specified user interaction event.
   * @param eventName The name of the control event handler to call. One of: onClick, onChange, onChanging. By default, simulates the onChange event for an edittext control, an onClick event for controls that support that event.
   */
  notify(eventName?: string): void;

  /**
   * Restarts a movie that has been stopped.
   * Do not use on a movie that is currently playing.The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented).
   * @param rewind When true, restarts the movie from the beginning; otherwise, starts playing from the	point where it was stopped.
   */
  playMovie(rewind: boolean): void;

  /**
   * Halts playback of the current movie.
   * The stopMovie()-playMovie() sequence does not work for SWF files produced by Flex, or for some files produced by Flash Authoring (depending on how they were implemented).Using stopMovie() from the player's hosting environment has no effect on an SWF file playing in a ScriptUI Flash Player element. It is, however, possible to produce an SWF using Flash Authoring that can stop itself in response to user interaction.
   */
  stopMovie(): void;
}

/**
 * A container for other controls within a window.
 * A group can specify layout options for its child elements. Hiding a group hides all its children. Making it visible makes visible those children that are not individually hidden.
 */
declare class Group extends _Control {
  /**
   * Tells the layout manager how unlike-sized children of this container should be aligned within a column or row.
   * Order of creation determines which children are at the top of a column or the left of a row; the earlier a child is created, the closer it is to the top or left of its column or row. If defined, alignment for a child element overrides the alignChildren setting for the parent container. See alignment property for values.
   */
  alignChildren: string;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager;

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number;

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string;

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number;

  /**
   * Adds a child element to this container.
   * Creates and returns a new control or container object and adds it to the children of this group.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd;

  /**
   * An event-handler callback function, called when the group is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * Removes the specified child control from this group's children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void;
}

/**
 * A container for other types of controls, with an optional frame.
 * A panel can specify layout options for its child elements. Hiding a panel hides all its children. Making it visible makes visible those children that are not individually hidden.
 */
declare class Panel extends _Control {
  /**
   * Specifies how to align the child elements.
   */
  alignChildren: string;

  /**
   * Reserve space for the specified number of characters; affects calculation of preferredSize .
   */
  characters: number;

  /**
   * An array of child elements.
   */
  readonly children: object[];

  /**
   * The graphics object that can be used to customize the element's appearance, in response to the onDraw() event.
   */
  readonly graphics: ScriptUIGraphics;

  /**
   * The default text justification style for child text elements.
   * One of left, center, or right. Justification only works if this value is set on creation of the element.
   */
  justify: string;

  /**
   * The layout manager for this container.
   * The first time a container object is made visible, ScriptUI invokes this layout manager by calling its layout() function. Default is an instance of the LayoutManager class that is automatically created when the container element is created.
   */
  layout: LayoutManager;

  /**
   * The number of pixels between the edges of a container and the outermost child elements.
   * You can specify different margins for each edge of the container. The default value is based on the type of container, and is chosen to match the standard Adobe UI guidelines.
   */
  margins: number;

  /**
   * The layout orientation of children in a container.
   * Interpreted by the layout manager for the container. The default LayoutManager  Object accepts the (case-insensitive) values row, column, or stack.For window and panel, the default is column, and for group the default is row. The allowed values for the container’s alignChildren and its children’s alignment properties depend on the orientation.
   */
  orientation: string;

  /**
   * The number of pixels separating one child element from its adjacent sibling element.
   * Because each container holds only a single row or column of children, only a single spacing value is needed for a container. The default value is based on the type of container, and is chosen to match standard Adobe UI guidelines.
   */
  spacing: number;

  /**
   * The title or label text, a localizable string.
   */
  text: string;

  /**
   * Adds a child element to this container.
   * Creates and returns a new control or container object and adds it to the children of this group.
   * @param type The type of the child element, as specified for the type property. Control types are listed in the JavaScript Tools Guide.
   * @param bounds A bounds specification that describes the size and position of the new control or container, relative to its parent. If supplied, this value creates a new Bounds object which is assigned to the new object’s bounds property.
   * @param text The text or label, a localizable string. Initial text to be displayed in the control as the title, label, or contents, depending on the control type. If supplied, this value is assigned to the new object’s text property.
   * @param properties An object that contains one or more creation properties of the new child (properties used only when the element is created). The creation properties depend on the element type. See properties property of each control type.
   */
  add: _WindowPanelGroupAdd;

  /**
   * An event-handler callback function, called when the panel is about to be drawn.
   * Allows the script to modify or control the appearance, using the control’s associated ScriptUIGraphics object. Handler takes one argument, a DrawState object.
   */
  onDraw(): void;

  /**
   * Removes the specified child control from this group's children array.
   * No error results if the child does not exist.
   * @param what The child control to remove, specified by 0-based index, text property value, or as a control object.
   */
  remove(what: any): void;
}

/**
 * Defines the location of a window or UI element. Contains a 2-element array.
 * Specifies the origin point of an element as horizontal and vertical pixel offsets from the origin of the element's coordinate space.
 * A Point object is created when you set an element’s location property. You can set the property using a JavaScript object with properties named x and y, or an array with 2 values in the order [x, y].
 */
declare class Point {
  /**
   * The left coordinate.
   */
  left: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The top coordinate.
   */
  top: number;

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  x: number;

  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  y: number;

  [0]: number;

  [1]: number;
}

/**
 * Defines the size of a window or UI element. Contains a 2-element array.
 * Specifies the height and width of an element in pixels. A Dimension object is created when you set an element’s size property. You can set the property using a JavaScript object with named properties {width: wd, height: ht}, or an array with 2 values in the order [wd, ht].
 */
declare class Dimension {
  /**
   * The height in pixels.
   */
  height: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The width in pixels.
   */
  width: number;

  [0]: number;

  [1]: number;
}

/**
 * Defines the boundaries of a window within the screen’s coordinate space, or of a UI element within the container’s coordinate space.
 * A Bounds object is created when you set an element’s bounds property. You can set the property using a JavaScript object with properties named left, top, right, bottom or x, y, width, height, or an array with 4 values in the order [x, y, wd, ht].
 */
declare class Bounds {
  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  bottom: number;

  /**
   * The height in pixels.
   */
  height: number;

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  left: number;

  /**
   * The array length.
   */
  readonly length: number;

  /**
   * The width in pixels.
   */
  right: number;

  /**
   * The height in pixels.
   */
  top: number;

  /**
   * The width in pixels.
   */
  width: number;

  /**
   * The horizontal coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  x: number;

  /**
   * The vertical coordinate, a pixel offset from the origin of the element's coordinate space.
   */
  y: number;

  [0]: number;

  [1]: number;

  [2]: number;

  [3]: number;
}

/**
 * Encapsulates input event information for an event that propagates through a container and control hierarchy.
 * Implements W3C standard event handling. This object is passed to a function that you register to respond to events of a certain type that occur in a window or control. Use windowObj.addEventListener() or controlObj.addEventListener() to register a handler function.
 */
declare class UIEvent {
  /**
   * True if the event is of a type that bubbles.
   */
  readonly bubbles: boolean;

  /**
   * True if the default action associated with the event can be canceled with preventDefault().
   */
  readonly cancelable: boolean;

  /**
   * True if this event can be captured.
   */
  readonly captures: boolean;

  /**
   * The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.
   */
  readonly currentTarget: boolean;

  /**
   * The click count for a mouse-click event.
   */
  readonly detail: any;

  /**
   * The current phase of event propagation; one of none, target, capture, bubble.
   */
  readonly eventPhase: string;

  /**
   * The event target object for this event.
   */
  readonly target: object;

  /**
   * The date and time at which the event occurred.
   */
  readonly timeStamp: Date;

  /**
   * The name of the event that thisobject represents.
   * Event types are listed in the JavaScript Tools Guide.
   */
  readonly type: string;

  /**
   * The ScriptUI element that this event relates to.
   */
  readonly view: any;

  /**
   * Creates an event.
   * The UIEvent object is normally created by ScriptUI and passed to your event handler. However, you can simulate a user action by constructing an event object and sending it to a target object’s dispatchEvent() function.
   * @param type The event type. See UIEvent.type property.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param view The ScriptUI element that this event relates to.
   * @param detail The click count for a mouse-click event.
   */
  constructor(
    type: string,
    captures: boolean,
    bubbles: boolean,
    view?: object,
    detail?: number
  );

  /**
   * Initializes a UI event as a core W3C event.
   * @param type The event type.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param cancelable Set to true if the default action is cancelable.
   */
  initEvent(
    type: string,
    captures: boolean,
    bubbles: boolean,
    cancelable: boolean
  ): void;

  /**
   * Initializes an event.
   * @param type The event type.
   * @param captures Set to true if this event can be captured.
   * @param bubbles Set to true if the event bubbles.
   * @param view The ScriptUI element that this event relates to.
   * @param detail The click count for a mouse-click event.
   */
  initUIEvent(
    type: string,
    captures: boolean,
    bubbles: boolean,
    view?: object,
    detail?: number
  ): void;

  /**
   * Prevents the default action associated with this event from being called.
   */
  preventDefault(): void;

  /**
   * Stops the propagation of this event.
   */
  stopPropagation(): void;
}

/**
 * Base class for UIEvent.
 * Encapsulates input event information for an event that propagates through a container and control hierarchy.Implements W3C standard event handling.
 */
declare class Event {
  /**
   *
   */
  static readonly AT_TARGET: any;

  /**
   *
   */
  static readonly BUBBLING_PHASE: any;

  /**
   *
   */
  static readonly CAPTURING_PHASE: any;

  /**
   *
   */
  static readonly NOT_DISPATCHING: any;

  /**
   * True if the event is of a type that bubbles.
   */
  readonly bubbles: boolean;

  /**
   * True if the default action associated with the event can be canceled with preventDefault().
   */
  readonly cancelable: boolean;

  /**
   * True if this event can be captured.
   */
  readonly captures: boolean;

  /**
   * The event target object which is currently handling the event. During capturing and bubbling, this is different from the property target.
   */
  readonly currentTarget: boolean;

  /**
   * The current phase of event propagation; one of none, target, capture, bubble.
   */
  readonly eventPhase: string;

  /**
   * The event target object for this event.
   */
  readonly target: object;

  /**
   * The date and time at which the event occurred.
   */
  readonly timeStamp: Date;

  /**
   * The name of the event that this object represents.
   * Event types are listed in the JavaScript Tools Guide.
   */
  readonly type: string;

  /**
   * Prevents the default action associated with this event from being called.
   */
  preventDefault(): void;

  /**
   * Stops the propagation of this event.
   */
  stopPropagation(): void;
}

/**
 * Defines attributes of the ScriptUI environment.
 * Access through the ScriptUI.environment property.
 */
declare class Environment {
  /**
   * An object that reports the active state of the keyboard at any time.
   * Provides access to the key state independent of the event-handling framework.
   */
  readonly keyboardState: KeyboardState;
}

/**
 * Provides access to objects used in the ScriptUI event system.
 * Access through the ScriptUI.events property.
 */
declare class Events {
  /**
   * Creates an instance of the specified Event subclass.
   * The Event returned is a UIEvent,
   * KeyboardEvent or MouseEvent object,
   * depending on the requested type. This object can be passed as a parameter to an element's dispatchEvent
   * function in order to simulate a user-interaction event.
   * @param eventType The name of an event type: one of "UIEvent", "KeyboardEvent", or "MouseEvent".
   */
  createEvent(eventType: string): Event;
}

/**
 * Reports the active state of the keyboard.
 * Access through the ScriptUI.environment.keyboardState property.
 * Query the properties of this object at any time to determine the current key that is down and any modifiers that are pressed.
 */
declare class KeyboardState {
  /**
   * True if the Alt or Option key is pressed.
   */
  readonly altKey: boolean;

  /**
   * True if the Ctrl key is pressed.
   */
  readonly ctrlKey: boolean;

  /**
   * A string containing the name of the currently pressed key, such as "a", or an empty string.
   */
  readonly keyName: string;

  /**
   * True if the Cmd key (in Mac OS) or Windows key (in Windows) is pressed.
   */
  readonly metaKey: boolean;

  /**
   * True if the Shift key is pressed.
   */
  readonly shiftKey: boolean;
}

/**
 * Added by types-for-adobe
 */
declare class _Control {
  /**
   * The alignment style for child elements of a container. If defined, this value overrides the alignChildren setting for the parent container.
   * This can be a single string, which indicates the alignment for the orientation specified in the parent container, or an array of two strings, indicating both the horizontal and vertical alignment (in that order). Allowed values depend on the orientation value of the parent container. They are not case sensitive.
   * For orientation=row:top, bottom, fill
   * For orientation=column: left, right, fill
   * For orientation=stack:top, bottom, left, right, fill
   */
  alignment: string;

  /**
   * The boundaries of the element, in parent-relative coordinates.
   * Setting an element's size or location changes its bounds property, and vice-versa.
   */
  bounds: Bounds | [number, number, number, number];

  /**
   * True if this element is enabled.
   * An enabled element can accept input, according to its type. When false, control elements do not accept input, and all types of elements have a dimmed appearance.
   */
  enabled: boolean;

  /**
   * The help text that is displayed when the mouse hovers over the element.
   */
  helpTip: string;

  /**
   * The number of pixels to indent the element during automatic layout.
   * Applies for column orientation and left alignment, or row orientation and top alignment.
   */
  indent: number;

  /**
   * The upper left corner of this element relative to its parent.
   * The location is defined as [bounds.x, bounds.y]. Setting an element's location changes its bounds property, and vice-versa.
   */
  location: Point | [number, number];

  /**
   * The maximum height and width to which the element can be resized.
   */
  maximumSize: Dimension | [number, number];

  /**
   * The minimum height and width to which the element can be resized.
   */
  minimumSize: Dimension | [number, number];

  /**
   * The parent element.
   */
  readonly parent: object;

  /**
   * The preferred size, used by layout managers to determine the best size for each element.
   * If not explicitly set by a script, value is established by the UI framework in which ScriptUI is employed, and is based on such attributes of the element as its text, font, font size, icon size, and other UI framework-specific attributes. A script can explicitly set this value before the layout manager is invoked in order to establish an element size other than the default.
   * To set a specific value for only one dimension, specify the other dimension as -1.
   */
  preferredSize: Dimension | [number, number];

  /**
   * The current dimensions of this element.
   * Initially undefined, and unless explicitly set by a script, it is defined by a LayoutManager . A script can explicitly set size before the layout manager is invoked to establish an element size other than the preferredSize or the default size, but this is not recommended. Defined as [bounds.width, bounds.height]. Setting an element's size changes its bounds property, and vice-versa.
   */
  size: Dimension | [number, number];

  /**
   * The element type.
   */
  readonly type: string;

  /**
   * True if this element is shown, false if it is hidden.
   * When a container is hidden, its children are also hidden, but they retain their own visibility values, and are shown or hidden accordingly when the parent is next shown.
   */
  visible: boolean;

  /**
   * The window that this element belongs to.
   */
  readonly window: Window;

  /**
   * The bounds of this element relative to the top-level parent window.
   */
  readonly windowBounds: Bounds | [number, number, number, number];

  /**
   * Registers an event handler for a particular type of event occuring in this element.
   * @param eventName The name of the event. Event names are listed in the JavaScript Tools Guide.
   * @param handler The function that handles the event. This can be the name of a function defined in the extension, or a locally defined handler function to be executed when the event occurs. A handler function takes one argument, the UIEvent object.
   * @param capturePhase When true, the handler is called only in the capturing phase of the event propagation. Default is false, meaning that the handler is called in the bubbling phase if this object is an ancestor of the target, or in the at-target phase if this object is itself the target.
   */
  addEventListener(
    eventName: string,
    handler: Function,
    capturePhase?: boolean
  ): boolean;

  /**
   * Simulates the occurrence of an event in this target.
   * A script can create a UIEvent object for a specific event and pass it to this method to start the event propagation for the event.
   */
  dispatchEvent(): Event;

  /**
   * Hides this element.
   */
  hide(): void;

  /**
   * Unregisters an event handler for a particular type of event occuring in this element.
   * All arguments must be identical to those that were used to register the event handler.
   * @param eventName The name of the event.
   * @param handler The function that handles the event.
   * @param capturePhase Whether to call the handler only in the capturing phase of the event propagation.
   */
  removeEventListener(
    eventName: string,
    handler: Function,
    capturePhase?: boolean
  ): boolean;

  /**
   * Shows this element.
   * When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states.
   * If an onShow() callback is defined for a window, calls that function before showing the window.When a window or container is hidden, its children are also hidden, but when it is shown again, the children retain their own visibility states. For a modal dialog, opens the dialog and does not return until the dialog is dismissed. If it is dismissed via the close() method, this method returns any result value passed to that method. Otherwise, returns 0.
   */
  show(): number | undefined;
}

/**
 * Creation properties map
 * An object that contains one or more creation properties of the element (properties used only when the element is created).
 */
interface _ControlPropertiesMap {
  /**
   * Creation properties of a Button
   * But the third argument to the add() method that creates it can be the initial text value.
   * @param name A unique name for the control. Special name "ok" makes the button primary for parent dialog, and the special name "cancel" makes the button default cancel button for parent dialog.
   */
  button: {
    name: string;
  };

  /**
   * Creation properties of a CheckBox
   * The third argument to the add() method that creates it is the text to be displayed.
   * @param name A unique name for the control.
   */
  checkbox: {
    name: string;
  };

  /**
   * Creation properties of a DropDownList
   * @param name A unique name for the control.
   * @param items An array of strings for the text of each list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   */
  dropdownlist: {
    name: string;
    items: string[];
  };

  /**
   * Creation properties of an EditText
   * @param name A unique name for the control.
   * @param multiline When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.
   * @param borderless When true, the control is drawn with no border. Default is false.
   * @param scrollable For multiline elements only. When true (the default), the text field has a vertical scrollbar that is enabled when the element contains more text than fits in the visible area. When false, no vertical scrollbar appears; if the element contains more text than fits in the visible area, the arrow keys can be used to scroll the text up and down.
   * @param readonly When false (the default), the control accepts text input. When true, the control does not accept input but only displays the contents of the text property.
   * @param noecho When false (the default), the control displays input text. When true, the control does not display input text (used for password input fields).
   * @param enterKeySignalsOnChange When false (the default), the control signals an onChange event when the editable text is changed and the control loses the keyboard focus (that is, the user tabs to another control, clicks outside the control, or types Enter). When true, the control only signals an onChange() event when the editable text is changed and the user types Enter; other changes to the keyboard focus do not signal the event.
   * @param wantReturn Only applies to multiple line edit controls in ScriptUI Version 6.0 or later. When true the RETURN/ENTER keystroke is considered as text-input advancing the cursor to the next line. The default value is false.
   */
  edittext: {
    name: string;
    multiline: boolean;
    borderless: boolean;
    scrollable: boolean;
    readonly: boolean;
    noecho: boolean;
    enterKeySignalsOnChange: boolean;
    wantReturn: boolean;
  };

  /**
   * Creation properties of a FlashPlayer
   * @param name A unique name for the control.
   */
  flashplayer: {
    name: string;
  };

  /**
   * Creation properties of a Group
   * @param name A unique name for the control.
   */
  group: {
    name: string;
  };

  /**
   * Creation properties of an IconButton
   * @param name A unique name for the control.
   * @param style A string for the visual style, either "button", which has a visible border with a raised or 3D appearance, or "toolbutton", which has a flat appearance, appropriate for inclusion in a toolbar.
   * @param toggle For a button-style control, a value of true causes it to get a button-pressed appearance the first time it is clicked, and alternate with the unpressed appearance each time it is clicked. The toggle state is reflected in the control’s value property.
   */
  iconbutton: {
    name: string;
    style: "button" | "toolbutton";
    toggle: boolean;
  };

  /**
   * Creation properties of a ListBox
   * @param name A unique name for the control.
   * @param multiselect When false (the default), only one item can be selected. When true, multiple items can be selected.
   * @param selected When true, multiple items can be selected.
   * @param items An array of strings for the text of each list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   * @param numberOfColumns A number of columns in which to display the items; default is 1. When there are multiple columns, each ListItem object represents a selectable row. Its text and image values specify the label in the first column, and the subitems property specifies the labels in the additional columns.
   * @param showHeaders True to display column titles.
   * @param columnWidths An array of numbers for the preferred width in pixels of each column.
   * @param columnTitles A corresponding array of strings for the title of each column, to be shown if showHeaders is true.
   */
  listbox: {
    name: string;
    multiselect: boolean;
    selected: boolean;
    items: string[];
    numberOfColumns: number;
    showHeaders: boolean;
    columnWidths: number[];
    columnTitles: string[];
  };

  /**
   * Creation properties of a Panel
   * @param name A unique name for the control.
   * @param borderStyle A string that specifies the appearance of the border drawn around the panel. One of black, etched, gray, raised, sunken. Default is etched.
   * @param su1PanelCoordinates Photoshop only. When true, this panel automatically adjusts the positions of its children for compatability with Photoshop CS. Default is false, meaning that the panel does not adjust the positions of its children, even if the parent window has automatic adjustment enabled.
   */
  panel: {
    name: string;
    borderStyle: string;
    su1PanelCoordinates: boolean;
  };

  /**
   * Creation properties of a ProgressBar
   * The third argument of the add() method that creates it is the initial value (default 0), and the fourth argument is the maximum value of the range (default 100).
   * @param name A unique name for the control.
   */
  progressbar: {
    name: string;
  };

  /**
   * Creation properties of a RadioButton
   * The third argument of the add() method that creates can be the label text.
   * @param name A unique name for the control.
   */
  radiobutton: {
    name: string;
  };

  /**
   * Creation properties of a Scrollbar
   * The third argument of the add() method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.
   * @param name A unique name for the control.
   */
  scrollbar: {
    name: string;
  };

  /**
   * Creation properties of a Slider
   * The third argument of the add() method that creates it is the initial value, and the fourth and fifth arguments are the minimum and maximum values of the range.
   * @param name A unique name for the control.
   */
  slider: {
    name: string;
  };

  /**
   * Creation properties of a StaticText
   * @param name A unique name for the control.
   * @param multiline When false (the default), the control displays a single line of text. When true, the control displays multiple lines, in which case the text wraps within the width of the control.
   * @param scrolling When false (the default), the displayed text cannot be scrolled. When true, the displayed text can be vertically scrolled using the Up Arrow and Down Arrow; this case implies multiline=true.
   * @param truncate If middle or end, defines where to remove characters from the text and replace them with an ellipsis if the specified title does not fit within the space reserved for it. If none, and the text does not fit, characters are removed from the end, without any replacement ellipsis character.
   */
  statictext: {
    name: string;
    multiline: boolean;
    scrolling: boolean;
    truncate: string;
  };

  /**
   * Creation properties of a TreeView
   * @param name A unique name for the control.
   * @param items An array of strings for the text of each top-level list item. An item object is created for each item. An item with the text string "-" creates a separator item. Supply this property, or the items argument to the add() method, not both. This form is most useful for elements defined using Resource Specifications.
   */
  treeview: {
    name: string;
    items: string[];
  };

  /**
   * Creation properties of a Window
   * @param resizeable When true, the window can be resized by the user. Default is false.
   * @param su1PanelCoordinates Photoshop only. When true, the child panels of this window automatically adjust the positions of their children for compatability with Photoshop CS (in which the vertical coordinate was measured from outside the frame). Default is false. Individual panels can override the parent window’s setting.
   * @param closeButton Bridge only. When true, the title bar includes a button to close the window, if the platform and window type allow it. When false, it does not. Default is true. Not used for dialogs.
   * @param maximizeButton Bridge only. When true, the title bar includes a button to expand the window to its maximum size (typically, the entire screen), if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Not used for dialogs.
   * @param minimizeButton Bridge only. When true, the title bar includes a button to minimize or iconify the window, if the platform and window type allow it. When false, it does not. Default is false for type palette, true for type window. Main windows cannot have a minimize button in Mac OS. Not used for dialogs.
   * @param independent When true, a window of type window is independent of other application windows, and can be hidden behind them in Windows. In Mac OS, has no effect. Default is false.
   * @param borderless When true, the window has no title bar or borders. Properties that control those features are ignored.
   */
  window: {
    resizeable: boolean;
    su1PanelCoordinates: boolean;
    closeButton: boolean;
    maximizeButton: boolean;
    minimizeButton: boolean;
    independent: boolean;
    borderless: boolean;
  };

  /**
   * A ListItem object has no creation properties.
   */
  listitem: {};
}

interface _WindowPanelGroupAdd {
  (
    type: "button",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["button"]>
  ): Button;
  (
    type: "checkbox",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["checkbox"]>
  ): Checkbox;
  (
    type: "dropdownlist",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["dropdownlist"]>
  ): DropDownList;
  (
    type: "edittext",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["edittext"]>
  ): EditText;
  (
    type: "flashplayer",
    bounds?: Bounds | [number, number, number, number],
    movieToLoad?: string | File,
    properties?: Partial<_ControlPropertiesMap["flashplayer"]>
  ): FlashPlayer;
  (
    type: "group",
    bounds?: Bounds | [number, number, number, number],
    properties?: Partial<_ControlPropertiesMap["group"]>
  ): Group;
  (
    type: "iconbutton",
    bounds?: Bounds | [number, number, number, number],
    icon?: string | File,
    properties?: Partial<_ControlPropertiesMap["iconbutton"]>
  ): IconButton;
  (
    type: "listbox",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["listbox"]>
  ): ListBox;
  (
    type: "panel",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["panel"]>
  ): Panel;
  (
    type: "progressbar",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["progressbar"]>
  ): Progressbar;
  (
    type: "radiobutton",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["radiobutton"]>
  ): RadioButton;
  (
    type: "scrollbar",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    min?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["scrollbar"]>
  ): Scrollbar;
  (
    type: "slider",
    bounds?: Bounds | [number, number, number, number],
    value?: number,
    min?: number,
    max?: number,
    properties?: Partial<_ControlPropertiesMap["slider"]>
  ): Slider;
  (
    type: "statictext",
    bounds?: Bounds | [number, number, number, number],
    text?: string,
    properties?: Partial<_ControlPropertiesMap["statictext"]>
  ): StaticText;
  (
    type: "treeview",
    bounds?: Bounds | [number, number, number, number],
    items?: string[],
    properties?: Partial<_ControlPropertiesMap["treeview"]>
  ): TreeView;
}
`;

let PPROshim = `/**
 * 
 */
declare class Exporter {
	/**
	 * 
	 */
	classID: number;

	/**
	 * 
	 */
	fileType: number;

	/**
	 * 
	 */
	name: string;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	getPresets(): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class Sequence {
	/**
	 * 
	 */
	audioDisplayFormat: number;

	/**
	 * 
	 */
	audioTracks: TrackCollection;

	/**
	 * 
	 */
	end: string;

	/**
	 * 
	 */
	frameSizeHorizontal: number;

	/**
	 * 
	 */
	frameSizeVertical: number;

	/**
	 * 
	 */
	id: number;

	/**
	 * 
	 */
	markers: MarkerCollection;

	/**
	 * 
	 */
	name: string;

	/**
	 * 
	 */
	projectItem: ProjectItem;

	/**
	 * 
	 */
	sequenceID: string;

	/**
	 * 
	 */
	timebase: string;

	/**
	 * 
	 */
	videoDisplayFormat: number;

	/**
	 * 
	 */
	videoTracks: TrackCollection;

	/**
	 * 
	 */
	zeroPoint: string;

	/**
	 * 
	 */
	attachCustomProperty(propertyID: string, propertyValue: string): void;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	clone(): void;

	/**
	 * 
	 */
	close(): void;

	/**
	 * 
	 */
	createSubsequence(ignoreTrackTargeting?: boolean): Sequence;

	/**
	 * 
	 */
	exportAsFinalCutProXML(exportPath: string, suppressUI: number): boolean;

	/**
	 * 
	 */
	exportAsMediaDirect(outputFilePath: string, presetPath: string, workAreaType?: number): string;

	/**
	 * 
	 */
	exportAsProject(exportPath: string): void;

	/**
	 * 
	 */
	getExportFileExtension(presetFilePath: string): string;

	/**
	 * 
	 */
	getInPoint(): string;

	/**
	 * 
	 */
	getInPointAsTime(): Time;

	/**
	 * 
	 */
	getOutPoint(): string;

	/**
	 * 
	 */
	getOutPointAsTime(): Time;

	/**
	 * 
	 */
	getPlayerPosition(): Time;

	/**
	 * 
	 */
	getSelection(): void;

	/**
	 * 
	 */
	getSettings(): SequenceSettings;

	/**
	 * 
	 */
	getWorkAreaInPoint(): string;

	/**
	 * 
	 */
	getWorkAreaInPointAsTime(): Time;

	/**
	 * 
	 */
	getWorkAreaOutPoint(): string;

	/**
	 * 
	 */
	getWorkAreaOutPointAsTime(): Time;

	/**
	 * 
	 */
	importMGT(path: string, time: object, videoTrackIndex: number, audioTrackIndex: number): TrackItem;

	/**
	 * 
	 */
	importMGTFromLibrary(libraryName: string, mgtName: string, time: object, videoTrackIndex: number, audioTrackIndex: number): TrackItem;

	/**
	 * 
	 */
	insertClip(clipProjectItem: ProjectItem, time: object, videoTrackIndex: number, audioTrackIndex: number): void;

	/**
	 * 
	 */
	isWorkAreaEnabled(): boolean;

	/**
	 * 
	 */
	linkSelection(): boolean;

	/**
	 * 
	 */
	overwriteClip(clipProjectItem: ProjectItem, time: object, videoTrackIndex: number, audioTrackIndex: number): void;

	/**
	 * 
	 */
	setInPoint(time: object): void;

	/**
	 * 
	 */
	setOutPoint(time: object): void;

	/**
	 * 
	 */
	setPlayerPosition(pos: string): void;

	/**
	 * 
	 */
	setSelection(): void;

	/**
	 * 
	 */
	setSettings(settings: SequenceSettings): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	setWorkAreaEnabled(specifiedState?: number): boolean;

	/**
	 * 
	 */
	setWorkAreaInPoint(time: object): void;

	/**
	 * 
	 */
	setWorkAreaOutPoint(time: object): void;

	/**
	 * 
	 */
	setZeroPoint(ticks: string): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

	/**
	 * 
	 */
	unlinkSelection(): boolean;

}

/**
 * 
 */
declare class SequenceCollection {
	/**
	 * 
	 */
	numSequences: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class Metadata {
	/**
	 * 
	 */
	getMetadata: string;

	/**
	 * 
	 */
	addMarker(): void;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	deleteMarker(): void;

	/**
	 * 
	 */
	setMarkerData(): void;

	/**
	 * 
	 */
	setMetadataValue(): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

	/**
	 * 
	 */
	updateMarker(): void;

}

/**
 * 
 */
declare class Anywhere {
	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	getAuthenticationToken(): string;

	/**
	 * 
	 */
	getCurrentEditingSessionActiveSequenceURL(): string;

	/**
	 * 
	 */
	getCurrentEditingSessionSelectionURL(): string;

	/**
	 * 
	 */
	getCurrentEditingSessionURL(): string;

	/**
	 * 
	 */
	isProductionOpen(): boolean;

	/**
	 * 
	 */
	listProductions(): RemoteProductionCollection;

	/**
	 * 
	 */
	openProduction(inProductionURL: string): boolean;

	/**
	 * 
	 */
	openTeamProjectSnapshot(inTeamProjectSnapshotPath: string): boolean;

	/**
	 * 
	 */
	setAuthenticationToken(inAuthToken: string, inEmail: string): boolean;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class SourceMonitor {
	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	closeAllClips(): void;

	/**
	 * 
	 */
	closeClip(): void;

	/**
	 * 
	 */
	getPosition(): Time;

	/**
	 * 
	 */
	openFilePath(filePath: string): boolean;

	/**
	 * 
	 */
	openProjectItem(projectItem: ProjectItem): boolean;

	/**
	 * 
	 */
	play(speed?: number): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class Time {
	/**
	 * 
	 */
	seconds: number;

	/**
	 * 
	 */
	ticks: string;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	getFormatted(time: object, timeDisplay: number): string;

	/**
	 * 
	 */
	setSecondsAsFraction(numerator: number, denominator: number): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class TrackItemCollection {
	/**
	 * 
	 */
	numItems: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class Track {
	/**
	 * 
	 */
	clips: TrackItemCollection;

	/**
	 * 
	 */
	id: number;

	/**
	 * 
	 */
	mediaType: string;

	/**
	 * 
	 */
	name: string;

	/**
	 * 
	 */
	transitions: TrackItemCollection;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	insertClip(clipProjectItem: ProjectItem, time: object): void;

	/**
	 * 
	 */
	isLocked(): boolean;

	/**
	 * 
	 */
	isMuted(): boolean;

	/**
	 * 
	 */
	isTargeted(): boolean;

	/**
	 * 
	 */
	overwriteClip(clipProjectItem: ProjectItem, time: object): void;

	/**
	 * 
	 */
	setLocked(arg1?: number): void;

	/**
	 * 
	 */
	setMute(arg1?: number): void;

	/**
	 * 
	 */
	setTargeted(isTargeted: boolean, shouldBroadcast?: boolean): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class TrackItem {
	/**
	 * 
	 */
	components: ComponentCollection;

	/**
	 * 
	 */
	duration: Time;

	/**
	 * 
	 */
	end: Time;

	/**
	 * 
	 */
	inPoint: Time;

	/**
	 * 
	 */
	matchName: string;

	/**
	 * 
	 */
	mediaType: string;

	/**
	 * 
	 */
	name: string;

	/**
	 * 
	 */
	nodeId: string;

	/**
	 * 
	 */
	outPoint: Time;

	/**
	 * 
	 */
	projectItem: ProjectItem;

	/**
	 * 
	 */
	start: Time;

	/**
	 * 
	 */
	type: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	getLinkedItems(): TrackItemCollection;

	/**
	 * 
	 */
	getMGTComponent(): Component;

	/**
	 * 
	 */
	getMatchName(): string;

	/**
	 * 
	 */
	getSpeed(): number;

	/**
	 * 
	 */
	isAdjustmentLayer(): boolean;

	/**
	 * 
	 */
	isMGT(): boolean;

	/**
	 * 
	 */
	isSelected(): boolean;

	/**
	 * 
	 */
	isSpeedReversed(): boolean;

	/**
	 * 
	 */
	remove(inRipple: boolean, inAlignToVideo?: boolean): boolean;

	/**
	 * 
	 */
	setSelected(isSelected: number, updateUI?: number): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class Project {
	/**
	 * 
	 */
	activeSequence: Sequence;

	/**
	 * 
	 */
	cloudProjectLocalID: string;

	/**
	 * 
	 */
	documentID: string;

	/**
	 * 
	 */
	isCloudProject: boolean;

	/**
	 * 
	 */
	name: string;

	/**
	 * 
	 */
	path: string;

	/**
	 * 
	 */
	rootItem: ProjectItem;

	/**
	 * 
	 */
	sequences: SequenceCollection;

	/**
	 * 
	 */
	addPropertyToProjectMetadataSchema(name: string, label: string, type: number): boolean;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	closeDocument(): boolean;

	/**
	 * 
	 */
	consolidateDuplicates(): void;

	/**
	 * 
	 */
	createNewSequence(sequenceName: string, placeholderID: string): void;

	/**
	 * 
	 */
	deleteSequence(sequence: Sequence): boolean;

	/**
	 * 
	 */
	exportAAF(sequence: Sequence, filePath: string, mixDownVideo: number, explodeToMono: number, sampleRate: number, bitsPerSample: number, embedAudio: number, audioFileFormat: number, trimSources: number, handleFrames: number): number;

	/**
	 * 
	 */
	exportFinalCutProXML(exportPath: string, suppressUI: number): boolean;

	/**
	 * 
	 */
	exportOMF(sequence: Sequence, filePath: string, OMFTitle: string, sampleRate: number, bitsPerSample: number, audioEncapsulated: number, audioFileFormat: number, trimAudioFiles: number, handleFrames: number, includePan: number): number;

	/**
	 * 
	 */
	exportTimeline(exportControllerName: string): number;

	/**
	 * 
	 */
	getInsertionBin(): ProjectItem;

	/**
	 * 
	 */
	getProjectPanelMetadata(): void;

	/**
	 * 
	 */
	importAEComps(arg1: any): boolean;

	/**
	 * 
	 */
	importAllAEComps(arg1: any): boolean;

	/**
	 * 
	 */
	importFiles(arg1: any): boolean;

	/**
	 * 
	 */
	importSequences(arg1: any): boolean;

	/**
	 * 
	 */
	openSequence(sequenceID: string): boolean;

	/**
	 * 
	 */
	pauseGrowing(pausedOrNot: number): boolean;

	/**
	 * 
	 */
	placeAsset(arg1: any): boolean;

	/**
	 * 
	 */
	save(): void;

	/**
	 * 
	 */
	saveAs(saveAsPath: string): boolean;

	/**
	 * 
	 */
	setEnableTranscodeOnIngest(inEnable: boolean): boolean;

	/**
	 * 
	 */
	setProjectPanelMetadata(): void;

	/**
	 * 
	 */
	setScratchDiskPath(value: string, type: string): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class ProjectItemType {
	/**
	 * 
	 */
	BIN: number;

	/**
	 * 
	 */
	CLIP: number;

	/**
	 * 
	 */
	FILE: number;

	/**
	 * 
	 */
	ROOT: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class ProjectItem {
	/**
	 * 
	 */
	children: ProjectItemCollection;

	/**
	 * 
	 */
	name: string;

	/**
	 * 
	 */
	nodeId: string;

	/**
	 * 
	 */
	treePath: string;

	/**
	 * 
	 */
	type: number;

	/**
	 * 
	 */
	videoComponents: ComponentCollection;

	/**
	 * 
	 */
	attachProxy(mediaPath: string, isHiRes: number): boolean;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	canChangeMediaPath(): boolean;

	/**
	 * 
	 */
	canProxy(): boolean;

	/**
	 * 
	 */
	changeMediaPath(mediaPath: string, overrideChecks?: boolean): boolean;

	/**
	 * 
	 */
	clearInPoint(mediaType?: number): void;

	/**
	 * 
	 */
	clearOutPoint(mediaType?: number): void;

	/**
	 * 
	 */
	createBin(name: string): void;

	/**
	 * 
	 */
	createSmartBin(name: string, query: string): void;

	/**
	 * 
	 */
	createSubClip(name: string, startTime: object, endTime: object, hasHardBoundaries: number, takeVideo?: number, takeAudio?: number): ProjectItem;

	/**
	 * 
	 */
	deleteBin(): void;

	/**
	 * 
	 */
	findItemsMatchingMediaPath(matchString: string, ignoreSubclips?: number): void;

	/**
	 * 
	 */
	getColorLabel(): number;

	/**
	 * 
	 */
	getFootageInterpretation(): FootageInterpretation;

	/**
	 * 
	 */
	getInPoint(mediaType?: number): Time;

	/**
	 * 
	 */
	getMarkers(): MarkerCollection;

	/**
	 * 
	 */
	getMediaPath(): string;

	/**
	 * 
	 */
	getOutPoint(mediaType?: number): Time;

	/**
	 * 
	 */
	getProjectMetadata(): string;

	/**
	 * 
	 */
	getProxyPath(): string;

	/**
	 * 
	 */
	getXMPMetadata(): string;

	/**
	 * 
	 */
	hasProxy(): boolean;

	/**
	 * 
	 */
	isAdjustmentLayer(): boolean;

	/**
	 * 
	 */
	isOffline(): boolean;

	/**
	 * 
	 */
	isReference(): boolean;

	/**
	 * 
	 */
	isSequence(): boolean;

	/**
	 * 
	 */
	moveBin(destination: ProjectItem): void;

	/**
	 * 
	 */
	refreshMedia(): string;

	/**
	 * 
	 */
	renameBin(name: string): boolean;

	/**
	 * 
	 */
	saveProjectSnapshot(): boolean;

	/**
	 * 
	 */
	select(): void;

	/**
	 * 
	 */
	setColorLabel(): void;

	/**
	 * 
	 */
	setFootageInterpretation(interpretFootage: FootageInterpretation): boolean;

	/**
	 * 
	 */
	setInPoint(arg1: object, mediaType?: number): void;

	/**
	 * 
	 */
	setOffline(): boolean;

	/**
	 * 
	 */
	setOutPoint(arg1: object, mediaType?: number): void;

	/**
	 * 
	 */
	setOverrideFrameRate(frameRate: number): boolean;

	/**
	 * 
	 */
	setOverridePixelAspectRatio(numerator: number, denominator: number): boolean;

	/**
	 * 
	 */
	setProjectMetadata(buffer: string): void;

	/**
	 * 
	 */
	setScaleToFrameSize(): void;

	/**
	 * 
	 */
	setStartTime(arg1: object): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	setXMPMetadata(buffer: string): boolean;

	/**
	 * 
	 */
	startTime(): Time;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class ProjectCollection {
	/**
	 * 
	 */
	numProjects: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class ProjectItemCollection {
	/**
	 * 
	 */
	numItems: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class TrackCollection {
	/**
	 * 
	 */
	numTracks: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class ScratchDiskType {
	/**
	 * 
	 */
	FirstAudioCaptureFolder: string;

	/**
	 * 
	 */
	FirstAudioPreviewFolder: string;

	/**
	 * 
	 */
	FirstAutoSaveFolder: string;

	/**
	 * 
	 */
	FirstCClibrariesFolder: string;

	/**
	 * 
	 */
	FirstCapsuleMediaFolder: string;

	/**
	 * 
	 */
	FirstVideoCaptureFolder: string;

	/**
	 * 
	 */
	FirstVideoPreviewFolder: string;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class RemoteProductionCollection {
	/**
	 * 
	 */
	numProductions: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class RemoteProduction {
	/**
	 * 
	 */
	description: string;

	/**
	 * 
	 */
	name: string;

	/**
	 * 
	 */
	url: string;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class EncoderPreset {
	/**
	 * 
	 */
	matchName: string;

	/**
	 * 
	 */
	name: string;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

	/**
	 * 
	 */
	writeToFile(outputFilePath: string): boolean;

}

/**
 * 
 */
declare class Encoder {
	/**
	 * 
	 */
	ENCODE_ENTIRE: number;

	/**
	 * 
	 */
	ENCODE_IN_TO_OUT: number;

	/**
	 * 
	 */
	ENCODE_WORKAREA: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	encodeFile(inputFilePath: string, outputFilePath: string, presetPath: string, removeOnCompletion?: number, startTime?: object, stopTime?: object): string;

	/**
	 * 
	 */
	encodeProjectItem(projectItem: ProjectItem, outputFilePath: string, presetPath: string, WorkAreaType?: number, removeOnCompletion?: number): string;

	/**
	 * 
	 */
	encodeSequence(sequence: Sequence, outputFilePath: string, presetPath: string, WorkAreaType?: number, removeOnCompletion?: number): string;

	/**
	 * 
	 */
	getExporters(): void;

	/**
	 * 
	 */
	launchEncoder(): boolean;

	/**
	 * 
	 */
	setEmbeddedXMPEnabled(enable: number): void;

	/**
	 * 
	 */
	setSidecarXMPEnabled(enable: number): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	startBatch(): boolean;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class Properties {
	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	clearProperty(propertyKey: string): void;

	/**
	 * 
	 */
	doesPropertyExist(propertyKey: string): boolean;

	/**
	 * 
	 */
	getProperty(propertyKey: string): void;

	/**
	 * 
	 */
	isPropertyReadOnly(propertyKey: string): boolean;

	/**
	 * 
	 */
	setProperty(propertyKey: string): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class App {
	/**
	 * 
	 */
	anywhere: Anywhere;

	/**
	 * 
	 */
	build: string;

	/**
	 * 
	 */
	encoder: Encoder;

	/**
	 * 
	 */
	getAppPrefPath: string;

	/**
	 * 
	 */
	getAppSystemPrefPath: string;

	/**
	 * 
	 */
	getPProPrefPath: string;

	/**
	 * 
	 */
	getPProSystemPrefPath: string;

	/**
	 * 
	 */
	metadata: Metadata;

	/**
	 * 
	 */
	path: string;

	/**
	 * 
	 */
	project: Project;

	/**
	 * 
	 */
	projectManager: ProjectManager;

	/**
	 * 
	 */
	projects: ProjectCollection;

	/**
	 * 
	 */
	properties: Properties;

	/**
	 * 
	 */
	sourceMonitor: SourceMonitor;

	/**
	 * 
	 */
	userGuid: string;

	/**
	 * 
	 */
	version: string;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	broadcastPrefsChanged(preferencesThatChanged: string): boolean;

	/**
	 * 
	 */
	getConstant(name: string): number;

	/**
	 * 
	 */
	getEnableProxies(): number;

	/**
	 * 
	 */
	getProjectFromViewID(viewID: string): Project;

	/**
	 * 
	 */
	getProjectViewIDs(): void;

	/**
	 * 
	 */
	getProjectViewSelection(viewID: string): void;

	/**
	 * 
	 */
	getWorkspaces(): void;

	/**
	 * 
	 */
	isDocument(filePath: string): boolean;

	/**
	 * 
	 */
	isDocumentOpen(): boolean;

	/**
	 * 
	 */
	openDocument(): boolean;

	/**
	 * 
	 */
	openFCPXML(): boolean;

	/**
	 * 
	 */
	quit(): void;

	/**
	 * 
	 */
	refresh(): void;

	/**
	 * 
	 */
	setEnableProxies(enable: number): boolean;

	/**
	 * 
	 */
	setEnableTranscodeOnIngest(inEnable: boolean): void;

	/**
	 * 
	 */
	setExtensionPersistent(extensionID: string, state?: number): void;

	/**
	 * 
	 */
	setProjectViewSelection(viewID: string): void;

	/**
	 * 
	 */
	setSDKEventMessage(value: string, eventType: string): boolean;

	/**
	 * 
	 */
	setScratchDiskPath(value: string, type: string): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	setWorkspace(workspace: string): boolean;

	/**
	 * 
	 */
	showCursor(enable: boolean): void;

	/**
	 * 
	 */
	trace(message: string): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

	/**
	 * 
	 */
	write(arg1: any): void;

}

/**
 * 
 */
declare class MarkerCollection {
	/**
	 * 
	 */
	numMarkers: number;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	createMarker(time: number): Marker;

	/**
	 * 
	 */
	deleteMarker(marker: Marker): void;

	/**
	 * 
	 */
	getFirstMarker(): Marker;

	/**
	 * 
	 */
	getLastMarker(): Marker;

	/**
	 * 
	 */
	getNextMarker(marker: Marker): Marker;

	/**
	 * 
	 */
	getPrevMarker(marker: Marker): Marker;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class Marker {
	/**
	 * 
	 */
	comments: string;

	/**
	 * 
	 */
	end: Time;

	/**
	 * 
	 */
	guid: string;

	/**
	 * 
	 */
	name: string;

	/**
	 * 
	 */
	start: Time;

	/**
	 * 
	 */
	type: string;

	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	getColorByIndex(): number;

	/**
	 * 
	 */
	getWebLinkFrameTarget(): string;

	/**
	 * 
	 */
	getWebLinkURL(): string;

	/**
	 * 
	 */
	setColorByIndex(arg1: number): void;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	setTypeAsChapter(): void;

	/**
	 * 
	 */
	setTypeAsComment(): void;

	/**
	 * 
	 */
	setTypeAsSegmentation(): void;

	/**
	 * 
	 */
	setTypeAsWebLink(url: string, frameTarget: string): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

/**
 * 
 */
declare class Document {
	/**
	 * 
	 */
	bind(eventName: string, function_: any): void;

	/**
	 * 
	 */
	getFilePath(): string;

	/**
	 * 
	 */
	importFiles(arg1: any): boolean;

	/**
	 * 
	 */
	setTimeout(eventName: string, function_: any, milliseconds: number): void;

	/**
	 * 
	 */
	unbind(eventName: string): void;

}

`;

export { es5, ILSTshim, AEFTshim, PHXSshim, AUDTshim, PPROshim, IDSNshim };
